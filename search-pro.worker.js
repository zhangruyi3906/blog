const V=Object.entries,et=Object.fromEntries,st="ENTRIES",L="KEYS",T="VALUES",_="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===_)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==_).join("")}value(){return E(this._path).node.get(_)}result(){switch(this._type){case T:return this.value();case L:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],nt=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return R(e,t,s,n,i,1,o,""),n},R=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const c of e.keys())if(c===_){const a=o[d-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let h=0;h<c.length;++h,++a){const g=c[h],m=i*a,p=m-i;let l=o[m];const f=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let F=f;F<y;++F){const v=g!==t[F],z=o[p+F]+ +v,A=o[p+F+1]+1,w=o[m+F]+1,j=o[m+F+1]=Math.min(z,A,w);j<l&&(l=j)}if(l>s)continue t}R(e.get(c),t,s,n,o,a,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==_&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,st)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return nt(this._tree,t,s)}get(t){const s=k(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=k(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new D(this,L)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,I(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},k=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return k(e.get(s),t.slice(s.length))},I=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const c=new Map;c.set(u.slice(r),d),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(_),s.size===0)W(n);else if(s.size===1){const[o,u]=s.entries().next().value;q(n,o,u)}}},W=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&q(e.slice(0,-1),n,o)}},q=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],ut=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,M="or",$="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},N=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,lt=()=>new Map,b=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[M]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),N(n.terms,u)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);N(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},dt=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},at=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},ft=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},gt={k:1.2,b:.7,d:.5},mt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:M,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:gt},pt={combineWith:$,prefix:(e,t,s)=>t===s.length-1},Ft={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},_t={...Ft,...U},K=Symbol("*"),yt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,u]of e._documentIds){const i=n.boostDocument?n.boostDocument(u,"",e._storedFields.get(o)):1;s.set(o,{score:i,terms:[],match:{}})}return s},X=(e,t=M)=>{if(e.length===0)return new Map;const s=t.toLowerCase(),n=ht[s];if(!n)throw new Error(`Invalid combination operator: ${t}`);return e.reduce(n)||new Map},S=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const c of Object.keys(u)){const a=u[c],h=e._fieldIds[c],g=o.get(h);if(g==null)continue;let m=g.size;const p=e._avgFieldLength[h];for(const l of g.keys()){if(!e._documentIds.has(l)){ft(e,h,l,s),m-=1;continue}const f=i?i(e._documentIds.get(l),s,e._storedFields.get(l)):1;if(!f)continue;const y=g.get(l),F=e._fieldLength.get(l)[h],v=dt(y,m,e._documentCount,F,p,r),z=n*a*f*v,A=d.get(l);if(A){A.score+=z,ct(A.terms,t);const w=G(A.match,s);w?w.push(c):A.match[s]=[c]}else d.set(l,{score:z,terms:[t],match:{[s]:[c]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((l,f)=>({...l,[f]:G(n.boost,f)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:c,prefix:a}={...J.weights,...i},h=e._index.get(t.term),g=S(e,t.term,t.term,1,h,o,u,d);let m,p;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const l=t.fuzzy===!0?.2:t.fuzzy,f=l<1?Math.min(r,Math.round(t.term.length*l)):l;f&&(p=e._index.fuzzyGet(t.term,f))}if(m)for(const[l,f]of m){const y=l.length-t.term.length;if(!y)continue;p?.delete(l);const F=a*l.length/(l.length+.3*y);S(e,t.term,l,F,f,o,u,d,g)}if(p)for(const l of p.keys()){const[f,y]=p.get(l);if(!y)continue;const F=c*l.length/(l.length+y);S(e,t.term,l,F,f,o,u,d,g)}return g},Y=(e,t,s={})=>{if(t===K)return yt(e,s);if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(g=>Y(e,g,a));return X(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,c=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(at(i)).map(a=>At(e,a,i));return X(c,i.combineWith)},Q=(e,t,s={})=>{const n=Y(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const c=r.length||1,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(d),queryTerms:r,match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return t===K&&s.boostDocument==null&&e._options.searchOptions.boostDocument==null||o.sort(P),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of Q(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(P),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?_t:t.autoVacuum;this._options={...mt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...pt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=b(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=b(u),h._avgFieldLength=i,h._storedFields=b(r),h._dirtCount=d||0,h._index=new C;for(const[g,m]of h._documentIds)h._idToShortId.set(m,g);for(const[g,m]of e){const p=new Map;for(const l of Object.keys(m)){let f=m[l];c===1&&(f=f.ds),p.set(parseInt(l,10),b(f))}h._index.set(g,p)}return h},B=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let h="";i===0?h=c.length>20?`… ${c.slice(-20)}`:c:a?h=c.length+i>100?`${c.slice(0,100-i)}… `:c:h=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const c=d+n.length;if(r(e.slice(u,d)),u=c,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},wt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),xt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),Z=(e,t,s={})=>{const n={};return Q(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),c=u.includes("#"),[a,h]=u.split(/[#@]/),g=Number(a),m=i.sort((l,f)=>l.length-f.length).filter((l,f)=>i.slice(f+1).every(y=>!y.includes(l))),{contents:p}=n[g]??={title:"",contents:[]};if(d)p.push([{type:"customField",id:g,index:h,display:m.map(l=>o.c.map(f=>B(f,l))).flat().filter(l=>l!==null)},r]);else{const l=m.map(f=>B(o.h,f)).filter(f=>f!==null);if(l.length&&p.push([{type:c?"heading":"title",id:g,...c&&{anchor:h},display:l},r]),"t"in o)for(const f of o.t){const y=m.map(F=>B(f,F)).filter(F=>F!==null);y.length&&p.push([{type:"text",id:g,...c&&{anchor:h},display:y},r])}}}),V(n).sort(([,o],[,u])=>"max"==="total"?wt(o,u):xt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=ut(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},tt=(e,t,s={})=>{const n=Ct(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:o})=>o);return e.includes(" ")?n:n.filter(o=>!o.includes(" "))},bt=et(V(JSON.parse("{\"/\":{\"documentCount\":852,\"nextId\":852,\"documentIds\":{\"0\":\"1\",\"1\":\"1#标题显示在右侧\",\"2\":\"1@0\",\"3\":\"1@1\",\"4\":\"3\",\"5\":\"3#项目介绍\",\"6\":\"3#业务流程\",\"7\":\"3#技术选型\",\"8\":\"3#需求分析\",\"9\":\"3#数据库设计\",\"10\":\"3#功能实现\",\"11\":\"3#项目初始化\",\"12\":\"3#前端初始化\",\"13\":\"3#后端初始化\",\"14\":\"3#前端开发\",\"15\":\"3#sdk开发\",\"16\":\"3#模拟接口项目开发\",\"17\":\"3#api签名认证\",\"18\":\"3#客户端sdk开发\",\"19\":\"3#测试sdk是否可用\",\"20\":\"3#接口功能管理\",\"21\":\"3#接口发布-下线\",\"22\":\"3#浏览接口-查看接口文档-申请签名\",\"23\":\"3#在线调试\",\"24\":\"3#系统架构优化\",\"25\":\"3#统计用户调用接口次数\",\"26\":\"3#接口次数-1\",\"27\":\"3#api网关\",\"28\":\"3#分布式改造\",\"29\":\"3#dubbo框架\",\"30\":\"3@0\",\"31\":\"3@1\",\"32\":\"4\",\"33\":\"5\",\"34\":\"6\",\"35\":\"6@0\",\"36\":\"6@1\",\"37\":\"7\",\"38\":\"7@0\",\"39\":\"7@1\",\"40\":\"8\",\"41\":\"8@0\",\"42\":\"8@1\",\"43\":\"9\",\"44\":\"9#遇到的问题\",\"45\":\"9@0\",\"46\":\"9@1\",\"47\":\"10\",\"48\":\"10@0\",\"49\":\"10@1\",\"50\":\"11\",\"51\":\"11#数组\",\"52\":\"11#arraylist源码分析\",\"53\":\"11#成员变量\",\"54\":\"11#构造方法\",\"55\":\"11#关键方法\",\"56\":\"11#添加元素add\",\"57\":\"11#结论\",\"58\":\"11#面试题\",\"59\":\"11@0\",\"60\":\"11@1\",\"61\":\"12\",\"62\":\"12#hashmap源码分析\",\"63\":\"12#成员变量\",\"64\":\"12#构造函数\",\"65\":\"12#关键方法\",\"66\":\"12#添加元素put\",\"67\":\"12#删除元素remove\",\"68\":\"12#面试题\",\"69\":\"12#说一下hashmap的实现原理\",\"70\":\"12#链表和红黑树转换\",\"71\":\"12#讲一讲hashmap的扩容机制\",\"72\":\"12#hashmap的寻址算法\",\"73\":\"12#为何hashmap的数组长度一定是2的次幂\",\"74\":\"12@0\",\"75\":\"12@1\",\"76\":\"13\",\"77\":\"13@0\",\"78\":\"13@1\",\"79\":\"14\",\"80\":\"14#juc概述\",\"81\":\"14#并发编程\",\"82\":\"14#线程\",\"83\":\"14#线程创建的三种方式\",\"84\":\"14#线程状态的转换\",\"85\":\"14#线程的基本操作\",\"86\":\"14#yield与sleep\",\"87\":\"14#join-函数\",\"88\":\"14#interrupt打断线程\",\"89\":\"14#守护线程daemon\",\"90\":\"14#lock接口\",\"91\":\"14#synchronized关键字\",\"92\":\"14#线程间通信\",\"93\":\"14#线程间定制化通信\",\"94\":\"14#集合的线程安全\",\"95\":\"14#arraylist线程不安全演示\",\"96\":\"14#解决方案vector\",\"97\":\"14#解决方案collections\",\"98\":\"14#解决方案copyonwritearraylist\",\"99\":\"14#hashset线程不安全\",\"100\":\"14#hashmap线程不安全\",\"101\":\"14#多线程锁\",\"102\":\"14#公平锁和非公平锁\",\"103\":\"14#可重入锁\",\"104\":\"14#死锁\",\"105\":\"14#callable接口\",\"106\":\"14#juc强大的辅助类\",\"107\":\"14#减少计数countdownlatch\",\"108\":\"14#循环栅栏cyclicbarrier\",\"109\":\"14#信号灯semaphore\",\"110\":\"14#reentrantreadwritelock读写锁\",\"111\":\"14#锁降级\",\"112\":\"14#blockingqueue阻塞队列\",\"113\":\"14#threadpool线程池\",\"114\":\"14#线程池概述\",\"115\":\"14#线程池创建\",\"116\":\"14#自定义线程池\",\"117\":\"14#fork-join分支合并框架\",\"118\":\"14#completablefuture异步回调\",\"119\":\"14#创建异步对象\",\"120\":\"14#完成时回调\",\"121\":\"14#线程串行化方法\",\"122\":\"14#两任务组合\",\"123\":\"14#两任务组合完成一个\",\"124\":\"14#多任务组合\",\"125\":\"14#并发理论jmm\",\"126\":\"14#jmm内存模型\",\"127\":\"14#重排序\",\"128\":\"14#happens-before规则\",\"129\":\"14#并发关键字\",\"130\":\"14#synchronized\",\"131\":\"14#cas操作\",\"132\":\"14#volatile\",\"133\":\"14#final\",\"134\":\"14#三大特性\",\"135\":\"14#lock体系\",\"136\":\"14#aqs-abstractqueuedsynchronizer\",\"137\":\"14@0\",\"138\":\"14@1\",\"139\":\"15\",\"140\":\"15#线程基础知识复习\",\"141\":\"15#completablefuture\",\"142\":\"15#futuretask\",\"143\":\"15#completablefuture-1\",\"144\":\"15#多线程锁\",\"145\":\"15#乐观锁和悲观锁\",\"146\":\"15#synchronized三种应用方式\",\"147\":\"15#同步代码块\",\"148\":\"15#同步方法\",\"149\":\"15#静态同步方法\",\"150\":\"15#反编译synchronized锁的是什么\",\"151\":\"15#公平锁和非公平锁\",\"152\":\"15#可重入锁-递归锁\",\"153\":\"15#死锁\",\"154\":\"15#locksupport与线程中断\",\"155\":\"15#线程中断\",\"156\":\"15#locksupport\",\"157\":\"15#java内存模型之jmm\",\"158\":\"15#jmm规范三大特性\",\"159\":\"15#happens-before\",\"160\":\"15#volatile与jmm\",\"161\":\"15#内存屏障\",\"162\":\"15@0\",\"163\":\"15@1\",\"164\":\"16\",\"165\":\"16#代理相关\",\"166\":\"16#反射\",\"167\":\"16#获取反射三种方式\",\"168\":\"16#反射获取构造方法\",\"169\":\"16#获取成员变量\",\"170\":\"16#获取成员方法\",\"171\":\"16#利用反射保存对象信息\",\"172\":\"16@0\",\"173\":\"16@1\",\"174\":\"17\",\"175\":\"17#创建mybatis项目\",\"176\":\"17#mapper代理开发\",\"177\":\"17#mybatis核心配置文件\",\"178\":\"17#多环境配置\",\"179\":\"17#类型别名\",\"180\":\"17#数据库映射问题\",\"181\":\"17#使用resultmap\",\"182\":\"17#参数占位符\",\"183\":\"17#特殊符号\",\"184\":\"17#多条件查询\",\"185\":\"17#动态sql\",\"186\":\"17#单条件查询\",\"187\":\"17#增删改查\",\"188\":\"17#增加\",\"189\":\"17#删除\",\"190\":\"17#批量删除\",\"191\":\"17#修改\",\"192\":\"17#注解开发\",\"193\":\"17@0\",\"194\":\"17@1\",\"195\":\"18\",\"196\":\"18#快速入门\",\"197\":\"18#常见注解\",\"198\":\"18#tablename\",\"199\":\"18#tableid\",\"200\":\"18#tablefield\",\"201\":\"18#常用配置\",\"202\":\"18#核心功能\",\"203\":\"18#条件构造器\",\"204\":\"18#querywrapper\",\"205\":\"18#updatewrapper\",\"206\":\"18#lambdaquerywrapper\",\"207\":\"18#自定义sql\",\"208\":\"18#iservice接口\",\"209\":\"18#使用lambda方法\",\"210\":\"18#使用lambdaupdate\",\"211\":\"18#批量新增\",\"212\":\"18#扩展功能\",\"213\":\"18#代码生成器\",\"214\":\"18#db静态工具\",\"215\":\"18#逻辑删除\",\"216\":\"18#枚举处理器\",\"217\":\"18#json类型处理器\",\"218\":\"18#插件功能\",\"219\":\"18#分页插件\",\"220\":\"18#通用分页实体\",\"221\":\"18@0\",\"222\":\"18@1\",\"223\":\"19\",\"224\":\"19#ssm整合步骤\",\"225\":\"19#统一返回结果封装\",\"226\":\"19#返回结果result类设置为object\",\"227\":\"19#推荐使用范型t\",\"228\":\"19#异常处理\",\"229\":\"19#异常处理器类\",\"230\":\"19#自定义异常处理类\",\"231\":\"19#拦截器\",\"232\":\"19#创建拦截器\",\"233\":\"19#配置多个拦截器\",\"234\":\"19@0\",\"235\":\"19@1\",\"236\":\"20\",\"237\":\"20#前端\",\"238\":\"20#后端\",\"239\":\"20#本地存储\",\"240\":\"20#阿里云oss存储\",\"241\":\"20#使用\",\"242\":\"20@0\",\"243\":\"20@1\",\"244\":\"21\",\"245\":\"21#项目创建\",\"246\":\"21#请求与响应\",\"247\":\"21#设置请求映射路径\",\"248\":\"21#请求参数\",\"249\":\"21#五种类型参数传递\",\"250\":\"21#普通参数\",\"251\":\"21#pojo参数\",\"252\":\"21#嵌套pojo类型参数\",\"253\":\"21#数组类型参数\",\"254\":\"21#集合类型参数\",\"255\":\"21#json格式数据传输\",\"256\":\"21#json普通数组\",\"257\":\"21#json对象数据\",\"258\":\"21#json对象数组\",\"259\":\"21#日期参数传递\",\"260\":\"21#响应\",\"261\":\"21#响应页面\",\"262\":\"21#rest风格\",\"263\":\"21#springmvc放行静态资源\",\"264\":\"21@0\",\"265\":\"21@1\",\"266\":\"22\",\"267\":\"22#为什么要使用spring\",\"268\":\"22#ioc控制反转\",\"269\":\"22#案例\",\"270\":\"22#di依赖注入\",\"271\":\"22#ioc相关内容\",\"272\":\"22#bean注意事项\",\"273\":\"22#bean创建方式\",\"274\":\"22#无参构造方法\",\"275\":\"22#静态工厂实例化\",\"276\":\"22#实例工厂实例化\",\"277\":\"22#使用factorybean创建\",\"278\":\"22#bean生命周期\",\"279\":\"22#实现接口完成生命周期\",\"280\":\"22#di依赖注入-1\",\"281\":\"22#setter注入\",\"282\":\"22#引用类型\",\"283\":\"22#简单数据类型\",\"284\":\"22#构造器注入\",\"285\":\"22#引用类型-1\",\"286\":\"22#简单数据类型-1\",\"287\":\"22#自动装配\",\"288\":\"22#集合注入\",\"289\":\"22#注入数组类型数据\",\"290\":\"22#注入list类型数据\",\"291\":\"22#注入set类型数据\",\"292\":\"22#注入map类型数据\",\"293\":\"22#注入properties类型数据\",\"294\":\"22#ioc-di管理第三方bean\",\"295\":\"22#读取properties文件\",\"296\":\"22#核心容器applicationcontext\",\"297\":\"22#获取bean\",\"298\":\"22#使用beanfactory\",\"299\":\"22#注解开发\",\"300\":\"22#纯注解开发\",\"301\":\"22#configuration与-componentscan\",\"302\":\"22#设置非单例-scope\",\"303\":\"22#postconstruct和-predestroy\",\"304\":\"22#autowired\",\"305\":\"22#qualifier\",\"306\":\"22#propertysource\",\"307\":\"22#value\",\"308\":\"22#注解管理第三方bean\",\"309\":\"22#bean\",\"310\":\"22#注入资源-value\",\"311\":\"22#spring整合\",\"312\":\"22#spring整合mybatis\",\"313\":\"22#spring整合junit\",\"314\":\"22@0\",\"315\":\"22@1\",\"316\":\"23\",\"317\":\"23#快速入门\",\"318\":\"23#springboot中使用\",\"319\":\"23#封装为starter\",\"320\":\"23@0\",\"321\":\"23@1\",\"322\":\"24\",\"323\":\"24#快速入门\",\"324\":\"24@0\",\"325\":\"24@1\",\"326\":\"25\",\"327\":\"25#rabbitmq基础\",\"328\":\"25#docker安装\",\"329\":\"25#收发消息\",\"330\":\"25#数据隔离\",\"331\":\"25#amqp\",\"332\":\"25#快速入门\",\"333\":\"25#workqueues模式\",\"334\":\"25#交换机\",\"335\":\"25#fanout交换机\",\"336\":\"25#direct交换机\",\"337\":\"25#topic交换机\",\"338\":\"25#声明队列和交换机\",\"339\":\"25#消息转换器\",\"340\":\"25#rabbitmq高级\",\"341\":\"25#发送者可靠性\",\"342\":\"25#生产者重试机制\",\"343\":\"25#生产者确认机制\",\"344\":\"25#实现生产者确认\",\"345\":\"25#mq可靠性\",\"346\":\"25#数据持久化\",\"347\":\"25#lazyqueue持久化\",\"348\":\"25#消费者可靠性\",\"349\":\"25#消费者确认机制\",\"350\":\"25#失败重试机制\",\"351\":\"25#失败处理策略\",\"352\":\"25#业务幂等性\",\"353\":\"25#延迟消息\",\"354\":\"25#死信交换机\",\"355\":\"25#delayexchange插件\",\"356\":\"25@0\",\"357\":\"25@1\",\"358\":\"26\",\"359\":\"26#rabbitmq如何保证消息不丢失\",\"360\":\"26#rabbitmq消息的重复消费问题如何解决\",\"361\":\"26#rabbitmq中死信交换机-延迟队列有了解过吗\",\"362\":\"26#如果有100万消息堆积在mq-如何解决\",\"363\":\"26#rabbitmq的高可用机制有了解过嘛\",\"364\":\"26@0\",\"365\":\"26@1\",\"366\":\"27\",\"367\":\"27#redis持久化\",\"368\":\"27#rdb持久化\",\"369\":\"27#执行时机\",\"370\":\"27#rdb原理\",\"371\":\"27#aof持久化\",\"372\":\"27#aof文件重写\",\"373\":\"27#redis主从集群\",\"374\":\"27@0\",\"375\":\"27@1\",\"376\":\"28\",\"377\":\"28#redis介绍\",\"378\":\"28#macos安装redis\",\"379\":\"28#配置\",\"380\":\"28#启动问题\",\"381\":\"28#客户端工具\",\"382\":\"28#redis中的数据结构\",\"383\":\"28#字符串\",\"384\":\"28#常用命令\",\"385\":\"28#哈希\",\"386\":\"28#常用命令-1\",\"387\":\"28#列表\",\"388\":\"28#常用命令-2\",\"389\":\"28#集合\",\"390\":\"28#常用命令-3\",\"391\":\"28#有序集合\",\"392\":\"28#常用命令-4\",\"393\":\"28#通用命令\",\"394\":\"28#redis的java客户端jedis\",\"395\":\"28#入门\",\"396\":\"28#连接池\",\"397\":\"28#springboot中使用redis\",\"398\":\"28#入门-1\",\"399\":\"28#自定义序列化方式\",\"400\":\"28#使用stringredistemplate\",\"401\":\"28@0\",\"402\":\"28@1\",\"403\":\"29\",\"404\":\"29#使用\",\"405\":\"29#导入maven坐标\",\"406\":\"29#前端页面\",\"407\":\"29#后端server\",\"408\":\"29#编写配置类\",\"409\":\"29#定时任务类\",\"410\":\"29@0\",\"411\":\"29@1\",\"412\":\"30\",\"413\":\"30@0\",\"414\":\"30@1\",\"415\":\"31\",\"416\":\"31#快速入门\",\"417\":\"31#语法\",\"418\":\"31#集合list和map\",\"419\":\"31#if指令\",\"420\":\"31#运算\",\"421\":\"31#空值处理\",\"422\":\"31#内置函数\",\"423\":\"31#根据模版生成html页面\",\"424\":\"31@0\",\"425\":\"31@1\",\"426\":\"32\",\"427\":\"32@0\",\"428\":\"32@1\",\"429\":\"33\",\"430\":\"33#写excel\",\"431\":\"33#百万数据写入\",\"432\":\"33#使用模版写入\",\"433\":\"33#读excel\",\"434\":\"33@0\",\"435\":\"33@1\",\"436\":\"34\",\"437\":\"34#基本使用\",\"438\":\"34#创建地图\",\"439\":\"34#添加覆盖物\",\"440\":\"34#检索服务\",\"441\":\"34#webapi使用\",\"442\":\"34#坐标转换\",\"443\":\"34#ip定位服务\",\"444\":\"34#地点检索联想\",\"445\":\"34#地图导航\",\"446\":\"34@0\",\"447\":\"34@1\",\"448\":\"35\",\"449\":\"35#基本配置\",\"450\":\"35#配置内网穿透\",\"451\":\"35#注册一个测试号\",\"452\":\"35#微信消息验证\",\"453\":\"35#接收普通消息\",\"454\":\"35#开发案例-获取同义词\",\"455\":\"35#图文消息回复\",\"456\":\"35#微信功能开发\",\"457\":\"35#获取access-token\",\"458\":\"35#自定义菜单\",\"459\":\"35@0\",\"460\":\"35@1\",\"461\":\"36\",\"462\":\"36#基础\",\"463\":\"36#mysql执行流程\",\"464\":\"36#索引\",\"465\":\"36#了解过索引吗\",\"466\":\"36#聚簇索引\",\"467\":\"36#覆盖索引\",\"468\":\"36#mysql超大分页怎么处理\",\"469\":\"36#索引创建-的原则\",\"470\":\"36#索引失效\",\"471\":\"36#事务\",\"472\":\"36#acid\",\"473\":\"36#并发事务问题\",\"474\":\"36#事务隔离级别\",\"475\":\"36#undo-log和redo-log\",\"476\":\"36#事务中的隔离性是如何保证的呢\",\"477\":\"36#主从同步\",\"478\":\"36#分库分表\",\"479\":\"36#锁\",\"480\":\"36#日志\",\"481\":\"36#内存\",\"482\":\"36#触发器\",\"483\":\"36#视图\",\"484\":\"36#优化\",\"485\":\"36#在mysql中-如何定位慢查询\",\"486\":\"36#sql语句执行很慢-如何分析\",\"487\":\"36#sql优化经验\",\"488\":\"36@0\",\"489\":\"36@1\",\"490\":\"37\",\"491\":\"37#策略模式\",\"492\":\"37#策略模式-工厂模式-模版方法\",\"493\":\"37#策略枚举\",\"494\":\"37@0\",\"495\":\"37@1\",\"496\":\"38\",\"497\":\"38@0\",\"498\":\"38@1\",\"499\":\"39\",\"500\":\"39#需求分析\",\"501\":\"39#技术栈\",\"502\":\"39#前端\",\"503\":\"39#后端\",\"504\":\"39#前端项目初始化\",\"505\":\"39#前端主页-组件\",\"506\":\"39#添加navbar导航栏\",\"507\":\"39#添加tabbar标签栏\",\"508\":\"39#数据库设计\",\"509\":\"39#标签表\",\"510\":\"39#修改用户表\",\"511\":\"39#添加索引\",\"512\":\"39#后端接口开发\",\"513\":\"39@0\",\"514\":\"39@1\",\"515\":\"40\",\"516\":\"40#前端整合路由\",\"517\":\"40#安装\",\"518\":\"40#搜索页面\",\"519\":\"40#个人页面\",\"520\":\"40#编辑页面\",\"521\":\"40#后端\",\"522\":\"40#后端整合swagger-knife4j接口文档\",\"523\":\"40#爬虫\",\"524\":\"40#easyexcel\",\"525\":\"40#第一种方式\",\"526\":\"40#第二种方式\",\"527\":\"40@0\",\"528\":\"40@1\",\"529\":\"41\",\"530\":\"41#前端开发\",\"531\":\"41#前端页面跳转传值\",\"532\":\"41#前端整合axios\",\"533\":\"41#分布式session\",\"534\":\"41#主页推荐\",\"535\":\"41#模拟1000万数据\",\"536\":\"41#编写一次性任务\",\"537\":\"41#普通插入\",\"538\":\"41#优化-分批插入\",\"539\":\"41#并发执行\",\"540\":\"41#分页查询\",\"541\":\"41@0\",\"542\":\"41@1\",\"543\":\"42\",\"544\":\"42#redis缓存预热\",\"545\":\"42#分布式锁\",\"546\":\"42#分布式锁实现的关键\",\"547\":\"42#抢锁机制\",\"548\":\"42#实现\",\"549\":\"42#注意事项\",\"550\":\"42#redisson实现分布式锁\",\"551\":\"42#_2种引入方式\",\"552\":\"42@0\",\"553\":\"42@1\",\"554\":\"43\",\"555\":\"43#组队功能\",\"556\":\"43#需求分析\",\"557\":\"43#实现\",\"558\":\"43#创建队伍\",\"559\":\"43#查询队伍列表\",\"560\":\"43#修改队伍信息\",\"561\":\"43#用户加入队伍\",\"562\":\"43#用户可以退出队伍\",\"563\":\"43#队长可以解散队伍\",\"564\":\"43#获取当前用户已加入的队伍\",\"565\":\"43#获取当前用户创建的队伍\",\"566\":\"43#随机匹配\",\"567\":\"43#_2-怎么对所有用户匹配-取-top\",\"568\":\"43@0\",\"569\":\"43@1\",\"570\":\"44\",\"571\":\"44#分布式session登录\",\"572\":\"44#redis缓存首页高频访问用户\",\"573\":\"44#定时任务缓存预热\",\"574\":\"44#加入队伍锁\",\"575\":\"44#编辑距离算法优化\",\"576\":\"44@0\",\"577\":\"44@1\",\"578\":\"45\",\"579\":\"45#目的\",\"580\":\"45#企业做项目流程\",\"581\":\"45#需求分析\",\"582\":\"45#技术选型\",\"583\":\"45#前端页面初始化\",\"584\":\"45#初始化项目\",\"585\":\"45#项目瘦身\",\"586\":\"45#后端初始化\",\"587\":\"45#用到的依赖\",\"588\":\"45#lombok\",\"589\":\"45#devtools\",\"590\":\"45#processor\",\"591\":\"45#mysql\",\"592\":\"45#spring-web\",\"593\":\"45#mybatis\",\"594\":\"45#mybatis-plus\",\"595\":\"45#配置文件\",\"596\":\"45#数据库设计\",\"597\":\"45#后端业务编写\",\"598\":\"45#代码生成器\",\"599\":\"45#注册逻辑\",\"600\":\"45@0\",\"601\":\"45@1\",\"602\":\"46\",\"603\":\"46#登录逻辑\",\"604\":\"46#具体逻辑\",\"605\":\"46#如何知道是哪个用户\",\"606\":\"46#控制器usercontroller\",\"607\":\"46#提高效率的插件\",\"608\":\"46#登录注册测试\",\"609\":\"46#前端代码编写\",\"610\":\"46#前后端交互\",\"611\":\"46#代理\",\"612\":\"46#注册页面\",\"613\":\"46#获取当前用户\",\"614\":\"46#查询用户表格\",\"615\":\"46#ant-design-pro-umi-框架\",\"616\":\"46#procomponents-高级表单\",\"617\":\"46@0\",\"618\":\"46@1\",\"619\":\"47\",\"620\":\"47#用户注销\",\"621\":\"47#后端优化\",\"622\":\"47#封装通用返回对象\",\"623\":\"47#定义统一返回结果result\",\"624\":\"47#定义创建result对象的resultutils\",\"625\":\"47#定义code枚举类\",\"626\":\"47#封装全局异常处理\",\"627\":\"47#bussinessexception类\",\"628\":\"47#globalexceptionhandler类\",\"629\":\"47#前端优化\",\"630\":\"47#全局响应处理\",\"631\":\"47@0\",\"632\":\"47@1\",\"633\":\"48\",\"634\":\"48#多环境\",\"635\":\"48#前端多环境\",\"636\":\"48#后端多环境\",\"637\":\"48#部署\",\"638\":\"48#前端\",\"639\":\"48#安装nginx服务器\",\"640\":\"48#后端\",\"641\":\"48#宝塔部署\",\"642\":\"48#docker部署\",\"643\":\"48#前端-1\",\"644\":\"48@0\",\"645\":\"48@1\",\"646\":\"49\",\"647\":\"49@0\",\"648\":\"49@1\",\"649\":\"50\",\"650\":\"50#环境搭建\",\"651\":\"50#docker安装mysql\",\"652\":\"50#docker-安装redis\",\"653\":\"50#创建项目\",\"654\":\"50#数据库导入\",\"655\":\"50#开源项目导入\",\"656\":\"50#分布式组件\",\"657\":\"50#springcloud-alibaba\",\"658\":\"50#nacos注册中心\",\"659\":\"50#openfeign远程调用\",\"660\":\"50#nacos配置中心\",\"661\":\"50#gateway网关\",\"662\":\"50#商品服务\",\"663\":\"50#三级分类\",\"664\":\"50#品牌管理\",\"665\":\"50#oss对象存储\",\"666\":\"50#新增品牌后端校验\",\"667\":\"50#jsr303分组校验\",\"668\":\"50#自定义校验规则\",\"669\":\"50#商品属性\",\"670\":\"50#数据库设计\",\"671\":\"50#mybatisplus分页插件配置\",\"672\":\"50#品牌分类关联\",\"673\":\"50#商品属性-1\",\"674\":\"50#分组关联关系\",\"675\":\"50#新增商品\",\"676\":\"50@0\",\"677\":\"50@1\",\"678\":\"51\",\"679\":\"51#elasticsearch全文检索\",\"680\":\"51#基本概念\",\"681\":\"51#docker安装es环境\",\"682\":\"51#初步检索\",\"683\":\"51#进阶检索\",\"684\":\"51#searchapi\",\"685\":\"51#query-dsl\",\"686\":\"51#mapping映射\",\"687\":\"51#分词器\",\"688\":\"51#商品上架\",\"689\":\"51#商城业务\",\"690\":\"51#首页\",\"691\":\"51#nginx配置域名\",\"692\":\"51#性能压测\",\"693\":\"51#性能监控\",\"694\":\"51#jvm内存模型\",\"695\":\"51#jconsole和jvisualvm\",\"696\":\"51#中间件性能测试\",\"697\":\"51#nginx动静分离\",\"698\":\"51#redis缓存\",\"699\":\"51#缓存穿透\",\"700\":\"51#缓存雪崩\",\"701\":\"51#缓存击穿\",\"702\":\"51#使用本地锁\",\"703\":\"51#分布式锁\",\"704\":\"51#redisson\",\"705\":\"51#缓存数据一致性\",\"706\":\"51#springcache\",\"707\":\"51@0\",\"708\":\"51@1\",\"709\":\"52\",\"710\":\"52#检索服务\",\"711\":\"52#异步\",\"712\":\"52#创建线程\",\"713\":\"52#线程池\",\"714\":\"52#completablefuture\",\"715\":\"52#创建异步对象\",\"716\":\"52#完成时回调\",\"717\":\"52#线程串行化方法\",\"718\":\"52#两任务组合\",\"719\":\"52#两任务组合完成一个\",\"720\":\"52#多任务组合\",\"721\":\"52#商品详情\",\"722\":\"52@0\",\"723\":\"52@1\",\"724\":\"53\",\"725\":\"53#登录逻辑\",\"726\":\"53#整合swagger\",\"727\":\"53#整合knife4j\",\"728\":\"53#网关\",\"729\":\"53#文章列表-数据库拆分\",\"730\":\"53#表的拆分-垂直分表\",\"731\":\"53#文章列表查询\",\"732\":\"53#业务代码\",\"733\":\"53#freemarker模版文件-minio文件上传\",\"734\":\"53@0\",\"735\":\"53@1\",\"736\":\"54\",\"737\":\"54#短信登录\",\"738\":\"54#基于session实现登录流程\",\"739\":\"54#登录拦截\",\"740\":\"54#用户信息脱敏\",\"741\":\"54#session共享\",\"742\":\"54#解决登录状态刷新问题\",\"743\":\"54@0\",\"744\":\"54@1\",\"745\":\"55\",\"746\":\"55#商品查询缓存\",\"747\":\"55#添加商品缓存\",\"748\":\"55#缓存更新策略\",\"749\":\"55#使用缓存原因\",\"750\":\"55#缓存不一致解决方案\",\"751\":\"55#具体实现\",\"752\":\"55#缓存穿透\",\"753\":\"55#缓存雪崩\",\"754\":\"55#缓存击穿\",\"755\":\"55#使用锁解决\",\"756\":\"55#逻辑过期\",\"757\":\"55#对比\",\"758\":\"55#缓存工具封装\",\"759\":\"55@0\",\"760\":\"55@1\",\"761\":\"56\",\"762\":\"56#优惠卷秒杀\",\"763\":\"56#全局id生成器\",\"764\":\"56#创建优惠卷\",\"765\":\"56#实现秒杀下单\",\"766\":\"56#库存超卖问题\",\"767\":\"56#悲观锁\",\"768\":\"56#乐观锁\",\"769\":\"56#cas自旋锁\",\"770\":\"56#一人一单\",\"771\":\"56#集群并发\",\"772\":\"56@0\",\"773\":\"56@1\",\"774\":\"57\",\"775\":\"57#分布式锁\",\"776\":\"57#实现思路\",\"777\":\"57#实现分布式锁\",\"778\":\"57#redis分布式锁误删\",\"779\":\"57#分布式锁原子性问题\",\"780\":\"57#lua脚本解决多条命令原子性问题\",\"781\":\"57#分布式锁redission\",\"782\":\"57#分布式锁-redission可重入锁原理\",\"783\":\"57#redission锁的mutilock原理\",\"784\":\"57@0\",\"785\":\"57@1\",\"786\":\"58\",\"787\":\"58#秒杀优化\",\"788\":\"58#用户模拟\",\"789\":\"58#redis优化秒杀\",\"790\":\"58#使用阻塞队列优化秒杀\",\"791\":\"58#使用redis消息队列\",\"792\":\"58#基于list实现消息队列\",\"793\":\"58#基于pubsub顶消息队列\",\"794\":\"58#基于stream的消息队列\",\"795\":\"58#基于stream的消息队列-消费者组\",\"796\":\"58#使用stream\",\"797\":\"58@0\",\"798\":\"58@1\",\"799\":\"59\",\"800\":\"59#达人探店\",\"801\":\"59#发布探店笔记\",\"802\":\"59#查看探店笔记\",\"803\":\"59#点赞功能\",\"804\":\"59#点赞排行榜\",\"805\":\"59#点赞查询列表\",\"806\":\"59#好友关注\",\"807\":\"59#共同关注\",\"808\":\"59#feed流\",\"809\":\"59#推送粉丝收件箱\",\"810\":\"59#分页查询收邮箱\",\"811\":\"59@0\",\"812\":\"59@1\",\"813\":\"60\",\"814\":\"60#附近商户\",\"815\":\"60#geo数据结构\",\"816\":\"60#导入店铺数据到geo\",\"817\":\"60#实现附近商户功能\",\"818\":\"60#用户签到\",\"819\":\"60#bitmap用户签到\",\"820\":\"60#签到统计\",\"821\":\"60#uv统计\",\"822\":\"60@0\",\"823\":\"60@1\",\"824\":\"61\",\"825\":\"61@0\",\"826\":\"61@1\",\"827\":\"62\",\"828\":\"62@0\",\"829\":\"62@1\",\"830\":\"63\",\"831\":\"64\",\"832\":\"65\",\"833\":\"66\",\"834\":\"67\",\"835\":\"68\",\"836\":\"69\",\"837\":\"70\",\"838\":\"71\",\"839\":\"72\",\"840\":\"73\",\"841\":\"74\",\"842\":\"75\",\"843\":\"76\",\"844\":\"77\",\"845\":\"78\",\"846\":\"79\",\"847\":\"80\",\"848\":\"81\",\"849\":\"82\",\"850\":\"83\",\"851\":\"84\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[1,5],\"2\":[null,null,2],\"3\":[null,null,2],\"4\":[1],\"5\":[1,22],\"6\":[1,2],\"7\":[1,19],\"8\":[1],\"9\":[1,90],\"10\":[1],\"11\":[1],\"12\":[1,20],\"13\":[1,2],\"14\":[1,278],\"15\":[1],\"16\":[1,70],\"17\":[1,106],\"18\":[1,69],\"19\":[1,55],\"20\":[1],\"21\":[2,82],\"22\":[3,197],\"23\":[1,183],\"24\":[1],\"25\":[1,37],\"26\":[1,45],\"27\":[1,420],\"28\":[1,29],\"29\":[1,126],\"30\":[null,null,2],\"31\":[null,null,2],\"32\":[1,5],\"33\":[1,5],\"34\":[1],\"35\":[null,null,2],\"36\":[null,null,2],\"37\":[2],\"38\":[null,null,1],\"39\":[null,null,1],\"40\":[2],\"41\":[null,null,1],\"42\":[null,null,1],\"43\":[1,30],\"44\":[2,26],\"45\":[null,null,1],\"46\":[null,null,1],\"47\":[1,395],\"48\":[null,null,1],\"49\":[null,null,1],\"50\":[2,15],\"51\":[1,29],\"52\":[1,4],\"53\":[1,72],\"54\":[1,82],\"55\":[1],\"56\":[1,152],\"57\":[1,6],\"58\":[1,81],\"59\":[null,null,2],\"60\":[null,null,2],\"61\":[2,5],\"62\":[1],\"63\":[1,200],\"64\":[1,104],\"65\":[1],\"66\":[1,278],\"67\":[1,154],\"68\":[1],\"69\":[1,57],\"70\":[1,12],\"71\":[1,199],\"72\":[1,37],\"73\":[2,16],\"74\":[null,null,2],\"75\":[null,null,2],\"76\":[2,13],\"77\":[null,null,1],\"78\":[null,null,1],\"79\":[1],\"80\":[1,7],\"81\":[1,150],\"82\":[1],\"83\":[1,70],\"84\":[1,31],\"85\":[1],\"86\":[1,19],\"87\":[3,67],\"88\":[1,35],\"89\":[1,73],\"90\":[1],\"91\":[1,165],\"92\":[1,78],\"93\":[1,92],\"94\":[1],\"95\":[1,34],\"96\":[1,13],\"97\":[1,8],\"98\":[1,72],\"99\":[1,29],\"100\":[1,37],\"101\":[1,13],\"102\":[1,41],\"103\":[1,40],\"104\":[1,83],\"105\":[1,69],\"106\":[1],\"107\":[1,41],\"108\":[1,83],\"109\":[1,69],\"110\":[1,118],\"111\":[1,23],\"112\":[1,108],\"113\":[1],\"114\":[1,66],\"115\":[1,117],\"116\":[1,16],\"117\":[2,113],\"118\":[1],\"119\":[1,52],\"120\":[1,83],\"121\":[1,53],\"122\":[1,48],\"123\":[1,7],\"124\":[1,11],\"125\":[1],\"126\":[1,9],\"127\":[1,3],\"128\":[2,7],\"129\":[1],\"130\":[1,20],\"131\":[1,37],\"132\":[1,51],\"133\":[1,10],\"134\":[1,9],\"135\":[1,19],\"136\":[3,64],\"137\":[null,null,2],\"138\":[null,null,2],\"139\":[1],\"140\":[1,121],\"141\":[1,15],\"142\":[1,179],\"143\":[1,318],\"144\":[1],\"145\":[1,34],\"146\":[1,9],\"147\":[1,22],\"148\":[1,8],\"149\":[1,9],\"150\":[1,2],\"151\":[1,75],\"152\":[3,63],\"153\":[1,76],\"154\":[1],\"155\":[1,159],\"156\":[1,132],\"157\":[1,21],\"158\":[1,60],\"159\":[2,71],\"160\":[1,11],\"161\":[1,39],\"162\":[null,null,2],\"163\":[null,null,2],\"164\":[1],\"165\":[1,92],\"166\":[1,3],\"167\":[1,33],\"168\":[1,68],\"169\":[1,62],\"170\":[1,71],\"171\":[1,76],\"172\":[null,null,2],\"173\":[null,null,2],\"174\":[1,9],\"175\":[1,162],\"176\":[1,41],\"177\":[1],\"178\":[1,44],\"179\":[1,37],\"180\":[1,32],\"181\":[1,31],\"182\":[1,36],\"183\":[1,9],\"184\":[1,106],\"185\":[1,39],\"186\":[1,38],\"187\":[1],\"188\":[1,30],\"189\":[1,14],\"190\":[1,61],\"191\":[1,29],\"192\":[1,23],\"193\":[null,null,2],\"194\":[null,null,2],\"195\":[2,3],\"196\":[1,90],\"197\":[1],\"198\":[2,36],\"199\":[2,3],\"200\":[2,14],\"201\":[1,48],\"202\":[1],\"203\":[1],\"204\":[1,49],\"205\":[1,41],\"206\":[1,30],\"207\":[1,45],\"208\":[1,147],\"209\":[2,72],\"210\":[1,74],\"211\":[1,125],\"212\":[1],\"213\":[1,4],\"214\":[1,96],\"215\":[1,64],\"216\":[1,45],\"217\":[1,42],\"218\":[1,16],\"219\":[1,55],\"220\":[1,183],\"221\":[null,null,3],\"222\":[null,null,3],\"223\":[1],\"224\":[1,240],\"225\":[1],\"226\":[1,42],\"227\":[1,1],\"228\":[1],\"229\":[1,25],\"230\":[1,59],\"231\":[1,7],\"232\":[1,110],\"233\":[2,61],\"234\":[null,null,2],\"235\":[null,null,2],\"236\":[1],\"237\":[1,32],\"238\":[1,15],\"239\":[1,44],\"240\":[1,16],\"241\":[1,256],\"242\":[null,null,2],\"243\":[null,null,3],\"244\":[1,19],\"245\":[1,147],\"246\":[2],\"247\":[1,23],\"248\":[1,88],\"249\":[1],\"250\":[1,35],\"251\":[1,30],\"252\":[1,32],\"253\":[1,23],\"254\":[1,29],\"255\":[1],\"256\":[1,53],\"257\":[1,23],\"258\":[1,23],\"259\":[1,44],\"260\":[1],\"261\":[1,71],\"262\":[1,77],\"263\":[2,35],\"264\":[null,null,2],\"265\":[null,null,2],\"266\":[1,5],\"267\":[1,40],\"268\":[1,28],\"269\":[1,95],\"270\":[1,81],\"271\":[1],\"272\":[1,15],\"273\":[1],\"274\":[1,3],\"275\":[1,37],\"276\":[1,40],\"277\":[1,26],\"278\":[1,74],\"279\":[1,26],\"280\":[1],\"281\":[1],\"282\":[1,41],\"283\":[1,43],\"284\":[1],\"285\":[1,36],\"286\":[1,54],\"287\":[1,37],\"288\":[1,33],\"289\":[1,13],\"290\":[1,14],\"291\":[1,13],\"292\":[1,18],\"293\":[1,18],\"294\":[2,47],\"295\":[1,74],\"296\":[1,7],\"297\":[1,12],\"298\":[1,23],\"299\":[1,41],\"300\":[1],\"301\":[3,27],\"302\":[2,17],\"303\":[3,41],\"304\":[2,37],\"305\":[2,14],\"306\":[2,12],\"307\":[2,26],\"308\":[1],\"309\":[2,41],\"310\":[2,56],\"311\":[1],\"312\":[1,116],\"313\":[1,55],\"314\":[null,null,2],\"315\":[null,null,2],\"316\":[1,15],\"317\":[1,79],\"318\":[1,85],\"319\":[1,189],\"320\":[null,null,2],\"321\":[null,null,2],\"322\":[1],\"323\":[1,37],\"324\":[null,null,2],\"325\":[null,null,2],\"326\":[1,6],\"327\":[1,44],\"328\":[1,25],\"329\":[1,5],\"330\":[1,4],\"331\":[1],\"332\":[1,93],\"333\":[1,69],\"334\":[1,26],\"335\":[1,32],\"336\":[1,50],\"337\":[1,42],\"338\":[1,83],\"339\":[1,71],\"340\":[1,82],\"341\":[1,23],\"342\":[1,30],\"343\":[1,31],\"344\":[1,106],\"345\":[1],\"346\":[1,9],\"347\":[1,88],\"348\":[1,4],\"349\":[1,55],\"350\":[1,46],\"351\":[1,56],\"352\":[1,103],\"353\":[1,12],\"354\":[1,38],\"355\":[1,183],\"356\":[null,null,2],\"357\":[null,null,2],\"358\":[1],\"359\":[1,108],\"360\":[1,15],\"361\":[3,55],\"362\":[3,29],\"363\":[1,52],\"364\":[null,null,2],\"365\":[null,null,2],\"366\":[1],\"367\":[1,3],\"368\":[1,11],\"369\":[1,36],\"370\":[1,14],\"371\":[1,39],\"372\":[1,22],\"373\":[1,31],\"374\":[null,null,2],\"375\":[null,null,2],\"376\":[1],\"377\":[1,81],\"378\":[1,24],\"379\":[1,27],\"380\":[1,13],\"381\":[1,8],\"382\":[1,20],\"383\":[1,11],\"384\":[1,10],\"385\":[1,3],\"386\":[1,10],\"387\":[1,8],\"388\":[1,12],\"389\":[1,4],\"390\":[1,13],\"391\":[1,12],\"392\":[1,15],\"393\":[1,10],\"394\":[1],\"395\":[1,78],\"396\":[1,46],\"397\":[1,21],\"398\":[1,59],\"399\":[1,66],\"400\":[1,118],\"401\":[null,null,3],\"402\":[null,null,3],\"403\":[1,7],\"404\":[1],\"405\":[1,13],\"406\":[1,92],\"407\":[1,74],\"408\":[1,25],\"409\":[1,73],\"410\":[null,null,2],\"411\":[null,null,2],\"412\":[1,29],\"413\":[null,null,2],\"414\":[null,null,2],\"415\":[1,50],\"416\":[1,128],\"417\":[1,12],\"418\":[1,92],\"419\":[1,26],\"420\":[1,30],\"421\":[1,11],\"422\":[1,30],\"423\":[1,108],\"424\":[null,null,2],\"425\":[null,null,2],\"426\":[1,30],\"427\":[null,null,2],\"428\":[null,null,2],\"429\":[2,26],\"430\":[1,122],\"431\":[1,58],\"432\":[1,42],\"433\":[1,27],\"434\":[null,null,3],\"435\":[null,null,2],\"436\":[1,9],\"437\":[1],\"438\":[1,98],\"439\":[1,96],\"440\":[1,11],\"441\":[1,3],\"442\":[1,46],\"443\":[1,61],\"444\":[1,124],\"445\":[1,38],\"446\":[null,null,2],\"447\":[null,null,2],\"448\":[1],\"449\":[1,7],\"450\":[1,34],\"451\":[1,72],\"452\":[1,117],\"453\":[1,143],\"454\":[2,43],\"455\":[1,52],\"456\":[1],\"457\":[2,83],\"458\":[1,15],\"459\":[null,null,1],\"460\":[null,null,1],\"461\":[1],\"462\":[1],\"463\":[1,27],\"464\":[1],\"465\":[1,33],\"466\":[1,52],\"467\":[1,31],\"468\":[2,25],\"469\":[2,45],\"470\":[1,26],\"471\":[1],\"472\":[1,20],\"473\":[1,16],\"474\":[1,14],\"475\":[3,45],\"476\":[2,79],\"477\":[1,20],\"478\":[1,29],\"479\":[1],\"480\":[1],\"481\":[1],\"482\":[1],\"483\":[1],\"484\":[1],\"485\":[3,39],\"486\":[3,98],\"487\":[1,41],\"488\":[null,null,2],\"489\":[null,null,2],\"490\":[1,11],\"491\":[1,53],\"492\":[1,3],\"493\":[1,37],\"494\":[null,null,2],\"495\":[null,null,3],\"496\":[2,17],\"497\":[null,null,1],\"498\":[null,null,1],\"499\":[1,2],\"500\":[1,20],\"501\":[1],\"502\":[1,8],\"503\":[1,5],\"504\":[1,41],\"505\":[1,16],\"506\":[1,36],\"507\":[1,50],\"508\":[1,48],\"509\":[1,57],\"510\":[1,42],\"511\":[1,9],\"512\":[1,123],\"513\":[null,null,2],\"514\":[null,null,2],\"515\":[1],\"516\":[1,7],\"517\":[1,32],\"518\":[1,152],\"519\":[1,81],\"520\":[1,60],\"521\":[1,25],\"522\":[1,107],\"523\":[1,85],\"524\":[1,25],\"525\":[1,70],\"526\":[1,41],\"527\":[null,null,2],\"528\":[null,null,2],\"529\":[1],\"530\":[1],\"531\":[1,49],\"532\":[1,62],\"533\":[1,65],\"534\":[1,93],\"535\":[1,10],\"536\":[1],\"537\":[1,58],\"538\":[2,65],\"539\":[1,137],\"540\":[1,36],\"541\":[null,null,2],\"542\":[null,null,2],\"543\":[1,18],\"544\":[1,157],\"545\":[1,37],\"546\":[1],\"547\":[1,10],\"548\":[1,17],\"549\":[1,29],\"550\":[1,4],\"551\":[1,171],\"552\":[null,null,2],\"553\":[null,null,2],\"554\":[1],\"555\":[1],\"556\":[1,29],\"557\":[1,70],\"558\":[2,112],\"559\":[1,104],\"560\":[1,52],\"561\":[1,121],\"562\":[1,103],\"563\":[1,9],\"564\":[1,59],\"565\":[1,38],\"566\":[1,122],\"567\":[4,75],\"568\":[null,null,2],\"569\":[null,null,2],\"570\":[1,2],\"571\":[1,33],\"572\":[1,12],\"573\":[1,80],\"574\":[1,107],\"575\":[1,154],\"576\":[null,null,2],\"577\":[null,null,2],\"578\":[1],\"579\":[1,2],\"580\":[1,18],\"581\":[1,6],\"582\":[1,14],\"583\":[1,6],\"584\":[1,26],\"585\":[1,25],\"586\":[1,5],\"587\":[1,5],\"588\":[1,11],\"589\":[1,17],\"590\":[1,16],\"591\":[1,13],\"592\":[2,13],\"593\":[1,17],\"594\":[2,21],\"595\":[1,40],\"596\":[1,71],\"597\":[1],\"598\":[1,50],\"599\":[1,108],\"600\":[null,null,2],\"601\":[null,null,2],\"602\":[1],\"603\":[1,12],\"604\":[2,18],\"605\":[2,143],\"606\":[1],\"607\":[1,49],\"608\":[1,86],\"609\":[1,47],\"610\":[1,11],\"611\":[1,37],\"612\":[1,90],\"613\":[1,67],\"614\":[1,4],\"615\":[6,63],\"616\":[2,199],\"617\":[null,null,2],\"618\":[null,null,2],\"619\":[1],\"620\":[1,38],\"621\":[1],\"622\":[1,8],\"623\":[1,32],\"624\":[1,31],\"625\":[1,44],\"626\":[1,15],\"627\":[2,30],\"628\":[1,41],\"629\":[1],\"630\":[1,99],\"631\":[null,null,2],\"632\":[null,null,2],\"633\":[2],\"634\":[1,44],\"635\":[1,43],\"636\":[1,19],\"637\":[1,2],\"638\":[1,4],\"639\":[1,75],\"640\":[1,23],\"641\":[1,5],\"642\":[1,16],\"643\":[1,129],\"644\":[null,null,2],\"645\":[null,null,2],\"646\":[2,99],\"647\":[null,null,2],\"648\":[null,null,2],\"649\":[1],\"650\":[1],\"651\":[1,83],\"652\":[2,30],\"653\":[1,31],\"654\":[1,2],\"655\":[1,288],\"656\":[1],\"657\":[2,76],\"658\":[1,50],\"659\":[1,84],\"660\":[1,88],\"661\":[1,69],\"662\":[1],\"663\":[1,293],\"664\":[1,26],\"665\":[1,306],\"666\":[1,133],\"667\":[1,84],\"668\":[1,74],\"669\":[1,14],\"670\":[1,300],\"671\":[1,40],\"672\":[1,116],\"673\":[1,138],\"674\":[1,126],\"675\":[1,285],\"676\":[null,null,2],\"677\":[null,null,2],\"678\":[1],\"679\":[1],\"680\":[1,13],\"681\":[1,64],\"682\":[1,116],\"683\":[1],\"684\":[1,18],\"685\":[2,124],\"686\":[1,30],\"687\":[1,211],\"688\":[1,221],\"689\":[1],\"690\":[1,91],\"691\":[1,97],\"692\":[1,10],\"693\":[1],\"694\":[1,62],\"695\":[1,11],\"696\":[1,80],\"697\":[1,76],\"698\":[1,108],\"699\":[1,26],\"700\":[1,32],\"701\":[1,31],\"702\":[1,51],\"703\":[1,111],\"704\":[1,152],\"705\":[1,11],\"706\":[1,161],\"707\":[null,null,2],\"708\":[null,null,2],\"709\":[1],\"710\":[1,427],\"711\":[1],\"712\":[1,60],\"713\":[1,95],\"714\":[1],\"715\":[1,52],\"716\":[1,83],\"717\":[1,53],\"718\":[1,48],\"719\":[1,7],\"720\":[1,11],\"721\":[1,122],\"722\":[null,null,2],\"723\":[null,null,2],\"724\":[1],\"725\":[1,63],\"726\":[1,76],\"727\":[1,87],\"728\":[1,141],\"729\":[2,8],\"730\":[2,17],\"731\":[1,39],\"732\":[1,53],\"733\":[1,136],\"734\":[null,null,2],\"735\":[null,null,2],\"736\":[1],\"737\":[1],\"738\":[1,119],\"739\":[1,61],\"740\":[1,35],\"741\":[1,119],\"742\":[1,118],\"743\":[null,null,2],\"744\":[null,null,2],\"745\":[1],\"746\":[1,5],\"747\":[1,78],\"748\":[1],\"749\":[1,54],\"750\":[1,64],\"751\":[1,67],\"752\":[1,122],\"753\":[1,8],\"754\":[1,21],\"755\":[1,123],\"756\":[1,163],\"757\":[1,15],\"758\":[1,170],\"759\":[null,null,2],\"760\":[null,null,2],\"761\":[1],\"762\":[1,4],\"763\":[1,107],\"764\":[1,135],\"765\":[1,81],\"766\":[1,19],\"767\":[1,12],\"768\":[1,12],\"769\":[1,70],\"770\":[1,127],\"771\":[1,21],\"772\":[null,null,2],\"773\":[null,null,2],\"774\":[1],\"775\":[1,26],\"776\":[1,32],\"777\":[1,83],\"778\":[1,85],\"779\":[1,20],\"780\":[1,78],\"781\":[1,85],\"782\":[2,154],\"783\":[1,25],\"784\":[null,null,2],\"785\":[null,null,2],\"786\":[1],\"787\":[1],\"788\":[1,112],\"789\":[1,160],\"790\":[1,132],\"791\":[1,14],\"792\":[1,21],\"793\":[1,25],\"794\":[1,28],\"795\":[2,39],\"796\":[1,190],\"797\":[null,null,2],\"798\":[null,null,2],\"799\":[1],\"800\":[1],\"801\":[1,136],\"802\":[1,38],\"803\":[1,111],\"804\":[1,74],\"805\":[1,74],\"806\":[1,89],\"807\":[1,90],\"808\":[1,59],\"809\":[1,90],\"810\":[1,125],\"811\":[null,null,2],\"812\":[null,null,2],\"813\":[1],\"814\":[1],\"815\":[1,67],\"816\":[1,73],\"817\":[1,157],\"818\":[1],\"819\":[1,81],\"820\":[1,68],\"821\":[1,36],\"822\":[null,null,2],\"823\":[null,null,2],\"824\":[1,38],\"825\":[null,null,1],\"826\":[null,null,1],\"827\":[1],\"828\":[null,null,2],\"829\":[null,null,2],\"830\":[1,3],\"831\":[1],\"832\":[1],\"833\":[1],\"834\":[1],\"835\":[2],\"836\":[1],\"837\":[2],\"838\":[1],\"839\":[2],\"840\":[3],\"841\":[2],\"842\":[2],\"843\":[2],\"844\":[2],\"845\":[2],\"846\":[1],\"847\":[1],\"848\":[1],\"849\":[1],\"850\":[1],\"851\":[1]},\"averageFieldLength\":[1.1238653594976884,58.84932957499264,1.3342816865215228],\"storedFields\":{\"0\":{\"h\":\"项目目录页\"},\"1\":{\"h\":\"标题显示在右侧\",\"t\":[\"在项目目录页面建立一个README.md就可以定义这个页面的内容\",\"跳转\",\"[目录1](./目录1/目录1.md) \",\"目录1\"]},\"2\":{\"c\":[\"目录\",\"导航\"]},\"3\":{\"c\":[\"目录\",\"导航\"]},\"4\":{\"h\":\"API开放平台\"},\"5\":{\"h\":\"项目介绍\",\"t\":[\"背景：\",\"前端开发需要用到后台接口\",\"使用现成的系统的功能\",\"做一个提供API接口调用的平台，用户可以开通接口调用权限。用户可以使用接口，并且每次调用会进行统计。管理员可以发布接口、下线接口、接入接口，以及可视化接口的调用情况、数据。\",\"防止攻击（安全性）\",\"不能随便调用 （限制，开通）\",\"统计调用 次数\",\"计费\",\"流量保护\",\"API接入\"]},\"6\":{\"h\":\"业务流程\",\"t\":[\"架构图 ：\"]},\"7\":{\"h\":\"技术选型\",\"t\":[\"前端：\",\"Ant Design Pro\",\"React\",\"Ant Design Procomponents\",\"Umi\",\"Umi Request（Axios的封装）\",\"后端：\",\"Java SpringBoot\",\"Spring Boot Starter（SDK开发）\",\"网关、限流、日志\"]},\"8\":{\"h\":\"需求分析\"},\"9\":{\"h\":\"数据库设计\",\"t\":[\"接口信息表:interface_info\",\"字段\",\"类型\",\"说明\",\"id\",\"bigint\",\"主键id\",\"name\",\"varchar(256)\",\"名称\",\"description\",\"varchar(256)\",\"描述\",\"url\",\"varchar(512)\",\"接口地址\",\"requestHeader\",\"text\",\"请求头\",\"responseHeader\",\"text\",\"响应头\",\"status\",\"int\",\"接口状态0-关闭1-开启\",\"method\",\"varchar(256)\",\"请求类型\",\"userId\",\"bigint\",\"创建人\",\"isDelete\",\"tinyint\",\"是否删除 0-未删除 1-删除\",\"createTime\",\"datetime\",\"创建时间\",\"updateTime\",\"datetime\",\"更新时间\",\"sql语句：\",\"-- auto-generated definition create table user ( id bigint auto_increment comment 'id' primary key, userAccount varchar(256) not null comment '账号', userPassword varchar(512) not null comment '密码', unionId varchar(256) null comment '微信开放平台id', mpOpenId varchar(256) null comment '公众号openId', userName varchar(256) null comment '用户昵称', userAvatar varchar(1024) null comment '用户头像', userProfile varchar(512) null comment '用户简介', userRole varchar(256) default 'user' not null comment '用户角色：user/admin/ban', createTime datetime default CURRENT_TIMESTAMP not null comment '创建时间', updateTime datetime default CURRENT_TIMESTAMP not null on update CURRENT_TIMESTAMP comment '更新时间', isDelete tinyint default 0 not null comment '是否删除' ) comment '用户' collate = utf8mb4_unicode_ci; create index idx_unionId on user (unionId); \"]},\"10\":{\"h\":\"功能实现\"},\"11\":{\"h\":\"项目初始化\"},\"12\":{\"h\":\"前端初始化\",\"t\":[\"ant design pro：https://pro.ant.design/zh-CN/docs/getting-started/ 创建前端项目 ：\",\"npm i @ant-design/pro-cli -g pro create myapp \",\"选择umi4 删除一些测试用的代码 配置eslint\",\"配置prettier格式化\"]},\"13\":{\"h\":\"后端初始化\",\"t\":[\"后端代码生成器：\"]},\"14\":{\"h\":\"前端开发\",\"t\":[\"修改OpenAPI插件配置 ,位置 config/config.ts：\",\"/** * @name openAPI 插件的配置 * @description 基于 openapi 的规范生成serve 和mock，能减少很多样板代码 * @doc https://pro.ant.design/zh-cn/docs/openapi/ */openAPI: [ { requestLibPath: \\\"import { request } from '@umijs/max'\\\", schemaPath: 'http://localhost:8101/api/v2/api-docs', // 本地开发时使用 projectName: 'yunfei-api-back', }, ], \",\"此时执行\\\"openapi\\\": \\\"max openapi\\\",命令可以得到API生成的接口代码\",\"配置请求统一处理： 将requestErrorConfig 进行重命名为requestConfig\",\"统一请求\",\"export const requestConfig: RequestConfig = { baseURL: 'http://localhost:8101', } \",\"修改登录逻辑：\",\"const handleSubmit = async (values: API.UserLoginRequest) => { try { // 登录 console.log('values:', values); const res: API.BaseResponseLoginUserVO_ = await userLoginUsingPost({ ...values }); if (res.code === 0) { const defaultLoginSuccessMessage = '登录成功！'; message.success(defaultLoginSuccessMessage); await fetchUserInfo(); const urlParams = new URL(window.location.href).searchParams; history.push(urlParams.get('redirect') || '/'); setInitialState({ loginUser: res.data, }); return; } else { throw new Error(res.message); } } catch (error) { const defaultLoginFailureMessage = '登录失败，请重试！'; console.log(error); message.error(defaultLoginFailureMessage); } }; \",\"此时可以登录成功 ，但是页面无法跳转 ，因为ant design pro框架会在每个页面加载的时候先去调用查询当前 用户的接口 ，获取用户信息。 修改app.tsx代码：\",\"interface InitialState { loginUser?: API.LoginUserVO; fetchUserInfo?: () => Promise<any>; settings?: Partial<LayoutSettings>; } /** * @see https://umijs.org/zh-CN/plugins/plugin-initial-state * */export async function getInitialState(): Promise<InitialState> { //当页面首次加载时，获取用户信息 const state: InitialState = { loginUser: undefined, }; const fetchUserInfo = async () => { try { const res = await getLoginUserUsingGet(); if (res.data) { return res.data; } } catch (error) { history.push(loginPath); } console.log('fetchUserInfo', state); return undefined; }; // 白名单里面，直接返回 const { location } = history; console.log('cxk') if (WHITE_LIST.includes(location.pathname)) { return state; } const currentUser = await fetchUserInfo(); console.log('currentUser', currentUser); return { loginUser: currentUser, fetchUserInfo: fetchUserInfo, settings: defaultSettings as Partial<LayoutSettings>, }; } \",\"编写ProTable表格代码,定义每列的内容,主要修改request请求参数类型以及返回值类型要对应 ：\",\" const columns: ProColumns<API.InterfaceInfo>[] = [ { title: '接口名称', dataIndex: 'name', valueType: 'text', formItemProps: { rules: [{ required: true, }] } }, { title: '描述', dataIndex: 'description', valueType: 'textarea', }, { title: '请求方法', dataIndex: 'method', valueType: 'text', }, { title: 'url', dataIndex: 'url', valueType: 'text', }, { title: '请求参数', dataIndex: 'requestParams', valueType: 'jsonCode', }, { title: '请求头', dataIndex: 'requestHeader', valueType: 'jsonCode', }, { title: '响应头', dataIndex: 'responseHeader', valueType: 'jsonCode', }, { title: '状态', dataIndex: 'status', hideInForm: true, valueEnum: { 0: { text: '关闭', status: 'Default', }, 1: { text: '开启', status: 'Processing', }, }, }, { title: '操作', dataIndex: 'option', valueType: 'option', render: (_, record) => [ <a key=\\\"config\\\" onClick={() => { handleUpdateModalVisible(true); setCurrentRow(record); }} > 修改 </a>, record.status === 0 ? <a key=\\\"config\\\" onClick={() => { handleOnline(record); }} > 发布 </a> : null, record.status === 1 ? <Button type=\\\"text\\\" key=\\\"config\\\" danger onClick={() => { handleOffline(record); }} > 下线 </Button> : null, <Button type=\\\"text\\\" key=\\\"config\\\" danger onClick={() => { handleRemove(record); }} > 删除 </Button>, ], }, ]; <ProTable<API.RuleListItem, API.PageParams> headerTitle={'查询表格'} actionRef={actionRef} rowKey=\\\"key\\\" search={{ labelWidth: 120, }} toolBarRender={() => [ <Button type=\\\"primary\\\" key=\\\"primary\\\" onClick={() => { handleModalVisible(true); }} > <PlusOutlined/> 新建 </Button>, ]} request={async ( params, sort: Record<string, SortOrder>, filter: Record<string, React.ReactText[] | null>, ) => { const res: any = await listInterfaceInfoByPageUsingGET({ ...params, }); if (res?.data) { return { data: res?.data.records || [], success: true, total: res?.data.total || 0, }; } else { return { data: [], success: false, total: 0, }; } }} columns={columns} rowSelection={{ onChange: (_, selectedRows) => { setSelectedRows(selectedRows); }, }} /> \",\"封装创建接口模态框CreateModal.tsx：\",\"export type Props = { columns: ProColumns<API.InterfaceInfo>[]; onCancel: () => void; onSubmit: (values: API.InterfaceInfo) => Promise<void>; visible: boolean; }; const CreateModal: React.FC<Props> = (props) => { const { visible, columns, onCancel, onSubmit } = props; return ( <Modal visible={visible} footer={null} onCancel={() => onCancel?.()}> <ProTable type=\\\"form\\\" columns={columns} onSubmit={async (value) => { onSubmit?.(value); }} /> </Modal> ); }; export default CreateModal; \",\"使用组件：\",\"const [createModalVisible, handleModalVisible] = useState<boolean>(false); const handleAdd = async (fields: API.InterfaceInfo) => { const hide = message.loading('正在添加'); try { await addInterfaceInfoUsingPOST({ ...fields, }); hide(); message.success('创建成功'); handleModalVisible(false); return true; } catch (error: any) { hide(); message.error('创建失败，' + error.message); return false; } }; <CreateModal columns={columns} onCancel={() => { handleModalVisible(false); }} onSubmit={(values) => { handleAdd(values); }} visible={createModalVisible} /> \",\"修改：\",\" export type Props = { values: API.InterfaceInfo; columns: ProColumns<API.InterfaceInfo>[]; onCancel: () => void; onSubmit: (values: API.InterfaceInfo) => Promise<void>; visible: boolean; }; const UpdateModal: React.FC<Props> = (props) => { const { values, visible, columns, onCancel, onSubmit } = props; const formRef = useRef<ProFormInstance>(); useEffect(() => { if (formRef) { formRef.current?.setFieldsValue(values); } }, [values]) return ( <Modal visible={visible} footer={null} onCancel={() => onCancel?.()}> <ProTable type=\\\"form\\\" formRef={formRef} columns={columns} onSubmit={async (value) => { onSubmit?.(value); }} /> </Modal> ); }; export default UpdateModal; \",\"需要使用 useEffect来监听值的变化来给表格设置值\"]},\"15\":{\"h\":\"SDK开发\"},\"16\":{\"h\":\"模拟接口项目开发\",\"t\":[\"yunfei-api-interface 主要提供模拟接口：\",\"@RestController @RequestMapping(\\\"/name\\\") public class NameController { @GetMapping(\\\"/get\\\") public String getNameByGet(String name, HttpServletRequest request) { System.out.println(request.getHeader(\\\"yunfei\\\")); return \\\"GET 你的名字是\\\" + name; } @PostMapping(\\\"/post\\\") public String getNameByPost(@RequestParam String name) { return \\\"POST 你的名字是\\\" + name; } @PostMapping(\\\"/user\\\") public String getUsernameByPost(@RequestBody User user, HttpServletRequest request) { String result = \\\"POST 用户名字是\\\" + user.getUsername(); return result; } } \",\"再开发一个Client来调用这些接口 hutool工具库：https://doc.hutool.cn/pages/index/\",\"public class YunfeiApiClient { public static void main(String[] args) { YunfeiApiClient client = new YunfeiApiClient(); client.getNameByGet(\\\"yunfei\\\"); client.getNameByPost(\\\"yunfei\\\"); User user = new User(); user.setUsername(\\\"yunfei\\\"); client.getUsernameByPost(user); } public String getNameByGet(String name) { HashMap<String, Object> map = new HashMap<>(); map.put(\\\"name\\\", name); String res = HttpUtil.get(\\\"http://localhost:10002/api/name/get\\\", map); System.out.println(res); return res; } public String getNameByPost(String name) { HashMap<String, Object> map = new HashMap<>(); map.put(\\\"name\\\", name); String res = HttpUtil.post(\\\"http://localhost:10002/api/name/post\\\", map); System.out.println(res); return res; } public String getUsernameByPost(User user) { String json = JSONUtil.toJsonStr(user); String res = HttpRequest.post(\\\"http://localhost:10002/api/name/user\\\").body(json).execute().body(); System.out.println(res); return res; } } \"]},\"17\":{\"h\":\"API签名认证\",\"t\":[\"本质：\",\"签发签名\",\"使用签名（校验签名）\",\"为什么需要？\",\"保证安全性，不能随便一个人调用\",\"怎么实现？ accessKey:调用的标识 secretKey：密钥 密钥 不要在服务器之间直接传递，有可能被拦截 加密方式：对称加密 、非对称加密、md5加密（不可解密）\",\"用户参数+密钥=> 签名算法 =>不可解密的值 怎么知道这个签名对不对 ？ 服务端用一摸一样的参数和 算法生成签名，只要和用户传的一致，就表示一致\",\"怎么防止请求重放？\",\"加nonce随机数。每个请求只能用一次，服务端要保存用过的随机数\",\"加timestamp时间戳，校验时间戳是否过期\",\"签名工具类：\",\"public class SignUtils { public static String genSign(String body, String secretKey) { Digester digester = new Digester(DigestAlgorithm.SHA256); String content = body + \\\".\\\" + secretKey; return digester.digestHex(content); } } \",\"在发起请求的代码中 ApiClient：\",\" String accessKey; String secretKey; public YunfeiApiClient(String accessKey, String secretKey) { this.accessKey = accessKey; this.secretKey = secretKey; } private Map<String, String> getHeaderMap(String body) { Map<String, String> headerMap = new HashMap<>(); headerMap.put(\\\"accessKey\\\", accessKey); //一定不能直接传递 secretKey// headerMap.put(\\\"secretKey\\\", secretKey); headerMap.put(\\\"nonce\\\", RandomUtil.randomNumbers(4)); headerMap.put(\\\"timestamp\\\", String.valueOf(System.currentTimeMillis())); headerMap.put(\\\"sign\\\", SignUtils.genSign(body, secretKey)); headerMap.put(\\\"body\\\", body); return headerMap; } public String getUsernameByPost(User user) { String json = JSONUtil.toJsonStr(user); String res = HttpRequest.post(\\\"http://localhost:10002/api/name/user\\\") .addHeaders(getHeaderMap(json)) .body(json).execute() .body(); System.out.println(res); return res; } \",\"接口校验密钥,这里应该从数据库查：\",\"@PostMapping(\\\"/user\\\") public String getUsernameByPost(@RequestBody User user, HttpServletRequest request) { String accessKey = request.getHeader(\\\"accessKey\\\"); String nonce = request.getHeader(\\\"nonce\\\"); String timestamp = request.getHeader(\\\"timestamp\\\"); String sign = request.getHeader(\\\"sign\\\"); String body = request.getHeader(\\\"body\\\"); String serverSign = SignUtils.genSign(body, \\\"abcdefgh\\\"); if (!sign.equals(serverSign)) { throw new RuntimeException(\\\"无权限\\\"); } xxx } \"]},\"18\":{\"h\":\"客户端SDK开发\",\"t\":[\"如果客户每次都要写这么多代码，会变得很麻烦，因此需要写SDK，让用户输入accessKey和secretKey就可以直接调用 开发一个简单的SDK，开发者只需要关心调用哪些接口 ，传递哪些参数，就跟调用自己的代码一样简单。可以直接在application.yml中写配置，自动创建客户端\",\"开发starter步骤：\",\"新建一个项目，添加依赖\",\" <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-configuration-processor</artifactId> <optional>true</optional> </dependency> \",\"这个插件 可以自动生成配置代码提示 一定要删除maven 的xml文件中的build内容 客户端配置\",\"/** * 客户端配置 */ @Configuration @ConfigurationProperties(\\\"yunfeiapi.client\\\") @Data @ComponentScan public class YunfeiApiClientConfig { private String accessKey; private String secretKey; @Bean public YunfeiApiClient yunfeiapiClient() { return new YunfeiApiClient(accessKey, secretKey); } } \",\"将之前的内容复制到新的sdk模块\",\"在resourcs目录下面创建一个 META-INF文件夹，里面放spring.factories文件，写上配置类\",\"# spring boot starter org.springframework.boot.autoconfigure.EnableAutoConfiguration=com.yunfei.yunfeiapiclientsdk.YunfeiApiClientConfig \",\"在将改项目进行打包install到本地 ，注意不要启动测试，因为没有主类了。\"]},\"19\":{\"h\":\"测试sdk是否可用\",\"t\":[\"在interface模块中加入sdk依赖\",\" <dependency> <groupId>com.yunfei</groupId> <artifactId>yunfeiapi-client-sdk</artifactId> <version>0.0.1</version> </dependency> \",\"在配置文件中添加配置：\",\"yunfeiapi: client: access-key: yunfei secret-key: abcdefgh \",\"测试：\",\"因为接口调用需要访问10002接口开放的接口，因此后台需要 运行这个服务 ，然后 再启动测试\",\"@SpringBootTest class yunfeiApiInterfaceApplicationTests { @Resource private YunfeiApiClient yunfeiapiClient; @Test void contextLoads() { String result = yunfeiapiClient.getNameByGet(\\\"yunfei\\\"); User user = new User(); user.setUsername(\\\"woshinibaba\\\"); String usernameByPost = yunfeiapiClient.getUsernameByPost(user); System.out.println(result); System.out.println(usernameByPost); } } \",\"运行结果：\",\"将secretKey换为错误的secret-key: abcdefghdaw\"]},\"20\":{\"h\":\"接口功能管理\"},\"21\":{\"h\":\"接口发布/下线\",\"t\":[\"发布接口 ：\",\"校验接口是否存在\",\"判断接口是否可用\",\"修改数据库中的状态字段为1\",\"下线接口（仅管理员）\",\"检验接口是否存在\",\"修改状态字段为0\",\"后端代码 ：\",\" /** * 发布 * * @param idRequest * @param request * @return */ @PostMapping(\\\"/online\\\") @AuthCheck(mustRole = \\\"admin\\\") public BaseResponse<Boolean> onlineInterfaceInfo(@RequestBody IdRequest idRequest, HttpServletRequest request) { if (idRequest == null || idRequest.getId() <= 0) { throw new BusinessException(ErrorCode.PARAMS_ERROR); } long id = idRequest.getId(); // 判断是否存在 InterfaceInfo oldInterfaceInfo = interfaceInfoService.getById(id); if (oldInterfaceInfo == null) { throw new BusinessException(ErrorCode.NOT_FOUND_ERROR); } // 判断该接口是否可以调用 com.yunfei.yunfeiapiclientsdk.model.User user = new com.yunfei.yunfeiapiclientsdk.model.User(); user.setUsername(\\\"test\\\"); String username = yunfeiapiClient.getUsernameByPost(user); if (StringUtils.isBlank(username)) { throw new BusinessException(ErrorCode.SYSTEM_ERROR, \\\"接口验证失败\\\"); } // 仅本人或管理员可修改 InterfaceInfo interfaceInfo = new InterfaceInfo(); interfaceInfo.setId(id); interfaceInfo.setStatus(InterfaceInfoStatusEnum.ONLINE.getValue()); boolean result = interfaceInfoService.updateById(interfaceInfo); return ResultUtils.success(result); } /** * 下线 * * @param idRequest * @param request * @return */ @PostMapping(\\\"/offline\\\") @AuthCheck(mustRole = \\\"admin\\\") public BaseResponse<Boolean> offlineInterfaceInfo(@RequestBody IdRequest idRequest, HttpServletRequest request) { if (idRequest == null || idRequest.getId() <= 0) { throw new BusinessException(ErrorCode.PARAMS_ERROR); } long id = idRequest.getId(); // 判断是否存在 InterfaceInfo oldInterfaceInfo = interfaceInfoService.getById(id); if (oldInterfaceInfo == null) { throw new BusinessException(ErrorCode.NOT_FOUND_ERROR); } // 仅本人或管理员可修改 InterfaceInfo interfaceInfo = new InterfaceInfo(); interfaceInfo.setId(id); interfaceInfo.setStatus(InterfaceInfoStatusEnum.OFFLINE.getValue()); boolean result = interfaceInfoService.updateById(interfaceInfo); return ResultUtils.success(result); } \"]},\"22\":{\"h\":\"浏览接口 /查看接口文档，申请签名\",\"t\":[\"主页接口浏览页面：\",\"const Index: React.FC = () => { const [loading, setLoading] = useState(false); const [list, setList] = useState<API.InterfaceInfo[]>([]); const [total, setTotal] = useState<number>(0); const loadData = async (current = 1, pageSize = 5) => { setLoading(true); try { const res = await listInterfaceInfoByPageUsingGET({ current, pageSize, }); setList(res?.data?.records ?? []); setTotal(res?.data?.total ?? 0); } catch (error: any) { message.error('请求失败，' + error.message); } setLoading(false); }; // 这个函数会在组件挂载后执行一次 useEffect(() => { loadData(); }, []); return ( <PageContainer title=\\\"在线接口开放平台\\\"> <List className=\\\"my-list\\\" loading={loading} itemLayout=\\\"horizontal\\\" dataSource={list} renderItem={(item) => { const apiLink = `/interface_info/${item.id}`; return ( <List.Item actions={[<a key={item.id} href={apiLink}>查看</a>]}> <List.Item.Meta title={<a href={apiLink}>{item.name}</a>} description={item.description} /> </List.Item> ); }} pagination={{ // eslint-disable-next-line @typescript-eslint/no-shadow showTotal(total: number) { return '总数：' + total; }, pageSize: 5, total, onChange(page, pageSize) { loadData(page, pageSize); }, }} /> </PageContainer> ); }; \",\"页面效果 如下：\",\"查看接口文档：\",\"/** * 主页 * @constructor */ const Index: React.FC = () => { const [loading, setLoading] = useState(false); const [data, setData] = useState<API.InterfaceInfo>(); const [invokeRes, setInvokeRes] = useState<any>(); const [invokeLoading, setInvokeLoading] = useState(false); const params = useParams(); const loadData = async () => { if (!params.id) { message.error('参数不存在'); return; } setLoading(true); try { const res = await getInterfaceInfoByIdUsingGET({ id: Number(params.id), }); setData(res.data); } catch (error: any) { message.error('请求失败，' + error.message); } setLoading(false); }; useEffect(() => { loadData(); }, []); const onFinish = async (values: any) => { if (!params.id) { message.error('接口不存在'); return; } setInvokeLoading(true); try { const res = await invokeInterfaceInfoUsingPOST({ id: params.id, ...values, }); setInvokeRes(res.data); message.success('请求成功'); } catch (error: any) { message.error('操作失败，' + error.message); } setInvokeLoading(false); }; return ( <PageContainer title=\\\"查看接口文档\\\"> <Card> {data ? ( <Descriptions title={data.name} column={1}> <Descriptions.Item label=\\\"接口状态\\\">{data.status ? '开启' : '关闭'}</Descriptions.Item> <Descriptions.Item label=\\\"描述\\\">{data.description}</Descriptions.Item> <Descriptions.Item label=\\\"请求地址\\\">{data.url}</Descriptions.Item> <Descriptions.Item label=\\\"请求方法\\\">{data.method}</Descriptions.Item> <Descriptions.Item label=\\\"请求参数\\\">{data.requestParams}</Descriptions.Item> <Descriptions.Item label=\\\"请求头\\\">{data.requestHeader}</Descriptions.Item> <Descriptions.Item label=\\\"响应头\\\">{data.responseHeader}</Descriptions.Item> <Descriptions.Item label=\\\"创建时间\\\">{data.createTime}</Descriptions.Item> <Descriptions.Item label=\\\"更新时间\\\">{data.updateTime}</Descriptions.Item> </Descriptions> ) : ( <>接口不存在</> )} </Card> <Divider/> <Card title=\\\"在线测试\\\"> <Form name=\\\"invoke\\\" layout=\\\"vertical\\\" onFinish={onFinish}> <Form.Item label=\\\"请求参数\\\" name=\\\"userRequestParams\\\"> <Input.TextArea/> </Form.Item> <Form.Item wrapperCol={{span: 16}}> <Button type=\\\"primary\\\" htmlType=\\\"submit\\\"> 调用 </Button> </Form.Item> </Form> </Card> <Divider/> <Card title=\\\"返回结果\\\" loading={invokeLoading}> {invokeRes} </Card> </PageContainer> ); }; export default Index; \",\"分配签名： 在注册的时候分配用户的accessKey,secretKey\",\" // 3. 分配 accessKey, secretKey String accessKey = DigestUtil.md5Hex(SALT + userAccount + RandomUtil.randomNumbers(5)); String secretKey = DigestUtil.md5Hex(SALT + userAccount + RandomUtil.randomNumbers(8)); // 4. 插入数据 User user = new User(); user.setUserAccount(userAccount); user.setUserPassword(encryptPassword); user.setAccessKey(accessKey); user.setSecretKey(secretKey); boolean saveResult = this.save(user); \",\"扩展：用户可以申请更换签名\"]},\"23\":{\"h\":\"在线调试\",\"t\":[\"请求参数的类型：\",\"[ {\\\"name\\\":\\\"username\\\",\\\"type\\\":\\\"string\\\"} ] \",\"前端开发：\",\"const Index: React.FC = () => { const [loading, setLoading] = useState(false); const [data, setData] = useState<API.InterfaceInfo>(); const [invokeRes, setInvokeRes] = useState<any>(); const [invokeLoading, setInvokeLoading] = useState(false); const params = useParams(); const loadData = async () => { if (!params.id) { message.error('参数不存在'); return; } setLoading(true); try { const res = await getInterfaceInfoByIdUsingGET({ id: Number(params.id), }); setData(res.data); } catch (error: any) { message.error('请求失败，' + error.message); } setLoading(false); }; useEffect(() => { loadData(); }, []); const onFinish = async (values: any) => { if (!params.id) { message.error('接口不存在'); return; } setInvokeLoading(true); try { const res = await invokeInterfaceInfoUsingPOST({ id: params.id, ...values, }); setInvokeRes(res.data); message.success('请求成功'); } catch (error: any) { message.error('操作失败，' + error.message); } setInvokeLoading(false); }; return ( <PageContainer title=\\\"查看接口文档\\\"> <Card> {data ? ( <Descriptions title={data.name} column={1}> <Descriptions.Item label=\\\"接口状态\\\">{data.status ? '开启' : '关闭'}</Descriptions.Item> <Descriptions.Item label=\\\"描述\\\">{data.description}</Descriptions.Item> <Descriptions.Item label=\\\"请求地址\\\">{data.url}</Descriptions.Item> <Descriptions.Item label=\\\"请求方法\\\">{data.method}</Descriptions.Item> <Descriptions.Item label=\\\"请求参数\\\">{data.requestParams}</Descriptions.Item> <Descriptions.Item label=\\\"请求头\\\">{data.requestHeader}</Descriptions.Item> <Descriptions.Item label=\\\"响应头\\\">{data.responseHeader}</Descriptions.Item> <Descriptions.Item label=\\\"创建时间\\\">{data.createTime}</Descriptions.Item> <Descriptions.Item label=\\\"更新时间\\\">{data.updateTime}</Descriptions.Item> </Descriptions> ) : ( <>接口不存在</> )} </Card> <Divider/> <Card title=\\\"在线测试\\\"> <Form name=\\\"invoke\\\" layout=\\\"vertical\\\" onFinish={onFinish}> <Form.Item label=\\\"请求参数\\\" name=\\\"userRequestParams\\\"> <Input.TextArea/> </Form.Item> <Form.Item wrapperCol={{span: 16}}> <Button type=\\\"primary\\\" htmlType=\\\"submit\\\"> 调用 </Button> </Form.Item> </Form> </Card> <Divider/> <Card title=\\\"返回结果\\\" loading={invokeLoading}> {invokeRes} </Card> </PageContainer> ); }; export default Index; \",\"效果：\",\"优化：可以做类似knife4j的效果\",\"在线调试后端：\",\" /** * 测试调用 * * @param interfaceInfoInvokeRequest * @param request * @return */ @PostMapping(\\\"/invoke\\\") public BaseResponse<Object> invokeInterfaceInfo(@RequestBody InterfaceInfoInvokeRequest interfaceInfoInvokeRequest, HttpServletRequest request) { if (interfaceInfoInvokeRequest == null || interfaceInfoInvokeRequest.getId() <= 0) { throw new BusinessException(ErrorCode.PARAMS_ERROR); } long id = interfaceInfoInvokeRequest.getId(); String userRequestParams = interfaceInfoInvokeRequest.getUserRequestParams(); // 判断是否存在 InterfaceInfo oldInterfaceInfo = interfaceInfoService.getById(id); if (oldInterfaceInfo == null) { throw new BusinessException(ErrorCode.NOT_FOUND_ERROR); } if (oldInterfaceInfo.getStatus() == InterfaceInfoStatusEnum.OFFLINE.getValue()) { throw new BusinessException(ErrorCode.PARAMS_ERROR, \\\"接口已关闭\\\"); } User loginUser = userService.getLoginUser(request); String accessKey = loginUser.getAccessKey(); String secretKey = loginUser.getSecretKey(); YunfeiApiClient tempClient = new YunfeiApiClient(accessKey, secretKey); Gson gson = new Gson(); com.yunfei.yunfeiapiclientsdk.model.User user = gson.fromJson(userRequestParams, com.yunfei.yunfeiapiclientsdk.model.User.class); String usernameByPost = tempClient.getUsernameByPost(user); return ResultUtils.success(usernameByPost); } \"]},\"24\":{\"h\":\"系统架构优化\"},\"25\":{\"h\":\"统计用户调用接口次数\",\"t\":[\"开发接口调用次数统计，用户每次调用成功，次数+1\",\"业务流程：\",\"用户每次调用接口成功，次数+1\",\"给用户分配或用户自主申请接口调用次数\",\"用户接口关系表user_interface_info：\",\"字段\",\"类型\",\"说明\",\"id\",\"bigint\",\"主键\",\"userId\",\"bigint\",\"调用用户id\",\"interfaceInfoId\",\"bigint\",\"接口id\",\"totalNum\",\"int\",\"总调用次数\",\"leftNum\",\"int\",\"剩余调用次数\",\"status\",\"int\",\"0-正常 1-禁用\",\"createTime\",\"datetime\",\"创建时间\",\"updateTime\",\"datetime\",\"更新时间\",\"isDelete\",\"tinyint\",\"是否删除\"]},\"26\":{\"h\":\"接口次数+1\",\"t\":[\"后端代码：\",\" @Override public boolean invokeCount(long interfaceInfoId, long userId) { // 判断 if (interfaceInfoId <= 0 || userId <= 0) { throw new BusinessException(ErrorCode.PARAMS_ERROR); } UpdateWrapper<UserInterfaceInfo> updateWrapper = new UpdateWrapper<>(); updateWrapper.eq(\\\"interfaceInfoId\\\", interfaceInfoId); updateWrapper.eq(\\\"userId\\\", userId); // updateWrapper.gt(\\\"leftNum\\\", 0); updateWrapper.setSql(\\\"leftNum = leftNum - 1, totalNum = totalNum + 1\\\"); return this.update(updateWrapper); } \",\"如何在每次调用接口的时候统计次数？\",\"使用AOP\",\"网关\",\"AOP切面： 使用AOP切面的优点：独立于接口，在每个接口调用后统计次数+1 AOP切面的缺点：只存在于单个项目中，如果每个团队都要开发自己的模拟接口，那么都要写一个切面 网关： 统一去处理一些问题\"]},\"27\":{\"h\":\"API网关\",\"t\":[\"网关的作用：\",\"路由： 网关可以根据请求的目标地址将请求路由到相应的后端服务。\",\"鉴权： 网关可以对请求进行身份验证和权限验证，确保只有经过授权的用户可以访问特定资源。\",\"跨域： 网关可以处理跨域请求，允许客户端从不同的源（域）访问服务端资源。\",\"缓存： 网关可以缓存经常请求的数据，减少对后端服务的请求，提高系统性能。\",\"流量染色： 网关可以对流量进行标记，以便后续的分析和处理、一般在请求头中加新的请求头。\",\"访问控制： 网关可以根据配置规则对请求进行访问控制，包括允许或拒绝特定条件下的请求、DDos。\",\"统一业务处理： 网关可以对请求进行统一的预处理和后处理，如请求参数处理、响应格式统一等。\",\"发布控制： 网关可以控制服务的发布，确保新版本的服务在就绪后才会接收到流量。\",\"负载均衡： 网关可以将请求分发到多个后端服务实例，以平衡负载并提高系统的可用性和性能。\",\"接口保护：\",\"限制请求：对请求进行限制，以防止恶意或异常请求。\",\"信息脱敏：对返回给客户端的数据进行脱敏处理，保护用户隐私。\",\"降级（熔断）：在系统负载过高或出现故障时，暂时关闭或降级服务，以防止系统崩溃。\",\"限流：对请求进行限流，以避免过载和性能下降。（令牌桶算法、漏桶算法、RedisLimitHandler）\",\"超时时间：设置请求超时时间，防止长时间的请求占用资源。\",\"统一日志： 网关可以记录所有请求和响应的日志，方便监控和故障排查。\",\"统一文档： 网关可以生成和管理服务的文档，提供统一的接口文档给开发者参考。\",\"负载均衡：uri从固定地址改成：lb:xxx 发布控制：灰度发布，比如上线新接口，先给新接口分配20%的流量，老接口80%，再慢慢调整比重。\",\"网关分类：\",\"全局网关（接入层网关）：作用是负载均衡、请求日志等，不和业务逻辑绑定\",\"业务网关（微服务网关）：会有一些业务逻辑，作用是将请求转发到不同的业务/项目/接口/服务\",\"实现：\",\"Nginx(全局网关)、Kong网关(API网关)\",\"Spring Cloud Gateway(取代了Zuul)性能高、可以用Java代码来写逻辑\",\"Spring Cloud Gateway:https://spring.io/projects/spring-cloud-gateway/\",\"路由（根据什么条件，转发请求到哪里) 断言：一组规则、条件，用来确定如何转发路由 过滤器：对请求进行一系列的处理，比如添加请求头、添加请求参数\",\"处理流程：\",\"客户端发起请求\",\"Handler Mapping:根据断言，去将请求转发到对应的路由\",\"Web Handler:处理请求(一层层过滤器)\",\"实际调用\",\"两种配置方式：\",\"编程式\",\"配置式\",\"网关全部日志开启：\",\"logging: level: org: springframework: cloud: gateway: trace \",\"断言：\",\"After在x时间之后\",\"Before在x时间之前\",\"Between在x时间之间\",\"请求类别\",\"请求头（包含Cookie)\",\"查询参数\",\"客户端地址\",\"权重\",\"过滤器： 基本功能：对请求头、请求参数、响应头的增删改查\",\"添加请求头\",\"添加请求参数\",\"添加响应头\",\"降级\",\"限流\",\"重试\",\"具体实现： 前缀匹配路由\",\"所有路径为:/api/**的请求进行转发，转发到 http://localhost:10002/api/**\",\"比如网关请求http://localhost:10001/api/name/get?name=cxk转发到http://localhost:10002/api/name/get?name=cxk\",\"interface后端端口为：10002 网关后端端口为：10001\",\"routes: - id: api_route uri: http://localhost:10002 predicates: - Path=/api/** filters: - AddRequestHeader=yunfei, swag - AddRequestParameter=name, dog - name: CircuitBreaker args: name: myCircuitBreaker fallbackUri: forward:/fallback \",\"@GetMapping(\\\"/get\\\") public String getNameByGet(String name, HttpServletRequest request) { System.out.println(request.getHeader(\\\"yunfei\\\")); String name1 = request.getParameter(\\\"name\\\"); System.out.println(\\\"name1=\\\"+name1); return \\\"GET 你的名字是\\\" + name; } \",\"降级：\",\" <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-circuitbreaker-reactor-resilience4j</artifactId> </dependency> \",\"使用GlobalFilter全局拦截处理\",\"业务逻辑：\",\"用户发送请求到API网关\",\"请求日志\",\"(黑白名单)\",\"用户鉴权（判断ak、sk是否合法）\",\"请求的模拟接口是否存在？\",\"请求转发，调用模拟接口\",\"响应日志\",\"调用成功，接口调用次数+1\",\"调用失败，返回一个规范的错误码\",\"具体实现： 前缀匹配路由：所有路径为:/api/的请求进行转发，转发到 http://localhost:10002/api/**\",\"比如网关请求http://localhost:10001/api/name/get?name=cxk转发到http://localhost:10002/api/name/get?name=cxk\",\"interface后端端口为：10002 网关后端端口为：10001\",\"gateway: default-filters: - AddResponseHeader=source, yunfei routes: - id: api_route uri: http://localhost:10002 predicates: - Path=/api/** \",\"网关代码：\",\"/** * 全局过滤 * * * */@Slf4j @Component public class CustomGlobalFilter implements GlobalFilter, Ordered { @DubboReference private InnerUserService innerUserService; @DubboReference private InnerInterfaceInfoService innerInterfaceInfoService; @DubboReference private InnerUserInterfaceInfoService innerUserInterfaceInfoService; private static final List<String> IP_WHITE_LIST = Arrays.asList(\\\"127.0.0.1\\\",\\\"0:0:0:0:0:0:0:1%0\\\"); private static final String INTERFACE_HOST = \\\"http://localhost:10002\\\"; @Override public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) { // 1. 请求日志 ServerHttpRequest request = exchange.getRequest(); String path = INTERFACE_HOST + request.getPath().value(); String method = request.getMethod().toString(); log.info(\\\"请求唯一标识：\\\" + request.getId()); log.info(\\\"请求路径：\\\" + path); log.info(\\\"请求方法：\\\" + method); log.info(\\\"请求参数：\\\" + request.getQueryParams()); String sourceAddress = request.getLocalAddress().getHostString(); log.info(\\\"请求来源地址：\\\" + sourceAddress); log.info(\\\"请求来源地址：\\\" + request.getRemoteAddress()); ServerHttpResponse response = exchange.getResponse(); // 2. 访问控制 - 黑白名单 if (!IP_WHITE_LIST.contains(sourceAddress)) { response.setStatusCode(HttpStatus.FORBIDDEN); return response.setComplete(); } // 3. 用户鉴权（判断 ak、sk 是否合法） HttpHeaders headers = request.getHeaders(); String accessKey = headers.getFirst(\\\"accessKey\\\"); String nonce = headers.getFirst(\\\"nonce\\\"); String timestamp = headers.getFirst(\\\"timestamp\\\"); String sign = headers.getFirst(\\\"sign\\\"); String body = headers.getFirst(\\\"body\\\"); // todo 实际情况应该是去数据库中查是否已分配给用户 User invokeUser = null; try { invokeUser = innerUserService.getInvokeUser(accessKey); } catch (Exception e) { log.error(\\\"getInvokeUser error\\\", e); } if (invokeUser == null) { return handleNoAuth(response); } // if (!\\\"yunfei\\\".equals(accessKey)) { // return handleNoAuth(response); // } if (Long.parseLong(nonce) > 10000L) { return handleNoAuth(response); } // 时间和当前时间不能超过 5 分钟 Long currentTime = System.currentTimeMillis() / 1000; final Long FIVE_MINUTES = 60 * 5L; if ((currentTime - Long.parseLong(timestamp)) >= FIVE_MINUTES) { return handleNoAuth(response); } // 实际情况中是从数据库中查出 secretKey String secretKey = invokeUser.getSecretKey(); String serverSign = SignUtils.genSign(body, secretKey); if (sign == null || !sign.equals(serverSign)) { return handleNoAuth(response); } // 4. 请求的模拟接口是否存在，以及请求方法是否匹配 InterfaceInfo interfaceInfo = null; try { interfaceInfo = innerInterfaceInfoService.getInterfaceInfo(path, method); } catch (Exception e) { log.error(\\\"getInterfaceInfo error\\\", e); } if (interfaceInfo == null) { return handleNoAuth(response); } } /** * 处理响应 * * @param exchange * @param chain * @return */ public Mono<Void> handleResponse(ServerWebExchange exchange, GatewayFilterChain chain, long interfaceInfoId, long userId) { try { ServerHttpResponse originalResponse = exchange.getResponse(); // 缓存数据的工厂 DataBufferFactory bufferFactory = originalResponse.bufferFactory(); // 拿到响应码 HttpStatus statusCode = originalResponse.getStatusCode(); if (statusCode == HttpStatus.OK) { // 装饰，增强能力 ServerHttpResponseDecorator decoratedResponse = new ServerHttpResponseDecorator(originalResponse) { // 等调用完转发的接口后才会执行 @Override public Mono<Void> writeWith(Publisher<? extends DataBuffer> body) { log.info(\\\"body instanceof Flux: {}\\\", (body instanceof Flux)); if (body instanceof Flux) { Flux<? extends DataBuffer> fluxBody = Flux.from(body); // 往返回值里写数据 // 拼接字符串 return super.writeWith( fluxBody.map(dataBuffer -> { // 7. 调用成功，接口调用次数 + 1 invokeCount try { innerUserInterfaceInfoService.invokeCount(interfaceInfoId, userId); } catch (Exception e) { log.error(\\\"invokeCount error\\\", e); } byte[] content = new byte[dataBuffer.readableByteCount()]; dataBuffer.read(content); DataBufferUtils.release(dataBuffer);//释放掉内存 // 构建日志 StringBuilder sb2 = new StringBuilder(200); List<Object> rspArgs = new ArrayList<>(); rspArgs.add(originalResponse.getStatusCode()); String data = new String(content, StandardCharsets.UTF_8); //data sb2.append(data); // 打印日志 log.info(\\\"响应结果：\\\" + data); return bufferFactory.wrap(content); })); } else { // 8. 调用失败，返回一个规范的错误码 log.error(\\\"<--- {} 响应code异常\\\", getStatusCode()); } return super.writeWith(body); } }; // 设置 response 对象为装饰过的 return chain.filter(exchange.mutate().response(decoratedResponse).build()); } return chain.filter(exchange); // 降级处理返回数据 } catch (Exception e) { log.error(\\\"网关处理响应异常\\\" + e); return chain.filter(exchange); } } @Override public int getOrder() { return -1; } public Mono<Void> handleNoAuth(ServerHttpResponse response) { response.setStatusCode(HttpStatus.FORBIDDEN); return response.setComplete(); } } \"]},\"28\":{\"h\":\"分布式改造\",\"t\":[\"网关业务逻辑： 问题：网关项目比较纯净，没有操作数据库的包，并且还要调用我们之前写过的代码？复制粘贴维护麻烦。 理想：直接请求到其他项目的方法\",\"怎么调用其他项目的方法\",\"复制代码，环境，依赖\",\"HTTP请求，提供一个接口，供其他项目调用\",\"RPC\",\"把公共代码打jar包，其他项目引用，客户端SDK\",\"HTTP请求怎么调用\",\"提供方开发一个接口\",\"调用方使用HTTP请求\",\"RPC远程调用 作用：像调用本地方法一样调用远程方法 对开发者更透明，减少了很多额沟通成本 RPC向远程服务器发送请求时，未必要使用HTTP协议\"]},\"29\":{\"h\":\"Dubbo框架\",\"t\":[\"https://cn.dubbo.apache.org/zh-cn/overview/quickstart/\",\"两种使用方式：\",\"Spring Boot代码（注解+编程式）：写Jav妾口，服务提供者和消费者都去引用这个接口\",\"IDL(接口调用语言)：创建一个公共的接口定义文件，服务提供者和消费者读取这个文件。优点是跨语言，所有的框架都认识\",\"整合运用:\",\"backend项目作为服务提供者，提供3个方法：\",\"实际情况应该是去数据库中查是否已分配给用户\",\"从数据库中查询模拟接口是否存在，以及请求方法是否匹配（还可以校验请求参数）\",\"调用成功，接口调用次数+1 invokeCount\",\"gateway项目作为服务调用者，调用这3个方法\",\"nacos做注册中心\",\"注意：\",\"服务接口类必须要在同一个包下，建议是抽象出一个公共项目（放接口、实体类等）\",\"设置注解（比如启动类的EnableDubbo、接口大现类和Bean引用的注解）\",\"添加配置\",\"服务调用项目和提供者项目尽量引入相同的依赖和配置\",\"yunfei-api-back项目中：\",\" <!-- https://mvnrepository.com/artifact/org.apache.dubbo/dubbo --> <dependency> <groupId>org.apache.dubbo</groupId> <artifactId>dubbo</artifactId> <version>3.0.9</version> </dependency> <dependency> <groupId>com.alibaba.nacos</groupId> <artifactId>nacos-client</artifactId> <version>2.1.0</version> </dependency> \",\"配置\",\"dubbo: application: name: dubbo-springboot-demo-provider protocol: name: dubbo port: -1 registry: id: nacos-registry address: nacos://localhost:8848 \",\"yunfei-api-gateway模块下面：\",\" <!-- https://mvnrepository.com/artifact/org.apache.dubbo/dubbo --> <dependency> <groupId>org.apache.dubbo</groupId> <artifactId>dubbo</artifactId> <version>3.0.9</version> </dependency> <dependency> <groupId>com.alibaba.nacos</groupId> <artifactId>nacos-client</artifactId> <version>2.1.0</version> </dependency> \",\"配置：\",\"dubbo: application: name: dubbo-springboot-demo-provider protocol: name: dubbo port: -1 registry: id: nacos-registry address: nacos://localhost:8848 \",\"主类开启，每个要远程调用的主类都要\",\"@EnableDubbo public class MyApplication \",\"在公共模块中编写接口yunfei-api-common：\",\"public interface InnerInterfaceInfoService { /** * 从数据库中查询模拟接口是否存在（请求路径、请求方法、请求参数） */ InterfaceInfo getInterfaceInfo(String path, String method); } public interface InnerUserInterfaceInfoService { /** * 调用接口统计 * @param interfaceInfoId * @param userId * @return */ boolean invokeCount(long interfaceInfoId, long userId); } public interface InnerUserService { /** * 数据库中查是否已分配给用户秘钥（accessKey） * @param accessKey * @return */ User getInvokeUser(String accessKey); } \",\"在yunfei-api-back项目中实现这些接口的具体内容。\",\"@DubboService public class InnerInterfaceInfoServiceImpl implements InnerInterfaceInfoService \",\"在网关项目中就可以进行调用了：\",\"@DubboReference private InnerUserService innerUserService; \"]},\"30\":{\"c\":[\"项目实战\",\"API开放平台\"]},\"31\":{\"c\":[\"项目实战\",\"API开放平台\"]},\"32\":{\"h\":\"在线聊天室\",\"t\":[\"见链接: http://chat.yunfei.plus\"]},\"33\":{\"h\":\"手撕RPC框架\",\"t\":[\"见链接: http://rpc.yunfei.plus\"]},\"34\":{\"h\":\"资源目录页\"},\"35\":{\"c\":[\"目录\",\"导航\"]},\"36\":{\"c\":[\"目录\",\"导航\"]},\"37\":{\"h\":\"使用README.md做左侧标题\"},\"38\":{\"c\":[\"系统设计\"]},\"39\":{\"c\":[\"系统设计\"]},\"40\":{\"h\":\"不实用README.md做标题\"},\"41\":{\"c\":[\"实战项目\"]},\"42\":{\"c\":[\"实战项目\"]},\"43\":{\"h\":\"博客搭建\",\"t\":[\"配置我应该都集中放在custom.ts里了\",\"图片最好上传图床吧，picgo+sm.ms\",\"picgo下载地址：https://picgo.github.io/PicGo-Doc/zh/guide/#应用概述\",\"picgo+sm.ms\",\"![image-20240511101457693]\",\"Image Upload - SM.MS - Simple Free Image Hosting\",\"Typora + PicGo + SM.MS, 全免费笔记软件+图床的安装与配置_mac typora+picgo+sm.ms-CSDN博客\"]},\"44\":{\"h\":\"遇到的问题：\",\"t\":[\"typora中无法验证上传，我博客上搜了一圈，发现可以不管，直接在新建文件里面试就可以了\",\"安装教程：\",\"Typora+PicGo，最好用的Markdown+最好用的图床工具！-CSDN博客\",\"https://github.com/yunfeidog/daily-big-company-interview-questions 这个你可以每天去牛客上面做一场面试题，然后写答案提交 PR\",\"然后接下来搭建自己的博客\",\"本地运行命令：pnpm run docs:dev\"]},\"45\":{\"c\":[\"每日一记\"]},\"46\":{\"c\":[\"学习记录\"]},\"47\":{\"h\":\"2024年6月14日面试\",\"t\":[\"北京科蓝\",\"java有几种基本数据类型，分别是什么\",\"Java有八种基本数据类型，分别是：byte, short, int, long, float, double, char, boolean。\",\"java线程池参数\",\"Java线程池的参数包括核心线程数、最大线程数、线程存活时间、任务队列、拒绝策略等。\",\"java中object对象转string的方法有几种\",\"Java中Object对象转换为String的方法有两种：使用toString()方法和String类的valueOf()方法。\",\"java线程的5种状态\",\"Java线程的五种状态包括新建（New）、就绪（Runnable）、运行（Running）、阻塞（Blocked）、终止（Terminated）。\",\"数据库怎么加索引\",\"数据库加索引可以通过CREATE INDEX语句来实现，语法是 CREATE INDEX index_name ON table_name (column1, column2, ...);。\",\"数据库创建序列和增加表列数\",\"数据库创建序列可以使用CREATE SEQUENCE语句，增加表列数可以使用ALTER TABLE ADD COLUMN语句。\",\"数据库是否会死锁\",\"数据库可能会发生死锁，特别是在并发操作时，当多个事务相互持有对方需要的资源而无法释放时。\",\"死锁发生的情况\",\"死锁发生的情况通常包括两个或多个事务互相持有对方需要的锁，并且彼此等待对方释放锁。这样会导致它们都无法继续执行，造成系统假死。\",\"linux的内存使用情况查看\",\"Linux中查看内存使用情况可以使用命令free -m或者cat /proc/meminfo。\",\"linux查看进程号\",\"Linux中查看进程号可以使用命令ps或者pgrep。\",\"cookie和session.是什么，有什么区别\",\"Cookie和Session都是用来在客户端和服务器之间保持状态的机制。主要区别在于：\",\"Cookie存储在客户端，Session存储在服务器。\",\"Cookie数据在客户端存储，通过HTTP请求发送到服务器，而Session数据存储在服务器端。\",\"Cookie数据可以设置过期时间，而Session通常在用户关闭浏览器或超时时过期。\",\"安全性上，Session相对于Cookie更安全，因为Session数据存储在服务器端，客户端无法直接修改。\",\"springboot的配置文件有哪几种，加载顺序\",\"Spring Boot的配置文件主要有application.properties和application.yml两种格式，并且加载顺序是先加载properties，再加载yml，后加载的会覆盖前面的。\",\"重载，重写的区别\",\"重载（Overload）是指在一个类中，方法名相同但参数列表不同的多个方法，根据传入的参数类型和个数来确定调用哪个方法。重写（Override）是指子类重新定义父类中已有的方法，方法名和参数列表必须完全相同，目的是为了实现多态。\",\"接口和实现的区别\",\"接口（Interface）定义了一组抽象的方法，而实现类（Implementation）则实现了接口中定义的方法，提供了具体的实现。接口中的方法默认是public且abstract的，而实现类中的方法则是具体的实现。一个类可以实现多个接口，但只能继承一个类。\",\"成都信通网易医疗科技：\",\"事务及事务的4大特性\",\"脏读幻读不可重复读\",\"controller是否是线程安全的\",\"索引的分类及底层实现\",\"sql调优\",\"有两个字段，age name(索引字段)，查询age name时走不走索引（实际是在问最左前缀法则）\",\"事务的隔离级别\",\"事务的实现原理(redo日志)和(undo日志)\",\"mysql的binlog\",\"Redis的持久化方式\",\"二面问的比较灵活，偏设计\",\"Spring事务的实现方式\",\"上海艾融软件：\",\"自我介绍，主要介绍自己在项目中所完成的功能，面试题少\",\"评价：逻辑性强，有自信。\",\"数据库面试题：\",\"什么是主键？\",\"什么是外键？\",\"什么是范式？\",\"右连接和左连接？\",\"spring包含哪些模块？\",\"springcore\",\"springmvc\",\"springdata\",\"springsecurity\",\"springbatch\",\"springcloud\",\"什么是ioc？如何实现的？\",\"久远银海的编程题：\",\"冒泡排序\",\"列出指定文件夹下以.txt结尾的文件（注意方法名，手写代码）\",\"sql的执行顺序\",\"mybatis的常用标签\",\"#和$的区别\",\"linux常用命令\",\"对象toString要重写，不然会打印地址\",\"要重写toString方法。且pojo和javabean中\",\"面向对象中什么是标准的javabean，（有参+无参）zhangwu.class是无参的，若只有有参会报错，将无参构造覆盖。\",\"前后端如何交互\",\"怎么获取前端参数\",\"其他看你的简历问\",\"B+树和跳表都是logn，那到底哪个更快（logn更小）？为什么B+树的查询是logn？\",\"集合必考+HashMap底层原理\",\"list分支有哪些\",\"list分支有哪些，有什么区别\",\"数据库如何优化\",\"如何分页\",\"如何分组查询，后面可以带哪些函教\",\"switch case相关\",\"介绍一下自己的项目\",\"oracle中的rownumber 分页\",\"List转数组，数组转list\",\"arraylist去重\",\"深浅拷贝\",\"线科安全集合\",\"autowire注解\",\"重写和重载\",\"数据库两表查询语法\",\"如何使用使用重写举个例子\",\"简单介绍一下你的图书馆里项目怎么实现的\",\"多线程使用\",\"string三个的区别\",\"后面还连着问了几个问题，没记到英文字母\",\"主要围绕线程安全的\",\"成功AC然后问思路\",\"问简历上的项目经历用了哪些技术栈解决了\",\"什么难题可以体现自己的技术比较深\",\"详细介绍java异常\",\"序列化，为什么要序列化，怎么序列化\",\"redis内存优化（没答上）\",\"怎么解决线程安全问题答全面\",\"给一段代码让你改写成线程安全的代码块(atomiclnteger,volatile)\",\"接口和抽象类\",\"wait（）和sleep（） 可能因为是应届生所以问的都比较简单\",\"万达信息 http和https的区别 介绍索引 linux基本操作 mybatis分页查询 sql索引失效 如何理解面向对象 如何理解继承和多态 如何保证线程安全 什么是javascript? javaScript和jquery的区别? 什么是Tomcat? 什么是Router? vue路由传参? 什么是javaweb? 什么是jsp? jsp和servlet的区别? get和post的区别?\",\"四川空间座标信息科技有限公司 项目的登录拦截，敏感词过滤是怎么实现的? springboot的自动配置是怎么实现的? Java的hashmap和linkedmap有什么区别? hashmap的扩容机制，hashmap为什么运行速度快 count (*)和count (id)的速度，谁快? 如果要查询数据表中创建时间的最新数据，如何查询 程序如何编译，打包 控制层中的常用注解 Java有哪些设计模式 多线程池是如何创建的，参数有哪些 集合和数组的区别 服务层的注入可以没有吗? springboot如何添加依赖?\",\"数据结构在Java里面对应的实现和差别。 java怎么实现在学生表，选课记录表里面，找出没有选课记录的学生 数据结构里面那一种应对查找，实现查找的问题 多态在java里面怎么做的。 多态除开重载，重写，在Java里面还有什么实现方式。 两张表的交集，并集怎么实现 mysql的索引是什么结构? 时间复杂度是多少 网络tcp常见的问题，tcp建立的过程。tcp常见的标志位。\",\"整个http的内容，协议是什么样的 操作系统的进程管理、内存管理，怎么给进程 分配内存管理。 进程和线程的区别。 举一个进程线程多对多的例子 哪一个操作系统是多对多 Java中线程的开启、关闭怎么实现。 怎么关闭一个运行中的线程。\",\"springboot有一个请求进来过后，经过哪些过 程。 vue，js是单线程的，事件是怎么组织的。 vue的响应底层是怎么做的。\",\"九州电子 线程怎么创建的 创建线程池的参数 一个线程在Java中的占多少内存 有三个子线程，第一个和第二个没有关联 第三个需要等到前两个子线程执行完毕后再执行，该如何创建? 有哪些数据结构，在Java中有哪些实现? 什么时候用ArrayList，什么时候用 LinkedList，举个例子 HashMap的底层了解吗? 有两张表，一张用户信息表包含用户id、注 册时间:一张订单信息表包含订单id和订单 信息。需求:在Java中设计查询出“前100\",\"条没有下单的用户信息并按照注册时间排序\",\"四川空间座标信息科技有限公司 ssm购物平台的登陆注册有没有使用token? 登 陆怎么实现的?比如怎么校验用户名和密码? springboot项目里面的redis拿来做什么? redis缓存消息持久化有没有了解? mysql数据库的核心引擎? 平时写sql用过having关键字吗? 平时写sql的时候有建索引吗? 写好的索引怎么 判断有没有建起? 谈一谈你对java多线程的了解。它有多少种状 态 后端开发怎么添加数据库的事务? 事务注解Transactional失效 get和post的区别?\",\"平时启动服务以后创建一个实体，一个类，这 个类的属性加载顺序是什么?\",\"字节面试： Mysql为什么用B+树，不用跳表？_跳表和b+哪个效率高-CSDN博客\",\"B+树和跳表都是logn，那到底哪个更快（logn更小）？为什么B+树的查询是logn？\",\"ChatGPT\",\"ChatGPT\",\"B+树和跳表都是logn时间复杂度的数据结构，但它们在实际应用中的性能可能有所不同，取决于具体的使用场景和操作。让我们来探讨一下：\",\"首先，我们来看B+树。B+树是一种多路搜索树，常被用于数据库和文件系统中作为索引结构。它的查询复杂度通常为O(log n)，其中n是树中的节点数。这是因为B+树是一种平衡树，每个节点都有多个子节点，并且树的高度相对较小。在数据库中，B+树通常被设计为磁盘上的存储结构，因此其设计考虑了磁盘I/O操作的次数，使得在大规模数据存储时仍能保持高效率。\",\"而跳表是一种基于链表的数据结构，它通过添加多级索引来加速查找。跳表的查询复杂度也是O(log n)，其中n是元素个数。跳表的优点之一是它相比于平衡树更容易实现和维护，并且不需要进行平衡操作。然而，跳表需要额外的空间来存储索引，而且对于插入和删除操作可能需要更多的指针更新操作。\",\"所以，要确定哪个更快，需要考虑具体的应用场景和操作频率。一般来说，B+树更适用于静态或者频繁查询的场景，而跳表则更适用于动态的数据结构，或者对插入和删除操作频繁的情况。\"]},\"48\":{\"c\":[\"面试\"]},\"49\":{\"c\":[\"面试\"]},\"50\":{\"h\":\"Java集合-ArrayList源码分析\",\"t\":[\"ArrayList底层实现是数组 数组是一种用连续的内存空间存储相同数据类型数据的线性数据结构。\",\"栈内存：在方法中定义的一些基本类型的变量和对象的引用变量都在方法的栈内存中分配,当在一段代码块中定义一个变量时,Java就在栈内存中为这个变量分配内存空间,当超出变量的作用域后,Java会自动释放掉为该变量所分配的内存空间。 堆内存：堆内存用来存放 new 运算符创建的对象和数组,在堆中分配的内存,由Java虚拟机的自动垃级回收器来管理。\"]},\"51\":{\"h\":\"数组\",\"t\":[\"在Java中定义数组：\",\"int a[] = {1, 2, 3}; \",\"在栈内存中指向的堆内存数组的首地址，此时想要获取到堆内存里的数据，就需要用到寻址公式\",\"a[i] = baseAddress + i * dataTypeSize \",\"dataTypeSize：代表数组中元素类型的大小，目前数组重存储的是int型的数据，dataTypeSize=4个字节\",\"数组操作的时间复杂度分析： 查询：随机访问$O(1)$,查询$O(n)$ 插入：最好$O(1)$,最坏$O(n)$ ,因为元素需要后移 删除：$O(n)$\"]},\"52\":{\"h\":\"ArrayList源码分析\",\"t\":[\"分析源码主要从三个方面考虑：成员变量，构造函数，关键方法\"]},\"53\":{\"h\":\"成员变量\",\"t\":[\"/** * Default initial capacity. */ private static final int DEFAULT_CAPACITY = 10; /** * Shared empty array instance used for empty instances. */ private static final Object[] EMPTY_ELEMENTDATA = {}; /** * Shared empty array instance used for default sized empty instances. We * distinguish this from EMPTY_ELEMENTDATA to know how much to inflate when * first element is added. */ private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {}; /** * The array buffer into which the elements of the ArrayList are stored. * The capacity of the ArrayList is the length of this array buffer. Any * empty ArrayList with elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA * will be expanded to DEFAULT_CAPACITY when the first element is added. */ transient Object[] elementData; // non-private to simplify nested class access /** * The size of the ArrayList (the number of elements it contains). * * @serial */ private int size; \",\"可以看出：默认容量为10，底层是将数据存储在elementData这个数组中的，size是这个数组的长度\"]},\"54\":{\"h\":\"构造方法\",\"t\":[\" /** * Constructs an empty list with the specified initial capacity. * * @param initialCapacity the initial capacity of the list * @throws IllegalArgumentException if the specified initial capacity * is negative */ public ArrayList(int initialCapacity) { if (initialCapacity > 0) { this.elementData = new Object[initialCapacity]; } else if (initialCapacity == 0) { this.elementData = EMPTY_ELEMENTDATA; } else { throw new IllegalArgumentException(\\\"Illegal Capacity: \\\"+ initialCapacity); } } /** * Constructs an empty list with an initial capacity of ten. */ public ArrayList() { this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA; } /** * Constructs a list containing the elements of the specified * collection, in the order they are returned by the collection's * iterator. * * @param c the collection whose elements are to be placed into this list * @throws NullPointerException if the specified collection is null */ public ArrayList(Collection<? extends E> c) { Object[] a = c.toArray(); if ((size = a.length) != 0) { if (c.getClass() == ArrayList.class) { elementData = a; } else { elementData = Arrays.copyOf(a, size, Object[].class); } } else { // replace with empty array. elementData = EMPTY_ELEMENTDATA; } } \",\"第一个构造方法可以穿入一个整数，是默认的集合大小，如果值大于0 ，那么就会将elementData开到这么大，否则，将elementData赋值为成员变量里的EMPTY_ELEMENTDATA\",\"第二个构造函数为无参构造，会把DEFAULTCAPACITY_EMPTY_ELEMENTDATA赋值为elementData\",\"第三个构造函数为可以穿入一个collection对象，将collection对象转换成数组，然后将数组的地址的赋给elementData\"]},\"55\":{\"h\":\"关键方法\"},\"56\":{\"h\":\"添加元素add\",\"t\":[\" /** * Appends the specified element to the end of this list. * * @param e element to be appended to this list * @return <tt>true</tt> (as specified by {@link Collection#add}) */ public boolean add(E e) { ensureCapacityInternal(size + 1); // Increments modCount!! elementData[size++] = e; return true; } /** * Inserts the specified element at the specified position in this * list. Shifts the element currently at that position (if any) and * any subsequent elements to the right (adds one to their indices). * * @param index index at which the specified element is to be inserted * @param element element to be inserted * @throws IndexOutOfBoundsException {@inheritDoc} */ public void add(int index, E element) { rangeCheckForAdd(index); ensureCapacityInternal(size + 1); // Increments modCount!! System.arraycopy(elementData, index, elementData, index + 1, size - index); elementData[index] = element; size++; } \",\"由第一个添加元素的方法可以看出，加入元素 之前会先去进行扩容操作，代码如下：\",\" private void ensureCapacityInternal(int minCapacity) { ensureExplicitCapacity(calculateCapacity(elementData, minCapacity)); } private void ensureExplicitCapacity(int minCapacity) { modCount++; // overflow-conscious code if (minCapacity - elementData.length > 0) grow(minCapacity); } /** * The maximum size of array to allocate. * Some VMs reserve some header words in an array. * Attempts to allocate larger arrays may result in * OutOfMemoryError: Requested array size exceeds VM limit */ private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8; /** * Increases the capacity to ensure that it can hold at least the * number of elements specified by the minimum capacity argument. * * @param minCapacity the desired minimum capacity */ private void grow(int minCapacity) { // overflow-conscious code int oldCapacity = elementData.length; int newCapacity = oldCapacity + (oldCapacity >> 1); if (newCapacity - minCapacity < 0) newCapacity = minCapacity; if (newCapacity - MAX_ARRAY_SIZE > 0) newCapacity = hugeCapacity(minCapacity); // minCapacity is usually close to size, so this is a win: elementData = Arrays.copyOf(elementData, newCapacity); } private static int hugeCapacity(int minCapacity) { if (minCapacity < 0) // overflow throw new OutOfMemoryError(); return (minCapacity > MAX_ARRAY_SIZE) ? Integer.MAX_VALUE : MAX_ARRAY_SIZE; } \",\"添加逻辑：确保数组已使用长度（size）加1之后足够存下下一个数据 如果要添加元素长度大于当前底层elementData的长度了，那么就进行grow扩容操作，否则不扩容 扩容的时候，一次会扩容为原来的1.5倍，oldCapacity + (oldCapacity >> 1)就相当于1.5,然后再根据条件确定newCapacity的大小，最后，使用 Arrays.copyOf() 方法来创建一个新的数组，将旧数组中的元素复制到新数组中，并将新数组赋给 elementData，以实现容量的扩展。\"]},\"57\":{\"h\":\"结论\",\"t\":[\"ArrayList底层是用动态的数组实现的\",\"ArrayList初始容量为0，当第一次添加数据的时候才会初始化容量为10\",\"ArrayList在进行扩容的时候是原来容量的1.5倍，每次扩容都需要拷贝数组\"]},\"58\":{\"h\":\"面试题\",\"t\":[\"ArrayList list=new ArrayList(10)list扩容几次 回答：该语句只是声明和实例了一个 ArrayList，指定了容量为 10，未扩容\",\"如何实现数组和List之间的转换\",\" public void test() { //Array to List String[] a = {\\\"1\\\", \\\"2\\\", \\\"3\\\"}; List<String> list = Arrays.asList(a); //List to Array ArrayList<String> strings = new ArrayList<>(); strings.add(\\\"2\\\"); strings.add(\\\"3\\\"); strings.add(\\\"5\\\"); String[] stringsArray = strings.toArray(new String[strings.size()]); } \",\"可以使用asList方法，将数组转为List 可以使用toArray方法，将List转为数组\",\"用Arrays.asList转List后，如果修改了数组内容，list受影响，因为底层是使用的Arrays类中的一个内部类ArrayList来构造的集合，在这个集合的构造器中，把我们传入的这个集合进行了包装而已，最终指向的都是同一个内存地址，asList代码如下：\",\" @SafeVarargs @SuppressWarnings(\\\"varargs\\\") public static <T> List<T> asList(T... a) { return new ArrayList<>(a); } \",\"List用toArray转数组后，如果修改了List内容,数组不受影响,因为底层是进行了数组拷贝，跟原来的元素没关系了\",\" public <T> T[] toArray(T[] a) { if (a.length < size) // Make a new array of a's runtime type, but my contents: return (T[]) Arrays.copyOf(elementData, size, a.getClass()); System.arraycopy(elementData, 0, a, 0, size); if (a.length > size) a[size] = null; return a; } \"]},\"59\":{\"c\":[\"Java\",\"ArrayList\"]},\"60\":{\"c\":[\"Java\",\"ArraryList\"]},\"61\":{\"h\":\"Java集合-HashMap\",\"t\":[\"Java的HashMap是一种基于哈希表实现的数据结构，用于存储键值对。在HashMap中，每个键都映射到一个值。\"]},\"62\":{\"h\":\"HashMap源码分析\"},\"63\":{\"h\":\"成员变量\",\"t\":[\"static final int DEFAULT_INITIAL_CAPACITY = 1 << 4; // aka 16 /** * The maximum capacity, used if a higher value is implicitly specified * by either of the constructors with arguments. * MUST be a power of two <= 1<<30. */ static final int MAXIMUM_CAPACITY = 1 << 30; /** * The load factor used when none specified in constructor. */ static final float DEFAULT_LOAD_FACTOR = 0.75f; \",\"这三个变量分别是 默认的初始容量，最大容量，以及默认的加载因子 公式如下： 扩容阈值=数组容量*加载因子\",\" /** * The table, initialized on first use, and resized as * necessary. When allocated, length is always a power of two. * (We also tolerate length zero in some operations to allow * bootstrapping mechanics that are currently not needed.) */ transient Node<K,V>[] table; /** * Holds cached entrySet(). Note that AbstractMap fields are used * for keySet() and values(). */ transient Set<Map.Entry<K,V>> entrySet; /** * The number of key-value mappings contained in this map. */ transient int size; /** * The number of times this HashMap has been structurally modified * Structural modifications are those that change the number of mappings in * the HashMap or otherwise modify its internal structure (e.g., * rehash). This field is used to make iterators on Collection-views of * the HashMap fail-fast. (See ConcurrentModificationException). */ transient int modCount; /** * The next size value at which to resize (capacity * load factor). * * @serial */ // (The javadoc description is true upon serialization. // Additionally, if the table array has not been allocated, this // field holds the initial array capacity, or zero signifying // DEFAULT_INITIAL_CAPACITY.) int threshold; /** * The load factor for the hash table. * * @serial */ final float loadFactor; \",\"table 是哈希表的核心数据结构，它存储了键值对的桶（buckets），每个桶可以包含一个链表或红黑树，用于解决哈希冲突。在 HashMap 或 Hashtable 这类哈希表的实现中，table 是用于存储实际键值对的地方。\",\"使用 transient 修饰 table 字段通常是因为在对象序列化时，哈希表的内部状态不需要被序列化。这是因为在反序列化时，哈希表可以根据其他序列化的信息（如容量、负载因子等）来重新构建。如果 table 不被标记为 transient，那么在序列化和反序列化过程中，可能会导致不必要的数据传输和资源浪费，因为 table 可能很大，不需要被序列化和反序列化。\",\"transient Set<Map.Entry<K, V>> entrySet;: 这个字段用于缓存entrySet()，也就是哈希表中的键值对集合\",\"transient int size;: 这个字段用于存储哈希表中键值对的数量，表示哈希表的大小。\",\"transient int modCount;: 这个字段用于记录结构性修改的次数。结构性修改是指那些改变哈希表的键值对数量或修改其内部结构的操作，例如重新哈希。modCount 用于使对哈希表的 Collection 视图（如迭代器）进行快速失败（fail-fast）处理，以便在并发环境下及时检测到其他线程的修改。\",\"int threshold;: 这个字段存储下一次需要调整哈希表大小的阈值，通常是容量乘以负载因子。当键值对数量达到这个阈值时，哈希表会进行扩容。final float loadFactor;: 这个字段存储了哈希表的负载因子。负载因子是一个在扩容时用于确定新容量的参数。\"]},\"64\":{\"h\":\"构造函数\",\"t\":[\" /** * Constructs an empty <tt>HashMap</tt> with the specified initial * capacity and load factor. * * @param initialCapacity the initial capacity * @param loadFactor the load factor * @throws IllegalArgumentException if the initial capacity is negative * or the load factor is nonpositive */ public HashMap(int initialCapacity, float loadFactor) { if (initialCapacity < 0) throw new IllegalArgumentException(\\\"Illegal initial capacity: \\\" + initialCapacity); if (initialCapacity > MAXIMUM_CAPACITY) initialCapacity = MAXIMUM_CAPACITY; if (loadFactor <= 0 || Float.isNaN(loadFactor)) throw new IllegalArgumentException(\\\"Illegal load factor: \\\" + loadFactor); this.loadFactor = loadFactor; this.threshold = tableSizeFor(initialCapacity); } /** * Constructs an empty <tt>HashMap</tt> with the specified initial * capacity and the default load factor (0.75). * * @param initialCapacity the initial capacity. * @throws IllegalArgumentException if the initial capacity is negative. */ public HashMap(int initialCapacity) { this(initialCapacity, DEFAULT_LOAD_FACTOR); } /** * Constructs an empty <tt>HashMap</tt> with the default initial capacity * (16) and the default load factor (0.75). */ public HashMap() { this.loadFactor = DEFAULT_LOAD_FACTOR; // all other fields defaulted } /** * Constructs a new <tt>HashMap</tt> with the same mappings as the * specified <tt>Map</tt>. The <tt>HashMap</tt> is created with * default load factor (0.75) and an initial capacity sufficient to * hold the mappings in the specified <tt>Map</tt>. * * @param m the map whose mappings are to be placed in this map * @throws NullPointerException if the specified map is null */ public HashMap(Map<? extends K, ? extends V> m) { this.loadFactor = DEFAULT_LOAD_FACTOR; putMapEntries(m, false); } \",\"public HashMap(int initialCapacity, float loadFactor): 这个构造函数用于创建一个空的HashMap，并允许指定初始容量和负载因子。初始容量表示哈希表的初始大小，负载因子表示在扩容之前哈希表的容量利用率。如果初始容量为负数或负载因子为非正数，将抛出IllegalArgumentException异常。\",\"public HashMap(int initialCapacity): 这个构造函数允许指定初始容量，但负载因子使用默认值（0.75）。如果初始容量为负数，将抛出IllegalArgumentException异常。\",\"public HashMap(): 这个构造函数创建一个空的HashMap，使用默认的初始容量（16）和负载因子（0.75）。\",\"public HashMap(Map<? extends K, ? extends V> m): 这个构造函数允许你创建一个新的HashMap，其初始内容是由给定的Map对象m提供的。这个构造函数使用默认的负载因子（0.75）和足够容纳m中所有键值对的初始容量。\",\"在这些构造函数中，loadFactor 表示了哈希表的负载因子，它是在哈希表需要扩容时触发的阈值。initialCapacity 是哈希表的初始容量，这是哈希表的桶数，可以在后续的操作中动态调整。DEFAULT_LOAD_FACTOR 是默认的负载因子值（0.75），MAXIMUM_CAPACITY 是哈希表的最大容量限制。\"]},\"65\":{\"h\":\"关键方法\"},\"66\":{\"h\":\"添加元素put\",\"t\":[\" /** * Associates the specified value with the specified key in this map. * If the map previously contained a mapping for the key, the old * value is replaced. * * @param key key with which the specified value is to be associated * @param value value to be associated with the specified key * @return the previous value associated with <tt>key</tt>, or * <tt>null</tt> if there was no mapping for <tt>key</tt>. * (A <tt>null</tt> return can also indicate that the map * previously associated <tt>null</tt> with <tt>key</tt>.) */ public V put(K key, V value) { return putVal(hash(key), key, value, false, true); } /** * Implements Map.put and related methods. * * @param hash hash for key * @param key the key * @param value the value to put * @param onlyIfAbsent if true, don't change existing value * @param evict if false, the table is in creation mode. * @return previous value, or null if none */ final V putVal(int hash, K key, V value, boolean onlyIfAbsent, boolean evict) { Node<K,V>[] tab; Node<K,V> p; int n, i; if ((tab = table) == null || (n = tab.length) == 0) n = (tab = resize()).length; if ((p = tab[i = (n - 1) & hash]) == null) tab[i] = newNode(hash, key, value, null); else { Node<K,V> e; K k; if (p.hash == hash && ((k = p.key) == key || (key != null && key.equals(k)))) e = p; else if (p instanceof TreeNode) e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value); else { for (int binCount = 0; ; ++binCount) { if ((e = p.next) == null) { p.next = newNode(hash, key, value, null); if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st treeifyBin(tab, hash); break; } if (e.hash == hash && ((k = e.key) == key || (key != null && key.equals(k)))) break; p = e; } } if (e != null) { // existing mapping for key V oldValue = e.value; if (!onlyIfAbsent || oldValue == null) e.value = value; afterNodeAccess(e); return oldValue; } } ++modCount; if (++size > threshold) resize(); afterNodeInsertion(evict); return null; } \",\"public V put(K key, V value): 这是 HashMap 类的 put 方法，用于将指定的键 key 和对应的值 value 关联在 HashMap 中。如果之前已经存在相同的键，则新的值会替代旧值。\",\"final V putVal(int hash, K key, V value, boolean onlyIfAbsent, boolean evict): 这是 put 方法的底层实现，负责实际的键值对插入和处理。以下是参数的解释： \",\"hash: 表示键的哈希值，用于确定键值对的存储位置。\",\"key: 表示要插入的键。\",\"value: 表示要插入的值。\",\"onlyIfAbsent: 如果为 true，则表示只在键不存在时才插入值，不会替代已存在的值。\",\"evict: 如果为 false，表示 HashMap 处于创建模式，而不是正常的插入模式。\",\"方法内部进行了以下操作： \",\"首先，检查是否已经存在哈希表，如果没有，则尝试进行哈希表的初始化。\",\"然后，根据键的哈希值找到存储位置，尝试插入键值对。\",\"如果存储位置已经有值，需要根据键是否已存在来决定是否替代值。\",\"如果哈希冲突发生，会通过链表或红黑树解决，具体取决于链表长度。\",\"最后，根据需要触发哈希表的扩容。\",\"而插入的时候里面的计算哈希函数实现如下：\",\" /** * Computes key.hashCode() and spreads (XORs) higher bits of hash * to lower. Because the table uses power-of-two masking, sets of * hashes that vary only in bits above the current mask will * always collide. (Among known examples are sets of Float keys * holding consecutive whole numbers in small tables.) So we * apply a transform that spreads the impact of higher bits * downward. There is a tradeoff between speed, utility, and * quality of bit-spreading. Because many common sets of hashes * are already reasonably distributed (so don't benefit from * spreading), and because we use trees to handle large sets of * collisions in bins, we just XOR some shifted bits in the * cheapest possible way to reduce systematic lossage, as well as * to incorporate impact of the highest bits that would otherwise * never be used in index calculations because of table bounds. */ static final int hash(Object key) { int h; return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16); } \",\"key.hashCode(): 这部分计算对象的原始哈希码。每个 Java 对象都有一个 hashCode 方法，它返回一个 int 类型的哈希码。这个哈希码通常是根据对象的内部状态计算的，不同对象的哈希码可能不同。hashCode 方法的默认实现通常是基于对象的内存地址计算的，但它可以被子类重写以提供更有意义的哈希码。\",\"h >>> 16: 这部分执行位移操作，将 h 的二进制表示向右移动 16 位。这是因为 h 的高 16 位和低 16 位可能包含对象的不同信息，我们希望将高位的信息也包括在哈希码中，以确保更好的均匀性。\",\"key.hashCode() ^ (h >>> 16): 最后，这部分通过异或操作（^）将原始哈希码和经过位移的哈希码合并在一起，生成最终的哈希码 h。这个操作将低位和高位信息混合在一起，以减少哈希冲突的概率。\",\"关于插入的时候产生碰撞使用链表还是红黑树：\",\"首先，它检查当前索引位置的节点是否与要插入的键匹配，如果匹配，表示找到了相同的键，不需要插入新节点，只需更新值。\",\"如果当前节点是红黑树节点（p 是 TreeNode 类型），则调用红黑树的插入方法进行处理。\",\"否则，进入一个循环，继续查找下一个节点。如果找到链表的末尾，将新节点插入到链表末尾，并检查链表长度是否达到了转换为红黑树的阈值（TREEIFY_THRESHOLD=8），如果达到阈值，将链表转换为红黑树。\"]},\"67\":{\"h\":\"删除元素remove\",\"t\":[\" /** * Removes the mapping for the specified key from this map if present. * * @param key key whose mapping is to be removed from the map * @return the previous value associated with <tt>key</tt>, or * <tt>null</tt> if there was no mapping for <tt>key</tt>. * (A <tt>null</tt> return can also indicate that the map * previously associated <tt>null</tt> with <tt>key</tt>.) */ public V remove(Object key) { Node<K,V> e; return (e = removeNode(hash(key), key, null, false, true)) == null ? null : e.value; } /** * Implements Map.remove and related methods. * * @param hash hash for key * @param key the key * @param value the value to match if matchValue, else ignored * @param matchValue if true only remove if value is equal * @param movable if false do not move other nodes while removing * @return the node, or null if none */ final Node<K,V> removeNode(int hash, Object key, Object value, boolean matchValue, boolean movable) { Node<K,V>[] tab; Node<K,V> p; int n, index; if ((tab = table) != null && (n = tab.length) > 0 && (p = tab[index = (n - 1) & hash]) != null) { Node<K,V> node = null, e; K k; V v; if (p.hash == hash && ((k = p.key) == key || (key != null && key.equals(k)))) node = p; else if ((e = p.next) != null) { if (p instanceof TreeNode) node = ((TreeNode<K,V>)p).getTreeNode(hash, key); else { do { if (e.hash == hash && ((k = e.key) == key || (key != null && key.equals(k)))) { node = e; break; } p = e; } while ((e = e.next) != null); } } if (node != null && (!matchValue || (v = node.value) == value || (value != null && value.equals(v)))) { if (node instanceof TreeNode) ((TreeNode<K,V>)node).removeTreeNode(this, tab, movable); else if (node == p) tab[index] = node.next; else p.next = node.next; ++modCount; --size; afterNodeRemoval(node); return node; } } return null; } \",\"public V remove(Object key): 这是 HashMap 类的 remove 方法，用于移除 HashMap 中指定键 key 的映射。如果存在这个键的映射，它将返回先前与该键关联的值；如果没有映射与该键，它将返回 null。\",\"final Node<K,V> removeNode(int hash, Object key, Object value, boolean matchValue, boolean movable): 这是 remove 方法的底层实现，负责实际的移除操作。以下是参数的解释： \",\"hash: 表示键的哈希值，用于确定键值对的位置。\",\"key: 表示要移除的键。\",\"value: 如果 matchValue 为 true，则表示只有在键的值与 value 匹配时才移除，否则 value 参数被忽略。\",\"matchValue: 如果为 true，表示只有在值匹配时才移除键值对，否则忽略值。\",\"movable: 如果为 false，表示在移除节点时不移动其他节点。\",\"方法内部进行了以下操作：\",\"首先，它检查哈希表是否为空，数组长度大于0，以及指定索引位置是否存在节点。\",\"然后，它在哈希表中查找键的位置。这可能涉及到遍历链表或红黑树，以找到匹配的节点。\",\"如果找到了匹配的节点 node，然后检查是否需要匹配值（根据 matchValue 参数），如果需要匹配值，检查值是否匹配。如果匹配，表示找到了要移除的节点。\",\"如果 node 是红黑树节点，则调用红黑树的移除方法进行处理。\",\"否则，根据节点的位置，将节点从链表中移除。\",\"最后，更新哈希表的 modCount（用于迭代器的快速失败机制）和 size（键值对数量），并调用 afterNodeRemoval 方法来执行移除后的操作。\"]},\"68\":{\"h\":\"面试题\"},\"69\":{\"h\":\"说一下HashMap的实现原理\",\"t\":[\"底层使用hash表数据结构，即数组和链表或红黑树 存储过程如下：\",\"计算键的哈希值： 当你要将键值对存储到 HashMap 中时，首先会计算键的哈希值。这通常是通过调用键的 hashCode 方法来完成的。哈希值是一个整数，用于确定键值对在哈希表中的存储位置。\",\"计算存储位置： 使用哈希值和哈希函数，确定键值对在哈希表中的存储位置（也称为桶或存储槽）。\",\"查找位置： 在确定了存储位置之后， HashMap 将查找这个位置，看是否已经有键值对存储在这里。如果这个位置是空的，表示没有发生哈希冲突，可以直接将键值对存储在这里。\",\"处理哈希冲突： 如果确定位置不为空，表示发生了哈希冲突，即多个键的哈希值相同。在这种情况下， HashMap 会根据以下情况进行处理： a. 如果新键与已有键相同（通过 equals 方法比较），则新值将覆盖旧值，不会增加新的键值对数量。 b. 如果新键与已有键不同（通过 equals 方法比较），则新的键值对将被添加到同一桶中，可能会形成链表或红黑树结构，具体取决于桶内键值对的数量。\",\"更新元素数量和结构： 每次插入键值对时， HashMap 会更新元素的数量（键值对数量），并检查是否需要进行扩容，以保持适当的负载因子。此外，它会记录结构修改次数（modCount）以用于快速失败迭代器。\",\"完成插入： 当上述步骤完成后，键值对已经成功存储在 HashMap 中。\"]},\"70\":{\"h\":\"链表和红黑树转换\",\"t\":[\"jdk1.8在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为8） 时并且数组长度达到64时，将链表转化为红黑树，以减少搜索时间。扩容 resize( ) 时，红黑树拆分成的树的结点数小于等于临界值6个，则退化成链表\"]},\"71\":{\"h\":\"讲一讲HashMap的扩容机制\",\"t\":[\"//扩容、初始化数组 final Node<K,V>[] resize() { Node<K,V>[] oldTab = table; //如果当前数组为null的时候，把oldCap老数组容量设置为0 int oldCap = (oldTab == null) ? 0 : oldTab.length; //老的扩容阈值 int oldThr = threshold; int newCap, newThr = 0; //判断数组容量是否大于0，大于0说明数组已经初始化 if (oldCap > 0) { //判断当前数组长度是否大于最大数组长度 if (oldCap >= MAXIMUM_CAPACITY) { //如果是，将扩容阈值直接设置为int类型的最大数值并直接返回 threshold = Integer.MAX_VALUE; return oldTab; } //如果在最大长度范围内，则需要扩容 OldCap << 1等价于oldCap*2 //运算过后判断是不是最大值并且oldCap需要大于16 else if ((newCap = oldCap << 1) < MAXIMUM_CAPACITY && oldCap >= DEFAULT_INITIAL_CAPACITY) newThr = oldThr << 1; // double threshold 等价于oldThr*2 } //如果oldCap<0，但是已经初始化了，像把元素删除完之后的情况，那么它的临界值肯定还存在， 如果是首次初始化，它的临界值则为0 else if (oldThr > 0) // initial capacity was placed in threshold newCap = oldThr; //数组未初始化的情况，将阈值和扩容因子都设置为默认值 else { // zero initial threshold signifies using defaults newCap = DEFAULT_INITIAL_CAPACITY; newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY); } //初始化容量小于16的时候，扩容阈值是没有赋值的 if (newThr == 0) { //创建阈值 float ft = (float)newCap * loadFactor; //判断新容量和新阈值是否大于最大容量 newThr = (newCap < MAXIMUM_CAPACITY && ft < (float)MAXIMUM_CAPACITY ? (int)ft : Integer.MAX_VALUE); } //计算出来的阈值赋值 threshold = newThr; @SuppressWarnings({\\\"rawtypes\\\",\\\"unchecked\\\"}) //根据上边计算得出的容量 创建新的数组 Node<K,V>[] newTab = (Node<K,V>[])new Node[newCap]; //赋值 table = newTab; //扩容操作，判断不为空证明不是初始化数组 if (oldTab != null) { //遍历数组 for (int j = 0; j < oldCap; ++j) { Node<K,V> e; //判断当前下标为j的数组如果不为空的话赋值个e，进行下一步操作 if ((e = oldTab[j]) != null) { //将数组位置置空 oldTab[j] = null; //判断是否有下个节点 if (e.next == null) //如果没有，就重新计算在新数组中的下标并放进去 newTab[e.hash & (newCap - 1)] = e; //有下个节点的情况，并且判断是否已经树化 else if (e instanceof TreeNode) //进行红黑树的操作 ((TreeNode<K,V>)e).split(this, newTab, j, oldCap); //有下个节点的情况，并且没有树化（链表形式） else { //比如老数组容量是16，那下标就为0-15 //扩容操作*2，容量就变为32，下标为0-31 //低位：0-15，高位16-31 //定义了四个变量 // 低位头 低位尾 Node<K,V> loHead = null, loTail = null; // 高位头 高位尾 Node<K,V> hiHead = null, hiTail = null; //下个节点 Node<K,V> next; //循环遍历 do { //取出next节点 next = e.next; //通过 与操作 计算得出结果为0 if ((e.hash & oldCap) == 0) { //如果低位尾为null，证明当前数组位置为空，没有任何数据 if (loTail == null) //将e值放入低位头 loHead = e; //低位尾不为null，证明已经有数据了 else //将数据放入next节点 loTail.next = e; //记录低位尾数据 loTail = e; } //通过 与操作 计算得出结果不为0 else { //如果高位尾为null，证明当前数组位置为空，没有任何数据 if (hiTail == null) //将e值放入高位头 hiHead = e; //高位尾不为null，证明已经有数据了 else //将数据放入next节点 hiTail.next = e; //记录高位尾数据 hiTail = e; } } //如果e不为空，证明没有到链表尾部，继续执行循环 while ((e = next) != null); //低位尾如果记录的有数据，是链表 if (loTail != null) { //将下一个元素置空 loTail.next = null; //将低位头放入新数组的原下标位置 newTab[j] = loHead; } //高位尾如果记录的有数据，是链表 if (hiTail != null) { //将下一个元素置空 hiTail.next = null; //将高位头放入新数组的(原下标+原数组容量)位置 newTab[j + oldCap] = hiHead; } } } } } //返回新的数组对象 return newTab; } \",\"初始容量和负载因子：HashMap 在创建时可以指定初始容量和负载因子。初始容量表示哈希表的初始大小，负载因子表示在何时进行扩容操作。默认情况下，初始容量是16，负载因子是0.75。\",\"负载因子的作用： 负载因子表示哈希表可以填充的程度。当元素数量超过初始容量与负载因子的乘积时，即 size > initialCapacity * loadFactor，HashMap 视为需要进行扩容操作。\",\"扩容操作： 扩容操作会创建一个新的更大的哈希表，通常是原来大小的两倍，然后将所有键值对重新分布到新的哈希表中。扩容操作需要重新计算哈希值、确定新的存储位置等。\",\"扩容之后，会新创建一个数组，需要把老数组中的数据挪动到新的数组中\",\"没有hash冲突的节点，则直接使用 e.hash & (newCap - 1) 计算新数组的索引位置\",\"如果是红黑树，走红黑树的添加\",\"如果是链表，则需要遍历链表，可能需要拆分链表，判断(e.hash & oldCap)是否为0，该元素的位置要么停留在原始位置，要么移动到原始位置+增加的数组大小这个位置上\"]},\"72\":{\"h\":\"hashMap的寻址算法\",\"t\":[\" static final int hash(Object key) { int h; return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16); } \",\"首先获取key的hashCode值，然后右移16位 异或运算 原来的hashCode值，主要作用就是使原来的hash值更加均匀，减少hash冲突\",\"有了hash值之后，就很方便的去计算当前key的在数组中存储的下标，\",\" if ((p = tab[i = (n - 1) & hash]) == null) tab[i] = newNode(hash, key, value, null); \",\"(n-1)&hash : 得到数组中的索引，代替取模，性能更好，数组长度必须是2的n次幂\"]},\"73\":{\"h\":\"为何HashMap的数组长度一定是2的次幂？\",\"t\":[\"计算索引时效率更高：如果是 2 的 n 次幂可以使用位与运算代替取模\",\"扩容时重新计算索引效率更高： hash & oldCap == 0 的元素留在原来位置 ，否则新位置 = 旧位置 + oldCap\"]},\"74\":{\"c\":[\"Java\",\"HashMap\"]},\"75\":{\"c\":[\"Java\",\"HashMap\"]},\"76\":{\"h\":\"MacOS Java多版本切换\",\"t\":[\"查看本机有多少Java\",\"/usr/libexec/java_home -V \",\"修改配置文件~/.bash_profile\",\"将Java版本都设置进去\",\"以后我们想要切换的时候，直接jdk17\",\"这样就可以切换成功了\"]},\"77\":{\"c\":[\"Java\"]},\"78\":{\"c\":[\"Java\"]},\"79\":{\"h\":\"JUC并发编程\"},\"80\":{\"h\":\"JUC概述\",\"t\":[\"JUC是java.util.concurrent包的简称，即Java并发编程工具包，目的是为了更好地支持高并发任务，让开发者进行多线程编程时有效减少竞争条件和死锁线程。\"]},\"81\":{\"h\":\"并发编程\",\"t\":[\"一些基本概念：\",\"进程与线程：\",\"进程：程序是静止的，进程实体的运行过程就是进程，是系统进行资源分配的基本单位\",\"线程：线程是属于进程的，是一个基本的 CPU 执行单元，是程序执行流的最小单元。线程是进程中的一个实体，是系统独立调度的基本单位，线程本身不拥有系统资源，只拥有一点在运行中必不可少的资源，与同属一个进程的其他线程共享进程所拥有的全部资源\",\"并发与并行：\",\"并行：在同一时刻，有多个指令在多个 CPU 上同时执行\",\"并发：在同一时刻，有多个指令在单个 CPU 上交替执行\",\"同步与异步：\",\"需要等待结果返回，才能继续运行就是同步\",\"不需要等待结果返回，就能继续运行就是异步\",\"进程间通信：\",\"信号量\",\"共享存储\",\"管道通信\",\"消息队列\",\"Java中的通信机制：volatile、等待/通知机制、join 方式、InheritableThreadLocal、MappedByteBuffer\",\"线程状态：\",\"public enum State { /** * Thread state for a thread which has not yet started. */ NEW, 新建 /** * Thread state for a runnable thread. A thread in the runnable * state is executing in the Java virtual machine but it may * be waiting for other resources from the operating system * such as processor. */ RUNNABLE, 准备就绪 /** * Thread state for a thread blocked waiting for a monitor lock. * A thread in the blocked state is waiting for a monitor lock * to enter a synchronized block/method or * reenter a synchronized block/method after calling * {@link Object#wait() Object.wait}. */ BLOCKED,阻塞 /** * Thread state for a waiting thread. * A thread is in the waiting state due to calling one of the * following methods: * <ul> * <li>{@link Object#wait() Object.wait} with no timeout</li> * <li>{@link #join() Thread.join} with no timeout</li> * <li>{@link LockSupport#park() LockSupport.park}</li> * </ul> * * <p>A thread in the waiting state is waiting for another thread to * perform a particular action. * * For example, a thread that has called {@code Object.wait()} * on an object is waiting for another thread to call * {@code Object.notify()} or {@code Object.notifyAll()} on * that object. A thread that has called {@code Thread.join()} * is waiting for a specified thread to terminate. */ WAITING,等待 /** * Thread state for a waiting thread with a specified waiting time. * A thread is in the timed waiting state due to calling one of * the following methods with a specified positive waiting time: * <ul> * <li>{@link #sleep Thread.sleep}</li> * <li>{@link Object#wait(long) Object.wait} with timeout</li> * <li>{@link #join(long) Thread.join} with timeout</li> * <li>{@link LockSupport#parkNanos LockSupport.parkNanos}</li> * <li>{@link LockSupport#parkUntil LockSupport.parkUntil}</li> * </ul> */ TIMED_WAITING,有时限的等待 /** * Thread state for a terminated thread. * The thread has completed execution. */ TERMINATED;终止 } \"]},\"82\":{\"h\":\"线程\"},\"83\":{\"h\":\"线程创建的三种方式\",\"t\":[\"第一种方式：\",\"启动线程调用start方法，如果直接调用run，就变成普通的启动了\",\"public class ThreadDemo01 { public static void main(String[] args) { Thread myThread = new MyThread(); myThread.start(); for (int i = 0; i < 10; i++) { System.out.println(Thread.currentThread()+\\\":\\\"+i); } } } class MyThread extends Thread{ @Override public void run() { for (int i = 0; i < 10; i++) { System.out.println(Thread.currentThread()+\\\":\\\"+i); } } } \",\"第二种方式：\",\"public class ThreadDemo02 { public static void main(String[] args) { Runnable target = new MyThread02(); Thread thread = new Thread(target,\\\"线程1\\\"); thread.start(); thread.run(); } } class MyThread02 implements Runnable{ @Override public void run() { for (int i = 0; i < 10; i++) { //Thread.currentThread()获取当前线程 System.out.println(Thread.currentThread().getName()+\\\":\\\"+i); } } } \",\"第三种方式：\",\"public class ThreadDemo03 { public static void main(String[] args) { Callable call = new MyCallable(); FutureTask<String> task = new FutureTask<>(call); Thread t = new Thread(task); t.start(); try { String s = task.get(); // 获取call方法返回的结果（正常/异常结果） System.out.println(s); } catch (Exception e) { e.printStackTrace(); } } } class MyCallable implements Callable<String> { @Override public String call() throws Exception { return Thread.currentThread().getName() + \\\"->\\\" + \\\"Hello World\\\"; } } \"]},\"84\":{\"h\":\"线程状态的转换\",\"t\":[\"线程创建之后调用start()方法开始运行，当调用wait(),join(),LockSupport.lock()方法线程会进入到WAITING状态，\",\"而同样的wait(long timeout)，sleep(long),join(long),LockSupport.parkNanos(),LockSupport.parkUtil()增加了超时等待的功能，也就是调用这些方法后线程会进入TIMED_WAITING状态，\",\"当超时等待时间到达后，线程会切换到Runable的状态，\",\"另外当WAITING和TIMED _WAITING状态时可以通过Object.notify(),Object.notifyAll()方法使线程转换到Runable状态。\",\"当线程出现资源竞争时，即等待获取锁的时候，线程会进入到BLOCKED阻塞状态，当线程获取锁时，线程进入到Runable状态。\",\"线程运行结束后，线程进入到TERMINATED状态\"]},\"85\":{\"h\":\"线程的基本操作\"},\"86\":{\"h\":\"yield与sleep\",\"t\":[\"yield作用：提出释放CPU时间片的请求。不会释放锁，线程依然处于RUNNABLE状态。\",\"sleep作用：会让当前线程从 Running 进入 Timed Waiting 状态（阻塞），不会释放对象锁\",\"所以yield()方法调用后线程只是暂时的将调度权让给别人，但立刻可以回到竞争线程锁的状态；而sleep()方法调用后线程处于阻塞状态。\"]},\"87\":{\"h\":\"join()函数：\",\"t\":[\"等待这个进程结束\",\"如果一个线程实例A执行了threadB.join(),其含义是：当前线程A会等待threadB线程终止后threadA才会继续执行。\",\" public final synchronized void join(final long millis) throws InterruptedException { if (millis > 0) { if (isAlive()) { final long startTime = System.nanoTime(); long delay = millis; do { wait(delay); } while (isAlive() && (delay = millis - TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startTime)) > 0); } } else if (millis == 0) { while (isAlive()) { wait(0); } } else { throw new IllegalArgumentException(\\\"timeout value is negative\\\"); } } \",\"join 方法是被 synchronized 修饰的，本质上是一个对象锁，其内部的 wait 方法调用也是释放锁的，但是释放的是当前的线程对象锁，而不是外面的锁\",\"public class ThreadDemo04 { static int count = 0; public static void main(String[] args) throws InterruptedException { test1(); } private static void test1() throws InterruptedException { Thread thread = new Thread(() -> { try { Thread.sleep(1000); } catch (InterruptedException e) { throw new RuntimeException(e); } count = 10; }); thread.start(); thread.join(); System.out.println(count); } } \"]},\"88\":{\"h\":\"interrupt打断线程\",\"t\":[\"它表示了一个运行中的线程是否被其他线程进行了中断操作\",\"public class ThreadDemo05 { public static void main(String[] args) { final Thread sleepThread = new Thread() { @Override public void run() { try { Thread.sleep(1000); } catch (InterruptedException e) { throw new RuntimeException(e); } } }; Thread busyThread = new Thread() { @Override public void run() { while (true) { } } }; sleepThread.start(); busyThread.start(); sleepThread.interrupt(); busyThread.interrupt(); while (sleepThread.isInterrupted()); System.out.println(\\\"sleepThread isInterrupted: \\\" + sleepThread.isInterrupted()); System.out.println(\\\"busyThread isInterrupted: \\\" + busyThread.isInterrupted()); } } \"]},\"89\":{\"h\":\"守护线程Daemon\",\"t\":[\"守护线程是一种特殊的线程，它是系统的守护者，在后台默默地守护一些系统服务，比如垃圾回收线程，JIT线程就可以理解守护线程。\",\"package com.cxk.demo01; public class ThreadDemo06 { public static void main(String[] args) { Thread daemonThread =new Thread(new Runnable() { @Override public void run() { while (true){ try { System.out.println(\\\"I am alive\\\"); Thread.sleep(500); } catch (InterruptedException e) { throw new RuntimeException(e); }finally { System.out.println(\\\"finally block\\\"); } } } }); daemonThread.setDaemon(true); daemonThread.start(); //确保main线程结束前能给daemonThread能够分到时间片 try { Thread.sleep(800); } catch (InterruptedException e) { throw new RuntimeException(e); } } } \",\"区别：\",\"户线程（User Threads）:\",\"用户线程是程序的主要执行线程，当主线程结束时，用户线程不会自动结束，它们会继续执行直到完成或手动中断。\",\"如果还有任何用户线程在运行，Java虚拟机（JVM）会保持运行，不会退出。\",\"使用Thread类或实现Runnable接口创建的线程默认是用户线程。\",\"守护线程（Daemon Threads）:\",\"守护线程是程序的辅助线程，它的存在不会阻止程序的终止。当所有用户线程执行完毕后，JVM 会自动终止守护线程并退出。\",\"守护线程通常用于执行后台任务，例如垃圾回收、定期任务等。\",\"使用setDaemon(true)方法将线程设置为守护线程，必须在启动线程之前调用此方法。\"]},\"90\":{\"h\":\"Lock接口\"},\"91\":{\"h\":\"synchronized关键字\",\"t\":[\"synchronized 是Java中用于实现同步的关键字，它可以被用于方法和代码块。主要用于解决多线程环境下的并发问题，确保共享资源的安全访问。synchronized 的工作原理是使用锁（monitor）。当一个线程进入 synchronized 方法或代码块时，它会尝试获取锁。如果锁已经被其他线程占用，线程就会被阻塞，直到锁被释放。一旦线程执行完 synchronized 区域的代码，它就会释放锁，其他线程可以竞争获取该锁。\",\"卖票案例\",\"class Ticket { int count = 3000; public synchronized void sale() { if (count > 0) { System.out.println(Thread.currentThread().getName() + \\\"卖出了第\\\" + (count--) + \\\"张票，还剩\\\" + count + \\\"张票\\\"); } } } public class SaleTicket { public static void main(String[] args) { Ticket ticket = new Ticket(); new Thread(() -> { for (int i = 0; i < 4000; i++) { ticket.sale(); } }, \\\"A\\\").start(); new Thread(() -> { for (int i = 0; i < 4000; i++) { ticket.sale(); } }, \\\"B\\\").start(); new Thread(() -> { for (int i = 0; i < 4000; i++) { ticket.sale(); } }, \\\"C\\\").start(); } } \",\"ReentrantLock锁实现：\",\"ReentrantLock 是Java中java.util.concurrent.locks包下的一种可重入锁。它提供了比传统的synchronized关键字更灵活的锁定机制，允许对共享资源进行更细粒度的控制。以下是 ReentrantLock 的一些主要特点和使用方法：\",\"可重入性： 类似于synchronized，ReentrantLock 具有可重入性，允许线程多次获取同一把锁。\",\"公平性： 可以选择在构造 ReentrantLock 时指定是否使用公平锁。公平锁按照请求锁的顺序来获取锁，而非公平锁允许插队。在构造函数中，通过传入 true 或 false 来指定是否使用公平锁，默认是非公平锁。\",\"ReentrantLock fairLock = new ReentrantLock(true); // 公平锁 ReentrantLock unfairLock = new ReentrantLock(); // 非公平锁 \",\"锁定和解锁： 使用 lock() 方法获取锁，unlock() 方法释放锁。为了确保在使用 lock 后能够正确释放锁，通常会在 finally 块中调用 unlock()。\",\"ReentrantLock lock = new ReentrantLock(); try { lock.lock(); // 执行同步代码块 } finally { lock.unlock(); } \",\"Condition：ReentrantLock 还提供了与锁关联的 Condition 对象，可以用于在不同线程之间进行等待和通知。\",\"ReentrantLock lock = new ReentrantLock(); Condition condition = lock.newCondition(); // 在一个线程中等待 lock.lock(); try { condition.await(); } finally { lock.unlock(); } // 在另一个线程中通知 lock.lock(); try { condition.signal(); } finally { lock.unlock(); } \",\"ReentrantLock 的灵活性和功能强大，使得它成为处理复杂同步需求的一种有力工具。然而，需要谨慎使用，确保在锁定和解锁的过程中不会出现死锁等问题。\",\"import java.util.concurrent.locks.ReentrantLock; class Ticket { int count = 3000; private final ReentrantLock lock = new ReentrantLock(); public void sale() { lock.lock(); try { if (count > 0) { System.out.println(Thread.currentThread().getName() + \\\"卖出了第\\\" + (count--) + \\\"张票，还剩\\\" + count + \\\"张\\\"); } } finally { lock.unlock(); } } } public class SaleTicket { public static void main(String[] args) { Ticket ticket = new Ticket(); new Thread(() -> { for (int i = 0; i < 3000; i++) { ticket.sale(); } }, \\\"A\\\").start(); new Thread(() -> { for (int i = 0; i < 3000; i++) { ticket.sale(); } }, \\\"B\\\").start(); new Thread(() -> { for (int i = 0; i < 3000; i++) { ticket.sale(); } }, \\\"C\\\").start(); } } \",\"区别：\",\"Lock 和 synchronized 都是Java中用于实现线程同步的机制，区别：\",\"可见性：\",\"synchronized 保证了线程的可见性。当一个线程获取到锁时，会使在该锁上进行的修改对其他线程可见。\",\"Lock 不具备自动释放锁的特性，需要手动调用 unlock() 方法，因此在使用时需要更加小心，确保在合适的时机释放锁，以防止死锁等问题。\",\"可中断性：\",\"synchronized 不支持中断，即在获取锁的过程中，如果其他线程想要中断正在等待锁的线程，是无法直接实现的。\",\"Lock 提供了对中断的支持，通过 lockInterruptibly() 方法可以响应中断。\",\"条件变量：\",\"Lock 提供了与锁关联的 Condition 对象，可以用于在不同线程之间进行等待和通知。这使得线程间的协作更加灵活。\",\"synchronized 也可以使用 Object 的 wait()、notify()、notifyAll() 方法进行线程间的等待和通知，但这些方法必须在同步代码块或同步方法中调用。\",\"锁的公平性：\",\"Lock 可以选择使用公平锁或非公平锁，通过构造函数传入参数进行设置。公平锁按照请求锁的顺序获取锁，而非公平锁允许插队。\",\"synchronized 使用的是非公平锁。\",\"灵活性：\",\"Lock 提供了更灵活的锁定和解锁机制，允许更细粒度的控制。\",\"synchronized 的使用相对简单，但灵活性较差。\"]},\"92\":{\"h\":\"线程间通信\",\"t\":[\"第一步创建资源类，在资源类创建属性和操作方法 第二步在资源类操作方法\",\"判断\",\"干活\",\"通知\",\"第三步创建多个线程：调用资源类的操作方法\",\"class Share { private int number = 0; public synchronized void increment() throws InterruptedException { if (number != 0) { this.wait(); } number++; System.out.println(Thread.currentThread().getName() + \\\"=>\\\" + number); this.notifyAll(); // 通知其他线程 } public synchronized void decrement() throws InterruptedException { if (number != 1) { this.wait(); } number--; System.out.println(Thread.currentThread().getName() + \\\"=>\\\" + number); this.notifyAll(); // 通知其他线程 } } public class Test { public static void main(String[] args) { Share share = new Share(); new Thread(() -> { for (int i = 0; i < 10; i++) { try { share.increment(); } catch (InterruptedException e) { e.printStackTrace(); } } }, \\\"A\\\").start(); new Thread(() -> { for (int i = 0; i < 10; i++) { try { share.decrement(); } catch (InterruptedException e) { e.printStackTrace(); } } }, \\\"B\\\").start(); } } \",\"虚假唤醒是指在没有调用 notify() 或 notifyAll() 的情况下，线程被唤醒。虽然在等待的过程中条件可能已经满足了，但是线程却被唤醒了，这种情况被称为虚假唤醒。\",\"为了防止虚假唤醒，你可以将 wait() 方法调用放在一个循环中，并且检查等待条件是否满足。这样即使线程在没有被通知的情况下被唤醒，它也会重新检查条件并决定是否继续等待。\",\"通过使用 while 循环来替换 if 语句，可以确保即使发生虚假唤醒，线程也会重新检查条件并决定是否继续等待。\"]},\"93\":{\"h\":\"线程间定制化通信\",\"t\":[\"问题: A 线程打印 5 次 A，B 线程打印 10 次 B，C 线程打印 15 次 C,按照 此顺序循环 10 轮\",\"await() 方法：\",\"conditionA.await(), conditionB.await(), 和 conditionC.await() 都是用来让当前线程进入等待状态，等待其他线程通过 signal() 或 signalAll() 方法来唤醒它。\",\"在调用 await() 方法时，当前线程会释放锁，允许其他线程进入临界区执行。\",\"signal() 方法：\",\"conditionA.signal(), conditionB.signal(), 和 conditionC.signal() 用于唤醒在对应 Condition 上等待的一个线程。\",\"唤醒的线程会尝试重新获取锁，然后继续执行。\",\"import java.util.concurrent.locks.Condition; import java.util.concurrent.locks.Lock; import java.util.concurrent.locks.ReentrantLock; class ShareResource { // 0:A 1:B 2:C private int flag = 0; private final Lock lock = new ReentrantLock(); private Condition conditionA = lock.newCondition(); private Condition conditionB = lock.newCondition(); private Condition conditionC = lock.newCondition(); public void print5(int loop) { lock.lock(); try { // 1. 判断 while (flag != 0) { conditionA.await(); } // 2. 干活 for (int i = 0; i < 5; i++) { System.out.println(Thread.currentThread().getName() + \\\"\\\\t\\\" + i + \\\"\\\\t\\\" + loop); } // 3. 通知 flag = 1; conditionB.signal(); } catch (Exception e) { e.printStackTrace(); } finally { lock.unlock(); } } public void print10(int loop) { lock.lock(); try { // 1. 判断 while (flag != 1) { conditionB.await(); } // 2. 干活 for (int i = 0; i < 10; i++) { System.out.println(Thread.currentThread().getName() + \\\"\\\\t\\\" + i + \\\"\\\\t\\\" + loop); } // 3. 通知 flag = 2; conditionC.signal(); } catch (Exception e) { e.printStackTrace(); } finally { lock.unlock(); } } public void print15(int loop) { lock.lock(); try { // 1. 判断 while (flag != 2) { conditionC.await(); } // 2. 干活 for (int i = 0; i < 15; i++) { System.out.println(Thread.currentThread().getName() + \\\"\\\\t\\\" + i + \\\"\\\\t\\\" + loop); } // 3. 通知 flag = 0; conditionA.signal(); } catch (Exception e) { e.printStackTrace(); } finally { lock.unlock(); } } } public class Test { public static void main(String[] args) { ShareResource shareResource = new ShareResource(); new Thread(() -> { for (int i = 0; i < 10; i++) { shareResource.print5(i); } }, \\\"A\\\").start(); new Thread(() -> { for (int i = 0; i < 10; i++) { shareResource.print10(i); } }, \\\"B\\\").start(); new Thread(() -> { for (int i = 0; i < 10; i++) { shareResource.print15(i); } }, \\\"C\\\").start(); } } \"]},\"94\":{\"h\":\"集合的线程安全\"},\"95\":{\"h\":\"ArrayList线程不安全演示\",\"t\":[\"public class Test { public static void main(String[] args) { //List集合线程不安全 List<String> list = new ArrayList<>(); for (int i = 0; i < 30; i++) { new Thread(() -> { list.add(Thread.currentThread().getName()); System.out.println(list); }, String.valueOf(i)).start(); } } } \",\"运行结果：\",\"原因：源码里面没有加锁\"]},\"96\":{\"h\":\"解决方案Vector\",\"t\":[\"public synchronized boolean add(E e) { modCount++; add(e, elementData, elementCount); return true; } \",\"只需要把上面的ArrayList换成Vector即可，因为Vector的源码里面加了synchronized关键字\"]},\"97\":{\"h\":\"解决方案Collections\",\"t\":[\"List<String> list = Collections.synchronizedList(new ArrayList<>()); \"]},\"98\":{\"h\":\"解决方案CopyOnWriteArrayList\",\"t\":[\"List<String> list = new CopyOnWriteArrayList<>(); \",\"CopyOnWriteArrayList 是 Java 中并发编程中的一种线程安全的容器，它是 ArrayList 的一个线程安全的变体。与 ArrayList 不同的是，CopyOnWriteArrayList 的读操作是非常高效的，因为它不需要加锁，而写操作是通过复制底层数组来实现的，因此写操作的性能会比较低。\",\"特点：\",\"线程安全：CopyOnWriteArrayList 是线程安全的，多个线程可以同时读取其中的元素而不会发生并发修改异常（ConcurrentModificationException）。\",\"写操作的复制机制： 当执行写操作（如添加、修改、删除元素）时，CopyOnWriteArrayList 会先复制一份原数组，然后在副本上执行写操作，最后将副本替换原数组。这样可以确保写操作不会影响到正在进行的读操作，从而保证线程安全。\",\"适用于读操作频繁、写操作相对较少的场景： 由于写操作需要复制整个数组，因此写操作的性能相对较低。但是在读操作频繁、写操作较少的场景下，CopyOnWriteArrayList 的性能优势会体现出来。\",\"迭代器弱一致性：CopyOnWriteArrayList 的迭代器是弱一致性的，即迭代器遍历的是创建迭代器时的快照。这意味着在迭代期间对集合的修改不会被迭代器所感知，但是在迭代器创建之后的修改会被迭代器感知。\",\"内存占用较高： 由于写操作会复制整个数组，因此 CopyOnWriteArrayList 的内存占用会比较高。\",\"源码如下：\",\"public boolean add(E e) { synchronized (lock) { Object[] es = getArray(); int len = es.length; es = Arrays.copyOf(es, len + 1); es[len] = e; setArray(es); return true; } } \"]},\"99\":{\"h\":\"HashSet线程不安全\",\"t\":[\"//HashSet 线程不安全 Set<Integer> set = new HashSet<>(); for (int i = 0; i < 30; i++) { new Thread(() -> { set.add(new Random().nextInt(100)); System.out.println(set); }, String.valueOf(i)).start(); } \",\"解决办法：CopyOnWriteArraySet\"]},\"100\":{\"h\":\"HashMap线程不安全\",\"t\":[\"public static void main(String[] args) { //HashMap 线程不安全 Map<String, String> map = new HashMap<>(); for (int i = 0; i < 30; i++) { new Thread(() -> { map.put(UUID.randomUUID().toString().substring(0, 5), \\\"value\\\"); System.out.println(map); }, String.valueOf(i)).start(); } } \",\"解决办法：ConcurrentHashMap\"]},\"101\":{\"h\":\"多线程锁\",\"t\":[\"具体表现为以下 3 种形式。\",\"对于普通同步方法，锁是当前实例对象。\",\"对于静态同步方法，锁是当前类的 Class 对象。\",\"对于同步方法块，锁是 Synchonized 括号里配置的对象\"]},\"102\":{\"h\":\"公平锁和非公平锁\",\"t\":[\"公平锁（Fair Lock）：\",\"公平锁是一种保证线程获取锁的顺序按照线程请求的顺序来的锁。即，先来先得的原则。\",\"在公平锁中，当有多个线程等待一个锁时，锁将按照请求的顺序分配给这些线程。这种方式可以防止某些线程长时间等待而不被公平地获得锁，避免饥饿问题。\",\"Java中的 ReentrantLock 可以通过构造函数的参数来指定是公平锁还是非公平锁，默认是非公平锁。\",\"ReentrantLock fairLock = new ReentrantLock(true); // 公平锁 \",\"非公平锁（Non-Fair Lock）：\",\"非公平锁是一种不保证线程获取锁的顺序的锁。线程获取锁是基于竞争的，谁先抢到锁就由谁获得。\",\"在非公平锁中，新来的线程有可能在等待队列中插队，直接获取锁，而不考虑之前等待的线程。\",\"非公平锁的优点是相对于公平锁，它的吞吐量更高，性能更好，因为不会导致线程频繁地切换和竞争。\",\"Java中的 ReentrantLock 默认就是非公平锁。\",\"ReentrantLock nonFairLock = new ReentrantLock(); // 非公平锁 \",\"如果对线程获取锁的顺序有特定的要求，且希望避免饥饿问题，可以使用公平锁。\",\"如果追求更好的性能，允许新来的线程插队，可以使用非公平锁。\"]},\"103\":{\"h\":\"可重入锁\",\"t\":[\"可重入锁是指同一个线程在持有锁的情况下，能够多次获取同一个锁，而不会被阻塞。在Java中，ReentrantLock 和 synchronized 关键字都是可重入锁的实现。\",\"synchronized隐式实现\",\"public static void main(String[] args) { Object object = new Object(); new Thread(() -> { synchronized (object) { System.out.println(Thread.currentThread().getName()+\\\"外层\\\"); synchronized (object) { System.out.println(Thread.currentThread().getName()+\\\"中层\\\"); synchronized (object) { System.out.println(Thread.currentThread().getName()+\\\"内层\\\"); } } } }).start(); } \",\"可以多次进入\",\"Lock显示实现\",\"Lock lock =new ReentrantLock(); new Thread(() -> { try { lock.lock(); System.out.println(\\\"外层\\\"); try { lock.lock(); System.out.println(\\\"内层\\\"); } finally { lock.unlock(); } } finally { lock.unlock(); } }).start(); \",\"注意上锁之后必须要解锁\"]},\"104\":{\"h\":\"死锁\",\"t\":[\"死锁是多线程编程中常见的问题，它发生在两个或多个线程互相等待对方释放资源而无法继续执行的情况。简而言之，死锁是一种状态，其中每个线程都在等待其他线程释放锁。\",\"死锁场景包括以下四个必要条件：\",\"互斥条件（Mutual Exclusion）： 至少有一个资源必须处于非共享模式，即一次只能由一个线程使用。如果另一个线程请求该资源，它必须等待，直到占有资源的线程释放它。\",\"占有并等待条件（Hold and Wait）： 一个线程持有至少一个资源，并且正在等待获取其他线程持有的资源。\",\"非抢占条件（No Preemption）： 线程不能强制占有其他线程已经持有的资源，只能等待，直到资源被释放。\",\"循环等待条件（Circular Wait）： 一组线程互相等待彼此持有的资源，形成一个循环。\",\"import java.util.concurrent.TimeUnit; public class Test { static Object a = new Object(); static Object b = new Object(); public static void main(String[] args) { //死锁 new Thread(() -> { synchronized (a) { System.out.println(Thread.currentThread().getName() + \\\" 获取b锁\\\"); try { TimeUnit.SECONDS.sleep(1); } catch (InterruptedException e) { throw new RuntimeException(e); } synchronized (b) { System.out.println(Thread.currentThread().getName() + \\\" 持有锁b，想要获取锁a\\\"); } } }, \\\"A\\\").start(); new Thread(() -> { synchronized (b) { System.out.println(Thread.currentThread().getName() + \\\" 获取a锁\\\"); try { TimeUnit.SECONDS.sleep(1); } catch (InterruptedException e) { throw new RuntimeException(e); } synchronized (a) { System.out.println(Thread.currentThread().getName() + \\\" 持有锁a，想要获取锁b\\\"); } } }, \\\"B\\\").start(); } } \",\"验证是否死锁：\",\"使用jps -l命令\",\"接着使用命令jstack 84118 84118是Test程序\",\"可以发现死锁\"]},\"105\":{\"h\":\"Callable接口\",\"t\":[\"使用FutureTask\",\"主要作用：\",\"异步计算：FutureTask 可以接受一个 Callable 对象作为参数，在构造时传入，也可以接受一个 Runnable 对象。\",\"获取计算结果： 可以通过 get() 方法来获取计算的结果。如果计算尚未完成，get() 方法会阻塞当前线程，直到计算完成并返回结果。\",\"取消任务： 可以调用 cancel() 方法来取消任务的执行。任务只有在尚未开始执行时才能被取消，或者在某些情况下可以被中断。\",\"判断任务状态： 可以通过 isDone()、isCancelled() 方法来判断任务的执行状态。\",\"public static void main(String[] args) throws ExecutionException, InterruptedException { System.out.println(\\\"main .... start ....\\\"); FutureTask<Integer> task = new FutureTask<>(new Callable01()); new Thread(task, \\\"A\\\").start(); Integer i = task.get(); //get会阻塞，直到线程执行完毕 System.out.println(\\\"i = \\\" + i); System.out.println(\\\"main .... end ....\\\"); } public static class Callable01 implements Callable<Integer> { @Override public Integer call() throws Exception { System.out.println(\\\"当前线程:\\\" + Thread.currentThread().getId()); int i = 10 / 2; System.out.println(\\\"i = \\\" + i); return i; } } \"]},\"106\":{\"h\":\"JUC强大的辅助类\"},\"107\":{\"h\":\"减少计数CountDownLatch\",\"t\":[\"public class Test { public static void main(String[] args) { //6个同学离开教室后，班长才可以离开教室 for (int i = 0; i < 6; i++) { new Thread(()->{ System.out.println(Thread.currentThread().getName() + \\\"离开了教室\\\"); },String.valueOf(i)).start(); } System.out.println(Thread.currentThread().getName() + \\\"班长离开了教室\\\"); } } \",\"这样会存在问题：\",\"使用CountDownLatch\",\"public static void main(String[] args) throws InterruptedException { //6个同学离开教室后，班长才可以离开教室 CountDownLatch countDownLatch = new CountDownLatch(6); for (int i = 0; i < 6; i++) { new Thread(()->{ System.out.println(Thread.currentThread().getName() + \\\"离开了教室\\\"); countDownLatch.countDown(); },String.valueOf(i)).start(); } //等待 countDownLatch.await(); System.out.println(Thread.currentThread().getName() + \\\"班长离开了教室\\\"); } \"]},\"108\":{\"h\":\"循环栅栏CyclicBarrier\",\"t\":[\"CyclicBarrier 是 Java 中用于同步线程的工具类之一，它可以让一组线程达到一个同步点，然后再同时开始执行。CyclicBarrier` 的特点是可以循环使用，即当所有线程都到达同步点后，可以重新开始新一轮的同步。\",\"同步点：CyclicBarrier 设定一个同步点，所有参与的线程必须到达这个点才能继续执行。\",\"循环使用： 与 CountDownLatch 不同，CyclicBarrier 可以重用。一旦所有线程到达同步点，它会自动重置，可以用于下一轮同步。\",\"构造方法：\",\"CyclicBarrier(int parties)：构造一个 CyclicBarrier，指定参与同步的线程数量。\",\"CyclicBarrier(int parties, Runnable barrierAction)：构造一个 CyclicBarrier，除了指定参与同步的线程数量外，还可以在所有线程到达同步点时执行一个指定的Runnable。\",\"等待线程到达同步点：await() 方法用于让线程等待其他线程到达同步点。 \",\"当线程调用 await() 方法时，它就会被阻塞，等待其他线程到达同步点。\",\"当所有参与的线程都调用了 await() 方法后，它们就会被释放，继续执行。\",\"模拟等7个人召唤神龙\",\"public class Test { static final int COUNT = 7; public static void main(String[] args) throws InterruptedException { CyclicBarrier barrier = new CyclicBarrier(COUNT, () -> { System.out.println(\\\"召唤神龙\\\"); }); // 7个线程，每个线程代表一个球员 for (int i = 0; i < 7; i++) { new Thread(() -> { System.out.println(Thread.currentThread().getName() + \\\"号球员已经就位\\\"); try { barrier.await(); } catch (Exception e) { e.printStackTrace(); } }, String.valueOf(i)).start(); } } } \"]},\"109\":{\"h\":\"信号灯Semaphore\",\"t\":[\"Semaphore 是 Java 中用于控制并发线程数量的工具类，它可以控制同时访问某个特定资源的线程数量。Semaphore 维护了一定数量的许可证（permits），线程在访问资源前必须先获得许可证，每个 acquire() 操作会消耗一个许可证，而每个 release() 操作会释放一个许可证。\",\"许可证数量：Semaphore 维护了一定数量的许可证，可以通过构造函数来指定初始的许可证数量。\",\"获取许可证：acquire() 方法用于获取许可证，如果有可用的许可证则立即返回，否则阻塞线程等待，直到有许可证可用。\",\"释放许可证：release() 方法用于释放许可证，增加许可证的数量。释放后，如果有等待的线程，它们中的一个将会获得许可证。\",\"6辆汽车，3个停车位\",\"public static void main(String[] args) { Semaphore semaphore = new Semaphore(3); for (int i = 0; i < 6; i++) { new Thread(() -> { try { semaphore.acquire(); // 抢占 System.out.println(Thread.currentThread().getName() + \\\"--->抢到了车位\\\"); Thread.sleep(1000); System.out.println(Thread.currentThread().getName() + \\\"<---离开了车位\\\"); } catch (InterruptedException e) { e.printStackTrace(); } finally { semaphore.release(); // 释放 } }, String.valueOf(i)).start(); } } \"]},\"110\":{\"h\":\"ReentrantReadWriteLock读写锁\",\"t\":[\"几种常见的锁：\",\"乐观锁（Optimistic Locking）：\",\"乐观锁是一种基于数据版本控制的锁机制。在乐观锁的思想中，假设并发访问的情况是比较少见的，因此在读取数据时不加锁，而是在更新数据时检查数据的版本号或其他标识，确保在更新时数据没有被其他线程修改。如果数据被修改，更新操作将失败，需要重新尝试。\",\"悲观锁（Pessimistic Locking）：\",\"悲观锁是一种悲观地认为并发访问是普遍存在的，因此在读取数据时就会加锁，防止其他线程同时访问相同的数据。悲观锁常常使用数据库的行锁来实现，以确保在事务中对数据的读写操作是串行的。\",\"表锁（Table Lock）：\",\"表锁是在数据库表级别上加锁，即当一个事务对表进行操作时，其他事务不能同时对该表进行操作。表锁的粒度较大，可能会导致并发性能下降，因为多个事务可能需要等待同一表的锁。\",\"行锁（Row Lock）：\",\"行锁是在数据库表的行级别上加锁，即锁定表中的某一行数据。行锁的粒度较小，允许多个事务同时操作同一表的不同行，提高了并发性。但是，行锁也可能导致死锁等问题，需要谨慎使用。\",\"测试，不加锁\",\"import java.util.HashMap; import java.util.Map; import java.util.concurrent.TimeUnit; class MyCache { private volatile Map<String, Object> map = new HashMap<>(); public void put(String key, Object value) throws InterruptedException { System.out.println(Thread.currentThread().getName() + \\\"写入\\\" + key); TimeUnit.MICROSECONDS.sleep(300); map.put(key, value); System.out.println(Thread.currentThread().getName() + \\\"写入完成\\\"); } public void get(String key) throws InterruptedException { System.out.println(Thread.currentThread().getName() + \\\"读取\\\" + key); TimeUnit.MICROSECONDS.sleep(300); Object result = map.get(key); System.out.println(Thread.currentThread().getName() + \\\"读取完成\\\" + result); } } public class Test { public static void main(String[] args) { MyCache myCache = new MyCache(); for (int i = 0; i < 5; i++) { final int tempInt = i; new Thread(() -> { try { myCache.put(tempInt + \\\"\\\", tempInt + \\\"\\\"); } catch (InterruptedException e) { e.printStackTrace(); } }, \\\"Thread\\\" + i).start(); } for (int i = 0; i < 5; i++) { final int tempInt = i; new Thread(() -> { try { myCache.get(tempInt + \\\"\\\"); } catch (InterruptedException e) { e.printStackTrace(); } }, \\\"Thread\\\" + i).start(); } } } \",\"此时读写会有问题：\",\"修改后代码：\",\"import java.util.HashMap; import java.util.Map; import java.util.concurrent.TimeUnit; import java.util.concurrent.locks.ReadWriteLock; import java.util.concurrent.locks.ReentrantReadWriteLock; class MyCache { private volatile Map<String, Object> map = new HashMap<>(); private ReadWriteLock rwLock = new ReentrantReadWriteLock(); public void put(String key, Object value) { rwLock.writeLock().lock(); // 加锁 System.out.println(Thread.currentThread().getName() + \\\"写入\\\" + key); try { TimeUnit.MICROSECONDS.sleep(300); map.put(key, value); System.out.println(Thread.currentThread().getName() + \\\"写入完成\\\"); } catch (InterruptedException e) { throw new RuntimeException(e); } finally { rwLock.writeLock().unlock(); // 释放锁 } } public void get(String key) { rwLock.writeLock().lock(); // 加锁 System.out.println(Thread.currentThread().getName() + \\\"读取\\\" + key); try { TimeUnit.MICROSECONDS.sleep(300); Object result = map.get(key); System.out.println(Thread.currentThread().getName() + \\\"读取完成\\\" + result); } catch (InterruptedException e) { throw new RuntimeException(e); } finally { rwLock.writeLock().unlock(); // 释放锁 } } } public class Test { public static void main(String[] args) { MyCache myCache = new MyCache(); for (int i = 0; i < 5; i++) { final int tempInt = i; new Thread(() -> { myCache.put(tempInt + \\\"\\\", tempInt + \\\"\\\"); }, \\\"Thread\\\" + i).start(); } for (int i = 0; i < 5; i++) { final int tempInt = i; new Thread(() -> { myCache.get(tempInt + \\\"\\\"); }, \\\"Thread\\\" + i).start(); } } } \"]},\"111\":{\"h\":\"锁降级\",\"t\":[\"写锁可以降级为读锁，反之不行\",\"public static void main(String[] args) { ReentrantReadWriteLock lock = new ReentrantReadWriteLock(); ReentrantReadWriteLock.ReadLock readLock = lock.readLock(); ReentrantReadWriteLock.WriteLock writeLock = lock.writeLock(); //锁降级 writeLock.lock(); System.out.println(\\\"writeLock\\\"); //降级为读锁 readLock.lock(); System.out.println(\\\"readLock\\\"); writeLock.unlock(); System.out.println(\\\"writeLock unlock\\\"); readLock.unlock(); System.out.println(\\\"readLock unlock\\\"); } \"]},\"112\":{\"h\":\"BlockingQueue阻塞队列\",\"t\":[\"阻塞队列：\",\"阻塞操作：BlockingQueue 支持阻塞操作，即当队列为空时，消费者线程试图从队列中获取元素时会被阻塞，直到有元素可用；当队列已满时，生产者线程试图往队列中添加元素时会被阻塞，直到队列有空间。\",\"线程安全：BlockingQueue 的实现是线程安全的，可以在多线程环境下安全地进行数据传递。\",\"常见实现：\",\"LinkedBlockingQueue：基于链表的阻塞队列，可以设置容量，当达到容量限制时，会阻塞等待。\",\"ArrayBlockingQueue：基于数组的阻塞队列，需要指定容量，当达到容量限制时，会阻塞等待。\",\"PriorityBlockingQueue：无界阻塞队列，元素按照优先级顺序出队，实现了 Comparable 接口或使用构造函数指定的 Comparator。\",\"DelayQueue：延迟阻塞队列，元素只有在其指定的延迟时间过后才能出队。\",\"等等。\",\"阻塞方法：\",\"put(E e)：将元素添加到队列，如果队列已满，则阻塞等待空间。\",\"take()：从队列中取出元素，如果队列为空，则阻塞等待元素可用。\",\"超时操作： 除了阻塞方法外，BlockingQueue 还提供了带有超时参数的方法，例如 offer(E e, long timeout, TimeUnit unit) 和 poll(long timeout, TimeUnit unit)，允许在一定的时间内阻塞等待或者返回特定值。\",\"阻塞队列演示\",\"import java.util.concurrent.ArrayBlockingQueue; import java.util.concurrent.BlockingQueue; import java.util.concurrent.TimeUnit; public class Test { public static void main(String[] args) { BlockingQueue<String> blockingQueue = new ArrayBlockingQueue<>(2); //第一组 add remove element 会抛出异常 System.out.println(blockingQueue.add(\\\"a\\\")); System.out.println(blockingQueue.add(\\\"b\\\")); //System.out.println(blockingQueue.add(\\\"c\\\")); //java.lang.IllegalStateException: Queue full System.out.println(blockingQueue.element()); //a System.out.println(blockingQueue.remove()); //a System.out.println(blockingQueue.remove()); //b //System.out.println(blockingQueue.remove()); //java.util.NoSuchElementException //第二组 offer poll peek 不会抛出异常 System.out.println(blockingQueue.offer(\\\"a\\\")); //true System.out.println(blockingQueue.offer(\\\"b\\\")); //true System.out.println(blockingQueue.offer(\\\"c\\\")); //false System.out.println(blockingQueue.peek()); //a System.out.println(blockingQueue.poll()); //a System.out.println(blockingQueue.poll()); //b System.out.println(blockingQueue.poll()); //null //第三组 put take 不会抛出异常 try { blockingQueue.put(\\\"a\\\"); blockingQueue.put(\\\"b\\\"); //blockingQueue.put(\\\"c\\\"); //阻塞 } catch (InterruptedException e) { e.printStackTrace(); } try { System.out.println(blockingQueue.take()); //a System.out.println(blockingQueue.take()); //b //System.out.println(blockingQueue.take()); //阻塞 } catch (InterruptedException e) { e.printStackTrace(); } //第四组 offer poll peek 可以设置超时时间 try { blockingQueue.offer(\\\"a\\\", 2, TimeUnit.SECONDS); blockingQueue.offer(\\\"b\\\", 2, TimeUnit.SECONDS); //blockingQueue.offer(\\\"c\\\", 2, TimeUnit.SECONDS); //超时 } catch (InterruptedException e) { e.printStackTrace(); } try { System.out.println(blockingQueue.poll(2, TimeUnit.SECONDS)); //a System.out.println(blockingQueue.poll(2, TimeUnit.SECONDS)); //b //System.out.println(blockingQueue.poll(2, TimeUnit.SECONDS)); //超时 } catch (InterruptedException e) { e.printStackTrace(); } } } \"]},\"113\":{\"h\":\"ThreadPool线程池\"},\"114\":{\"h\":\"线程池概述\",\"t\":[\"线程池是一种管理和复用线程的机制，它可以在应用程序中创建和维护线程，以便更有效地处理并发任务。线程池的主要目标是降低线程创建和销毁的开销，并提高系统的性能、稳定性以及资源的利用率。\",\"程池组成：\",\"工作队列（Work Queue）： 存储等待执行的任务。\",\"线程池管理器（Thread Pool Manager）： 负责创建、管理和销毁线程。\",\"优势：\",\"降低线程创建销毁的开销： 线程的创建和销毁是相对昂贵的操作。通过线程池，可以事先创建一定数量的线程，并在任务到达时重复使用这些线程，减少创建和销毁线程的开销。\",\"提高系统性能： 线程池可以根据系统的负载情况动态地调整线程数量，使得系统更好地适应工作负载，提高整体性能。\",\"提高稳定性： 由于线程池对线程的创建和销毁进行了管理，可以防止因为大量的线程创建导致系统资源不足而崩溃。\",\"更好地控制资源： 可以限制线程的数量，避免系统因为过多线程而耗尽资源，如内存。\",\"Java 中的线程池：\",\"Java 提供了 Executor 框架和 ExecutorService 接口，以及其实现类 ThreadPoolExecutor 和 ScheduledThreadPoolExecutor，用于方便地创建和管理线程池。\",\"线程池的创建：\",\"可以使用 Executors 工厂类的静态方法创建不同类型的线程池，如 newFixedThreadPool、newCachedThreadPool、newSingleThreadExecutor 等。\",\"线程池的生命周期：\",\"线程池的生命周期包括：创建、运行、关闭。在创建线程池后，它会一直运行，处理任务，直到显式调用关闭方法为止。\"]},\"115\":{\"h\":\"线程池创建\",\"t\":[\"线程池构造器：\",\"public ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue<Runnable> workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler) \",\"corePoolSize（核心线程数）: \",\"描述：线程池中始终保持存活的线程数，即使它们处于空闲状态。\",\"maximumPoolSize（最大线程数）: \",\"描述：线程池中允许存在的最大线程数。\",\"keepAliveTime（线程空闲时间）: \",\"描述：当线程池中的线程数超过核心线程数时，多余的空闲线程在被终止之前等待新任务的最长时间。\",\"unit（时间单位）: \",\"描述：用于指定 keepAliveTime 的时间单位，可以是秒、毫秒等。\",\"workQueue（工作队列）: \",\"描述：用于保存等待执行的任务的阻塞队列。类型：BlockingQueue<Runnable>。\",\"threadFactory（线程工厂）: \",\"描述：用于创建新线程的工厂。类型：ThreadFactory 接口的实现。\",\"handler（拒绝策略）: \",\"描述：当工作队列已满，并且无法再接受新任务时，用于处理新任务的策略。类型：RejectedExecutionHandler 接口的实现。\",\"面试题：一个线程池 core 7； max 20 ，queue：50，100 并发进来怎么分配的；\",\"答案：先有 7 个能直接得到执行，接下来 50 个进入队列排队，在多开 13 个继续执行。现在70 个被安排上了。剩下 30 个默认拒绝策略。\",\"常见线程池：\",\"FixedThreadPool (固定大小线程池):\",\"FixedThreadPool 是一个具有固定线程数量的线程池。\",\"在执行任务时，如果线程池中的线程都在执行任务，新任务会被放入队列中等待。\",\"适用于并发任务数量可控的场景。\",\"CachedThreadPool (缓存线程池):\",\"CachedThreadPool 是一个可根据需要创建新线程的线程池，线程池的大小可动态调整。\",\"在执行任务时，如果线程池中的线程都在执行任务，会创建新的线程来处理新任务。\",\"适用于短生命周期的异步任务。\",\"SingleThreadExecutor (单线程线程池):\",\"SingleThreadExecutor 是一个仅包含一个线程的线程池。\",\"所有提交的任务都按顺序执行，保证不会有并发执行的情况。\",\"适用于需要保证任务按照顺序执行的场景。\",\"ScheduledThreadPool (定时任务线程池):\",\"ScheduledThreadPool 是一个支持定时以及周期性执行任务的线程池。\",\"可以用于执行定时任务，例如定时执行任务、周期性执行任务等。\",\"适用于需要按照一定规律执行任务的场景。\",\"这些线程池实现都是通过 Executors 工厂类创建的，提供了方便的线程池创建和管理方式。\",\"实际使用中：\",\"【强制】线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。 说明： Executors 返回的线程池对象的弊端如下： 1） FixedThreadPool 和 SingleThreadPool ： 允许的请求队列的长度可能会堆积大量的请求，从而导致 OOM。 2） CachedThreadPool ： 允许的创建线程数量为 Integer.MAX_VALUE，可能会创建大量的线程，从而导致 OOM。\"]},\"116\":{\"h\":\"自定义线程池\",\"t\":[\"ExecutorService executor = new ThreadPoolExecutor( 2, 5, 1L, TimeUnit.SECONDS, new ArrayBlockingQueue<>(3), Executors.defaultThreadFactory(), new ThreadPoolExecutor.AbortPolicy() ); \"]},\"117\":{\"h\":\"Fork/Join分支合并框架\",\"t\":[\"Fork/Join（分支合并）框架是 Java 并发包中用于并行计算的框架。它通过递归地将任务拆分成更小的子任务，并在最后将子任务的结果进行合并，从而实现任务的并行执行。Fork/Join 框架最适用于可以被递归地拆分成独立子任务的问题。\",\"主要包括以下几个核心组件：\",\"ForkJoinPool（分支合并池）： 是 Fork/Join 框架的核心，负责管理工作线程的执行和任务的提交。它是一个特殊类型的 ExecutorService。\",\"ForkJoinTask（分支合并任务）： 用于表示可以由 Fork/Join 池执行的任务。RecursiveTask 和 RecursiveAction 是 ForkJoinTask 的两个子类。 \",\"RecursiveTask<V>：表示一个有返回值的任务，执行结果的类型是 V。\",\"RecursiveAction：表示没有返回值的任务。\",\"RecursiveTask： 递归任务，用于有返回值的任务。继承 RecursiveTask 需要实现 compute 方法。\",\"RecursiveAction： 递归操作，用于没有返回值的任务。同样，继承 RecursiveAction 需要实现 compute 方法。\",\"Fork/Join 框架的基本流程如下：\",\"任务拆分： 将一个大任务拆分成多个小任务，如果任务足够小，则直接执行，否则继续拆分。\",\"任务执行： 将小任务提交给 Fork/Join 池执行，池中的线程会并行地执行这些任务。\",\"结果合并： 将小任务的执行结果合并成大任务的结果。\",\"import java.util.concurrent.ExecutionException; import java.util.concurrent.ForkJoinPool; import java.util.concurrent.ForkJoinTask; import java.util.concurrent.RecursiveTask; class MyTask extends RecursiveTask<Integer> { //拆分差值不能超过10 private static final Integer VALUE = 10; private int begin; private int end; private int result; public MyTask(int begin, int end) { this.begin = begin; this.end = end; } @Override protected Integer compute() { if ((end - begin) <= VALUE) { for (int i = begin; i <= end; i++) { result = result + i; } } else { int middle = (begin + end) / 2; MyTask task1 = new MyTask(begin, middle); MyTask task2 = new MyTask(middle + 1, end); task1.fork(); task2.fork(); result = task1.join() + task2.join(); } return result; } } public class Test { public static void main(String[] args) throws ExecutionException, InterruptedException { MyTask myTask = new MyTask(0, 100); ForkJoinPool forkJoinPool = new ForkJoinPool(); ForkJoinTask<Integer> forkJoinTask = forkJoinPool.submit(myTask); Integer result = forkJoinTask.get(); System.out.println(result); forkJoinPool.shutdown(); } } \"]},\"118\":{\"h\":\"CompletableFuture异步回调\"},\"119\":{\"h\":\"创建异步对象\",\"t\":[\"public static CompletableFuture<Void> runAsync(Runnable runnable) public static CompletableFuture<Void> runAsync(Runnable runnable,Executor executor) public static <U> CompletableFuture<U> supplyAsync(Supplier<U> supplier) public static <U> CompletableFuture<U> supplyAsync(Supplier<U> supplier,Executor executor) \",\"runAsync没有返回值，supply有返回值\",\"runAsync\",\"public static ExecutorService service = Executors.newFixedThreadPool(10); public static void main(String[] args) throws ExecutionException, InterruptedException { System.out.println(\\\"start ...\\\"); CompletableFuture<Void> future =CompletableFuture.runAsync(()->{ System.out.println(\\\"当前线程:\\\" + Thread.currentThread().getId()); int i = 10 / 2; System.out.println(\\\"i = \\\" + i); },service); System.out.println(\\\"end ...\\\"); } \",\"supplyAsync\",\"public static void main(String[] args) throws ExecutionException, InterruptedException { System.out.println(\\\"start ...\\\"); CompletableFuture<Integer> integerCompletableFuture = CompletableFuture.supplyAsync(() -> { System.out.println(\\\"当前线程:\\\" + Thread.currentThread().getId()); int i = 10 / 2; System.out.println(\\\"i = \\\" + i); return i; }, service); Integer i = integerCompletableFuture.get(); System.out.println(\\\"i = \\\" + i); System.out.println(\\\"end2 ...\\\"); } \"]},\"120\":{\"h\":\"完成时回调\",\"t\":[\"whenComplete回调\",\"public static ExecutorService service = Executors.newFixedThreadPool(10); public static void main(String[] args) throws ExecutionException, InterruptedException { System.out.println(\\\"start ...\\\"); CompletableFuture<Integer> future = CompletableFuture.supplyAsync(() -> { System.out.println(\\\"current thread: \\\" + Thread.currentThread().getName()); return 10 / 2; }, service).whenComplete((result, e) -> { System.out.println(\\\"current thread: \\\" + Thread.currentThread().getName()); if (e == null) { System.out.println(\\\"result: \\\" + result); } else { System.out.println(\\\"exception: \\\" + e); } }).exceptionally(e -> { System.out.println(\\\"exception: \\\" + e); return 0; }); Integer i = future.get(); System.out.println(\\\"result2: \\\" + i); System.out.println(\\\"end ...\\\"); } \",\"后续处理handle：\",\"public static ExecutorService service = Executors.newFixedThreadPool(10); public static void main(String[] args) throws ExecutionException, InterruptedException { System.out.println(\\\"start ...\\\"); CompletableFuture<Integer> future = CompletableFuture.supplyAsync(() -> { System.out.println(\\\"current thread: \\\" + Thread.currentThread().getName()); return 10 / 2; }, service).handle((res, thr) -> { System.out.println(\\\"current thread: \\\" + Thread.currentThread().getName()); return res * 2; }); Integer i = future.get(); System.out.println(\\\"result2: \\\" + i); System.out.println(\\\"end ...\\\"); } \",\"总结：\",\"public CompletableFuture<T> whenComplete( BiConsumer<? super T, ? super Throwable> action) { return uniWhenCompleteStage(null, action); } public CompletableFuture<T> whenCompleteAsync( BiConsumer<? super T, ? super Throwable> action) { return uniWhenCompleteStage(defaultExecutor(), action); } public CompletableFuture<T> whenCompleteAsync( BiConsumer<? super T, ? super Throwable> action, Executor executor) { return uniWhenCompleteStage(screenExecutor(executor), action); } public CompletableFuture<T> exceptionally( Function<Throwable, ? extends T> fn) { return uniExceptionallyStage(null, fn); } \",\"whenComplete 处理正常和异常的结果，exceptionally 处理异常情况。\",\"whenComplete：是执行当前任务的线程执行继续执行 whenComplete 的任务。\",\"whenCompleteAsync：是执行把 whenCompleteAsync 这个任务继续提交给线程池来进行执行\",\"handle:和 complete 一样，可对结果做最后的处理（可处理异常），可改变返回值。\"]},\"121\":{\"h\":\"线程串行化方法\",\"t\":[\" public <U> CompletableFuture<U> thenApply( Function<? super T,? extends U> fn) { return uniApplyStage(null, fn); } public <U> CompletableFuture<U> thenApplyAsync( Function<? super T,? extends U> fn) { return uniApplyStage(defaultExecutor(), fn); } public <U> CompletableFuture<U> thenApplyAsync( Function<? super T,? extends U> fn, Executor executor) { return uniApplyStage(screenExecutor(executor), fn); } \",\"thenApply: 这个方法表示当当前的CompletableFuture完成时，将执行提供的函数，并返回一个新的CompletableFuture，其结果是应用该函数的结果。\",\"thenApplyAsync: 这是异步版本的thenApply，它使用默认的Executor执行器执行提供的函数。\",\"thenApplyAsync（带有Executor参数）: 这是具有自定义Executor执行器的异步版本，允许你指定一个特定的执行器来执行提供的函数。\",\"public CompletableFuture<Void> thenAccept(Consumer<? super T> action) { return uniAcceptStage(null, action); } public CompletableFuture<Void> thenAcceptAsync(Consumer<? super T> action) { return uniAcceptStage(defaultExecutor(), action); } public CompletableFuture<Void> thenAcceptAsync(Consumer<? super T> action, Executor executor) { return uniAcceptStage(screenExecutor(executor), action); } \",\"thenAccept: 当当前的CompletableFuture完成时，将执行提供的Consumer函数，但不返回新的结果。相反，返回一个CompletableFuture<Void>，表示这个阶段的操作不产生结果。\",\"thenAcceptAsync: 这是异步版本的thenAccept，使用默认的Executor执行器执行提供的Consumer函数。\",\"thenAcceptAsync（带有Executor参数）: 这是具有自定义Executor执行器的异步版本，允许你指定一个特定的执行器来执行提供的Consumer函数。\",\"public CompletableFuture<Void> thenRun(Runnable action) { return uniRunStage(null, action); } public CompletableFuture<Void> thenRunAsync(Runnable action) { return uniRunStage(defaultExecutor(), action); } public CompletableFuture<Void> thenRunAsync(Runnable action, Executor executor) { return uniRunStage(screenExecutor(executor), action); } \",\"thenRun: 当前CompletableFuture完成后，将执行提供的Runnable操作，但不返回新的结果。相反，返回一个CompletableFuture<Void>，表示这个阶段的操作不产生结果。\",\"thenRunAsync: 这是thenRun的异步版本，使用默认的Executor执行器执行提供的Runnable操作。\",\"thenRunAsync（带有Executor参数）: 这是具有自定义Executor执行器的异步版本，允许你指定一个特定的执行器来执行提供的Runnable操作。\"]},\"122\":{\"h\":\"两任务组合\",\"t\":[\"public <U,V> CompletableFuture<V> thenCombine( CompletionStage<? extends U> other, BiFunction<? super T,? super U,? extends V> fn) { return biApplyStage(null, other, fn); } public <U,V> CompletableFuture<V> thenCombineAsync( CompletionStage<? extends U> other, BiFunction<? super T,? super U,? extends V> fn) { return biApplyStage(defaultExecutor(), other, fn); } public <U,V> CompletableFuture<V> thenCombineAsync( CompletionStage<? extends U> other, BiFunction<? super T,? super U,? extends V> fn, Executor executor) { return biApplyStage(screenExecutor(executor), other, fn); } public <U> CompletableFuture<Void> thenAcceptBoth( CompletionStage<? extends U> other, BiConsumer<? super T, ? super U> action) { return biAcceptStage(null, other, action); } public <U> CompletableFuture<Void> thenAcceptBothAsync( CompletionStage<? extends U> other, BiConsumer<? super T, ? super U> action) { return biAcceptStage(defaultExecutor(), other, action); } public <U> CompletableFuture<Void> thenAcceptBothAsync( CompletionStage<? extends U> other, BiConsumer<? super T, ? super U> action, Executor executor) { return biAcceptStage(screenExecutor(executor), other, action); } public CompletableFuture<Void> runAfterBoth(CompletionStage<?> other, Runnable action) { return biRunStage(null, other, action); } public CompletableFuture<Void> runAfterBothAsync(CompletionStage<?> other, Runnable action) { return biRunStage(defaultExecutor(), other, action); } public CompletableFuture<Void> runAfterBothAsync(CompletionStage<?> other, Runnable action, Executor executor) { return biRunStage(screenExecutor(executor), other, action); } \",\"thenCombine：组合两个 future，获取两个 future 的返回结果，并返回当前任务的返回值\",\"thenAcceptBoth：组合两个 future，获取两个 future 任务的返回结果，然后处理任务，没有返回值。\",\"runAfterBoth：组合两个 future，不需要获取 future 的结果，只需两个future 处理完任务后，处理该任务。\"]},\"123\":{\"h\":\"两任务组合完成一个\",\"t\":[\"把上面的both换成either，当两个任务中，任意一个 future 任务完成的时候，执行任务。\"]},\"124\":{\"h\":\"多任务组合\",\"t\":[\"public static CompletableFuture<Void> allOf(CompletableFuture<?>... cfs) public static CompletableFuture<Object> anyOf(CompletableFuture<?>... cfs) \",\"allOf：等待所有任务完成\",\"anyOf：只要有一个任务完成\"]},\"125\":{\"h\":\"并发理论JMM\"},\"126\":{\"h\":\"JMM内存模型\",\"t\":[\"java内存模型（JMM）：出现线程安全的问题一般是因为主内存和工作内存数据不一致性和重排序导致的，理解它们的核心在于理解java内存模型（JMM）\",\"在并发编程中主要需要解决两个问题：1. 线程之间如何通信；2.线程之间如何完成同步\"]},\"127\":{\"h\":\"重排序\",\"t\":[\"在执行程序时，为了提高性能，编译器和处理器常常会对指令进行重排序\"]},\"128\":{\"h\":\"happens-before规则\",\"t\":[\"JMM可以通过happens-before关系向程序员提供跨线程的内存可见性保证（如果A线程的写操作a与B线程的读操作b之间存在happens-before关系，尽管a操作和b操作在不同的线程中执行，但JMM向程序员保证a操作将对b操作可见）\"]},\"129\":{\"h\":\"并发关键字\"},\"130\":{\"h\":\"synchronized\",\"t\":[\"Synchronized是Java中的关键字，用于实现线程同步，确保多个线程之间正确地共享资源。在Java中，当多个线程访问共享资源时，如果没有适当的同步机制，可能会导致数据不一致或其他问题。synchronized关键字提供了一种简单而有效的方法来控制对共享资源的访问。\",\"同步方法：\",\"public synchronized void synchronizedMethod() { // 同步的方法体 } \",\"同步代码块：\",\"public void someMethod() { // 非同步的代码块 synchronized (lockObject) { // 同步的代码块 } // 非同步的代码块 } \"]},\"131\":{\"h\":\"CAS操作\",\"t\":[\"CAS，即比较并交换（Compare and Swap），是一种并发编程中常见的原子操作。它是一种多线程同步的手段，用于在多线程环境下实现对共享数据的安全操作。CAS 操作主要包含三个步骤：\",\"比较（Compare）： 读取当前内存中的值与期望值进行比较。\",\"交换（And Swap）： 如果当前内存中的值与期望值相等，则使用新值来更新内存中的值。\",\"返回新值： 返回操作是否成功，通常用于判断操作是否在竞争条件下成功执行。\",\"使用锁时，线程获取锁是一种悲观锁策略，即假设每一次执行临界区代码都会产生冲突，所以当前线程获取到锁的时候同时也会阻塞其他线程获取该锁。而CAS操作（又称为无锁操作）是一种乐观锁策略，它假设所有线程访问共享资源的时候不会出现冲突，既然不会出现冲突自然而然就不会阻塞其他线程的操作。因此，线程就不会出现阻塞停顿的状态。那么，如果出现冲突了怎么办？无锁操作是使用**CAS(compare and swap)**又叫做比较交换来鉴别线程是否出现冲突，出现冲突就重试当前操作直到没有冲突为止。\"]},\"132\":{\"h\":\"volatile\",\"t\":[\"volatile是Java中的关键字，用于修饰变量，主要用于多线程编程。volatile关键字的主要作用是确保变量的可见性和禁止指令重排序。\",\"public class VolatileExample { private volatile boolean flag = false; public void setFlag() { flag = true; } public void printFlag() { System.out.println(\\\"Flag: \\\" + flag); } public static void main(String[] args) { VolatileExample example = new VolatileExample(); // Thread 1: set flag to true new Thread(() -> { example.setFlag(); }).start(); // Thread 2: print flag new Thread(() -> { while (!example.flag) { // Thread 2 keeps checking flag until it becomes true } example.printFlag(); }).start(); } } \",\"在上述例子中，如果flag没有被声明为volatile，则Thread 2 可能会一直在循环中等待，因为它无法感知到Thread 1 对flag的修改。通过使用volatile关键字，确保了对flag的修改对所有线程可见，从而避免了潜在的问题\"]},\"133\":{\"h\":\"final\",\"t\":[\"当final修饰基本数据类型变量时，不能对基本数据类型变量重新赋值，因此基本数据类型变量不能被改变。而对于引用类型变量而言，它仅仅保存的是一个引用，final只保证这个引用类型变量所引用的地址不会发生改变，即一直引用这个对象，但这个对象属性是可以改变的。\",\"被final修饰的方法不能够被子类所重写。\",\"被final修饰的方法是可以重载的\"]},\"134\":{\"h\":\"三大特性\",\"t\":[\"（1）原子性：synchronized；（2）可见性：synchronized，volatile；（3）有序性：synchronized，volatile\"]},\"135\":{\"h\":\"Lock体系\",\"t\":[\"使用Lock的一般形式：\",\"Lock lock = new ReentrantLock(); lock.lock(); try{ ....... }finally{ lock.unlock(); } \",\"Lock锁的API如下：\",\"Lock锁接口的实现类：\",\"ReentrantLock实现了lock接口，基本上所有的方法的实现实际上都是调用了其静态内存类Sync中的方法，而Sync类继承了AbstractQueuedSynchronizer（AQS）。可以看出要想理解ReentrantLock关键核心在于对队列同步器AbstractQueuedSynchronizer（简称同步器）的理解。\"]},\"136\":{\"h\":\"AQS（AbstractQueuedSynchronizer）\",\"t\":[\"AQS（AbstractQueuedSynchronizer）是Java中用于实现同步器的抽象基类。它为构建各种同步工具提供了一个框架，最典型的例子就是ReentrantLock和ReentrantReadWriteLock都是基于AQS实现的。AQS提供了一种灵活的机制，允许开发人员实现自定义的同步器，以满足各种并发场景的需求。\",\"以下是AQS的主要特征和组成部分：\",\"同步状态（Sync State）： AQS维护了一个同步状态的抽象概念，表示资源的数量或可用性。同步状态是AQS实现同步的核心。\",\"等待队列（Wait Queue）： AQS使用一个等待队列来管理那些因为获取锁而被阻塞的线程。这个队列通常是一个双向链表，每个节点代表一个等待线程。\",\"获取与释放（Acquire and Release）： AQS定义了两个主要的操作，即acquire（获取）和release（释放），用于管理同步状态。具体的同步器（如ReentrantLock）会实现这两个操作，根据自身的逻辑来获取和释放同步状态。\",\"AQS的实现方式基于模板方法设计模式，子类需要实现AQS提供的几个核心方法来定义自己的同步逻辑。以下是一些关键的方法：\",\"tryAcquire： 尝试获取同步状态，如果成功则返回true，否则返回false。子类需要根据实际需求实现这个方法，通常用于独占式同步器（如ReentrantLock）。\",\"tryRelease： 尝试释放同步状态，如果成功则返回true，否则返回false。同样，子类需要根据实际需求实现这个方法。\",\"tryAcquireShared： 尝试获取共享同步状态，用于支持共享式同步器（如ReentrantReadWriteLock）。\",\"tryReleaseShared： 尝试释放共享同步状态。\",\"isHeldExclusively： 查询同步状态是否被当前线程独占。\",\"AQS使用了一种称为\\\"CLH队列\\\"（Craig, Landin, and Hagersten）的等待队列算法，这是一种基于链表的队列，它在性能和可伸缩性方面有一些优势。\"]},\"137\":{\"c\":[\"Java\",\"JUC并发编程\"]},\"138\":{\"c\":[\"Java\",\"JUC并发编程\"]},\"139\":{\"h\":\"JUC并发编程与源码分析\"},\"140\":{\"h\":\"线程基础知识复习\",\"t\":[\"Java开启一个线程的源码：\",\"public synchronized void start() { /** * This method is not invoked for the main method thread or \\\"system\\\" * group threads created/set up by the VM. Any new functionality added * to this method in the future may have to also be added to the VM. * * A zero status value corresponds to state \\\"NEW\\\". */ if (threadStatus != 0) throw new IllegalThreadStateException(); /* Notify the group that this thread is about to be started * so that it can be added to the group's list of threads * and the group's unstarted count can be decremented. */ group.add(this); boolean started = false; try { start0(); started = true; } finally { try { if (!started) { group.threadStartFailed(this); } } catch (Throwable ignore) { /* do nothing. If start0 threw a Throwable then it will be passed up the call stack */ } } } private native void start0(); \",\"可以发现调用的start0是native，底层是c++实现的，此时需要去下载Java底层源码 链接：https://github.com/openjdk/jdk8 Thread.java对应的源码就是Thread.c,start0就是JVM_StartThread,可以在jvm.h中找到声明，jvm.cpp中实现 位置：jdk/src/share/native/java/lang/Thread.cjdk/src/share/javavm/export/jvm.hhotspot/src/share/vm/prims/jvm.cpphotspot/src/share/vm/runtime/thread.cpp jvm.cpp中 在thread.cpp中：\"]},\"141\":{\"h\":\"CompletableFuture\",\"t\":[\"Future 接口是 Java 并发编程中用于表示异步计算结果的接口。它允许你提交一个任务并在将来某个时候获取任务的执行结果。Future 接口提供了一种异步获取计算结果的机制，可以在任务执行完成之前进行其他操作，避免了阻塞等待计算结果的情况。 比如主线程让一个子线程去执行任务，子线程可能比较耗时，启动子线程开始执行任务后，主线程就去做其他事情了，忙其它事情或者先执行完，过了一会才去获取子任务的执行结果或变更的任务状态。\"]},\"142\":{\"h\":\"FutureTask\",\"t\":[\"FutureTask 是 Java 并发包中的一个类，实现了 RunnableFuture 接口，而 RunnableFuture 接口又扩展自 Runnable 和 Future 接口。它是一个可取消的异步计算任务，允许在计算完成之前进行取消操作，同时也可以通过实现 Callable 接口来支持有返回值的任务。主要有两个构造函数，分别是可以传入Callable和Runnable接口。\",\"/** * Creates a {@code FutureTask} that will, upon running, execute the * given {@code Callable}. * * @param callable the callable task * @throws NullPointerException if the callable is null */public FutureTask(Callable<V> callable) { if (callable == null) throw new NullPointerException(); this.callable = callable; this.state = NEW; // ensure visibility of callable } /** * Creates a {@code FutureTask} that will, upon running, execute the * given {@code Runnable}, and arrange that {@code get} will return the * given result on successful completion. * * @param runnable the runnable task * @param result the result to return on successful completion. If * you don't need a particular result, consider using * constructions of the form: * {@code Future<?> f = new FutureTask<Void>(runnable, null)} * @throws NullPointerException if the runnable is null */public FutureTask(Runnable runnable, V result) { this.callable = Executors.callable(runnable, result); this.state = NEW; // ensure visibility of callable } \",\"api调用：\",\"public class Test { public static void main(String[] args) { FutureTask<String> futureTask = new FutureTask<>(new MyThread()); Thread a = new Thread(futureTask, \\\"A\\\"); a.start(); try { System.out.println(futureTask.get()); } catch (Exception e) { e.printStackTrace(); } } } class MyThread implements Callable<String> { @Override public String call() throws Exception { System.out.println(\\\"---come in call()\\\"); return \\\"Hello\\\"; } } \",\"使用多线程和单个线程的区别：\",\"import java.util.concurrent.*; public class Test { public static void main(String[] args) throws ExecutionException, InterruptedException { m1(); m2(); } private static void m2() throws InterruptedException, ExecutionException { long startTime=System.currentTimeMillis(); ExecutorService executorService = Executors.newFixedThreadPool(3); FutureTask<String> futureTask = new FutureTask<>(()->{ try{TimeUnit.MILLISECONDS.sleep(500);}catch (InterruptedException e){e.printStackTrace();} return \\\"task1 end\\\"; }); executorService.submit(futureTask); FutureTask<String> futureTask2 = new FutureTask<>(()->{ try{TimeUnit.MILLISECONDS.sleep(300);}catch (InterruptedException e){e.printStackTrace();} return \\\"task2 end\\\"; }); executorService.submit(futureTask2); FutureTask<String> futureTask3 = new FutureTask<>(()->{ try{TimeUnit.MILLISECONDS.sleep(200);}catch (InterruptedException e){e.printStackTrace();} return \\\"task3 end\\\"; }); executorService.submit(futureTask3); System.out.println(\\\"futureTask.get() = \\\" + futureTask.get()); System.out.println(\\\"futureTask2.get() = \\\" + futureTask2.get()); System.out.println(\\\"futureTask3.get() = \\\" + futureTask3.get()); executorService.shutdown(); long endTime=System.currentTimeMillis(); System.out.println(\\\"thread Time: \\\"+(endTime-startTime)); } private static void m1() { //只用一个线程处理 long startTime=System.currentTimeMillis(); try{TimeUnit.MILLISECONDS.sleep(500);}catch (InterruptedException e){e.printStackTrace();} try{TimeUnit.MILLISECONDS.sleep(300);}catch (InterruptedException e){e.printStackTrace();} try{TimeUnit.MILLISECONDS.sleep(200);}catch (InterruptedException e){e.printStackTrace();} long endTime=System.currentTimeMillis(); System.out.println(\\\"dont use thread Time: \\\"+(endTime-startTime)); } } \",\"运行结果： 可以看到，速度快了一倍左右\",\"问题：阻塞等待结果： 在调用 get 方法获取任务的执行结果时，如果任务尚未完成，get 方法会阻塞等待任务完成。这可能导致程序在获取结果时被阻塞，影响整体性能。为了避免这种情况，可以使用带有超时参数的 get 方法，或者结合其他机制来处理。 轮询耗费CPU：\",\"FutureTask<String> futureTask = new FutureTask<>(() -> { System.out.println(\\\"Hello, World!\\\"); return \\\"take over\\\"; }); Thread thread = new Thread(futureTask); thread.start(); while (true) { if (futureTask.isDone()) { System.out.println(futureTask.get()); break; } else { TimeUnit.MILLISECONDS.sleep(500); System.out.println(\\\"waiting...\\\"); } } \",\"结论：Future对于结果的获取不是很友好，只能通过阻塞或轮询的方式得到任务的结果。 对于真正的异步处理我们希望是可以通过传入回调函数，在Future结束时自动调用该回调函数，这样，我们就不用等待结果。 改进：使用CompletableFuture\"]},\"143\":{\"h\":\"CompletableFuture\",\"t\":[\"CompletableFuture 类是 Java 并发编程中提供的一个强大的工具，用于处理异步操作。它支持通过回调函数（观察者模式）的方式处理异步计算的结果。\",\"public class CompletableFuture<T> implements Future<T>, CompletionStage<T> \",\"在Java8中，CompletableFuture提供了非常强大的Future的扩展功能，可以帮助我们简化异步编程的复杂性，并且提供了函数式编程的能 力，可以通过回调的方式处理计算结果，也提供了转换和组合CompletableFuture的方法。 它可能代表一个明确完成的Future,也有可能代表一个完成阶段(CompletionStage)，它支持在计算完成以后触发一些函数或执行某些 动作。它实现了Future和CompletionStage接口，尽量不要使用new构建 创建CompletableFuture类：\",\"无返回值：runAsync\",\"有返回值：completedFuture\",\"CompletableFuture<Void> completableFuture=CompletableFuture.runAsync(()->{ System.out.println(\\\"Hello World\\\"); }); System.out.println(completableFuture.get()); \",\"测试CompletableFuture：\",\"如果没有ExecutorService线程池，那么程序会直接结束，不会等待异步线程\",\"public static void main(String[] args) throws ExecutionException, InterruptedException { ExecutorService executorService = Executors.newFixedThreadPool(3); CompletableFuture.supplyAsync(() -> { System.out.println(\\\"Thread: \\\" + Thread.currentThread().getName() + \\\" is running\\\"); try { TimeUnit.SECONDS.sleep(1); } catch (InterruptedException e) { throw new RuntimeException(e); } System.out.println(\\\"after 1 second sleep,get result\\\" + 1); return 1; },executorService).whenComplete((v,e)->{ if (e==null){ System.out.println(\\\"Thread: \\\" + Thread.currentThread().getName() + \\\" is running\\\"); System.out.println(\\\"result is \\\" + v); } }).exceptionally(e->{ e.printStackTrace(); System.out.println(\\\"exception is \\\"+e.getCause()); return null; }); System.out.println(Thread.currentThread().getName()+\\\"is running\\\"); executorService.shutdown(); } \",\"函数式接口\",\"函数式接口\",\"方法名\",\"参数\",\"返回类型\",\"示例\",\"Runnable\",\"run\",\"无\",\"void\",\"Runnable myRunnable = () -> { /* 任务执行 */ };\",\"Function<T, R>\",\"apply\",\"T\",\"R\",\"Function<Integer, String> intToString = (integer) -> \\\"数字: \\\" + integer;\",\"Consumer<T>\",\"accept\",\"T\",\"void\",\"Consumer<String> printUpperCase = (str) -> System.out.println(str.toUpperCase());\",\"Supplier<T>\",\"get\",\"无\",\"T\",\"Supplier<Double> randomNumber = () -> Math.random();\",\"BiConsumer<T, U>\",\"accept\",\"T, U\",\"void\",\"BiConsumer<Integer, String> printKeyValue = (key, value) -> System.out.println(key + \\\": \\\" + value);\",\"真实案例：\",\"需求说明\",\"同一款产品，同时搜索出同款产品在各大电商平台的售价；\",\"同一款产品，同时搜索出本产品在同一个电商平台下，各个入驻卖家售价是多少\",\"输出返回： 出来结果希望是同款产品的在不同地方的价格清单列表，返回一个List<String>\",\"《mysql》)in jd price is88.05\",\"《mysql》)in dangdang price is86.11\",\"《mysql》)in taobao price is90.43\",\"解决方案，比对同一个商品在各个平台上的价格，要求获得一个清单列表，\",\"step by step,按部就班，查完京东查淘宝，查完淘宝查天猫.\",\"all in 万箭齐发，一口气多线程异步任务同时查询。\",\"单步查询：\",\"public class Test { static List<NetMall> list = Arrays.asList( new NetMall(\\\"jd\\\"), new NetMall(\\\"taobao\\\"), new NetMall(\\\"dangdang\\\") ); public static List<String> getPrice(List<NetMall> list, String productName) { return list.stream() .map(netMall -> { return String.format(productName + \\\"in %s price is %.2f\\\", netMall.getNetMallName(), netMall.calPrice(productName)); }).toList(); } public static void main(String[] args) { long start = System.currentTimeMillis(); System.out.println(getPrice(list, \\\"mysql\\\")); System.out.println(\\\"Done in \\\" + (System.currentTimeMillis() - start) + \\\"ms\\\"); } } class NetMall { private String netMallName; public NetMall(String netMallName) { this.netMallName = netMallName; } public String getNetMallName() { return netMallName; } public double calPrice(String productName) { try { TimeUnit.SECONDS.sleep(1); } catch (Exception e) { throw new RuntimeException(e); } return ThreadLocalRandom.current().nextDouble() * 2 + productName.charAt(0); } } \",\"修改： 使用CompletableFuture提高性能\",\"public static List<String> getPriceByCompletableFuture(List<NetMall> list, String productName) { return list.stream().map(netMall -> { return CompletableFuture.supplyAsync(() -> { return String.format(productName + \\\"in %s price is %.2f\\\", netMall.getNetMallName(), netMall.calPrice(productName)); }); }).collect(Collectors.toList()) .stream().map(s -> s.join()) .collect(Collectors.toList()); } \",\"结果如下：\",\"几个获取异步结果的对比：\",\"方法\",\"返回值\",\"阻塞行为\",\"异常处理\",\"用途\",\"join()\",\"T\",\"是\",\"无异常处理\",\"等待异步计算完成，获取结果。\",\"get()\",\"T\",\"是\",\"需要处理异常\",\"等待异步计算完成，获取结果。可能抛出 InterruptedException 和 ExecutionException 异常。\",\"getNow(defaultValue)\",\"T\",\"否\",\"无异常处理\",\"如果异步计算已经完成，返回结果；否则返回指定的默认值。\",\"complete(value)\",\"boolean\",\"否\",\"无异常处理\",\"如果此CompletableFuture尚未完成，则将其设置为已完成，并返回true；否则返回false。用于手动完成异步计算。\",\"thenApply和handle区别\",\"thenApply： 不处理异常情况，如果计算过程中出现异常，则该异常会传递到下一个阶段。\",\"handle： 可以处理正常结果和异常结果。你可以提供一个处理异常的函数，以便在出现异常时返回一个默认值或执行其他操作。\",\"public static void main(String[] args) throws Exception { ExecutorService threadPool = Executors.newFixedThreadPool(3); CompletableFuture.supplyAsync(() -> { try { TimeUnit.SECONDS.sleep(1); } catch (InterruptedException e) { throw new RuntimeException(e); } System.out.println(\\\"111\\\"); return 1; }, threadPool).thenApply(res -> { System.out.println(\\\"222\\\"); return res + 2; }).whenComplete((res, e) -> { if (e == null) { System.out.println(\\\"计算结果:\\\" + res); } else { System.out.println(\\\"异常\\\"); } }).exceptionally(e -> { e.printStackTrace(); return null; }); threadPool.shutdown(); } \",\"thenAccept:对结果消费，没有返回值\",\"CompletableFuture.supplyAsync(() -> { System.out.println(\\\"111\\\"); return 1; }, threadPool).thenApply(res -> { System.out.println(\\\"222\\\"); return res + 2; }).thenAccept(res -> { System.out.println(\\\"333\\\"); System.out.println(res); }) \",\"对比\",\"方法\",\"描述\",\"返回类型\",\"示例\",\"thenRun\",\"在上一阶段完成后执行一个Runnable\",\"CompletableFuture<Void>\",\"CompletableFuture.supplyAsync(() -> \\\"Hello\\\").thenRun(() -> System.out.println(\\\"Task completed\\\"));\",\"thenAccept\",\"在上一阶段完成后对结果进行处理，不返回结果\",\"CompletableFuture<Void>\",\"CompletableFuture.supplyAsync(() -> \\\"Hello\\\").thenAccept(result -> System.out.println(\\\"Result: \\\" + result));\",\"thenApply\",\"在上一阶段完成后对结果进行转换，返回新结果\",\"CompletableFuture<U>\",\"CompletableFuture.supplyAsync(() -> \\\"Hello\\\").thenApply(s -> s + \\\" World\\\");\",\"总结：\",\"thenRun方法：\",\"thenRun方法默认在调用该方法的线程中执行，即在调用thenRun的线程中执行Runnable。\",\"该方法不关心Runnable的执行是否涉及异步操作，因此可能会阻塞当前线程，特别是如果Runnable中包含耗时的操作。\",\"thenRunAsync方法：\",\"thenRunAsync方法会使用默认的ForkJoinPool或者通过传递给它的Executor在一个新的线程中执行Runnable。\",\"该方法更适用于处理异步操作，避免阻塞调用线程，尤其是当Runnable包含耗时的操作时。\",\"没有传入自定义线程池，都用默认线程池ForkJoinPool\",\"传入了一个自定义线程池，\",\"如果你执行第一个任务的时候，传入了一个自定义线程池：\",\"调用thenRun方法执行第二个任务时，则第二个任务和第一个任务是共用同一个线程池。\",\"调用thenRunAsync执行第二个任务时，则第一个任务使用的是你自己传入的线程池，第二个任务使用的是ForkJoin线程池\",\"有可能处理太快，系统优化切换原则，直接使用main线程处理\",\"applyToEither:\",\"public <U> CompletableFuture<U> applyToEither( CompletionStage<? extends T> other, Function<? super T, U> fn ) \",\"other：另一个CompletionStage，当它或当前CompletableFuture中的任何一个完成时，就会触发fn函数的执行。\",\"fn：一个转换函数，接受一个参数（当前CompletableFuture或other的计算结果），并返回一个结果。\",\"private static void test() { CompletableFuture<Character> A = CompletableFuture.supplyAsync(() -> {return 'A';}); CompletableFuture<Character> B = CompletableFuture.supplyAsync(() -> {return 'B';}); CompletableFuture<Character> res = A.applyToEither(B, (result) -> { System.out.println(\\\"Result: \\\" + result); return result; }); System.out.println(Thread.currentThread().getName()+\\\"---:\\\"+res.join()); } \",\"对计算结果进行合并：\",\"private static void test() { CompletableFuture<Integer> future1 = CompletableFuture.supplyAsync(() -> { return 10; }); CompletableFuture<Integer> future2 = CompletableFuture.supplyAsync(() -> { return 11; }); CompletableFuture<Integer> result = future1.thenCombine(future2, (x, y) -> { return x + y; }); System.out.println(result.join()); } \"]},\"144\":{\"h\":\"多线程锁\"},\"145\":{\"h\":\"乐观锁和悲观锁\",\"t\":[\"悲观锁： 悲观锁是一种并发控制机制，它假设在多线程环境下，对数据的访问总是会导致冲突。因此，在对数据进行任何操作之前，悲观锁都会先对数据进行加锁，以确保数据的原子性和一致性。\",\"适合写操作多的场景，先加锁可以保证写操作时数据正确 显式的锁定之后再操作同步资源 synchronized和Lock都是悲观锁。\",\"乐观锁： 认为自己在使用数据时不会有别的线程修改数据或资源，所以不会添加锁。 在Jva中是通过使用无锁编程来实现，只是在更新数据的时候去判断，之前有没有别的线程更新了这个数据。 如果这个数据没有被更新，当前线程将自己修改的数据成功写入， 如果这个数据已经被其它线程更新，则根据不同的实现方式执行不同的操作，比如放弃修改、重试抢锁等等 判断规则：\",\"版本号机制version\",\"最常采用的是CAS算法，Java原子类中的递增操作就通过CAS自旋实现的。\",\"适合读操作多的场景，不加锁的特点能够使其读操作的性能大幅提升。 乐观锁则直接去操作同步资源，是种无锁算法，得之我幸不得我命，再努力就是\"]},\"146\":{\"h\":\"synchronized三种应用方式\",\"t\":[\"作用于实例方法，当前实例加锁，进入同步代码前要获得当前实例的锁； 作用于代码块，对括号里配置的对象加锁。 作用于静态方法，当前类加锁，进去同步代码前要获得当前类对象的锁；\"]},\"147\":{\"h\":\"同步代码块\",\"t\":[\"public class Test { Object object=new Object(); public void test1(){ synchronized (object){ System.out.println(\\\"test1\\\"); } } public static void main(String[] args) throws Exception { } } \",\"对代码进行反编译：javap -c Test.class 可以看到如下锁的获取和释放\"]},\"148\":{\"h\":\"同步方法\",\"t\":[\"public synchronized void m2(){ System.out.println(\\\"m2\\\"); } \"]},\"149\":{\"h\":\"静态同步方法\",\"t\":[\"public static synchronized void m3(){ System.out.println(\\\"m3\\\"); } \"]},\"150\":{\"h\":\"反编译synchronized锁的是什么\",\"t\":[\"每个对象天生都带着一个对象监视器，每一个被锁住的对象都会和Monitor关联起来\"]},\"151\":{\"h\":\"公平锁和非公平锁\",\"t\":[\"import java.util.concurrent.locks.ReentrantLock; public class Test { private int number = 50; ReentrantLock lock = new ReentrantLock(); public void sale() { lock.lock(); try { if (number > 0) { System.out.println(Thread.currentThread().getName() + \\\"卖出了\\\" + (number--) + \\\"张票，剩余：\\\" + number); } } finally { lock.unlock(); } } public static void main(String[] args) { Test test = new Test(); new Thread(() -> { for (int i = 0; i < 60; i++) { test.sale(); } }, \\\"A\\\").start(); new Thread(() -> { for (int i = 0; i < 60; i++) { test.sale(); } }, \\\"B\\\").start(); new Thread(() -> { for (int i = 0; i < 60; i++) { test.sale(); } }, \\\"C\\\").start(); } } \",\"公平锁：是指多个线程按照申请锁的顺序来获取锁，这里类似排队买票，先来的人先买后来的人在队尾排着，这是公平的 Lock lock=new ReentrantLock(true);/true表示公平锁，先来先得 非公平锁：是指多个线程获取锁的顺序并不是按照申请锁的顺序，有可能后申请的线程比先申请的线程优先获取锁，在高并发环境下，有可能造成优先级翻转或者饥饿的状态（某个线程一直得不到锁） Lock lock=new ReentrantLock(false);/false表示非公平锁，后来的也可能先获得锁 Lock lock=new ReentrantLock();/默认非公平锁\",\"使用多线程很重要的考量点是线程切换的开销，当采用非公平锁时，当1个线程请求锁获取同步状态，然后释放同步状态，所以刚释放锁的线程在此 刻再次获取同步状态的概率就变得非常大，所以就减少了线程的开销\"]},\"152\":{\"h\":\"可重入锁(递归锁)\",\"t\":[\"是指在同一线程在外层方法获取到锁的时侯，在进入该线程的内层方法会自动获取锁（前提，锁对象的是同一个对象），不会因为之前已经获取过还没释放而阻塞---------优点之一就是可一定程度避免死锁。\",\"隐式锁：由 Java 虚拟机（JVM）自动管理，无需程序员显式操作。Java 中的 synchronized 关键字就是一种隐式锁。\",\"显示锁：需要程序员显式地获取和释放锁。Java 中的 Lock 接口就是一种显示锁。\",\"private static void a() { final Object o = new Object(); new Thread(() -> { synchronized (o) { System.out.println(\\\"---------------外层调用\\\"); synchronized (o) { System.out.println(\\\"---------------中层调用\\\"); synchronized (o) { System.out.println(\\\"---------------内层调用\\\"); } } } }, \\\"t1\\\").start(); Lock lock = new ReentrantLock(); new Thread(() -> { lock.lock(); try { System.out.println(\\\"---------------外层调用\\\"); lock.lock(); try { System.out.println(\\\"---------------中层调用\\\"); lock.lock(); try { System.out.println(\\\"---------------内层调用\\\"); } finally { lock.unlock(); } } finally { lock.unlock(); } } finally { lock.unlock(); } }, \\\"t2\\\").start(); } \",\"synchronized 重入锁的实现原理：\",\"每个锁对象拥有一个锁计数器和一个指向持有该锁的线程的指针。\",\"当执行monitorenterl时，如果目标锁对象的计数器为零，那么说明它没有被其他线程所持有，Java虚拟机会将该锁对象的持有线程设置为当前线程，并且将其计数器加1。\",\"在目标锁对象的计数器不为零的情况下，如果锁对象的持有线程是当前线程，那么Jva虚拟机可以将其计数器加1，否则需要等待，直至持有线程释放该锁。\",\"当执行monitorexith时，Java虚拟机则需将锁对象的计数器减1。计数器为零代表锁已被释了\",\"private static void a() { Lock lock = new ReentrantLock(); new Thread(()->{ lock.lock(); System.out.println(\\\"外层\\\"); lock.lock(); System.out.println(\\\"内层\\\"); lock.unlock(); lock.unlock(); }).start(); } \"]},\"153\":{\"h\":\"死锁\",\"t\":[\"死锁是指两个或多个线程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程。\",\"public class DeadLockDemo { static Object a=new Object(); static Object b=new Object(); public static void main(String[] args) { new Thread(() -> { synchronized (a){ System.out.println(\\\"t1线程持有a锁，试图获取b锁\\\"); try { TimeUnit.SECONDS.sleep(1); } catch (InterruptedException e) { e.printStackTrace(); } synchronized (b){ System.out.println(\\\"t1线程获取到b锁\\\"); } } },\\\"t1\\\").start(); new Thread(() -> { synchronized (b){ System.out.println(\\\"t2线程持有a锁，试图获取a锁\\\"); try { TimeUnit.SECONDS.sleep(1); } catch (InterruptedException e) { e.printStackTrace(); } synchronized (a){ System.out.println(\\\"t2线程获取到a锁\\\"); } } },\\\"t2\\\").start(); } } \",\"产生原因\",\"资源竞争：多个进程或线程同时请求同一资源，而该资源数量不足时，就会产生死锁。\",\"相互等待：一个进程或线程在等待另一个进程或线程释放资源，而另一个进程或线程也在等待第一个进程或线程释放资源，形成循环等待，就会产生死锁。预防\",\"资源分配：尽量避免资源竞争，合理分配资源。\",\"避免相互等待：采用一些策略，如按顺序分配资源、使用超时机制等，避免相互等待。检测\",\"死锁检测算法：定期检查系统状态，检测是否存在死锁。\",\"超时机制：为每个资源请求设置超时时间，超时后自动释放资源。解除\",\"终止进程或线程：强制终止死锁进程或线程中的一个或多个，释放资源。\",\"抢占资源：从一个或多个死锁进程或线程中抢占资源，分配给其他进程或线程。\"]},\"154\":{\"h\":\"LockSupport与线程中断\"},\"155\":{\"h\":\"线程中断\",\"t\":[\"什么是中断机制？\",\"首先,一个线程不应该由其他线程来强制中断或停止，而是应该由线程自己自行停止，自己来决定自己的命运。所以，Thread.stop,Thread.suspend,Thread.resume都己经被废弃了。\",\"其次,在Jva中没有办法立即停止一条线程，然而停止线程却显得尤为重要，如取消一个耗时操作。因此，Java提供了一种用于停止线程的协商机制一一中断，也即中断标识协商机制。中断只是一种协作协商机制，Java没有给中断增加任何语法，中断的过程完全需要程序员自己实现。若要中断一个线程，你需要手动调用该线程的interrupt,方法，该方法也仅仅是将线程对象的中断标识设成true;\",\"接着你需要自己写代码不断地检测当前线程的标识位，如果为tue,表示别的线程请求这条线程中断，此时究竞该做什么需要你自己写代码实现。\",\"每个线程对象中都有一个中断标识位，用于表示线程是否被中断；该标识位为true表示中断，为false表示未中断；通过调用线程对象的interrupt方法将该线程的标识位设为true;可以在别的线程中调用，也可以在自己的线程中调用。\",\"中断大三API\",\"interrupt(): 中断线程。仅仅是将线程的中断标志设置为 true。\",\"isInterrupted(): 判断线程是否被中断并清除当前中断状态。这个方法做了两件事：1返回当前线程的中断状态，测试当前线程是否已被中断2将当前线程的中断状态清零并重新设为fase,清除线程的中断状态\",\"interrupted(): 静态方法，检查当前线程是否已被中断，并清除中断标志。\",\"特点：\",\"中断是一种协作机制，线程可以检查中断标志并相应地终止执行，但不是强制性的。\",\"中断通常与异常一起使用，例如，InterruptedException 用于处理线程在等待某些条件时被中断的情况。\",\"面试题 ： 如何停止中断中的线程 ？\",\"第一种办法 ：通过volatile变量实现\",\"volatile 是 Java 中的关键字，主要用于修饰实例变量。它的主要作用是保证该变量对所有线程的可见性，即当一个线程修改了这个变量的值，其他线程能够立即看到最新的值，而不会使用本地缓存。\",\"static volatile boolean isStop = false; private static void a() throws InterruptedException { new Thread(() -> { while (true) { if (isStop) { System.out.println(\\\"stop\\\"); break; } System.out.println(\\\"running\\\"); } }, \\\"t1\\\").start(); TimeUnit.MILLISECONDS.sleep(2); new Thread(()->{ isStop = true; }, \\\"t2\\\").start(); } \",\"第二种方法：\",\"AtomicBoolean 是 Java 并发包 (java.util.concurrent.atomic 包) 中提供的一个原子性布尔变量类。它使用了底层的原子性操作，可以保证对布尔变量的读取和写入操作是原子的，从而提供了一种线程安全的方式来处理布尔值。 主要特点和用法包括：\",\"原子性操作：AtomicBoolean 提供了一系列的原子性操作，包括 get、set、getAndSet、compareAndSet 等，这些操作是不可中断的，并且保证了对布尔变量的操作是原子性的。\",\"比较与设置：compareAndSet(expectedValue, newValue) 方法用于比较当前值与期望值，如果相等则设置新值。这个方法可以用于实现一些有条件的更新操作。\",\"适用于多线程环境： 由于 AtomicBoolean 的操作是原子的，因此可以在多线程环境下安全地使用它，而不需要额外的同步措施。\",\"static AtomicBoolean atomicBoolean = new AtomicBoolean(false); private static void b() throws InterruptedException { new Thread(() -> { while (true) { if (atomicBoolean.get()) { System.out.println(\\\"stop\\\"); break; } System.out.println(\\\"running\\\"); } }, \\\"t1\\\").start(); TimeUnit.MILLISECONDS.sleep(2); new Thread(() -> { atomicBoolean.set(true); }, \\\"t2\\\").start(); } \",\"第三种方式 ： 使用API，interrupt，isInterrupted\",\"private static void c() throws InterruptedException { Thread thread = new Thread(() -> { while (true) { if (Thread.currentThread().isInterrupted()) { System.out.println(\\\"stop\\\"); break; } System.out.println(\\\"running\\\"); } }, \\\"t1\\\"); thread.start(); TimeUnit.MILLISECONDS.sleep(2); thread.interrupt(); } \",\"当前线程的中断标识为tue,是不是线程就立刻停止？\",\"如果线程处于正常活动状态，那么会将该线程的中断标志设置为tue,仅此而已。被设置中断标志的线程将继续正常运行，不受影响。所以，interrupt()并不能真正的中断线程，需要被调用的线程自己进行配合才行。\",\"如果线程处于被阻塞状态（例如处于sleep,wait,join等状态），在别的线程中调用当前线程对象的interrupt方法，那么线程将立即退出被阻塞状态，并抛出一个InterruptedException异常。\",\"sleep方法抛出InterruptedException.后，中断标识也被清空置为false,我们在catch没有通过调用th.interrupt()方法再次将中断标识置为true,这就导致无限循环了\"]},\"156\":{\"h\":\"LockSupport\",\"t\":[\"线程等待和唤醒 的办法： 方式1：使用Object中的wait方法让线程等待，使用Object中的notify方法唤醒线程 方式2：使用JUc包中Condition的wait()方法让线程等待，使用signal方法唤醒线程 方式3：LockSupport类可以阻塞当前线程以及唤醒指定被阻塞的线程\",\"第一种方式问题：\",\"public class Test { public static void main(String[] args) throws InterruptedException { Object objectLock= new Object(); new Thread(()->{ // synchronized (objectLock){ System.out.println(\\\"Thread 1: Holding lock\\\"); try { objectLock.wait(); } catch (InterruptedException e) { e.printStackTrace(); } System.out.println(\\\"Thread 1: Released lock\\\"); // } }).start(); TimeUnit.SECONDS.sleep(1); new Thread(()->{ // synchronized (objectLock){ System.out.println(\\\"Thread 2: Holding lock\\\"); objectLock.notify(); System.out.println(\\\"Thread 2: Released lock\\\"); // } }).start(); } } \",\"如果不加synchronized会报错\",\"第二个 问题：如果notify在wait前面，会导致程序卡死，无法执行\",\"第二种方式：\",\"public class Test { public static void main(String[] args) throws InterruptedException { Lock lock = new ReentrantLock(); Condition condition = lock.newCondition(); new Thread(() -> { lock.lock(); try { System.out.println(\\\"Thread 1 waiting\\\"); condition.await(); System.out.println(\\\"Thread 1 is awake\\\"); } catch (InterruptedException e) { e.printStackTrace(); } finally { lock.unlock(); } }).start(); TimeUnit.SECONDS.sleep(1); new Thread(() -> { lock.lock(); try { System.out.println(\\\"Thread 2 waiting\\\"); condition.signal(); System.out.println(\\\"Thread 2 is awake\\\"); } finally { lock.unlock(); } }).start(); } } \",\"如果把lock.unlock(); 去掉，那么也会报上面的错误 同理，先signal后wait，也会卡死\",\"使用LockSupport\",\"public static void main(String[] args) throws InterruptedException { Thread thread = new Thread(() -> { LockSupport.park(); System.out.println(\\\"Hello from new thread\\\"); }); thread.start(); TimeUnit.SECONDS.sleep(1); new Thread(() -> { LockSupport.unpark(thread); System.out.println(\\\"Hello from new thread\\\"); }).start(); } \",\"优点：\",\"正常+无锁块要求\",\"之前错误的先唤醒后等待，LockSupport照样支持\",\"LockSupport类使用了一种名为Permit(许可)的概念来做到阻塞和唤醒线程的功能，每个线程都有一个许可(permit)\",\"总结： LockSupport是用来创建锁和其他同步类的基本线程阻塞原语。 LockSupport是一个线程阻塞工具类，所有的方法都是静态方法，可以让线程在任意位置阻塞，阻塞之后也有对应的唤醒方法。归根结底，LockSupporti调用的Unsafe中的native代码。 LockSupport提供park()和unpark()方法实现阻塞线程和解除线程阻塞的过程 LockSupport和每个使用它的线程都有一个许可(permit)关联。 每个线程都有一个相关的permit,,permiti最多只有一个，重复调用unpark也不会积累凭证。 形象的理解 线程阻塞需要消耗凭证(permit),这个凭证最多只有1个。 当调用park方法时\",\"如果有凭证，则会直接消耗掉这个凭证然后正常退出：\",\"如果无凭证，就必须阻塞等待凭证可用； 而unpark则相反，它会增加一个凭证，但凭证最多只能有1个，累加无效。\",\"为什么可以突破wait/notify的原有调用顺序？\",\"因为unpark获得了一个凭证之后再调用park方法，就可以名正言顺的凭证消费，故不会阻塞。 先发放了凭证后续可以畅通无阻。\",\"为什么唤醒两次后阻塞两次，但最终结果还会阻塞线程？\",\"因为凭证的数量最多为1，连续调用两次unpark和调用一次unpark效果一样，只会增加一个凭证； 而调用两次pak却需要消费两个凭证，证不够，不能放行。\"]},\"157\":{\"h\":\"JAVA内存模型之JMM\",\"t\":[\"JVM规范中试图定义一种Java内存模型(java Memory Model.,简称JMM)来屏蔽掉各种硬件和操作系统的内存访问差异，以实现让Java程序在各种平台下都能达到一致的内存访问效果。\",\"JMM(Java内存模型Java Memory Model,,简称JMM)本身是一种抽象的概念并不真实存在它仅仅描述的是一组约定或规范，通过这组规范定义了程序中（尤其是多线程）各个变量的读写访问方式并决定一个线程对共享变量的写入何时以及如何变成对另一个线程可见，关键技术点都是围绕多线程的原子性、可见性和有序性展开的。 原则：\",\"JMM的关键技术点都是围绕多线程的原子性、可见性和有序性展开的 能干嘛？\",\"通过JMM来实现线程和主内存之间的抽象关系。\",\"屏蔽各个硬件平台和操作系统的内存访问差异以实现让Jva程序在各种平台下都能达到一致的内存访问效果。\"]},\"158\":{\"h\":\"JMM规范三大特性\",\"t\":[\"原子性（Atomicity）：\",\"原子性指的是一个操作是不可中断的。在 Java 中，对基本数据类型的读取和赋值操作（例如，int、long等）通常是原子性的。但对于复合操作，例如 i++ 这种非原子性的操作，就需要额外的同步手段来保证其原子性。\",\"可见性（Visibility）：\",\"可见性指的是当一个线程修改了共享变量的值时，其他线程能够立即看到最新的值。在 Java 中，可见性问题通常涉及到缓存和主内存之间的数据同步。为了确保可见性，可以使用 volatile 关键字或者其他同步手段，例如 synchronized、Lock 等。\",\"有序性（Ordering）：\",\"有序性指的是程序执行的顺序和代码中的顺序保持一致。在 Java 中，编译器和处理器为了提高执行效率，可能对指令进行重排序。JMM 通过指令重排序规则来保证代码的执行顺序符合程序员的预期。此外，volatile 和 synchronized 也提供了一定的有序性保证。\",\"系统主内存共享变量数据修改被写入的时机是不确定的，多线程并发下很可能出现\\\"脏读\\\"，所以每个线程都有自己的工作内存，线程自己的工作内存保存了该线程使用到的变量的主内存副本拷贝，线程对变量的所有操作（读取，赋值等）都必需在线程自己的工作内存中进行，而不能够直接读写主内存中的变量。不同线程之间也无法直接访问对方工作内存中的变量，线程间变量值的传递均需要通过主内存来完成\",\"我们定义的所有共享变量都储存在物理主内存中，每个线程都有自己独立的工作内存，里面保存该线程使用到的变量的副本（住内存中该变量的一份拷贝）线程对共享变量所有的操作都必须先在线程自己的工作内存中进行后写回主内存，不能直接从主内存中读写（不能越级），不同线程之间也无法直接访问其他线程的工作内存中的变量，线程间变量值的传递需要通过主内存来进行（同级不能相互访问）\"]},\"159\":{\"h\":\"happens-before\",\"t\":[\"Java 内存模型（JMM）中的 happens-before 是一种保证多线程之间操作顺序的概念，用于描述在不同线程中的操作之间建立的先行发生关系。如果一个操作 happens-before 另一个操作，那么在执行的顺序上，前一个操作的结果对后一个操作是可见的。 以下是 happens-before 的一些规则：\",\"程序次序规则： 在一个线程中，按照程序代码的顺序，前面的操作 happens-before 后面的操作。\",\"锁定规则： 一个解锁操作 happens-before 于后续对同一把锁的加锁操作。这确保了锁的释放对于随后获取该锁的线程是可见的。\",\"volatile变量规则： 对一个 volatile 变量的写操作 happens-before 于后续对该变量的读操作。这确保了对 volatile 变量的修改对于其他线程是可见的。\",\"线程启动规则： 一个线程的启动操作 happens-before 于该线程的任何操作。\",\"线程终止规则： 一个线程的所有操作 happens-before 于该线程的终止操作。\",\"中断规则： 对线程的中断操作 happens-before 于被中断线程检测到中断事件的发生。\",\"对象终结规则： 一个对象的构造函数结束 happens-before 于该对象的 finalize 方法的开始。\",\"传递性： 如果 A happens-before B，且 B happens-before C，则 A happens-before C。这是 happens-before 关系的传递性。\",\"JMM的设计分为两部分： 一部分是面向我们程序员提供的，也就是happens-before?规则,它通俗易懂的向我们程序员阐述了一个强内存模型，我们只要理解happens-before规则，就可以编写并发安全的程序了。 另一部分是针对JVM实现的，为了尽可能少的对编译器和处理器做约束从而提高性能，JMM在不影响程序执行结果的前提下对其不做要求，即允许优化重排序。我们只需要关注前者就好了，也就是理解happens-before规则即可，其它繁杂的内容有JMM规范结合操作系统给我们搞定，我们只写好代码即可。\"]},\"160\":{\"h\":\"volatile与JMM\",\"t\":[\"被volatile修饰的变量有两个特点：可见性，有序性\",\"当写一个volatile变量时，JMM会把该线程对应的本地内存中的共享变量值立即刷新回主内存中。\",\"当读一个volatile变量时，JMM会把该线程对应的本地内存设置为无效，重新回到主内存中读取最新共享变量\",\"所以volatile的写内存语义是直接刷新到主内存中，读的内存语义是直接从主内存中读取。\"]},\"161\":{\"h\":\"内存屏障\",\"t\":[\"volatile为什么可以做到， 内存屏障（也称内存栅栏，屏障指令等，是一类同步屏障指令，是CPU或编译器在对内存随机访问的操作中的一个同步点，使得此点之前的所有读写操作都执行后才可以开始执行此点之后的操作)，避免代码重排序。内存屏障其实就是一种JVM指令，Jva内存模型的重排规则会要求Java编译器在生成JVM指令时插入特定的内存屏障指令，通过这些内存屏障指令，volatile实现了Java内存模型中的可见性和有序性（禁重排），但volatile无法保证原子性。\",\"内存屏障之前的所有写操作都要回写到主内存，\",\"内存屏障之后的所有读操作都能获得内存屏障之前的所有写操作的最新结果（实现了可见性）。\",\"写屏障（Store Memory Barrier):告诉处理器在写屏障之前将所有存储在缓存(store bufferes)中的数据同步到主内存。也就是说当看到Store屏障指令，就必须把该指令之前所有写入指令执行完毕才能继续往下执行。\",\"读屏障(Load Memory Barrier):处理器在读屏障之后的读操作，都在读屏障之后执行。也就是说在Load屏障指令之后就能够保证后面的读取数据指令一定能够读取到最新的数据。\",\"因此重排序时，不允许把内存屏障之后的指令重排序到内存屏障之前。一句话：对一个volatile变量的写，先行发生于任意后续对这volatile变量的读，也叫写后读。\"]},\"162\":{\"c\":[\"Java\",\"JUC\"]},\"163\":{\"c\":[\"Java\",\"JUC\"]},\"164\":{\"h\":\"反射\"},\"165\":{\"h\":\"代理相关\",\"t\":[\"为什么需要代理？\",\"代理可以无侵入式的对方法进行增强，而不需要修改原始方法的代码，这样就可以在不修改原始方法的情况下，对方法进行增强。\",\"代理长什么样子？\",\"代理里面就是对象要被代理的方法\",\"Java通过什么方式来保证代理的样子？\",\"通过接口保证，后面的对象和代理需要实现同一个接口，接口中就是被代理的所有方法\",\"代码演示：\",\"BigStar.java\",\"public class BigStar implements Star { private String name; @Override public String sing(String name) { System.out.println(this.name + \\\"正在唱\\\" + name); return name; } @Override public void dance() { System.out.println(this.name + \\\"正在跳舞\\\"); } //... } \",\"Star接口\",\"public interface Star { //把需要被代理的方法定义在接口中 String sing(String name); void dance(); } \",\"代理工具\",\" public class ProxyUtil { /** * 作用：给一个明星对象创建代理 * 形参：被代理的明星对象 * 返回值：给明星创建的代理 * <p> * 需求：外面的人需要大明星唱一首歌 */ public static Star createProxy(BigStar bigStar) { Star star = (Star) Proxy.newProxyInstance( ProxyUtil.class.getClassLoader(), //参数一：类加载器 new Class[]{Star.class}, //参数二：被代理类的所有接口 //参数三：代理对象的调用处理程序 new InvocationHandler() { @Override public Object invoke(Object o, Method method, Object[] args) throws Throwable { /* 参数一：代理对象 参数二：被代理的方法 参数三：被代理方法的参数 */ if (\\\"sing\\\".equals(method.getName())) { System.out.println(\\\"准备话筒，收钱\\\"); } else if (\\\"dance\\\".equals(method.getName())) { System.out.println(\\\"准备舞台，收钱\\\"); } //执行被代理的方法 //返回被代理方法的返回值 return method.invoke(bigStar, args); } } ); return star; } } \",\"测试类\",\"public class Test { public static void main(String[] args) { BigStar star = new BigStar(\\\"蔡徐坤\\\"); Star proxy = ProxyUtil.createProxy(star); String result = proxy.sing(\\\"只因你太美\\\"); System.out.println(result); } } \"]},\"166\":{\"h\":\"反射\",\"t\":[\"什么是反射？\",\"反射允许对成员变量，成员方法和构造方法的信息进行编程访问\"]},\"167\":{\"h\":\"获取反射三种方式\",\"t\":[\"public class Test { public static void main(String[] args) throws Exception { //第一种方式： //最为常用的方式，通过类的全路径，获取Class对象 Class clazz = Class.forName(\\\"com.cxk.fanshe.Student\\\"); //第二种方式,更多的是当作参数传递 Class clazz2 = Student.class; //第三种方式 //当我们已经有了这个类的对象，才可以使用 Student student = new Student(); Class clazz3 = student.getClass(); } } \"]},\"168\":{\"h\":\"反射获取构造方法\",\"t\":[\"Declared表示私有\",\"方法名\",\"说明\",\"Constructor<?>[] getConstructors()\",\"获得所有的构造（只能public修饰）\",\"Constructor<?>[] getDeclaredConstructors()\",\"获得所有的构造（包含private修饰）\",\"Constructor getConstructor(Class<?>... parameterTypes)\",\"获取指定构造（只能public修饰）\",\"Constructor getDeclaredConstructor(Class<?>... parameterTypes)\",\"获取指定构造（包含private修饰）\",\"Demo\",\"public class Test { public static void main(String[] args) throws Exception { //1.获取class字节码文件对象 Class<?> clazz = Class.forName(\\\"com.cxk.fanshe.Student\\\"); //2.1获取所有的构造方法 Constructor[] con1 = clazz.getDeclaredConstructors(); for (Constructor constructor : con1) System.out.println(constructor); //2.2获取指定的构造方法 Constructor con2 = clazz.getDeclaredConstructor(); //空参 Constructor con3 = clazz.getDeclaredConstructor(String.class, Integer.class); //有参 int modifiers = con3.getModifiers(); //获取权限修饰符 Parameter[] parameters = con3.getParameters();//获取参数列表 con3.setAccessible(true);//暴力反射 无视权限修饰符 这样就可以访问私有构造方法了 Student cxk =(Student) con3.newInstance(\\\"cxk\\\", 23);//创建对象 } } \"]},\"169\":{\"h\":\"获取成员变量\",\"t\":[\"方法名\",\"说明\",\"Field[] getFields()\",\"返回所有成员变量对象的数组（只能拿public的）\",\"Field[] getDeclaredFields()\",\"返回所有成员变量对象的数组，存在就能拿到\",\"Field getField(String name)\",\"返回单个成员变量对象（只能拿public的）\",\"Field getDeclaredField(String name)\",\"返回单个成员变量对象，存在就能拿到\",\"Demo：\",\"public class Test { public static void main(String[] args) throws Exception { //1.获取class字节码文件对象 Class clazz = Class.forName(\\\"com.cxk.fanshe.Student\\\"); Field[] fields = clazz.getDeclaredFields();//获取成员变量 所有的 Field age = clazz.getDeclaredField(\\\"age\\\");//获取单个的 int modifiers = age.getModifiers();//获取权限修饰符 Class type = age.getType();//获取数据类型 String name = age.getName();//获取变量名 Student cxk = new Student(\\\"cxk\\\", 30); age.setAccessible(true);//暴力反射 Integer value =(Integer) age.get(cxk); System.out.println(value); age.set(cxk, 18);//修改已记录的值 System.out.println(cxk); } } \"]},\"170\":{\"h\":\"获取成员方法\",\"t\":[\"方法名\",\"说明\",\"Method[] getMethods()\",\"返回所有成员方法对象的数组（只能拿public的）\",\"Method[] getDeclaredMethods()\",\"返回所有成员方法对象的数组，存在就能拿到\",\"Method getMethod(String name, Class<?>... parameterTypes)\",\"返回单个成员方法对象（只能拿public的）\",\"Method getDeclaredMethod(String name, Class<?>... parameterTypes)\",\"返回单个成员方法对象，存在就能拿到\",\"Demo：\",\"public class Test { public static void main(String[] args) throws Exception { //1.获取class字节码文件对象 Class clazz = Class.forName(\\\"com.cxk.fanshe.Student\\\"); Method[] methods1 = clazz.getMethods(); //获取所有的方法(包括父类) Method[] methods = clazz.getDeclaredMethods();//获取所有的方法(不能获取父类) Method eat = clazz.getMethod(\\\"eat\\\", String.class);//获取单一方法 int modifiers = eat.getModifiers();//获取方法的修饰符 String name = eat.getName();//获取方法的名称 int parameterCount = eat.getParameterCount();//获取方法的参数个数 Class returnType = eat.getReturnType();//获取方法的返回值类型 Parameter[] parameters = eat.getParameters();//获取方法的参数列表 Class[] parameterTypes = eat.getParameterTypes();//获取方法的参数类型列表 Student cxk = new Student(\\\"cxk\\\", 30); eat.setAccessible(true);//暴力反射 使私有方法可以被访问 String apple =(String) eat.invoke(cxk, \\\"apple\\\");//执行方法 } } \"]},\"171\":{\"h\":\"利用反射保存对象信息\",\"t\":[\"Demo:\",\"public class Test { public static void main(String[] args) throws Exception { /* 对于任意一个对象，都可以把对象所有的字段名和值，保存到文件中去 */ Student s = new Student(\\\"小A\\\",23,'女',167.5,\\\"睡觉\\\"); Teacher t = new Teacher(\\\"播妞\\\",10000); saveObject(s); saveObject(t); } //把对象里面所有的成员变量名和值保存到本地文件中 public static void saveObject(Object obj) throws Exception { //1.获取字节码文件的对象 Class clazz = obj.getClass(); //2. 创建IO流 BufferedWriter bw = new BufferedWriter(new FileWriter(\\\"./a.txt\\\")); //3. 获取所有的成员变量 Field[] fields = clazz.getDeclaredFields(); for (Field field : fields) { field.setAccessible(true); //获取成员变量的名字 String name = field.getName(); //获取成员变量的值 Object value = field.get(obj); //写出数据 bw.write(name + \\\"=\\\" + value); bw.newLine(); } bw.close(); } } \",\"学生类：\",\"public class Student { private String name; private int age; private char gender; private double height; private String hobby; } \",\"教师类：\",\"public class Teacher { private String name; private double salary; } \"]},\"172\":{\"c\":[\"Java\",\"反射\"]},\"173\":{\"c\":[\"Java\",\"反射\"]},\"174\":{\"h\":\"MyBatis\",\"t\":[\"官网：https://mybatis.org/mybatis-3/zh/getting-started.html\"]},\"175\":{\"h\":\"创建mybatis项目\",\"t\":[\"导入坐标：\",\"<dependencies> <!--mybatis 依赖--> <dependency> <groupId>org.mybatis</groupId> <artifactId>mybatis</artifactId> <version>3.5.5</version> </dependency> <!--mysql 驱动--> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>5.1.46</version> </dependency> <!--junit 单元测试--> <dependency> <groupId>junit</groupId> <artifactId>junit</artifactId> <version>4.13</version> <scope>test</scope> </dependency> </dependencies> \",\"编写mybatis核心配置文件，具体可以在官网找到：\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!DOCTYPE configuration PUBLIC \\\"-//mybatis.org//DTD Config 3.0//EN\\\" \\\"http://mybatis.org/dtd/mybatis-3-config.dtd\\\"> <configuration> <typeAliases> <package name=\\\"com.itheima.pojo\\\"/> </typeAliases> <!-- environments：配置数据库连接环境信息。可以配置多个environment，通过default属性切换不同的environment --> <environments default=\\\"development\\\"> <environment id=\\\"development\\\"> <transactionManager type=\\\"JDBC\\\"/> <dataSource type=\\\"POOLED\\\"> <!--数据库连接信息--> <property name=\\\"driver\\\" value=\\\"com.mysql.jdbc.Driver\\\"/> <property name=\\\"url\\\" value=\\\"jdbc:mysql:///mybatis?useSSL=false\\\"/> <property name=\\\"username\\\" value=\\\"root\\\"/> <property name=\\\"password\\\" value=\\\"1234\\\"/> </dataSource> </environment> <environment id=\\\"test\\\"> <transactionManager type=\\\"JDBC\\\"/> <dataSource type=\\\"POOLED\\\"> <!--数据库连接信息--> <property name=\\\"driver\\\" value=\\\"com.mysql.jdbc.Driver\\\"/> <property name=\\\"url\\\" value=\\\"jdbc:mysql:///mybatis?useSSL=false\\\"/> <property name=\\\"username\\\" value=\\\"root\\\"/> <property name=\\\"password\\\" value=\\\"1234\\\"/> </dataSource> </environment> </environments> <mappers> <!--加载sql映射文件--> <mapper resource=\\\"UserMapper.xml\\\"/> </mappers> </configuration> \",\"创建Mapper映射文件UserMapper.xml\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!DOCTYPE mapper PUBLIC \\\"-//mybatis.org//DTD Mapper 3.0//EN\\\" \\\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\\\"> <mapper namespace=\\\"test\\\"> <select id=\\\"selectAll\\\" resultType=\\\"com.itheima.pojo.User\\\"> select * from tb_user; </select> </mapper> \",\"创建实体类User\",\"public class User { private int id; private String username; private String password; private String gender; private String addr; } \",\"测试：\",\"public class MyBatisDemo { public static void main(String[] args) throws IOException { //1. 加载mybatis的核心配置文件，获取 SqlSessionFactory String resource = \\\"mybatis-config.xml\\\"; InputStream inputStream = Resources.getResourceAsStream(resource); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); //2. 获取SqlSession对象，用它来执行sql SqlSession sqlSession = sqlSessionFactory.openSession(); //3. 执行sql List<User> users = sqlSession.selectList(\\\"test.selectAll\\\"); //参数是一个字符串，该字符串必须是映射配置文件的namespace.id System.out.println(users); //4. 释放资源 sqlSession.close(); } } \"]},\"176\":{\"h\":\"Mapper代理开发\",\"t\":[\"下面这个test.selectAll存在硬编码问题，可以使用Mapper代理的方式修改\",\"Mapper代理开发步骤：\",\"创建UserMapper接口：\",\"public interface UserMapper { List<User> selectAll(); } \",\"修改命名空间，必须是接口对应的全限定名字：\",\"修改测试类\",\"//3.1 获取UserMapper接口的代理对象 UserMapper userMapper = sqlSession.getMapper(UserMapper.class); List<User> users = userMapper.selectAll(); \",\"如果Mapper接口名称和SQL映射文件名称相同，并在同一目录下，则可以使用包扫描的方式简化SQL映射文件的加载。也就是将核心配置文件的加载映射配置文件的配置修改为\",\"<mappers> <!--加载sql映射文件--> <!-- <mapper resource=\\\"com/itheima/mapper/UserMapper.xml\\\"/>--> <!--Mapper代理方式--> <package name=\\\"com.itheima.mapper\\\"/> </mappers> \"]},\"177\":{\"h\":\"MyBatis核心配置文件\"},\"178\":{\"h\":\"多环境配置\",\"t\":[\"在核心配置文件的 environments 标签中其实是可以配置多个 environment ，使用 id 给每段环境起名，在 environments 中使用 default='环境id' 来指定使用哪儿段配置。\",\"<environments default=\\\"development\\\"> <environment id=\\\"development\\\"> <transactionManager type=\\\"JDBC\\\"/> <dataSource type=\\\"POOLED\\\"> <!--数据库连接信息--> <property name=\\\"driver\\\" value=\\\"com.mysql.jdbc.Driver\\\"/> <property name=\\\"url\\\" value=\\\"jdbc:mysql:///mybatis?useSSL=false\\\"/> <property name=\\\"username\\\" value=\\\"root\\\"/> <property name=\\\"password\\\" value=\\\"1234\\\"/> </dataSource> </environment> <environment id=\\\"test\\\"> <transactionManager type=\\\"JDBC\\\"/> <dataSource type=\\\"POOLED\\\"> <!--数据库连接信息--> <property name=\\\"driver\\\" value=\\\"com.mysql.jdbc.Driver\\\"/> <property name=\\\"url\\\" value=\\\"jdbc:mysql:///mybatis?useSSL=false\\\"/> <property name=\\\"username\\\" value=\\\"root\\\"/> <property name=\\\"password\\\" value=\\\"1234\\\"/> </dataSource> </environment> </environments>= \"]},\"179\":{\"h\":\"类型别名\",\"t\":[\"在映射配置文件中的 resultType 属性需要配置数据封装的类型（类的全限定名）。而每次这样写是特别麻烦的，Mybatis 提供了 类型别名(typeAliases) 可以简化这部分的书写。\",\"<typeAliases> <!--name属性的值是实体类所在包--> <package name=\\\"com.itheima.pojo\\\"/> </typeAliases> \",\"如果写上面的了，那么resultType就可以简化了\",\"<mapper namespace=\\\"com.itheima.mapper.UserMapper\\\"> <select id=\\\"selectAll\\\" resultType=\\\"user\\\"> select * from tb_user; </select> </mapper> \"]},\"180\":{\"h\":\"数据库映射问题\",\"t\":[\"如果Java的实体类和数据库里的字段不一致，可以使用起别名的方式来解决这个问题\",\"<select id=\\\"selectAll\\\" resultType=\\\"brand\\\"> select id, brand_name as brandName, company_name as companyName, ordered, description, status from tb_brand; </select> \",\"但是这种方式还是太麻烦，复用性不高，可以使用下面两种方式进行：\",\"SQL片段引用：\",\"<sql id=\\\"brand_column\\\"> id, brand_name as brandName, company_name as companyName, ordered, description, status </sql> <select id=\\\"selectAll\\\" resultType=\\\"brand\\\"> select <include refid=\\\"brand_column\\\" /> from tb_brand; </select> \"]},\"181\":{\"h\":\"使用resultMap\",\"t\":[\"<resultMap id=\\\"brandResultMap\\\" type=\\\"brand\\\"> <!-- id：完成主键字段的映射 column：表的列名 property：实体类的属性名 result：完成一般字段的映射 column：表的列名 property：实体类的属性名 --> <result column=\\\"brand_name\\\" property=\\\"brandName\\\"/> <result column=\\\"company_name\\\" property=\\\"companyName\\\"/> </resultMap> <select id=\\\"selectAll\\\" resultMap=\\\"brandResultMap\\\"> select * from tb_brand; </select> \",\"注意接口的返回结果变成了resultMap而不是resultType\"]},\"182\":{\"h\":\"参数占位符\",\"t\":[\"例如selectById接口，需要传入一个id，可以使用#占位符\",\"<select id=\\\"selectById\\\" resultMap=\\\"brandResultMap\\\"> select * from tb_brand where id = #{id}; </select> \",\"调用：\",\"BrandMapper brandMapper = sqlSession.getMapper(BrandMapper.class); Brand brand = brandMapper.selectById(id); System.out.println(brand); \",\"#存在SQL注入问题，可以使用$替换\",\"<select id=\\\"selectById\\\" resultMap=\\\"brandResultMap\\\"> select * from tb_brand where id = ${id}; </select> \",\"使用ParameterType可以指定参数的类型：\",\"<select id=\\\"selectById\\\" parameterType=\\\"int\\\" resultMap=\\\"brandResultMap\\\"> select * from tb_brand where id = ${id}; </select> \"]},\"183\":{\"h\":\"特殊符号\",\"t\":[\"因为映射配置文件是xml类型的问题，而 > < 等这些字符在xml中有特殊含义，所以此时我们需要将这些符号进行转义，\",\"例如:<可以使用&lt\"]},\"184\":{\"h\":\"多条件查询\",\"t\":[\"编写接口：\",\"使用 @Param(\\\"参数名称\\\") 标记每一个参数，在映射配置文件中就需要使用 #{参数名称} 进行占位\",\"List<Brand> selectByCondition(@Param(\\\"status\\\") int status, @Param(\\\"companyName\\\") String companyName,@Param(\\\"brandName\\\") String brandName); \",\"测试：\",\"@Test public void testSelectByCondition() throws IOException { //接收参数 int status = 1; String companyName = \\\"华为\\\"; String brandName = \\\"华为\\\"; // 处理参数 companyName = \\\"%\\\" + companyName + \\\"%\\\"; brandName = \\\"%\\\" + brandName + \\\"%\\\"; //1. 获取SqlSessionFactory String resource = \\\"mybatis-config.xml\\\"; InputStream inputStream = Resources.getResourceAsStream(resource); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); //2. 获取SqlSession对象 SqlSession sqlSession = sqlSessionFactory.openSession(); //3. 获取Mapper接口的代理对象 BrandMapper brandMapper = sqlSession.getMapper(BrandMapper.class); //4. 执行方法 //方式一 ：接口方法参数使用 @Param 方式调用的方法 List<Brand> brands = brandMapper.selectByCondition(status, companyName, brandName); //5. 释放资源 sqlSession.close(); } \",\"将多个参数封装成一个 实体对象 ，将该实体对象作为接口的方法参数。该方式要求在映射配置文件的SQL中使用 #{内容} 时，里面的内容必须和实体类属性名保持一致。\",\"List<Brand> selectByCondition(Brand brand); \",\"测试：\",\"//方式二 ：接口方法参数是 实体类对象 方式调用的方法 //封装对象 Brand brand = new Brand(); brand.setStatus(status); brand.setCompanyName(companyName); brand.setBrandName(brandName); List<Brand> brands = brandMapper.selectByCondition(brand); \",\"使用Map映射，将map集合作为接口的方法参数。该方式要求在映射配置文件的SQL中使用 #{内容} 时，里面的内容必须和map集合中键的名称一致。\",\"List<Brand> selectByCondition(Map map); \",\"测试：\",\"//方式三 ：接口方法参数是 map集合对象 方式调用的方法 Map map = new HashMap(); map.put(\\\"status\\\" , status); map.put(\\\"companyName\\\", companyName); map.put(\\\"brandName\\\" , brandName); List<Brand> brands = brandMapper.selectByCondition(map); System.out.println(brands); \",\"SQL语句如下：\",\"<select id=\\\"selectByCondition\\\" resultMap=\\\"brandResultMap\\\"> select * from tb_brand where status = #{status} and company_name like #{companyName} and brand_name like #{brandName} </select> \"]},\"185\":{\"h\":\"动态SQL\",\"t\":[\"每个字段不一定全部都输入，需要判断是否存在,可以使用if条件判断\",\"<select id=\\\"selectByCondition\\\" resultMap=\\\"brandResultMap\\\"> select * from tb_brand where <if test=\\\"status != null\\\"> and status = #{status} </if> <if test=\\\"companyName != null and companyName != '' \\\"> and company_name like #{companyName} </if> <if test=\\\"brandName != null and brandName != '' \\\"> and brand_name like #{brandName} </if> </select> \",\"这样也存在问题，如果没有输入status，SQL会变成：\",\"select * from tb_brand where and company_name like ? and brand_name like ? \",\"可以使用where语句解决：会动态的去掉第一个条件前的 and\",\"<select id=\\\"selectByCondition\\\" resultMap=\\\"brandResultMap\\\"> select * from tb_brand <where> <if test=\\\"status != null\\\"> and status = #{status} </if> <if test=\\\"companyName != null and companyName != '' \\\"> and company_name like #{companyName} </if> <if test=\\\"brandName != null and brandName != '' \\\"> and brand_name like #{brandName} </if> </where> </select> \",\"注意：需要给每个条件前都加上 and 关键字。\"]},\"186\":{\"h\":\"单条件查询\",\"t\":[\"在查询时只能选择 品牌名称、当前状态、企业名称 这三个条件中的一个，可以使用choose标签\",\"<select id=\\\"selectByConditionSingle\\\" resultMap=\\\"brandResultMap\\\"> select * from tb_brand <where> <choose><!--相当于switch--> <when test=\\\"status != null\\\"><!--相当于case--> status = #{status} </when> <when test=\\\"companyName != null and companyName != '' \\\"><!--相当于case--> company_name like #{companyName} </when> <when test=\\\"brandName != null and brandName != ''\\\"><!--相当于case--> brand_name like #{brandName} </when> </choose> </where> </select> \"]},\"187\":{\"h\":\"增删改查\"},\"188\":{\"h\":\"增加\",\"t\":[\"<insert id=\\\"add\\\"> insert into tb_brand (brand_name, company_name, ordered, description, status) values (#{brandName}, #{companyName}, #{ordered}, #{description}, #{status}); </insert> \",\"如何判断是否成功？可以添加主键返回,执行完之后可以打印id\",\"<insert id=\\\"add\\\" useGeneratedKeys=\\\"true\\\" keyProperty=\\\"id\\\"> insert into tb_brand (brand_name, company_name, ordered, description, status) values (#{brandName}, #{companyName}, #{ordered}, #{description}, #{status}); </insert> \",\"useGeneratedKeys：是够获取自动增长的主键值。true表示获取\",\"keyProperty ：指定将获取到的主键值封装到哪儿个属性里\"]},\"189\":{\"h\":\"删除\",\"t\":[\"<delete id=\\\"deleteById\\\"> delete from tb_brand where id = #{id}; </delete> \"]},\"190\":{\"h\":\"批量删除\",\"t\":[\"接口传入的参数为数组\",\"/** * 批量删除 */ void deleteByIds(int[] ids); \",\"SQL 语句：\",\"编写SQL时需要遍历数组来拼接SQL语句。Mybatis 提供了 foreach 标签用来迭代任何可迭代的对象（如数组，集合）。\",\"collection 属性： \",\"mybatis会将数组参数，封装为一个Map集合。 \",\"默认：array = 数组\",\"使用@Param注解改变map集合的默认key的名称\",\"item 属性：本次迭代获取到的元素。\",\"separator 属性：集合项迭代之间的分隔符。foreach 标签不会错误地添加多余的分隔符。也就是最后一次迭代不会加分隔符。\",\"open 属性：该属性值是在拼接SQL语句之前拼接的语句，只会拼接一次\",\"close 属性：该属性值是在拼接SQL语句拼接后拼接的语句，只会拼接一次\",\"<delete id=\\\"deleteByIds\\\"> delete from tb_brand where id in <foreach collection=\\\"array\\\" item=\\\"id\\\" separator=\\\",\\\" open=\\\"(\\\" close=\\\")\\\"> #{id} </foreach> ; </delete> \",\"假如数组中的id数据是{1,2,3}，那么拼接后的sql语句就是：\",\"delete from tb_brand where id in (1,2,3); \"]},\"191\":{\"h\":\"修改\",\"t\":[\"<update id=\\\"update\\\"> update tb_brand <set> <if test=\\\"brandName != null and brandName != ''\\\"> brand_name = #{brandName}, </if> <if test=\\\"companyName != null and companyName != ''\\\"> company_name = #{companyName}, </if> <if test=\\\"ordered != null\\\"> ordered = #{ordered}, </if> <if test=\\\"description != null and description != ''\\\"> description = #{description}, </if> <if test=\\\"status != null\\\"> status = #{status} </if> </set> where id = #{id}; </update> \",\"set 标签可以用于动态包含需要更新的列，忽略其它不更新的列。\"]},\"192\":{\"h\":\"注解开发\",\"t\":[\"直接在接口语句上面写SQL即可：\",\"查询 ：@Select\",\"添加 ：@Insert\",\"修改 ：@Update\",\"删除 ：@Delete\",\"@Select(value = \\\"select * from tb_user where id = #{id}\\\") public User select(int id); \",\"虽然简单，但是无法完成复杂的SQL语句。\"]},\"193\":{\"c\":[\"Java\",\"MyBatis\"]},\"194\":{\"c\":[\"Java\",\"MyBatis\"]},\"195\":{\"h\":\"Mybatis-Plus\",\"t\":[\"官网：Mybatis-plus官网\"]},\"196\":{\"h\":\"快速入门\",\"t\":[\"引入依赖，替换掉mybatis\",\"<!-- <dependency>--> <!-- <groupId>org.mybatis.spring.boot</groupId>--> <!-- <artifactId>mybatis-spring-boot-starter</artifactId>--> <!-- <version>2.3.1</version>--> <!-- </dependency>--> <dependency> <groupId>com.baomidou</groupId> <artifactId>mybatis-plus-boot-starter</artifactId> <version>3.5.3.2</version> </dependency> \",\"让我们原来的mapper即成mybatis的baseMapper\",\"public interface UserMapper extends BaseMapper<User> \",\"测试：\",\"@SpringBootTest class UserMapperTest { @Autowired private UserMapper userMapper; @Test void testInsert() { User user = new User(); user.setId(5L); user.setUsername(\\\"Lucy\\\"); user.setPassword(\\\"123\\\"); user.setPhone(\\\"18688990011\\\"); user.setBalance(200); user.setInfo(\\\"{\\\\\\\"age\\\\\\\": 24, \\\\\\\"intro\\\\\\\": \\\\\\\"英文老师\\\\\\\", \\\\\\\"gender\\\\\\\": \\\\\\\"female\\\\\\\"}\\\"); user.setCreateTime(LocalDateTime.now()); user.setUpdateTime(LocalDateTime.now()); userMapper.insert(user); } @Test void testSelectById() { User user = userMapper.selectById(5L); System.out.println(\\\"user = \\\" + user); } @Test void testQueryByIds() { List<User> users = userMapper.selectBatchIds(List.of(1L, 2L, 3L, 4L)); users.forEach(System.out::println); } @Test void testUpdateById() { User user = new User(); user.setId(5L); user.setBalance(20000); userMapper.updateById(user); } @Test void testDeleteUser() { userMapper.deleteById(5L); } } \"]},\"197\":{\"h\":\"常见注解\"},\"198\":{\"h\":\"@TableName\",\"t\":[\"用来标注表名和实体类名的对应关系\",\"属性\",\"类型\",\"必须指定\",\"默认值\",\"描述\",\"value\",\"String\",\"否\",\"\\\"\\\"\",\"表名\",\"schema\",\"String\",\"否\",\"\\\"\\\"\",\"schema\",\"keepGlobalPrefix\",\"boolean\",\"否\",\"false\",\"是否保持使用全局的 tablePrefix 的值（当全局 tablePrefix 生效时）\",\"resultMap\",\"String\",\"否\",\"\\\"\\\"\",\"xml 中 resultMap 的 id（用于满足特定类型的实体类对象绑定）\",\"autoResultMap\",\"boolean\",\"否\",\"false\",\"是否自动构建 resultMap 并使用（如果设置 resultMap 则不会进行 resultMap 的自动构建与注入）\",\"excludeProperty\",\"String[]\",\"否\",\"{}\",\"需要排除的属性名 @since 3.3.1\"]},\"199\":{\"h\":\"@TableId\",\"t\":[\"用来标识实体类中的主键，如上图中的 id\"]},\"200\":{\"h\":\"@TableField\",\"t\":[\"普通字段注解和 数据库对应,一般不需要加 ，一些特殊情况需要：\",\"成员变量名与数据库字段名不一致\",\"成员变量是以isXXX命名，按照JavaBean的规范，MybatisPlus识别字段时会把is去除，这就导致与数据库不符。\",\"成员变量名与数据库一致，但是与数据库的关键字冲突。使用@TableField注解给字段名添加转义字符：````\"]},\"201\":{\"h\":\"常用配置\",\"t\":[\"连接：https://www.baomidou.com/pages/56bac0/#基本配置\",\"mybatis-plus: type-aliases-package: com.itheima.mp.domain.po mapper-locations: \\\"classpath*:/mapper/**/*.xml\\\" # Mapper.xml文件地址，当前这个是默认值。 global-config: db-config: id-type: auto # 全局id类型为自增长 \",\"type-aliases-package: MyBaits 别名包扫描路径，通过该属性可以给包中的类注册别名，注册后在 Mapper 对应的 XML 文件中可以直接使用类名，而不用使用全限定的类名(即 XML 中调用的时候不用包含包名)\",\"mapper-locations ：MyBatis Mapper 所对应的 XML 文件位置，如果您在 Mapper 中有自定义方法(XML 中有自定义实现)，需要进行该配置，告诉 Mapper 所对应的 XML 文件位置\"]},\"202\":{\"h\":\"核心功能\"},\"203\":{\"h\":\"条件构造器\"},\"204\":{\"h\":\"QueryWrapper\",\"t\":[\"例子：查询出名字中带o的，存款大于等于1000元的人。 手写sql如下：\",\"select id, username, info, balance from tb_user where username like '%o%' and balance > 1000 \",\"使用querywrapper\",\" @Test void testQueryWrapper() { QueryWrapper<User> queryWrapper = new QueryWrapper<>(); queryWrapper.select(\\\"id\\\", \\\"username\\\", \\\"info\\\", \\\"balance\\\") .like(\\\"username\\\", \\\"o\\\") .ge(\\\"balance\\\", 1000); List<User> users = userMapper.selectList(queryWrapper); users.forEach(System.out::println); } \",\"更新用户名为jack的用户的余额为2000 手写sql：\",\"update tb_user set balance =2000 where username ='jack' \",\"使用querywrapper\",\" @Test void testUpdateByQueryWrapper(){ User user = new User(); user.setBalance(2000); QueryWrapper<User> userQueryWrapper = new QueryWrapper<>(); userQueryWrapper.eq(\\\"username\\\",\\\"jack\\\"); userMapper.update(user,userQueryWrapper); } \"]},\"205\":{\"h\":\"UpdateWrapper\",\"t\":[\"基于baseMapper中的update方法更新指南直接赋值，对复杂的需求难以实现\",\"需求：更新id为1,2,4的用户的余额，扣200 手写sql：\",\"update tb_user set balance =balance - 200 where id in (1, 2, 4) \",\"Java代码：\",\" @Test void testUpdateWrapper() { List<Long> ids = List.of(1L, 2L, 4L); UpdateWrapper<User> userUpdateWrapper = new UpdateWrapper<>(); userUpdateWrapper.setSql(\\\"balance=balance-200\\\") .in(\\\"id\\\", ids); userMapper.update(null, userUpdateWrapper); } \"]},\"206\":{\"h\":\"LambdaQueryWrapper\",\"t\":[\"QueryWrapper和UpdateWrapper在构造条件的时候都需要写死字段名称，会出现字符串魔法值\",\"可以利用基于变量的getter方法和反射技术实现\",\" @Test void testLambdaWrapper() { LambdaQueryWrapper<User> queryWrapper = new LambdaQueryWrapper<>(); queryWrapper.select(User::getId, User::getUsername, User::getInfo, User::getBalance) .like(User::getUsername, \\\"o\\\") .ge(User::getBalance, 1000); List<User> users = userMapper.selectList(queryWrapper); users.forEach(System.out::println); } \"]},\"207\":{\"h\":\"自定义SQL\",\"t\":[\"利用自定义sql可以构造一些复杂的where条件 Java代码：\",\" @Test void testCustomSqlUpdate() { List<Long> ids = List.of(1L, 2L, 4L); int amount = 200; QueryWrapper<User> wrapper = new QueryWrapper<User>().in(\\\"id\\\", ids); //调用自定义的sql方法 userMapper.updateBalanceByIds(wrapper,amount); } \",\"Mapper代码：\",\". @Param(Constants.WRAPPER) 里面必须为“ew”\",\" void updateBalanceByIds(@Param(Constants.WRAPPER) QueryWrapper<User> wrapper, int amount); \",\"xml文件中：\",\" <update id=\\\"updateBalanceByIds\\\"> update tb_user set balance= balance- #{amount} ${ew.customSqlSegment} </update> \"]},\"208\":{\"h\":\"IService接口\",\"t\":[\"通用接口为IService，默认实现为ServiceImpl，其中封装的方法可以分为以下几类：\",\"save：新增\",\"remove：删除\",\"update：更新\",\"get：查询单个结果\",\"list：查询集合结果\",\"count：计数\",\"page：分页查询\",\"用法： 创建service接口：\",\"public interface UserService extends IService<User> { } \",\"实现类：\",\"public class UserServiceImpl extends ServiceImpl<UserMapper, User> implements UserService { } \",\"测试：\",\"@SpringBootTest class UserServiceImplTest { @Resource private UserService userService; @Test void testAddUser() { User user = new User(); user.setUsername(\\\"Lucy\\\"); user.setPassword(\\\"123\\\"); user.setPhone(\\\"18688990011\\\"); user.setBalance(200); user.setInfo(\\\"{\\\\\\\"age\\\\\\\": 24, \\\\\\\"intro\\\\\\\": \\\\\\\"英文老师\\\\\\\", \\\\\\\"gender\\\\\\\": \\\\\\\"female\\\\\\\"}\\\"); user.setCreateTime(LocalDateTime.now()); user.setUpdateTime(LocalDateTime.now()); userService.save(user); } @Test void testQuery(){ List<Integer> ids = List.of(1, 2, 4); List<User> users = userService.listByIds(ids); users.forEach(System.out::println); } } \",\"具体到实际请求编写： 控制器：\",\" @RestController @Api(tags = \\\"用户管理接口\\\") @RequestMapping(\\\"/user\\\") @RequiredArgsConstructor // 需要的构造函数 public class UserController { private final UserService userService; @PostMapping @ApiOperation(\\\"新增用户\\\") public void saveUser(@RequestBody UserFormDTO userFormDTO) { userService.save(BeanUtil.copyProperties(userFormDTO, User.class)); } @DeleteMapping(\\\"/{id}\\\") @ApiOperation(\\\"删除用户\\\") public void removeById(@PathVariable(\\\"id\\\") Long userId) { userService.removeById(userId); } @GetMapping(\\\"/{id}\\\") @ApiOperation(\\\"根据id查询用户\\\") public UserVO queryUserById(@PathVariable(\\\"id\\\") Long userId) { User user = userService.getById(userId); return BeanUtil.copyProperties(user, UserVO.class); } @GetMapping @ApiOperation(\\\"根据id集合查询用户\\\") public List<UserVO> queryUserByIds(@RequestParam(\\\"ids\\\") List<Long> ids) { List<User> users = userService.listByIds(ids); return BeanUtil.copyToList(users, UserVO.class); } @PutMapping(\\\"{id}/deduction/{money}\\\") @ApiOperation(\\\"扣减用户余额\\\") public void deductBalance(@PathVariable(\\\"id\\\") Long id, @PathVariable(\\\"money\\\")Integer money){ userService.deductBalance(id, money); } } \",\"业务逻辑：\",\" @Resource private UserMapper userMapper; @Override public void deductBalance(Long id, Integer money) { User user = this.getById(id); if (user==null||user.getStatus()==2){ throw new RuntimeException(\\\"用户状态异常\\\"); } if (user.getBalance()<money){ throw new RuntimeException(\\\"用户余额不足\\\"); } userMapper.deductMoneyById(id,money); } \",\"Mapper:\",\"@Update(\\\"update tb_user set balance=balance-#{money} where id=#{id}\\\") void deductMoneyById(@Param(\\\"id\\\") Long id,@Param(\\\"money\\\") Integer money); \"]},\"209\":{\"h\":\"使用lambda方法：\",\"t\":[\"实现一个根据复杂条件查询用户的接口，查询条件如下：\",\"name：用户名关键字，可以为空\",\"status：用户状态，可以为空\",\"minBalance：最小余额，可以为空\",\"maxBalance：最大余额，可以为空\",\" /** * 使用LambdaQueryWrapper */ @GetMapping(\\\"/list\\\") @ApiOperation(\\\"根据id集合查询用户\\\") public List<UserVO> queryUsers(UserQuery query) { String username = query.getName(); Integer status = query.getStatus(); Integer minBalance = query.getMinBalance(); Integer maxBalance = query.getMaxBalance(); LambdaQueryWrapper<User> wrapper = new QueryWrapper<User>().lambda() .like(username != null, User::getUsername, username) .eq(status != null, User::getStatus, status) .ge(minBalance != null, User::getBalance, minBalance) .le(maxBalance != null, User::getBalance, maxBalance); List<User> users = userService.list(wrapper); return BeanUtil.copyToList(users, UserVO.class); } \",\"例如like的第一个参数都是条件判断，当条件成立时才会添加这个查询条件，类似Mybatis的mapper.xml文件中的<if>标签。这样就实现了动态查询条件效果了。 Service中对LambdaQueryWrapper和LambdaUpdateWrapper的用法进一步做了简化。我们无需自己通过new的方式来创建Wrapper，而是直接调用lambdaQuery和lambdaUpdate方法：\",\" /** * 直接调用lambdaQuery */ @GetMapping(\\\"/list\\\") @ApiOperation(\\\"根据id集合查询用户\\\") public List<UserVO> queryUsers(UserQuery query) { String username = query.getName(); Integer status = query.getStatus(); Integer minBalance = query.getMinBalance(); Integer maxBalance = query.getMaxBalance(); List<User> users = userService.lambdaQuery() .like(username != null, User::getUsername, username) .eq(status != null, User::getStatus, status) .ge(minBalance != null, User::getBalance, minBalance) .le(maxBalance != null, User::getBalance, maxBalance) .list(); return BeanUtil.copyToList(users, UserVO.class); } \",\"可以发现lambdaQuery方法中除了可以构建条件，还需要在链式编程的最后添加一个list()，这是在告诉MP我们的调用结果需要是一个list集合。这里不仅可以用list()，可选的方法有：\",\".one()：最多1个结果\",\".list()：返回集合结果\",\".count()：返回计数结果\",\"MybatisPlus会根据链式编程的最后一个方法来判断最终的返回结果。\"]},\"210\":{\"h\":\"使用lambdaUpdate\",\"t\":[\"改造根据id修改用户余额的接口，要求如下\",\"如果扣减后余额为0，则将用户status修改为冻结状态（2）\",\" @Override @Transactional public void deductBalance(Long id, Integer money) { User user = this.getById(id); if (user == null || user.getStatus() == 2) { throw new RuntimeException(\\\"用户状态异常\\\"); } if (user.getBalance() < money) { throw new RuntimeException(\\\"用户余额不足\\\"); } int remainBalance = user.getBalance() - money; this.lambdaUpdate() .set(User::getBalance, remainBalance) .set(remainBalance == 0, User::getStatus, 2) .eq(User::getId, id) .eq(User::getBalance, user.getBalance()) //乐观锁 .update(); } \",\"乐观锁：\",\"这段代码使用了一个条件，即在更新数据库记录时，要求数据库中的记录必须满足两个条件才能成功更新：\",\"User::getId 等于给定的 id：这是为了确保我们只更新指定用户的记录。\",\"User::getBalance 等于原始用户对象中的余额值 user.getBalance()：这是乐观锁的关键条件。\",\"乐观锁是一种并发控制机制，用于处理多个并发事务同时访问相同数据的情况。在这种机制下，不是使用传统的悲观锁（例如数据库锁定整个记录），而是在数据记录中添加一个版本号或时间戳字段，用于标识数据的版本。在进行数据更新时，每个事务都会检查这个版本号或时间戳字段，以确保在它们之间没有其他并发事务对同一数据记录进行了更改。\",\"在代码中，乐观锁的实现方式是检查用户的余额是否与初始查询时的余额相同。如果余额不同，说明在查询和更新之间有其他事务修改了用户的余额，那么当前事务会失败，不会执行更新操作。这就是乐观锁的核心思想：通过检查某个数据的版本或状态来判断是否可以执行更新操作，而不是锁定整个数据记录。\",\"使用乐观锁可以提高系统的并发性能，因为不需要在整个事务期间锁定数据记录，而只是在更新时检查数据的版本或状态。但是需要注意，如果有多个并发事务同时尝试更新同一条数据，其中一个事务会成功，而其他事务可能需要重新尝试或处理更新失败的情况。\"]},\"211\":{\"h\":\"批量新增\",\"t\":[\"如果一个一个新增，耗时为24s左右：\",\" @Test void testSaveOneByOne() { long b = System.currentTimeMillis(); for (int i = 1; i <= 100000; i++) { userService.save(buildUser(i)); } long e = System.currentTimeMillis(); System.out.println(\\\"耗时：\\\" + (e - b)); } private User buildUser(int i) { User user = new User(); user.setUsername(\\\"user_\\\" + i); user.setPassword(\\\"123\\\"); user.setPhone(\\\"\\\" + (18688190000L + i)); user.setBalance(2000); user.setInfo(\\\"{\\\\\\\"age\\\\\\\": 24, \\\\\\\"intro\\\\\\\": \\\\\\\"英文老师\\\\\\\", \\\\\\\"gender\\\\\\\": \\\\\\\"female\\\\\\\"}\\\"); user.setCreateTime(LocalDateTime.now()); user.setUpdateTime(user.getCreateTime()); return user; } \",\"使用批量删除,耗时在8s左右\",\" @Test void testSaveBatch() { // 准备10万条数据 List<User> list = new ArrayList<>(1000); long b = System.currentTimeMillis(); for (int i = 1; i <= 100000; i++) { list.add(buildUser(i)); // 每1000条批量插入一次 if (i % 1000 == 0) { userService.saveBatch(list); list.clear(); } } long e = System.currentTimeMillis(); System.out.println(\\\"耗时：\\\" + (e - b)); } \",\"MyBatis Plus 的批处理确实是基于 Prepared Statement 的预编译模式，并且它将多个插入操作一起批量提交给数据库。这种批处理方式可以减少与数据库的通信次数，从而提高数据插入的效率\",\"Preparing: INSERT INTO user ( username, password, phone, info, balance, create_time, update_time ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) Parameters: user_1, 123, 18688190001, \\\"\\\", 2000, 2023-07-01, 2023-07-01 Parameters: user_2, 123, 18688190002, \\\"\\\", 2000, 2023-07-01, 2023-07-01 Parameters: user_3, 123, 18688190003, \\\"\\\", 2000, 2023-07-01, 2023-07-01 \",\"如果想要得到最佳性能，最好是将多条SQL合并为一条\",\"INSERT INTO user ( username, password, phone, info, balance, create_time, update_time ) VALUES (user_1, 123, 18688190001, \\\"\\\", 2000, 2023-07-01, 2023-07-01), (user_2, 123, 18688190002, \\\"\\\", 2000, 2023-07-01, 2023-07-01), (user_3, 123, 18688190003, \\\"\\\", 2000, 2023-07-01, 2023-07-01), (user_4, 123, 18688190004, \\\"\\\", 2000, 2023-07-01, 2023-07-01); \",\"可以在客户端连接的时候加上一个参数rewriteBatchedStatements 连接：链接\",\"spring: datasource: url: jdbc:mysql://127.0.0.1:3306/demo?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true driver-class-name: com.mysql.cj.jdbc.Driver username: root password: 12345678 \",\"此时只需要4s\"]},\"212\":{\"h\":\"扩展功能\"},\"213\":{\"h\":\"代码生成器\",\"t\":[\"按照mybatisplus插件：\",\"连接数据库：\",\"生成代码：\"]},\"214\":{\"h\":\"Db静态工具\",\"t\":[\"Service之间也会相互调用，为了避免出现循环依赖问题，MybatisPlus提供一个静态工具类：Db，其中的一些静态方法与IService中方法签名基本一致，也可以帮助我们实现CRUD功能\",\"需求：改造根据id用户查询的接口，查询用户的同时返回用户收货地址列表\",\" @GetMapping(\\\"/{id}\\\") @ApiOperation(\\\"根据id查询用户\\\") public UserVO queryUserById(@PathVariable(\\\"id\\\") Long userId) { // 1.查询用户 User user = userService.getById(userId); if (user == null) { return null; } // 2.查询收货地址 List<Address> addresses = Db.lambdaQuery(Address.class) .eq(Address::getUserId, userId) .list(); // 3.处理vo UserVO userVO = BeanUtil.copyProperties(user, UserVO.class); userVO.setAddressVO(BeanUtil.copyToList(addresses, AddressVO.class)); return userVO; } \",\"在查询地址时，我们采用了Db的静态方法，因此避免了注入AddressService，减少了循环依赖的风险(Address里面注入userService)\",\"根据id批量查询用户，并查询出用户对应的所有地址\",\" @GetMapping @ApiOperation(\\\"根据id集合查询用户\\\") public List<UserVO> queryUserByIds(@RequestParam(\\\"ids\\\") List<Long> ids) { List<User> users = userService.listByIds(ids); if (CollUtil.isEmpty(users)) { return Collections.emptyList(); } List<Long> userIds = users.stream().map(User::getId).collect(Collectors.toList()); List<Address> addresses = Db.lambdaQuery(Address.class).in(Address::getId, userIds).list(); List<AddressVO> addressVOList = BeanUtil.copyToList(addresses, AddressVO.class); //用户地址分组，相同用户的放在一个集合中 Map<Long, List<AddressVO>> addressMap = new HashMap<>(0); if (CollUtil.isNotEmpty(addressVOList)) { addressMap = addressVOList.stream().collect(Collectors.groupingBy(AddressVO::getUserId)); } //转为VO返回 ArrayList<UserVO> list = new ArrayList<>(users.size()); for (User user : users) { UserVO userVO = BeanUtil.copyProperties(user, UserVO.class); list.add(userVO); userVO.setAddressVO(addressMap.get(user.getId())); } return list; } \"]},\"215\":{\"h\":\"逻辑删除\",\"t\":[\"逻辑删除是一种数据库管理和数据保留的方法，与物理删除不同，它不会立即从数据库中删除数据记录，而是通过标记数据记录为已删除或不可见的状态，以便稍后可以恢复或保留数据。\",\"一般设置一个字段 例如is_delete :0-未删除，1-删除\",\"配置：\",\"mybatis-plus: type-aliases-package: com.itheima.mp.domain.po mapper-locations: \\\"classpath*:/mapper/**/*.xml\\\" # Mapper.xml文件地址，当前这个是默认值。 global-config: db-config: id-type: auto # 全局id类型为自增长 logic-delete-field: deleted # 全局逻辑删除的实体字段名(since 3.3.0,配置后可以忽略不配置步骤2) logic-delete-value: 1 # 逻辑已删除值(默认为 1) logic-not-delete-value: 0 # 逻辑未删除值(默认为 0) \",\" @Test void testDeleteByLogic() { // 删除方法与以前没有区别 addressService.removeById(59L); List<Address> addresses = addressService.list(); addresses.forEach(System.out::println); } \"]},\"216\":{\"h\":\"枚举处理器\",\"t\":[\"定义一个枚举类：\",\"@Getter public enum UserStatus { NORMAL(1, \\\"正常\\\"), FREEZE(2, \\\"冻结\\\") ; @EnumValue //意思是这个根数据库对应 private final int value; @JsonValue //给前端的是这个值， 正常/冻结 private final String desc; UserStatus(int value, String desc) { this.value = value; this.desc = desc; } } \",\"上面需要加EnumValue 注解，表示这个字段的值和数据库对应\",\"修改用户类型：\",\" /** * 使用状态（1正常 2冻结） */ private UserStatus status; \",\"配置：\",\"mybatis-plus: configuration: default-enum-type-handler: com.baomidou.mybatisplus.core.handlers.MybatisEnumTypeHandler \"]},\"217\":{\"h\":\"JSON类型处理器\",\"t\":[\"数据库的user表的info字段是json格式，实体类中是String格式\",\"读取info中的属性时就非常不方便。如果要方便获取，info的类型最好是一个Map或者实体类。\",\"如果把info改为对象类型，就需要在写入数据库时手动转为String，再读取数据库时，手动转换为对象，这会非常麻烦。\",\"MybatisPlus提供了很多特殊类型字段的类型处理器，解决特殊字段类型与数据库类型转换的问题。例如处理JSON就可以使用JacksonTypeHandler处理器。\",\"创建UserInfo类：\",\"@Data @NoArgsConstructor @AllArgsConstructor(staticName = \\\"of\\\") public class UserInfo { private Integer age; private String intro; private String gender; } \",\"开启自动结果映射：\",\"@Data @TableName(value = \\\"tb_user\\\",autoResultMap = true) public class User { @TableField(typeHandler = JacksonTypeHandler.class) private UserInfo info; } \",\"autoResultMap = true\",\"@TableField(typeHandler = JacksonTypeHandler.class)\"]},\"218\":{\"h\":\"插件功能\",\"t\":[\"MybatisPlus提供了很多的插件功能，进一步拓展其功能。目前已有的插件有：\",\"PaginationInnerInterceptor：自动分页\",\"TenantLineInnerInterceptor：多租户\",\"DynamicTableNameInnerInterceptor：动态表名\",\"OptimisticLockerInnerInterceptor：乐观锁\",\"IllegalSQLInnerInterceptor：sql 性能规范\",\"BlockAttackInnerInterceptor：防止全表更新与删除\"]},\"219\":{\"h\":\"分页插件\",\"t\":[\"创建配置类：\",\"@Configuration public class MybatisConfig { @Bean public MybatisPlusInterceptor mybatisPlusInterceptor() { // 初始化核心插件 MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor(); // 添加分页插件 interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL)); return interceptor; } } \",\"测试：\",\" @Test void testPageQuery() { // 1.分页查询，new Page()的两个参数分别是：页码、每页大小 int current = 2; int size = 2; Page<User> page = Page.of(current, size); page.addOrder(new OrderItem(\\\"balance\\\", true)); page.addOrder(new OrderItem(\\\"id\\\", true)); page = userService.page(page); long total = page.getTotal(); System.out.println(\\\"total = \\\" + total); long pages = page.getPages(); System.out.println(\\\"pages = \\\" + pages); List<User> records = page.getRecords(); records.forEach(System.out::println); } \"]},\"220\":{\"h\":\"通用分页实体\",\"t\":[\"请求：\",\"@Data @ApiModel(description = \\\"分页查询实体\\\") public class PageQuery { @ApiModelProperty(\\\"页码\\\") private Integer pageNo; @ApiModelProperty(\\\"页码\\\") private Integer pageSize; @ApiModelProperty(\\\"排序字段\\\") private String sortBy; @ApiModelProperty(\\\"是否升序\\\") private Boolean isAsc; } \",\"用户请求，继承PageQuery\",\"@EqualsAndHashCode(callSuper = true) // 生成equals和hashCode方法时，会调用父类的equals和hashCode方法 @Data @ApiModel(description = \\\"用户查询条件实体\\\") public class UserQuery extends PageQuery { @ApiModelProperty(\\\"用户名关键字\\\") private String name; @ApiModelProperty(\\\"用户状态：1-正常，2-冻结\\\") private Integer status; @ApiModelProperty(\\\"余额最小值\\\") private Integer minBalance; @ApiModelProperty(\\\"余额最大值\\\") private Integer maxBalance; } \",\"分页返回结果：\",\"@Data @NoArgsConstructor @AllArgsConstructor @ApiModel(description = \\\"分页结果\\\") public class PageDTO<T> { @ApiModelProperty(\\\"总条数\\\") private Long total; @ApiModelProperty(\\\"总页数\\\") private Long pages; @ApiModelProperty(\\\"集合\\\") private List<T> list; } \",\"定义控制器：\",\"@GetMapping(\\\"/page\\\") public PageDTO<UserVO> queryUsersPage(UserQuery query){ return userService.queryUsersPage(query); } \",\"业务实现：\",\" @Override public PageDTO<UserVO> queryUsersPage(UserQuery query) { String name = query.getName(); Integer status = query.getStatus(); Page<User> page = Page.of(query.getPageNo(), query.getPageSize()); if (query.getSortBy() != null) { page.addOrder(new OrderItem(query.getSortBy(), query.getIsAsc())); } else { page.addOrder(new OrderItem(\\\"update_time\\\", false)); } //查询 Page<User> p = this.lambdaQuery() .like(name != null, User::getUsername, name) .eq(status != null, User::getStatus, status) .page(page); //封装Vo结果 PageDTO<UserVO> dto = new PageDTO<>(); dto.setTotal(p.getTotal()); dto.setPages(p.getPages()); List<User> records = page.getRecords(); if (CollUtil.isEmpty(records)) { dto.setList(Collections.emptyList()); } List<UserVO> list = BeanUtil.copyToList(records, UserVO.class); dto.setList(list); return dto; } \",\"在上述代码中，从PageQuery转到MybatisPlus的Page对象比较麻烦，可以自己定义工具进行转化：\",\"@Data public class PageQuery { private Integer pageNo; private Integer pageSize; private String sortBy; private Boolean isAsc; public <T> Page<T> toMpPage(OrderItem... orders) { // 1.分页条件 Page<T> p = Page.of(pageNo, pageSize); // 2.排序条件 // 2.1.先看前端有没有传排序字段 if (sortBy != null) { p.addOrder(new OrderItem(sortBy, isAsc)); return p; } // 2.2.再看有没有手动指定排序字段 if (orders != null) { p.addOrder(orders); } return p; } public <T> Page<T> toMpPage(String defaultSortBy, boolean isAsc) { return this.toMpPage(new OrderItem(defaultSortBy, isAsc)); } public <T> Page<T> toMpPageDefaultSortByCreateTimeDesc() { return toMpPage(\\\"create_time\\\", false); } public <T> Page<T> toMpPageDefaultSortByUpdateTimeDesc() { return toMpPage(\\\"update_time\\\", false); } } \",\"改造PageDTO实体\",\"@Data @NoArgsConstructor @AllArgsConstructor public class PageDTO<V> { private Long total; private Long pages; private List<V> list; /** * 返回空分页结果 * @param p MybatisPlus的分页结果 * @param <V> 目标VO类型 * @param <P> 原始PO类型 * @return VO的分页对象 */ public static <V, P> PageDTO<V> empty(Page<P> p){ return new PageDTO<>(p.getTotal(), p.getPages(), Collections.emptyList()); } /** * 将MybatisPlus分页结果转为 VO分页结果 * @param p MybatisPlus的分页结果 * @param voClass 目标VO类型的字节码 * @param <V> 目标VO类型 * @param <P> 原始PO类型 * @return VO的分页对象 */ public static <V, P> PageDTO<V> of(Page<P> p, Class<V> voClass) { // 1.非空校验 List<P> records = p.getRecords(); if (records == null || records.size() <= 0) { // 无数据，返回空结果 return empty(p); } // 2.数据转换 List<V> vos = BeanUtil.copyToList(records, voClass); // 3.封装返回 return new PageDTO<>(p.getTotal(), p.getPages(), vos); } /** * 将MybatisPlus分页结果转为 VO分页结果，允许用户自定义PO到VO的转换方式 * @param p MybatisPlus的分页结果 * @param convertor PO到VO的转换函数 * @param <V> 目标VO类型 * @param <P> 原始PO类型 * @return VO的分页对象 */ public static <V, P> PageDTO<V> of(Page<P> p, Function<P, V> convertor) { // 1.非空校验 List<P> records = p.getRecords(); if (records == null || records.size() <= 0) { // 无数据，返回空结果 return empty(p); } // 2.数据转换 List<V> vos = records.stream().map(convertor).collect(Collectors.toList()); // 3.封装返回 return new PageDTO<>(p.getTotal(), p.getPages(), vos); } } \",\"业务层更换：\",\" @Override public PageDTO<UserVO> queryUsersPage(UserQuery query) { String name = query.getName(); Integer status = query.getStatus(); Page<User> page = query.toMpPageDefaultSortByCreateTimeDesc(); //查询 Page<User> p = this.lambdaQuery() .like(name != null, User::getUsername, name) .eq(status != null, User::getStatus, status) .page(page); //封装Vo结果 // return PageDTO.of(p, UserVO.class); return PageDTO.of(p, user -> { //拷贝属性 UserVO vo = BeanUtil.copyProperties(user, UserVO.class); //其他特殊逻辑 vo.setUsername(user.getUsername() + \\\"123\\\"); return vo; }); } \"]},\"221\":{\"c\":[\"Java\",\"Mybatis-plus\"]},\"222\":{\"c\":[\"Java\",\"Mybatis-Plus\"]},\"223\":{\"h\":\"SSM整合\"},\"224\":{\"h\":\"SSM整合步骤\",\"t\":[\"创建项目，导入依赖：\",\" <dependencies> <!--spring mvc--> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-webmvc</artifactId> <version>5.2.10.RELEASE</version> </dependency> <!--spring jdbc--> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-jdbc</artifactId> <version>5.2.10.RELEASE</version> </dependency> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>5.1.47</version> </dependency> <dependency> <groupId>com.alibaba</groupId> <artifactId>druid</artifactId> <version>1.1.16</version> </dependency> <!--spring test--> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-test</artifactId> <version>5.2.10.RELEASE</version> </dependency> <dependency> <groupId>junit</groupId> <artifactId>junit</artifactId> <version>4.12</version> <scope>test</scope> </dependency> <!--spring mybatis--> <dependency> <groupId>org.mybatis</groupId> <artifactId>mybatis-spring</artifactId> <version>1.3.0</version> </dependency> <dependency> <groupId>org.mybatis</groupId> <artifactId>mybatis</artifactId> <version>3.5.6</version> </dependency> <!--servlet--> <dependency> <groupId>javax.servlet</groupId> <artifactId>javax.servlet-api</artifactId> <version>3.1.0</version> <scope>provided</scope> </dependency> <!--jackson mvc要用到--> <dependency> <groupId>com.fasterxml.jackson.core</groupId> <artifactId>jackson-databind</artifactId> <version>2.9.0</version> </dependency> </dependencies> <build> <plugins> <plugin> <groupId>org.apache.tomcat.maven</groupId> <artifactId>tomcat7-maven-plugin</artifactId> <version>2.1</version> <configuration> <port>80</port> <path>/</path> </configuration> </plugin> </plugins> </build> \",\"创建配置类\",\"Spring配置类：SpringConfig\",\"@Configuration @ComponentScan({\\\"com.itheima.service\\\"}) @PropertySource(\\\"classpath:jdbc.properties\\\") @Import({JdbcConfig.class,MyBatisConfig.class}) @EnableTransactionManagement public class SpringConfig { } \",\"jdbc配置类,JdbcConfig\",\"public class JdbcConfig { @Value(\\\"${jdbc.driver}\\\") private String driver; @Value(\\\"${jdbc.url}\\\") private String url; @Value(\\\"${jdbc.username}\\\") private String username; @Value(\\\"${jdbc.password}\\\") private String password; @Bean public DataSource dataSource(){ DruidDataSource dataSource = new DruidDataSource(); dataSource.setDriverClassName(driver); dataSource.setUrl(url); dataSource.setUsername(username); dataSource.setPassword(password); return dataSource; } @Bean public PlatformTransactionManager transactionManager(DataSource dataSource){ DataSourceTransactionManager ds = new DataSourceTransactionManager(); ds.setDataSource(dataSource); return ds; } } \",\"Mybatis配置类，MybatisConfig\",\"public class MyBatisConfig { @Bean public SqlSessionFactoryBean sqlSessionFactory(DataSource dataSource){ SqlSessionFactoryBean factoryBean = new SqlSessionFactoryBean(); factoryBean.setDataSource(dataSource); factoryBean.setTypeAliasesPackage(\\\"com.itheima.domain\\\"); return factoryBean; } @Bean public MapperScannerConfigurer mapperScannerConfigurer(){ MapperScannerConfigurer msc = new MapperScannerConfigurer(); msc.setBasePackage(\\\"com.itheima.dao\\\"); return msc; } } \",\"连接数据库资源文件：jdbc.properties\",\"jdbc.driver=com.mysql.jdbc.Driver jdbc.url=jdbc:mysql://localhost:3306/ssm_db jdbc.username=root jdbc.password=root \",\"SpringMVC配置类:SpringMvcConfig\",\"@Configuration @ComponentScan(\\\"com.itheima.controller\\\") @EnableWebMvc public class SpringMvcConfig { } \",\"Web项目入口配置类:ServletConfig\",\"public class ServletConfig extends AbstractAnnotationConfigDispatcherServletInitializer { //加载Spring配置类 protected Class<?>[] getRootConfigClasses() { return new Class[]{SpringConfig.class}; } //加载SpringMVC配置类 protected Class<?>[] getServletConfigClasses() { return new Class[]{SpringMvcConfig.class}; } //设置SpringMVC请求地址拦截规则 protected String[] getServletMappings() { return new String[]{\\\"/\\\"}; } //设置post请求中文乱码过滤器 @Override protected Filter[] getServletFilters() { CharacterEncodingFilter filter = new CharacterEncodingFilter(); filter.setEncoding(\\\"utf-8\\\"); return new Filter[]{filter}; } } \",\"功能模块开发：\",\"dao接口：\",\"public interface BookDao { // @Insert(\\\"insert into tbl_book values(null,#{type},#{name},#{description})\\\") @Insert(\\\"insert into tbl_book (type,name,description) values(#{type},#{name},#{description})\\\") public void save(Book book); @Update(\\\"update tbl_book set type = #{type}, name = #{name}, description = #{description} where id = #{id}\\\") public void update(Book book); @Delete(\\\"delete from tbl_book where id = #{id}\\\") public void delete(Integer id); @Select(\\\"select * from tbl_book where id = #{id}\\\") public Book getById(Integer id); @Select(\\\"select * from tbl_book\\\") public List<Book> getAll(); } \",\"service实现类：\",\"@Service public class BookServiceImpl implements BookService { @Autowired private BookDao bookDao; public boolean save(Book book) { bookDao.save(book); return true; } public boolean update(Book book) { bookDao.update(book); return true; } public boolean delete(Integer id) { bookDao.delete(id); return true; } public Book getById(Integer id) { return bookDao.getById(id); } public List<Book> getAll() { return bookDao.getAll(); } } \",\"Controller控制器：\",\"@RestController @RequestMapping(\\\"/books\\\") public class BookController { @Autowired private BookService bookService; @PostMapping public boolean save(@RequestBody Book book) { return bookService.save(book); } @PutMapping public boolean update(@RequestBody Book book) { return bookService.update(book); } @DeleteMapping(\\\"/{id}\\\") public boolean delete(@PathVariable Integer id) { return bookService.delete(id); } @GetMapping(\\\"/{id}\\\") public Book getById(@PathVariable Integer id) { return bookService.getById(id); } @GetMapping public List<Book> getAll() { return bookService.getAll(); } } \",\"单元测试：\",\"@RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(classes = SpringConfig.class) public class BookServiceTest { @Autowired private BookService bookService; @Test public void testGetById(){ Book book = bookService.getById(1); System.out.println(book); } } \"]},\"225\":{\"h\":\"统一返回结果封装\"},\"226\":{\"h\":\"返回结果Result类设置为Object\",\"t\":[\"public class Result { //描述统一格式中的数据 private Object data; //描述统一格式中的编码，用于区分操作，可以简化配置0或1表示成功失败 private Integer code; //描述统一格式中的消息，可选属性 private String msg; public Result() { } //构造方法是方便对象的创建 public Result(Integer code,Object data) { this.data = data; this.code = code; } //构造方法是方便对象的创建 public Result(Integer code, Object data, String msg) { this.data = data; this.code = code; this.msg = msg; } //setter...getter...省略 } \",\"返回码定义Code类：\",\"//状态码 public class Code { public static final Integer SAVE_OK = 20011; public static final Integer DELETE_OK = 20021; public static final Integer UPDATE_OK = 20031; public static final Integer GET_OK = 20041; public static final Integer SAVE_ERR = 20010; public static final Integer DELETE_ERR = 20020; public static final Integer UPDATE_ERR = 20030; public static final Integer GET_ERR = 20040; } \"]},\"227\":{\"h\":\"推荐使用范型T\",\"t\":[\"...\"]},\"228\":{\"h\":\"异常处理\"},\"229\":{\"h\":\"异常处理器类\",\"t\":[\"//@RestControllerAdvice用于标识当前类为REST风格对应的异常处理器 @RestControllerAdvice public class ProjectExceptionAdvice { //除了自定义的异常处理器，保留对Exception类型的异常处理，用于处理非预期的异常 @ExceptionHandler(Exception.class) public Result doException(Exception ex){ System.out.println(\\\"捕获到异常！\\\") return new Result(666,null,\\\"捕获到异常！\\\"); } } \",\"需要保证Spring MVC可以扫描到异常处理类\",\"在这个异常处理类里面可以返回Result给前端\"]},\"230\":{\"h\":\"自定义异常处理类\",\"t\":[\"系统异常：\",\"//自定义异常处理器，用于封装异常信息，对异常进行分类 public class SystemException extends RuntimeException{ private Integer code; public Integer getCode() { return code; } public void setCode(Integer code) { this.code = code; } public SystemException(Integer code, String message) { super(message); this.code = code; } public SystemException(Integer code, String message, Throwable cause) { super(message, cause); this.code = code; } } \",\"业务层异常：\",\" //自定义异常处理器，用于封装异常信息，对异常进行分类 public class BusinessException extends RuntimeException{ private Integer code; public Integer getCode() { return code; } public void setCode(Integer code) { this.code = code; } public BusinessException(Integer code, String message) { super(message); this.code = code; } public BusinessException(Integer code, String message, Throwable cause) { super(message, cause); this.code = code; } } \",\"让自定义异常类继承RuntimeException的好处是，后期在抛出这两个异常的时候，就不用在try...catch...或throws了\",\"处理器中处理自定义异常：\",\"//@RestControllerAdvice用于标识当前类为REST风格对应的异常处理器 @RestControllerAdvice public class ProjectExceptionAdvice { //@ExceptionHandler用于设置当前处理器类对应的异常类型 @ExceptionHandler(SystemException.class) public Result doSystemException(SystemException ex){ //记录日志 //发送消息给运维 //发送邮件给开发人员,ex对象发送给开发人员 return new Result(ex.getCode(),null,ex.getMessage()); } @ExceptionHandler(BusinessException.class) public Result doBusinessException(BusinessException ex){ return new Result(ex.getCode(),null,ex.getMessage()); } //除了自定义的异常处理器，保留对Exception类型的异常处理，用于处理非预期的异常 @ExceptionHandler(Exception.class) public Result doOtherException(Exception ex){ //记录日志 //发送消息给运维 //发送邮件给开发人员,ex对象发送给开发人员 return new Result(Code.SYSTEM_UNKNOW_ERR,null,\\\"系统繁忙，请稍后再试！\\\"); } } \"]},\"231\":{\"h\":\"拦截器\",\"t\":[\"拦截器Interceptor和过滤器Filter的区别：\",\"归属不同：Filter属于Servlet技术，Interceptor属于SpringMVC技术\",\"拦截内容不同：Filter对所有访问进行增强，Interceptor仅针对SpringMVC的访问进行增强\"]},\"232\":{\"h\":\"创建拦截器\",\"t\":[\"创建拦截器：实现HandlerInterceptor接口，重写接口中的三个方法。\",\"@Component //定义拦截器类，实现HandlerInterceptor接口 //注意当前类必须受Spring容器控制 public class ProjectInterceptor implements HandlerInterceptor { @Override //原始方法调用前执行的内容 public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception { System.out.println(\\\"preHandle...\\\"); return true; } @Override //原始方法调用后执行的内容 public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception { System.out.println(\\\"postHandle...\\\"); } @Override //原始方法调用完成后执行的内容 public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception { System.out.println(\\\"afterCompletion...\\\"); } } \",\"拦截器需要被Spring MVC扫描到\",\"拦截器中的preHandler方法，如果返回true,则代表放行，会执行原始Controller类中要请求的方法，如果返回false，则代表拦截，后面的就不会再执行了。\",\"配置拦截器类\",\"@Configuration public class SpringMvcSupport extends WebMvcConfigurationSupport { @Autowired private ProjectInterceptor projectInterceptor; @Override protected void addResourceHandlers(ResourceHandlerRegistry registry) { registry.addResourceHandler(\\\"/pages/**\\\").addResourceLocations(\\\"/pages/\\\"); } @Override protected void addInterceptors(InterceptorRegistry registry) { //配置拦截器 registry.addInterceptor(projectInterceptor).addPathPatterns(\\\"/books\\\" ); } } \",\"SpringMVC扫描\",\"@Configuration @ComponentScan({\\\"com.itheima.controller\\\",\\\"com.itheima.config\\\"}) @EnableWebMvc public class SpringMvcConfig{ } \",\"上面的拦截器类存在一些问题：比如拦截/books,但是这样实际上是不会拦截例如/books/1这种请求，因此需要进行更改如下：\",\"registry.addInterceptor(projectInterceptor).addPathPatterns(\\\"/books\\\",\\\"/books/*\\\" ); \",\"SpringMvcSupport可以简化编写\",\"@Configuration @ComponentScan({\\\"com.itheima.controller\\\"}) @EnableWebMvc //实现WebMvcConfigurer接口可以简化开发，但具有一定的侵入性 public class SpringMvcConfig implements WebMvcConfigurer { @Autowired private ProjectInterceptor projectInterceptor; @Override public void addInterceptors(InterceptorRegistry registry) { //配置多拦截器 registry.addInterceptor(projectInterceptor).addPathPatterns(\\\"/books\\\",\\\"/books/*\\\"); } } \",\"这样就不用再写SpringMvcSupport类了。\",\"拦截器参数：\",\"public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception { System.out.println(\\\"preHandle\\\"); return true; } \",\"request:请求对象\",\"response:响应对象\",\"handler:被调用的处理器对象，本质上是一个方法对象，对反射中的Method对象进行了再包装\",\"使用request对象可以获取请求数据中的内容，如获取请求头的Content-Type\",\"public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception { String contentType = request.getHeader(\\\"Content-Type\\\"); System.out.println(\\\"preHandle...\\\"+contentType); return true; } \",\"使用handler参数，可以获取方法的相关信息\",\"public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception { HandlerMethod hm = (HandlerMethod)handler; String methodName = hm.getMethod().getName();//可以获取方法的名称 System.out.println(\\\"preHandle...\\\"+methodName); return true; } \"]},\"233\":{\"h\":\"配置多个拦截器：\",\"t\":[\"第二个拦截器\",\"@Component public class ProjectInterceptor2 implements HandlerInterceptor { @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception { System.out.println(\\\"preHandle...222\\\"); return false; } @Override public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception { System.out.println(\\\"postHandle...222\\\"); } @Override public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception { System.out.println(\\\"afterCompletion...222\\\"); } } \",\"配置拦截器：\",\"@Configuration @ComponentScan({\\\"com.itheima.controller\\\"}) @EnableWebMvc //实现WebMvcConfigurer接口可以简化开发，但具有一定的侵入性 public class SpringMvcConfig implements WebMvcConfigurer { @Autowired private ProjectInterceptor projectInterceptor; @Autowired private ProjectInterceptor2 projectInterceptor2; @Override public void addInterceptors(InterceptorRegistry registry) { //配置多拦截器 registry.addInterceptor(projectInterceptor).addPathPatterns(\\\"/books\\\",\\\"/books/*\\\"); registry.addInterceptor(projectInterceptor2).addPathPatterns(\\\"/books\\\",\\\"/books/*\\\"); } } \",\"执行顺序：\",\"进去：先1，后2，\",\"中间：先2，后1\",\"出来：先2，后1\"]},\"234\":{\"c\":[\"Java\",\"Spring\"]},\"235\":{\"c\":[\"Java\",\"Spring\"]},\"236\":{\"h\":\"SpringBoot文件上传\"},\"237\":{\"h\":\"前端\",\"t\":[\"<form action=\\\"/upload\\\" method=\\\"post\\\" enctype=\\\"multipart/form-data\\\"> 姓名: <input type=\\\"text\\\" name=\\\"username\\\"><br> 年龄: <input type=\\\"text\\\" name=\\\"age\\\"><br> 头像: <input type=\\\"file\\\" name=\\\"image\\\"><br> <input type=\\\"submit\\\" value=\\\"提交\\\"> </form> \",\"三要素：\",\"method 为post，因为post适合上传大文件\",\"enctype=\\\"multipart/form-data\\\"\",\"type=\\\"file\\\"\"]},\"238\":{\"h\":\"后端\",\"t\":[\"Springboot默认单个文件最大为1M，可以在配置文件中进行设置\",\"spring: #文件上传的配置 servlet: multipart: max-file-size: 10MB # 单个文件 max-request-size: 100MB #多个文件总大小 \"]},\"239\":{\"h\":\"本地存储\",\"t\":[\"@PostMapping(\\\"/upload\\\") public Result upload(String username , Integer age , MultipartFile image) throws Exception { log.info(\\\"文件上传: {}, {}, {}\\\", username, age, image); //获取原始文件名 String originalFilename = image.getOriginalFilename(); //构造唯一的文件名 (不能重复) - uuid(通用唯一识别码) int index = originalFilename.lastIndexOf(\\\".\\\"); //获取文件的后缀名 String extname = originalFilename.substring(index); String newFileName = UUID.randomUUID() + extname; log.info(\\\"新的文件名: {}\\\", newFileName); //将文件存储在服务器的磁盘目录中 String path = \\\"D:\\\\\\\\upload\\\"+newFileName; image.transferTo(new File(path)); return Result.success(); } \"]},\"240\":{\"h\":\"阿里云OSS存储\",\"t\":[\"https://oss.console.aliyun.com/bucket 创建一个bucket 点击右上角AccessKey管理，添加一个Key查看SDK帮助文档：https://oss.console.aliyun.com/sdk以及OSS文档https://help.aliyun.com/zh/oss/developer-reference/overview-21\"]},\"241\":{\"h\":\"使用\",\"t\":[\"引入maven依赖\",\"<dependency> <groupId>com.aliyun.oss</groupId> <artifactId>aliyun-sdk-oss</artifactId> <version>3.15.1</version> </dependency> \",\"java9以上需要添加下面依赖\",\"<dependency> <groupId>javax.xml.bind</groupId> <artifactId>jaxb-api</artifactId> <version>2.3.1</version> </dependency> <dependency> <groupId>javax.activation</groupId> <artifactId>activation</artifactId> <version>1.1.1</version> </dependency> <!-- no more than 2.3.3--> <dependency> <groupId>org.glassfish.jaxb</groupId> <artifactId>jaxb-runtime</artifactId> <version>2.3.3</version> </dependency> \",\"复制阿里云提供的示例代码\",\"import com.aliyun.oss.ClientException; import com.aliyun.oss.OSS; import com.aliyun.oss.common.auth.*; import com.aliyun.oss.OSSClientBuilder; import com.aliyun.oss.OSSException; import com.aliyun.oss.model.PutObjectRequest; import com.aliyun.oss.model.PutObjectResult; import java.io.File; public class Demo { public static void main(String[] args) throws Exception { // Endpoint以华东1（杭州）为例，其它Region请按实际情况填写。 String endpoint = \\\"https://oss-cn-hangzhou.aliyuncs.com\\\"; // 从环境变量中获取访问凭证。运行本代码示例之前，请确保已设置环境变量OSS_ACCESS_KEY_ID和OSS_ACCESS_KEY_SECRET。 EnvironmentVariableCredentialsProvider credentialsProvider = CredentialsProviderFactory.newEnvironmentVariableCredentialsProvider(); // 填写Bucket名称，例如examplebucket。 String bucketName = \\\"examplebucket\\\"; // 填写Object完整路径，完整路径中不能包含Bucket名称，例如exampledir/exampleobject.txt。 String objectName = \\\"exampledir/exampleobject.txt\\\"; // 填写本地文件的完整路径，例如D:\\\\\\\\localpath\\\\\\\\examplefile.txt。 // 如果未指定本地路径，则默认从示例程序所属项目对应本地路径中上传文件。 String filePath= \\\"D:\\\\\\\\localpath\\\\\\\\examplefile.txt\\\"; // 创建OSSClient实例。 OSS ossClient = new OSSClientBuilder().build(endpoint, credentialsProvider); try { // 创建PutObjectRequest对象。 PutObjectRequest putObjectRequest = new PutObjectRequest(bucketName, objectName, new File(filePath)); // 如果需要上传时设置存储类型和访问权限，请参考以下示例代码。 // ObjectMetadata metadata = new ObjectMetadata(); // metadata.setHeader(OSSHeaders.OSS_STORAGE_CLASS, StorageClass.Standard.toString()); // metadata.setObjectAcl(CannedAccessControlList.Private); // putObjectRequest.setMetadata(metadata); // 上传文件。 PutObjectResult result = ossClient.putObject(putObjectRequest); } catch (OSSException oe) { System.out.println(\\\"Caught an OSSException, which means your request made it to OSS, \\\" + \\\"but was rejected with an error response for some reason.\\\"); System.out.println(\\\"Error Message:\\\" + oe.getErrorMessage()); System.out.println(\\\"Error Code:\\\" + oe.getErrorCode()); System.out.println(\\\"Request ID:\\\" + oe.getRequestId()); System.out.println(\\\"Host ID:\\\" + oe.getHostId()); } catch (ClientException ce) { System.out.println(\\\"Caught an ClientException, which means the client encountered \\\" + \\\"a serious internal problem while trying to communicate with OSS, \\\" + \\\"such as not being able to access the network.\\\"); System.out.println(\\\"Error Message:\\\" + ce.getMessage()); } finally { if (ossClient != null) { ossClient.shutdown(); } } } } \",\"编辑.bash_profile文件\",\"export OSS_ACCESS_KEY_ID= export OSS_ACCESS_KEY_SECRET= \",\"上面这种是为了演示Demo做的，在项目中是写在yml文件里面，可以定义下面属性：\",\"#阿里云OSS aliyun: oss: endpoint: xxx accessKeyId: xxx accessKeySecret: xxx bucketName: xxx \",\"通过文件读取 ：\",\"@Data @Component @ConfigurationProperties(prefix = \\\"aliyun.oss\\\") public class AliOSSProperties { private String endpoint; private String accessKeyId; private String accessKeySecret; private String bucketName; } \",\"上传图片工具类：\",\" /** * 阿里云 OSS 工具类 */ @Component public class AliOSSUtils { @Autowired private AliOSSProperties aliOSSProperties; /** * 实现上传图片到OSS */ public String upload(MultipartFile file) throws IOException { //获取阿里云OSS参数 String endpoint = aliOSSProperties.getEndpoint(); String accessKeyId = aliOSSProperties.getAccessKeyId(); String accessKeySecret = aliOSSProperties.getAccessKeySecret(); String bucketName = aliOSSProperties.getBucketName(); // 获取上传的文件的输入流 InputStream inputStream = file.getInputStream(); // 避免文件覆盖 String originalFilename = file.getOriginalFilename(); String fileName = UUID.randomUUID().toString() + originalFilename.substring(originalFilename.lastIndexOf(\\\".\\\")); //上传文件到 OSS OSS ossClient = new OSSClientBuilder().build(endpoint, accessKeyId, accessKeySecret); ossClient.putObject(bucketName, fileName, inputStream); //文件访问路径 String url = endpoint.split(\\\"//\\\")[0] + \\\"//\\\" + bucketName + \\\".\\\" + endpoint.split(\\\"//\\\")[1] + \\\"/\\\" + fileName; // 关闭ossClient ossClient.shutdown(); return url;// 把上传到oss的路径返回 } } \",\"Controller中使用：\",\"@Autowired private AliOSSUtils aliOSSUtils; @PostMapping(\\\"/upload\\\") public Result upload(MultipartFile image) throws IOException { log.info(\\\"文件上传, 文件名: {}\\\", image.getOriginalFilename()); //调用阿里云OSS工具类进行文件上传 String url = aliOSSUtils.upload(image); log.info(\\\"文件上传完成,文件访问的url: {}\\\", url); return Result.success(url); } \"]},\"242\":{\"c\":[\"Java\",\"SpringBoot\"]},\"243\":{\"c\":[\"Java\",\"SpringBoot\",\"OSS\"]},\"244\":{\"h\":\"SpringMvc笔记\",\"t\":[\"三层架构：\",\"web层主要由servlet来处理，负责页面请求和数据的收集以及响应结果给前端\",\"service层主要负责业务逻辑的处理\",\"dao层主要负责数据的增删改查操作\",\"MVC设计模式：将其设计为controller、view和Model\",\"controller负责请求和数据的接收，接收后将其转发给service进行业务处理\",\"service根据需要会调用dao对数据进行增删改查\",\"dao把数据处理完后将结果交给service,service再交给controller\",\"controller根据需求组装成Model和View,Model和View组合起来生成页面转发给前端浏览器\",\"这样做的好处就是controller可以处理多个请求，并对请求进行分发，执行不同的业务操作。\"]},\"245\":{\"h\":\"项目创建\",\"t\":[\"导入jar包\",\" <dependencies> <dependency> <groupId>javax.servlet</groupId> <artifactId>javax.servlet-api</artifactId> <version>3.1.0</version> <scope>provided</scope> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-webmvc</artifactId> <version>5.2.10.RELEASE</version> </dependency> </dependencies> <build> <plugins> <plugin> <groupId>org.apache.tomcat.maven</groupId> <artifactId>tomcat7-maven-plugin</artifactId> <version>2.1</version> <configuration> <port>80</port> <path>/</path> </configuration> </plugin> </plugins> </build> \",\"创建配置类\",\"@Configuration @ComponentScan(\\\"com.itheima.controller\\\") public class SpringMvcConfig { } \",\"创建Controller类\",\"@Controller public class UserController { @RequestMapping(\\\"/save\\\") @ResponseBody //不加默认是去找页面，找不到会报404，设置当前控制器方法响应内容为当前返回值，无需解析 public String save(){ System.out.println(\\\"user save ...\\\"); return \\\"{'info':'springmvc'}\\\"; } } \",\"使用配置类代替web.xml\",\"public class ServletContainersInitConfig extends AbstractDispatcherServletInitializer { //加载springmvc配置类 protected WebApplicationContext createServletApplicationContext() { //初始化WebApplicationContext对象 AnnotationConfigWebApplicationContext ctx = new AnnotationConfigWebApplicationContext(); //加载指定配置类 ctx.register(SpringMvcConfig.class); return ctx; } //设置由springmvc控制器处理的请求映射路径 protected String[] getServletMappings() { return new String[]{\\\"/\\\"};//代表所拦截请求的路径规则，只有被拦截后才能交给SpringMVC来处理请求 } //加载spring配置类 protected WebApplicationContext createRootApplicationContext() { return null; } } \",\"问题：controller、service和dao这些类都需要被容器管理成bean对象，那么到底是该让SpringMVC加载还是让Spring加载呢?\",\"SpringMVC加载其相关bean(表现层bean),也就是controller包下的类\",\"Spring控制的bean \",\"业务bean(Service)\",\"功能bean(DataSource,SqlSessionFactoryBean,MapperScannerConfigurer等)\",\"在SpringMvcConfig中扫描到的包为：@ComponentScan(\\\"com.itheima.controller\\\")\",\"在SpringConfig中扫描到的包为：@ComponentScan(\\\"com.itheima\\\")\",\"我们发现Spring会多把SpringMVC的controller类也扫描到，有如下解决方式：\",\"方式一:Spring加载的bean设定扫描范围为精准范围，例如service包、dao包等\",\"@Configuration @ComponentScan({\\\"com.itheima.service\\\",\\\"comitheima.dao\\\"}) public class SpringConfig { } \",\"方式二:Spring加载的bean设定扫描范围为com.itheima,排除掉controller包中的bean\",\"@Configuration @ComponentScan(value=\\\"com.itheima\\\", excludeFilters=@ComponentScan.Filter( type = FilterType.ANNOTATION, classes = Controller.class ) ) public class SpringConfig { } \",\"方式三:不区分Spring与SpringMVC的环境，加载到同一个环境中[了解即可]\",\"有了Spring的配置类，要想在tomcat服务器启动将其加载，我们需要修改ServletContainersInitConfig\",\"public class ServletContainersInitConfig extends AbstractDispatcherServletInitializer { protected WebApplicationContext createServletApplicationContext() { AnnotationConfigWebApplicationContext ctx = new AnnotationConfigWebApplicationContext(); ctx.register(SpringMvcConfig.class); return ctx; } protected String[] getServletMappings() { return new String[]{\\\"/\\\"}; } protected WebApplicationContext createRootApplicationContext() { AnnotationConfigWebApplicationContext ctx = new AnnotationConfigWebApplicationContext(); ctx.register(SpringConfig.class); return ctx; } } \",\"上面这个代码有更简单的方式替代：\",\"public class ServletContainersInitConfig extends AbstractAnnotationConfigDispatcherServletInitializer { protected Class<?>[] getRootConfigClasses() { return new Class[]{SpringConfig.class}; } protected Class<?>[] getServletConfigClasses() { return new Class[]{SpringMvcConfig.class}; } protected String[] getServletMappings() { return new String[]{\\\"/\\\"}; } } \"]},\"246\":{\"h\":\"请求与响应：\"},\"247\":{\"h\":\"设置请求映射路径\",\"t\":[\"对于Book模块的save,将其访问路径设置http://localhost/book/save\",\"对于User模块的save,将其访问路径设置http://localhost/user/save\",\"@Controller public class UserController { @RequestMapping(\\\"/user/save\\\") @ResponseBody public String save(){ System.out.println(\\\"user save ...\\\"); return \\\"{'module':'user save'}\\\"; } } @Controller public class BookController { @RequestMapping(\\\"/book/save\\\") @ResponseBody public String save(){ System.out.println(\\\"book save ...\\\"); return \\\"{'module':'book save'}\\\"; } } \",\"这样太麻烦了，可以简单一点：\",\"@Controller @RequestMapping(\\\"/user\\\") public class UserController { @RequestMapping(\\\"/save\\\") @ResponseBody public String save(){ System.out.println(\\\"user save ...\\\"); return \\\"{'module':'user save'}\\\"; } } @Controller @RequestMapping(\\\"/book\\\") public class BookController { @RequestMapping(\\\"/save\\\") @ResponseBody public String save(){ System.out.println(\\\"book save ...\\\"); return \\\"{'module':'book save'}\\\"; } } \"]},\"248\":{\"h\":\"请求参数\",\"t\":[\"GET/POST请求发送单个参数: http://localhost/commonParam?name=itcast\",\"@Controller public class UserController { @RequestMapping(\\\"/commonParam\\\") @ResponseBody public String commonParam(String name){ System.out.println(\\\"普通参数传递 name ==> \\\"+name); return \\\"{'module':'commonParam'}\\\"; } } \",\"GET请求发送多个请求参数：http://localhost/commonParam?name=itcast&age=15\",\"@Controller public class UserController { @RequestMapping(\\\"/commonParam\\\") @ResponseBody public String commonParam(String name,int age){ System.out.println(\\\"普通参数传递 name ==> \\\"+name); System.out.println(\\\"普通参数传递 age ==> \\\"+age); return \\\"{'module':'commonParam'}\\\"; } } \",\"如果GET请求参数中有中文,乱码解决：Tomcat8.5以后的版本已经处理了中文乱码的问题\",\"<build> <plugins> <plugin> <groupId>org.apache.tomcat.maven</groupId> <artifactId>tomcat7-maven-plugin</artifactId> <version>2.1</version> <configuration> <port>80</port><!--tomcat端口号--> <path>/</path> <!--虚拟目录--> <uriEncoding>UTF-8</uriEncoding><!--访问路径编解码字符集--> </configuration> </plugin> </plugins> </build> \",\"如果POST请求出现中文乱码：需要配置过滤器：\",\"public class ServletContainersInitConfig extends AbstractAnnotationConfigDispatcherServletInitializer { protected Class<?>[] getRootConfigClasses() { return new Class[0]; } protected Class<?>[] getServletConfigClasses() { return new Class[]{SpringMvcConfig.class}; } protected String[] getServletMappings() { return new String[]{\\\"/\\\"}; } //乱码处理 @Override protected Filter[] getServletFilters() { CharacterEncodingFilter filter = new CharacterEncodingFilter(); filter.setEncoding(\\\"UTF-8\\\"); return new Filter[]{filter}; } } \"]},\"249\":{\"h\":\"五种类型参数传递\"},\"250\":{\"h\":\"普通参数\",\"t\":[\"url地址传参，地址参数名与形参变量名相同，定义形参即可接收参数。\",\"请求：http://localhost/commonParamDifferentName?name=张三&age=18\",\"后台：\",\"@RequestMapping(\\\"/commonParamDifferentName\\\") @ResponseBody public String commonParamDifferentName(String userName , int age){ System.out.println(\\\"普通参数传递 userName ==> \\\"+userName); System.out.println(\\\"普通参数传递 age ==> \\\"+age); return \\\"{'module':'common param different name'}\\\"; } \",\"此时的userName与前端不对应，需要使用@RequestParam注解\",\"@RequestMapping(\\\"/commonParamDifferentName\\\") @ResponseBody public String commonParamDifferentName(@RequestPaam(\\\"name\\\") String userName , int age){ System.out.println(\\\"普通参数传递 userName ==> \\\"+userName); System.out.println(\\\"普通参数传递 age ==> \\\"+age); return \\\"{'module':'common param different name'}\\\"; } \"]},\"251\":{\"h\":\"POJO参数\",\"t\":[\"User类\",\"public class User { private String name; private int age; } \",\"前端请求：\",\"后端：\",\"//POJO参数：请求参数与形参对象中的属性对应即可完成参数传递 @RequestMapping(\\\"/pojoParam\\\") @ResponseBody public String pojoParam(User user){ System.out.println(\\\"pojo参数传递 user ==> \\\"+user); return \\\"{'module':'pojo param'}\\\"; } \",\"请求参数key的名称要和POJO中属性的名称一致，否则无法封装。\"]},\"252\":{\"h\":\"嵌套POJO类型参数\",\"t\":[\"Adress类和User类\",\"public class Address { private String province; private String city; } public class User { private String name; private int age; private Address address; } \",\"前端请求：\",\"后端：\",\"//POJO参数：请求参数与形参对象中的属性对应即可完成参数传递 @RequestMapping(\\\"/pojoParam\\\") @ResponseBody public String pojoParam(User user){ System.out.println(\\\"pojo参数传递 user ==> \\\"+user); return \\\"{'module':'pojo param'}\\\"; } \"]},\"253\":{\"h\":\"数组类型参数\",\"t\":[\"前端：\",\"后端：\",\" //数组参数：同名请求参数可以直接映射到对应名称的形参数组对象中 @RequestMapping(\\\"/arrayParam\\\") @ResponseBody public String arrayParam(String[] likes){ System.out.println(\\\"数组参数传递 likes ==> \\\"+ Arrays.toString(likes)); return \\\"{'module':'array param'}\\\"; } \"]},\"254\":{\"h\":\"集合类型参数\",\"t\":[\"前端：\",\"后端：\",\"//集合参数：同名请求参数可以使用@RequestParam注解映射到对应名称的集合对象中作为数据 @RequestMapping(\\\"/listParam\\\") @ResponseBody public String listParam(List<String> likes){ System.out.println(\\\"集合参数传递 likes ==> \\\"+ likes); return \\\"{'module':'list param'}\\\"; } \",\"这样做会报错，因为SpringMVC会将List看做是POJO对象，但是List接口无法创建对象，可以使用@RequestParam注解\",\"//集合参数：同名请求参数可以使用@RequestParam注解映射到对应名称的集合对象中作为数据 @RequestMapping(\\\"/listParam\\\") @ResponseBody public String listParam(@RequestParam List<String> likes){ System.out.println(\\\"集合参数传递 likes ==> \\\"+ likes); return \\\"{'module':'list param'}\\\"; } \"]},\"255\":{\"h\":\"JSON格式数据传输\"},\"256\":{\"h\":\"JSON普通数组\",\"t\":[\"SpringMVC默认使用的是jackson来处理json的转换，所以需要在pom.xml添加jackson依赖\",\"<dependency> <groupId>com.fasterxml.jackson.core</groupId> <artifactId>jackson-databind</artifactId> <version>2.9.0</version> </dependency> \",\"开启SpringMVC注解支持\",\"@Configuration @ComponentScan(\\\"com.itheima.controller\\\") //开启json数据类型自动转换 @EnableWebMvc public class SpringMvcConfig { } \",\"参数前添加@RequestBody\",\"//使用@RequestBody注解将外部传递的json数组数据映射到形参的集合对象中作为数据 @RequestMapping(\\\"/listParamForJson\\\") @ResponseBody public String listParamForJson(@RequestBody List<String> likes){ System.out.println(\\\"list common(json)参数传递 list ==> \\\"+likes); return \\\"{'module':'list common for json param'}\\\"; } \"]},\"257\":{\"h\":\"JSON对象数据\",\"t\":[\"前端：\",\"后端：\",\"@RequestMapping(\\\"/pojoParamForJson\\\") @ResponseBody public String pojoParamForJson(@RequestBody User user){ System.out.println(\\\"pojo(json)参数传递 user ==> \\\"+user); return \\\"{'module':'pojo for json param'}\\\"; } \"]},\"258\":{\"h\":\"JSON对象数组\",\"t\":[\"前端：\",\"后端：\",\"@RequestMapping(\\\"/listPojoParamForJson\\\") @ResponseBody public String listPojoParamForJson(@RequestBody List<User> list){ System.out.println(\\\"list pojo(json)参数传递 list ==> \\\"+list); return \\\"{'module':'list pojo for json param'}\\\"; } \"]},\"259\":{\"h\":\"日期参数传递\",\"t\":[\"@RequestMapping(\\\"/dataParam\\\") @ResponseBody public String dataParam(Date date) System.out.println(\\\"参数传递 date ==> \\\"+date); return \\\"{'module':'data param'}\\\"; } \",\"默认这种格式可以：http://localhost/dataParam?date=2088/08/08\",\"其他格式：\",\"前端：http://localhost/dataParam?date=2088/08/08&date1=2088-08-08\",\"后端：\",\"@RequestMapping(\\\"/dataParam\\\") @ResponseBody public String dataParam(Date date,Date date1) System.out.println(\\\"参数传递 date ==> \\\"+date); return \\\"{'module':'data param'}\\\"; } \",\"此时会报错，需要进行日期格式的转换：\",\"@RequestMapping(\\\"/dataParam\\\") @ResponseBody public String dataParam(Date date, @DateTimeFormat(pattern=\\\"yyyy-MM-dd\\\") Date date1) System.out.println(\\\"参数传递 date ==> \\\"+date); System.out.println(\\\"参数传递 date1(yyyy-MM-dd) ==> \\\"+date1); return \\\"{'module':'data param'}\\\"; } \",\"携带时间的日期：\",\"前端：http://localhost/dataParam?date=2088/08/08&date1=2088-08-08&date2=2088/08/08 8:08:08\",\"后端：\",\"@RequestMapping(\\\"/dataParam\\\") @ResponseBody public String dataParam(Date date, @DateTimeFormat(pattern=\\\"yyyy-MM-dd\\\") Date date1, @DateTimeFormat(pattern=\\\"yyyy/MM/dd HH:mm:ss\\\") Date date2) System.out.println(\\\"参数传递 date ==> \\\"+date); System.out.println(\\\"参数传递 date1(yyyy-MM-dd) ==> \\\"+date1); System.out.println(\\\"参数传递 date2(yyyy/MM/dd HH:mm:ss) ==> \\\"+date2); return \\\"{'module':'data param'}\\\"; } \"]},\"260\":{\"h\":\"响应\"},\"261\":{\"h\":\"响应页面\",\"t\":[\"不加@ResponseBody，默认是返回jsp页面\",\"@Controller public class UserController { @RequestMapping(\\\"/toJumpPage\\\") //注意 //1.此处不能添加@ResponseBody,如果加了该注入，会直接将page.jsp当字符串返回前端 //2.方法需要返回String public String toJumpPage(){ System.out.println(\\\"跳转页面\\\"); return \\\"page.jsp\\\"; } } \",\"返回文本数据：\",\"@Controller public class UserController { @RequestMapping(\\\"/toText\\\") //注意此处该注解就不能省略，如果省略了,会把response text当前页面名称去查找，如果没有回报404错误 @ResponseBody public String toText(){ System.out.println(\\\"返回纯文本数据\\\"); return \\\"response text\\\"; } } \",\"响应JSON数据：\",\"@Controller public class UserController { @RequestMapping(\\\"/toJsonPOJO\\\") @ResponseBody public User toJsonPOJO(){ System.out.println(\\\"返回json对象数据\\\"); User user = new User(); user.setName(\\\"itcast\\\"); user.setAge(15); return user; } } \",\"需要依赖@ResponseBody注解和@EnableWebMvc注解\",\"响应POJO集合对象\",\"@Controller public class UserController { @RequestMapping(\\\"/toJsonList\\\") @ResponseBody public List<User> toJsonList(){ System.out.println(\\\"返回json集合数据\\\"); User user1 = new User(); user1.setName(\\\"传智播客\\\"); user1.setAge(15); User user2 = new User(); user2.setName(\\\"黑马程序员\\\"); user2.setAge(12); List<User> userList = new ArrayList<User>(); userList.add(user1); userList.add(user2); return userList; } } \",\"此处使用到了类型转换，内部还是通过Converter接口的实现类完成的,它还可以实现:\",\"对象转Json数据(POJO -> json)\",\"集合转Json数据(Collection -> json)\"]},\"262\":{\"h\":\"REST风格\",\"t\":[\"按照不同的请求方式代表不同的操作类型。\",\"发送GET请求是用来做查询\",\"发送POST请求是用来做新增\",\"发送PUT请求是用来做修改\",\"发送DELETE请求是用来做删除\",\"UserController\",\"@Controller public class UserController { @RequestMapping(\\\"/save\\\") @ResponseBody public String save(@RequestBody User user) { System.out.println(\\\"user save...\\\"+user); return \\\"{'module':'user save'}\\\"; } @RequestMapping(\\\"/delete\\\") @ResponseBody public String delete(Integer id) { System.out.println(\\\"user delete...\\\" + id); return \\\"{'module':'user delete'}\\\"; } @RequestMapping(\\\"/update\\\") @ResponseBody public String update(@RequestBody User user) { System.out.println(\\\"user update...\\\" + user); return \\\"{'module':'user update'}\\\"; } @RequestMapping(\\\"/getById\\\") @ResponseBody public String getById(Integer id) { System.out.println(\\\"user getById...\\\" + id); return \\\"{'module':'user getById'}\\\"; } @RequestMapping(\\\"/findAll\\\") @ResponseBody public String getAll() { System.out.println(\\\"user getAll...\\\"); return \\\"{'module':'user getAll'}\\\"; } } \",\"将上面代码更换RESTful风格如下：\",\"新增：请求路径更改为/users,请求方式为POST\",\" //设置当前请求方法为POST，表示REST风格中的添加操作 @RequestMapping(value = \\\"/users\\\",method = RequestMethod.POST) @ResponseBody public String save() { System.out.println(\\\"user save...\\\"); return \\\"{'module':'user save'}\\\"; } \",\"删除：这里在删除时需要携带路径参数，例如http://localhost/users/1\",\"修改@RequestMapping的value属性，将其中修改为/users/{id}，目的是和路径匹配\",\"在方法的形参前添加@PathVariable注解\",\"@Controller public class UserController { //设置当前请求方法为DELETE，表示REST风格中的删除操作 @RequestMapping(value = \\\"/users/{id}\\\",method = RequestMethod.DELETE) @ResponseBody public String delete(@PathVariable Integer id) { System.out.println(\\\"user delete...\\\" + id); return \\\"{'module':'user delete'}\\\"; } } \",\"多个参数：例如：http://localhost/users/1/tom\",\"@Controller public class UserController { //设置当前请求方法为DELETE，表示REST风格中的删除操作 @RequestMapping(value = \\\"/users/{id}/{name}\\\",method = RequestMethod.DELETE) @ResponseBody public String delete(@PathVariable Integer id,@PathVariable String name) { System.out.println(\\\"user delete...\\\" + id+\\\",\\\"+name); return \\\"{'module':'user delete'}\\\"; } } \",\"还可以更简单,如下进行增删改查操作：\",\"@RestController //@Controller + ReponseBody @RequestMapping(\\\"/books\\\") public class BookController { @PostMapping public String save(@RequestBody Book book){ System.out.println(\\\"book save...\\\" + book); return \\\"{'module':'book save'}\\\"; } @DeleteMapping(\\\"/{id}\\\") public String delete(@PathVariable Integer id){ System.out.println(\\\"book delete...\\\" + id); return \\\"{'module':'book delete'}\\\"; } @PutMapping public String update(@RequestBody Book book){ System.out.println(\\\"book update...\\\" + book); return \\\"{'module':'book update'}\\\"; } @GetMapping(\\\"/{id}\\\") public String getById(@PathVariable Integer id){ System.out.println(\\\"book getById...\\\" + id); return \\\"{'module':'book getById'}\\\"; } @GetMapping public String getAll(){ System.out.println(\\\"book getAll...\\\"); return \\\"{'module':'book getAll'}\\\"; } } \"]},\"263\":{\"h\":\"SpringMVC放行静态资源：\",\"t\":[\"@Configuration public class SpringMvcSupport extends WebMvcConfigurationSupport { //设置静态资源访问过滤，当前类需要设置为配置类，并被扫描加载 @Override protected void addResourceHandlers(ResourceHandlerRegistry registry) { //当访问/pages/????时候，从/pages目录下查找内容 registry.addResourceHandler(\\\"/pages/**\\\").addResourceLocations(\\\"/pages/\\\"); registry.addResourceHandler(\\\"/js/**\\\").addResourceLocations(\\\"/js/\\\"); registry.addResourceHandler(\\\"/css/**\\\").addResourceLocations(\\\"/css/\\\"); registry.addResourceHandler(\\\"/plugins/**\\\").addResourceLocations(\\\"/plugins/\\\"); } } \",\"然后进行扫描到这个类：\",\"@Configuration @ComponentScan({\\\"com.itheima.controller\\\",\\\"com.itheima.config\\\"}) @EnableWebMvc public class SpringMvcConfig { } 或者 @Configuration @ComponentScan(\\\"com.itheima\\\") @EnableWebMvc public class SpringMvcConfig { } \"]},\"264\":{\"c\":[\"Java\",\"Spring\"]},\"265\":{\"c\":[\"Java\",\"Spring\"]},\"266\":{\"h\":\"Spring笔记\",\"t\":[\"Spring官网https://spring.io\",\"框架图：\"]},\"267\":{\"h\":\"为什么要使用Spring\",\"t\":[\"原先代码中存在的问题如下：\",\"业务层：\",\"public class BookServiceImpl implements BookService { //业务层中使用new的方式创建的dao对象 private BookDao bookDao = new BookDaoImpl(); public void save() { System.out.println(\\\"book service save ...\\\"); bookDao.save(); } } \",\"数据层：\",\"public class BookDaoImpl implements BookDao { public void save() { System.out.println(\\\"book dao save ...\\\"); } } public class BookDaoImpl2 implements BookDao { public void save() { System.out.println(\\\"book dao save ...\\\"); } } \",\"业务层需要调用数据层的方法，就需要在业务层new数据层的对象，\",\"如果数据层的实现类发生变化，那么业务层的代码也需要跟着改变，发生变更后，都需要进行编译打包和重部署。\",\"如何解决？将业务层代码的new去掉，即\",\"public class BookServiceImpl implements BookService { //业务层中使用new的方式创建的dao对象 private BookDao bookDao;//这里去掉了new public void save() { System.out.println(\\\"book service save ...\\\"); bookDao.save(); } } \",\"但是如果不创建对象，就会出现空指针异常，怎么办呢？这时候就需要交给Spring来做了，让Spring来创建对象。\"]},\"268\":{\"h\":\"IOC控制反转\",\"t\":[\"一些概念：\",\"IOC（Inversion of Control）控制反转：自己不再使用new来创建对象，而是交给IOC容器来创建对象，这样就反转了控制数据层对象的创建权，所以叫控制反转。\",\"IOC容器：负责对象的创建、初始化等一系列工作，其中包含了数据层和业务层的类对象\",\"Bean：被创建或被管理的对象在IOC容器中统称为Bean\",\"DIDependency Injection 依赖注入：IOC容器中创建好service和dao对象后，程序不能正确执行，因为service运行需要依赖dao对象，但是service对象和dao对象没有任何关系，需要把dao对象交给service,也就是说要绑定service和dao对象之间的关系；这种在容器中建立bean与bean之间的依赖关系的整个过程，称为依赖注入。\"]},\"269\":{\"h\":\"案例\",\"t\":[\"创建maven项目\",\"添加jar包\",\" <dependencies> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-context</artifactId> <version>5.2.10.RELEASE</version> </dependency> </dependencies> \",\"添加需要的类：\",\"public interface BookDao { public void save(); } public class BookDaoImpl implements BookDao { public void save() { System.out.println(\\\"book dao save ...\\\"); } } public interface BookService { public void save(); } public class BookServiceImpl implements BookService { private BookDao bookDao = new BookDaoImpl(); public void save() { System.out.println(\\\"book service save ...\\\"); bookDao.save(); } } \",\"添加Sprng配置文件applicationContext.xml,在resources下面\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\\\"> <!--bean标签标示配置bean id属性标示给bean起名字 class属性表示给bean定义类型 --> <bean id=\\\"bookDao\\\" class=\\\"com.itheima.dao.impl.BookDaoImpl\\\"/> <bean id=\\\"bookService\\\" class=\\\"com.itheima.service.impl.BookServiceImpl\\\"/> </beans> \",\"获取IOC容器,调用方法\",\"public class App { public static void main(String[] args) { //获取IOC容器 ApplicationContext ctx = new ClassPathXmlApplicationContext(\\\"applicationContext.xml\\\"); // BookDao bookDao = (BookDao) ctx.getBean(\\\"bookDao\\\"); // bookDao.save(); BookService bookService = (BookService) ctx.getBean(\\\"bookService\\\"); bookService.save(); } } \",\"此时就完成了bookDao这个bean的创建，但是在Service里面还需要依赖BookDao，里面还存在一个new操作，此时就需要DI依赖注入了。\"]},\"270\":{\"h\":\"DI依赖注入\",\"t\":[\"DI依赖注入就是在Service层里面注入一个bookDao对象，从而不用再去主动new 一个bookDao对象了。具体操作如下：\",\"删除new操作\",\"public class BookServiceImpl implements BookService { //删除业务层中使用new的方式创建的dao对象 private BookDao bookDao; public void save() { System.out.println(\\\"book service save ...\\\"); bookDao.save(); } } \",\"给属性提供setter方法\",\"public class BookServiceImpl implements BookService { //删除业务层中使用new的方式创建的dao对象 private BookDao bookDao; public void save() { System.out.println(\\\"book service save ...\\\"); bookDao.save(); } //提供对应的set方法 public void setBookDao(BookDao bookDao) { this.bookDao = bookDao; } } \",\"编辑配置文件完成注入\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\\\"> <!--bean标签标示配置bean id属性标示给bean起名字 class属性表示给bean定义类型 --> <bean id=\\\"bookDao\\\" class=\\\"com.itheima.dao.impl.BookDaoImpl\\\"/> <bean id=\\\"bookService\\\" class=\\\"com.itheima.service.impl.BookServiceImpl\\\"/> <bean id=\\\"bookService\\\" class=\\\"com.itheima.service.impl.BookServiceImpl\\\"> <!--配置server与dao的关系--> <!--property标签表示配置当前bean的属性 name属性表示配置哪一个具体的属性 ref属性表示参照哪一个bean--> <property name=\\\"bookDao\\\" ref=\\\"bookDao\\\"/> </bean> </beans> \",\"注意：\",\"name=\\\"bookDao\\\"中bookDao的作用是让Spring的IOC容器在获取到名称后，将首字母大写，前面加set找对应的setBookDao() 方法进行对象注入\",\"ref=\\\"bookDao\\\"中bookDao的作用是让Spring能在IOC容器中找到id为bookDao的Bean对象给bookService进行注入\"]},\"271\":{\"h\":\"IOC相关内容\"},\"272\":{\"h\":\"Bean注意事项\",\"t\":[\" <bean id=\\\"\\\" class=\\\"\\\" name=\\\"\\\" scope=\\\"\\\"/> \",\"class不可以写接口的类全名，因为接口无法创建对象\",\"id必须唯一，name可以多个\",\"scope：为bean设置作用范围，可选值为单例singloton，非单例prototype\"]},\"273\":{\"h\":\"Bean创建方式\"},\"274\":{\"h\":\"无参构造方法\",\"t\":[\"Spring底层使用的是类的无参构造方法。使用反射，默认就是这个无参构造\"]},\"275\":{\"h\":\"静态工厂实例化\",\"t\":[\"通过工厂创建对象如下：\",\"public interface OrderDao { public void save(); } public class OrderDaoImpl implements OrderDao { public void save() { System.out.println(\\\"order dao save ...\\\"); } } //静态工厂创建对象 public class OrderDaoFactory { public static OrderDao getOrderDao() { return new OrderDaoImpl(); } } public class AppForInstanceOrder { public static void main(String[] args) { //通过静态工厂创建对象 OrderDao orderDao = OrderDaoFactory.getOrderDao(); orderDao.save(); } } \",\"使用Spring中的静态工厂：\",\" <bean id=\\\"orderDao\\\" class=\\\"com.itheima.factory.OrderDaoFactory\\\" factory-method=\\\"getOrderDao\\\"/> \"]},\"276\":{\"h\":\"实例工厂实例化\",\"t\":[\"通过实例工厂创建对象如下：\",\"public interface UserDao { public void save(); } public class UserDaoImpl implements UserDao { public void save() { System.out.println(\\\"user dao save ...\\\"); } } public class UserDaoFactory { public UserDao getUserDao() { return new UserDaoImpl(); } } public class AppForInstanceUser { public static void main(String[] args) { //创建实例工厂对象 UserDaoFactory userDaoFactory = new UserDaoFactory(); //通过实例工厂对象创建对象 UserDao userDao = userDaoFactory.getUserDao(); userDao.save(); } \",\"使用Spring：\",\" <bean id=\\\"userFactory\\\" class=\\\"com.itheima.factory.UserDaoFactory\\\"/> <bean id=\\\"userDao\\\" factory-method=\\\"getUserDao\\\" factory-bean=\\\"userFactory\\\"/> \"]},\"277\":{\"h\":\"使用FactoryBean创建\",\"t\":[\"public class UserDaoFactoryBean implements FactoryBean<UserDao> { //代替原始实例工厂中创建对象的方法 public UserDao getObject() throws Exception { return new UserDaoImpl(); } //返回所创建类的Class对象 public Class<?> getObjectType() { return UserDao.class; } } \",\"配置文件：\",\" <bean id=\\\"userDao\\\" class=\\\"com.itheima.factory.UserDaoFactoryBean\\\"/> \"]},\"278\":{\"h\":\"Bean生命周期\",\"t\":[\"代码如下：\",\"public interface BookDao { public void save(); } public class BookDaoImpl implements BookDao { public void save() { System.out.println(\\\"book dao save ...\\\"); } //表示bean初始化对应的操作 public void init() { System.out.println(\\\"init...\\\"); } //表示bean销毁前对应的操作 public void destory() { System.out.println(\\\"destory...\\\"); } } public interface BookService { public void save(); } public class BookServiceImpl implements BookService { private BookDao bookDao; public void setBookDao(BookDao bookDao) { this.bookDao = bookDao; } public void save() { System.out.println(\\\"book service save ...\\\"); bookDao.save(); } } \",\"Spring配置文件：\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\\\"> <bean id=\\\"bookDao\\\" class=\\\"com.itheima.dao.impl.BookDaoImpl\\\" init-method=\\\"init\\\" destroy-method=\\\"destory\\\"/> </beans> \",\"此时就可以执行到init方法，但是destroy方法没有执行，具体可以将ApplicationContext更换成ClassPathXmlApplicationContext\",\"ClassPathXmlApplicationContext ctx=new ClassPathXmlApplicationContext(\\\"applicationContext.xml\\\"); ctx.close(); //ctx.registerShutdownHook();//也可以用这个 \"]},\"279\":{\"h\":\"实现接口完成生命周期\",\"t\":[\"public class BookServiceImpl implements BookService, InitializingBean, DisposableBean { private BookDao bookDao; public void setBookDao(BookDao bookDao) { this.bookDao = bookDao; } public void save() { System.out.println(\\\"book service save ...\\\"); bookDao.save(); } public void destroy() throws Exception { System.out.println(\\\"service destroy\\\"); } public void afterPropertiesSet() throws Exception { System.out.println(\\\"service init\\\"); } } \"]},\"280\":{\"h\":\"DI依赖注入\"},\"281\":{\"h\":\"setter注入\"},\"282\":{\"h\":\"引用类型\",\"t\":[\"使用的是<property name=\\\"\\\" ref=\\\"\\\"/>\",\"提供setter方法：\",\"public class BookServiceImpl implements BookService { private BookDao bookDao; private UserDao userDao; public void setUserDao(UserDao userDao) { this.userDao = userDao; } public void setBookDao(BookDao bookDao) { this.bookDao = bookDao; } public void save() { System.out.println(\\\"book service save ...\\\"); bookDao.save(); userDao.save(); } } \",\"spring配置\",\" <bean id=\\\"bookDao\\\" class=\\\"com.itheima.dao.impl.BookDaoImpl\\\"/> <bean id=\\\"userDao\\\" class=\\\"com.itheima.dao.impl.UserDaoImpl\\\"/> <bean id=\\\"bookService\\\" class=\\\"com.itheima.service.impl.BookServiceImpl\\\"> <property name=\\\"bookDao\\\" ref=\\\"bookDao\\\"/> <property name=\\\"userDao\\\" ref=\\\"userDao\\\"/> </bean> \"]},\"283\":{\"h\":\"简单数据类型\",\"t\":[\"ref是指向Spring的IOC容器中的另一个bean对象的，对于简单数据类型，没有对应的bean对象，使用property标签注入\",\"public class BookDaoImpl implements BookDao { private String databaseName; private int connectionNum; public void setConnectionNum(int connectionNum) { this.connectionNum = connectionNum; } public void setDatabaseName(String databaseName) { this.databaseName = databaseName; } public void save() { System.out.println(\\\"book dao save ...\\\" + databaseName + \\\",\\\" + connectionNum); } } \",\"配置文件\",\" <bean id=\\\"bookDao\\\" class=\\\"com.itheima.dao.impl.BookDaoImpl\\\"> <property name=\\\"databaseName\\\" value=\\\"mysql\\\"/> <property name=\\\"connectionNum\\\" value=\\\"10\\\"/> </bean> \"]},\"284\":{\"h\":\"构造器注入\"},\"285\":{\"h\":\"引用类型\",\"t\":[\"提供构造方法：\",\"public class BookServiceImpl implements BookService { private BookDao bookDao; public BookServiceImpl(BookDao bookDao) { this.bookDao = bookDao; } public void save() { System.out.println(\\\"book service save ...\\\"); bookDao.save(); } } \",\"配置文件\",\" <bean id=\\\"bookService\\\" class=\\\"com.itheima.service.impl.BookServiceImpl\\\"> <constructor-arg name=\\\"bookDao\\\" ref=\\\"bookDao\\\"/> </bean> \",\"name属性对应的值为构造函数中方法形参的参数名，必须要保持一致。\"]},\"286\":{\"h\":\"简单数据类型\",\"t\":[\"public class BookDaoImpl implements BookDao { private String databaseName; private int connectionNum; public BookDaoImpl(String databaseName, int connectionNum) { this.databaseName = databaseName; this.connectionNum = connectionNum; } public void save() { System.out.println(\\\"book dao save ...\\\" + databaseName + \\\",\\\" + connectionNum); } } \",\"配置文件：\",\" <bean id=\\\"bookDao\\\" class=\\\"com.itheima.dao.impl.BookDaoImpl\\\"> <constructor-arg name=\\\"databaseName\\\" value=\\\"mysql\\\"/> <constructor-arg name=\\\"connectionNum\\\" value=\\\"666\\\"/> </bean> \",\"上面都是按name注入的，name名字必须一致，这样会导致耦合，一个名字改了，配置文件也要改。\",\"可以使用下面方式解耦合：\",\"按类型注入：\",\"<bean id=\\\"bookDao\\\" class=\\\"com.itheima.dao.impl.BookDaoImpl\\\"> <constructor-arg type=\\\"int\\\" value=\\\"10\\\"/> <constructor-arg type=\\\"java.lang.String\\\" value=\\\"mysql\\\"/> </bean> \",\"按索引注入\",\"<bean id=\\\"bookDao\\\" class=\\\"com.itheima.dao.impl.BookDaoImpl\\\"> <constructor-arg index=\\\"1\\\" value=\\\"100\\\"/> <constructor-arg index=\\\"0\\\" value=\\\"mysql\\\"/> </bean> \",\"实际推荐setter注入\"]},\"287\":{\"h\":\"自动装配\",\"t\":[\"原本在service注入dao\",\" <bean id=\\\"bookService\\\" class=\\\"com.itheima.service.impl.BookServiceImpl\\\"> <property name=\\\"bookDao\\\" ref=\\\"bookDao\\\"/> </bean> \",\"使用autowire\",\" <!--autowire属性：开启自动装配，通常使用按类型装配--> <bean id=\\\"bookService\\\" class=\\\"com.itheima.service.impl.BookServiceImpl\\\" autowire=\\\"byType\\\"/> \",\"需要注入属性的类中对应属性的setter方法不能省略\",\"被注入的对象必须要被Spring的IOC容器管理\",\"按类型不可以找到多个对象，如果有，需要按名称注入\",\"<!--autowire属性：开启自动装配，通常使用按类型装配--> <bean id=\\\"bookService\\\" class=\\\"com.itheima.service.impl.BookServiceImpl\\\" autowire=\\\"byName\\\"/> \",\"例如service里面要注入dao\",\"public void setBookDao(BookDao bookDao){} \",\"规则是去掉set，首字母小写，即变成 bookDao\"]},\"288\":{\"h\":\"集合注入\",\"t\":[\"public class BookDaoImpl implements BookDao { private int[] array; private List<String> list; private Set<String> set; private Map<String, String> map; private Properties properties; public void save() { System.out.println(\\\"book dao save ...\\\"); System.out.println(\\\"遍历数组:\\\" + Arrays.toString(array)); System.out.println(\\\"遍历List\\\" + list); System.out.println(\\\"遍历Set\\\" + set); System.out.println(\\\"遍历Map\\\" + map); System.out.println(\\\"遍历Properties\\\" + properties); } } \",\"在bookDao的bean标签中使用<property>进行注入\"]},\"289\":{\"h\":\"注入数组类型数据\",\"t\":[\" <property name=\\\"array\\\"> <array> <value>100</value> <value>200</value> <value>300</value> </array> </property> \"]},\"290\":{\"h\":\"注入List类型数据\",\"t\":[\" <property name=\\\"list\\\"> <list> <value>itcast</value> <value>itheima</value> <value>boxuegu</value> <value>chuanzhihui</value> </list> </property> \"]},\"291\":{\"h\":\"注入Set类型数据\",\"t\":[\" <property name=\\\"set\\\"> <set> <value>itcast</value> <value>itheima</value> <value>boxuegu</value> <value>boxuegu</value> </set> </property> \"]},\"292\":{\"h\":\"注入Map类型数据\",\"t\":[\" <property name=\\\"map\\\"> <map> <entry key=\\\"country\\\" value=\\\"china\\\"/> <entry key=\\\"province\\\" value=\\\"henan\\\"/> <entry key=\\\"city\\\" value=\\\"kaifeng\\\"/> </map> </property> \"]},\"293\":{\"h\":\"注入Properties类型数据\",\"t\":[\" <property name=\\\"properties\\\"> <props> <prop key=\\\"country\\\">china</prop> <prop key=\\\"province\\\">henan</prop> <prop key=\\\"city\\\">kaifeng</prop> </props> </property> \"]},\"294\":{\"h\":\"IOC/DI管理第三方Bean\",\"t\":[\"以管理druid为例\",\"导入依赖\",\" <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>5.1.47</version> </dependency> <dependency> <groupId>com.alibaba</groupId> <artifactId>druid</artifactId> <version>1.1.16</version> </dependency> \",\"spring配置\",\"<!--管理DruidDataSource对象--> <bean class=\\\"com.alibaba.druid.pool.DruidDataSource\\\"> <property name=\\\"driverClassName\\\" value=\\\"com.mysql.jdbc.Driver\\\"/> <property name=\\\"url\\\" value=\\\"jdbc:mysql://localhost:3306/spring_db\\\"/> <property name=\\\"username\\\" value=\\\"root\\\"/> <property name=\\\"password\\\" value=\\\"root\\\"/> </bean> \"]},\"295\":{\"h\":\"读取properties文件\",\"t\":[\"resources下创建一个jdbc.properties文件,并添加对应的属性键值对\",\"jdbc.driver=com.mysql.jdbc.Driver jdbc.url=jdbc:mysql://127.0.0.1:3306/spring_db jdbc.username=root jdbc.password=root \",\"开启context命名空间\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xsi:schemaLocation=\\\" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\\\"> </beans> \",\"加载properties文件\",\" <context:property-placeholder location=\\\"jdbc.properties\\\" system-properties-mode=\\\"NEVER\\\"/> \",\"注入属性：\",\" <bean id=\\\"dataSource\\\" class=\\\"com.alibaba.druid.pool.DruidDataSource\\\"> <property name=\\\"driverClassName\\\" value=\\\"${jdbc.driver}\\\"/> <property name=\\\"url\\\" value=\\\"${jdbc.url}\\\"/> <property name=\\\"username\\\" value=\\\"${jdbc.username}\\\"/> <property name=\\\"password\\\" value=\\\"${jdbc.password}\\\"/> </bean> \"]},\"296\":{\"h\":\"核心容器ApplicationContext\",\"t\":[\"容器创建：\",\"ApplicationContext ctx=new ClassPathXmlApplicationContext(\\\"applicationContext.xml\\\"); \"]},\"297\":{\"h\":\"获取Bean\",\"t\":[\"强制转换\",\"BookDao bookDao=(BookDao)ctx.getBean(\\\"bookDao\\\"); \",\"参数\",\"BookDao bookDao=ctx.getBean(\\\"bookDao\\\"，BookDao.class); \",\"按类型注入，必须要确保IOC容器中该类型对应的bean对象只能有一个。\",\"BookDao bookDao=ctx.getBean(BookDao.class); \"]},\"298\":{\"h\":\"使用BeanFactory\",\"t\":[\"public class AppForBeanFactory { public static void main(String[] args) { Resource resources = new ClassPathResource(\\\"applicationContext.xml\\\"); BeanFactory bf = new XmlBeanFactory(resources); BookDao bookDao = bf.getBean(BookDao.class); bookDao.save(); } } \"]},\"299\":{\"h\":\"注解开发\",\"t\":[\"删掉<bean>标签\",\" <bean id=\\\"bookDao\\\" class=\\\"com.itheima.dao.impl.BookDaoImpl\\\"/> \",\"在BookDaoImpl类上添加@Component注解\",\" @Component(\\\"bookDao\\\") public class BookDaoImpl implements BookDao { public void save() { System.out.println(\\\"book dao save ...\\\"); } } \",\"@Component注解不可以添加在接口上，因为接口是无法创建对象的\",\"@Component注解如果不起名称，会有一个默认值就是当前类名首字母小写\",\"@Controller/@Service/@Repository 分别用于表现层，业务层，数据层\",\"配置spring注解扫描：\",\" <context:component-scan base-package=\\\"com.itheima\\\"/> \"]},\"300\":{\"h\":\"纯注解开发\"},\"301\":{\"h\":\"@Configuration与@ComponentScan\",\"t\":[\"删除掉applicationContext.xml，使用类来替换\",\" @Configuration//替换applicationContext.xml @ComponentScan(\\\"com.itheima\\\")//替换<context:component-scan base-package=\\\"\\\"/> public class SpringConfig { } \",\"更换加载容器\",\"//加载配置文件初始化容器 ApplicationContext ctx=new ClassPathXmlApplicationContext(\\\"applicationContext.xml\\\"); 更换为： //加载配置类初始化容器 ApplicationContext ctx=new AnnotationConfigApplicationContext(SpringConfig.class); \"]},\"302\":{\"h\":\"设置非单例@Scope\",\"t\":[\" @Repository //@Scope设置bean的作用范围 @Scope(\\\"prototype\\\") public class BookDaoImpl implements BookDao { public void save() { System.out.println(\\\"book dao save ...\\\"); } } \"]},\"303\":{\"h\":\"@PostConstruct和@PreDestroy\",\"t\":[\" @Repository public class BookDaoImpl implements BookDao { public void save() { System.out.println(\\\"book dao save ...\\\"); } @PostConstruct //在构造方法之后执行，替换 init-method public void init() { System.out.println(\\\"init ...\\\"); } @PreDestroy //在销毁方法之前执行,替换 destroy-method public void destroy() { System.out.println(\\\"destroy ...\\\"); } } \",\"如果找不到包：原因是，从JDK9以后jdk中的javax.annotation包被移除了，这两个注解刚好就在这个包中。\",\"<dependency> <groupId>javax.annotation</groupId> <artifactId>javax.annotation-api</artifactId> <version>1.3.2</version> </dependency> \"]},\"304\":{\"h\":\"@Autowired\",\"t\":[\" @Service public class BookServiceImpl implements BookService { @Autowired private BookDao bookDao; // public void setBookDao(BookDao bookDao) { // this.bookDao = bookDao; // } public void save() { System.out.println(\\\"book service save ...\\\"); bookDao.save(); } } \",\"@Autowired可以写在属性上，也可也写在setter方法上\",\"自动装配基于反射设计创建对象并通过暴力反射为私有属性进行设值,除了获取public修饰的内容还可以获取private修改的内容,所以此处无需提供setter方法\",\"@Autowired是按照类型注入，那么对应BookDao接口如果有多个实现类，就会报错，如何解决：使用按照名称注入\",\" @Repository(\\\"bookDao\\\") public class BookDaoImpl implements BookDao { public void save() { System.out.println(\\\"book dao save ...\\\"); } } @Repository(\\\"bookDao2\\\") public class BookDaoImpl2 implements BookDao { public void save() { System.out.println(\\\"book dao save ...2\\\"); } } \"]},\"305\":{\"h\":\"@Qualifier\",\"t\":[\"@Qualifier来指定注入哪个名称的bean对象。\",\" @Service public class BookServiceImpl implements BookService { @Autowired @Qualifier(\\\"bookDao1\\\") private BookDao bookDao; } \"]},\"306\":{\"h\":\"@PropertySource\",\"t\":[\"读取properties配置文件\",\" @Configuration @ComponentScan(\\\"com.itheima\\\") @PropertySource(\\\"jdbc.properties\\\") public class SpringConfig { } \"]},\"307\":{\"h\":\"@Value\",\"t\":[\"使用@Value进行简单类型注入\",\" @Repository(\\\"bookDao\\\") public class BookDaoImpl implements BookDao { @Value(\\\"itheima\\\") private String name; } \",\"使用@Value读取配置文件中的内容\",\"name=cxk \",\" @Repository(\\\"bookDao\\\") public class BookDaoImpl implements BookDao { @Value(\\\"${name}\\\") private String name; public void save() { System.out.println(\\\"book dao save ...\\\" + name); } } \"]},\"308\":{\"h\":\"注解管理第三方Bean\"},\"309\":{\"h\":\"@Bean\",\"t\":[\"在方法上面添加@Bean,将方法的返回值制作为Spring管理的一个bean对象\",\" @Configuration public class SpringConfig { @Bean public DataSource dataSource() { DruidDataSource ds = new DruidDataSource(); ds.setDriverClassName(\\\"com.mysql.jdbc.Driver\\\"); ds.setUrl(\\\"jdbc:mysql://localhost:3306/spring_db\\\"); ds.setUsername(\\\"root\\\"); ds.setPassword(\\\"root\\\"); return ds; } } \",\"JdbcConfig\",\"public class JdbcConfig { @Bean public DataSource dataSource() { DruidDataSource ds = new DruidDataSource(); ds.setDriverClassName(\\\"com.mysql.jdbc.Driver\\\"); ds.setUrl(\\\"jdbc:mysql://localhost:3306/spring_db\\\"); ds.setUsername(\\\"root\\\"); ds.setPassword(\\\"root\\\"); return ds; } } \",\"这个配置类如何能被Spring配置类加载到，并创建DataSource对象在IOC容器中?\",\"不推荐，不知道用到了哪些配置\",\"在Spring的配置类上添加包扫描 @Configuration @ComponentScan(\\\"com.itheima.config\\\") public class SpringConfig { } @Configuration public class JdbcConfig {} \",\"使用@Import引入 推荐\",\"@Configuration @Import({JdbcConfig.class}) public class SpringConfig { } \"]},\"310\":{\"h\":\"注入资源@Value\",\"t\":[\"使用@Value为第三方Bean注入资源\",\"public class JdbcConfig { @Value(\\\"com.mysql.jdbc.Driver\\\") private String driver; @Value(\\\"jdbc:mysql://localhost:3306/spring_db\\\") private String url; @Value(\\\"root\\\") private String userName; @Value(\\\"password\\\") private String password; @Bean public DataSource dataSource() { DruidDataSource ds = new DruidDataSource(); ds.setDriverClassName(driver); ds.setUrl(url); ds.setUsername(userName); ds.setPassword(password); return ds; } } \",\"也可以读取jdbc.properties进行注入\",\"注入引用类型数据，例如在构建DataSource对象的时候，需要用到BookDao对象\",\"public class JdbcConfig { @Bean public DataSource dataSource() { DruidDataSource ds = new DruidDataSource(); ds.setDriverClassName(\\\"com.mysql.jdbc.Driver\\\"); ds.setUrl(\\\"jdbc:mysql://localhost:3306/spring_db\\\"); ds.setUsername(\\\"root\\\"); ds.setPassword(\\\"root\\\"); return ds; } } \",\"步骤：\",\"在SpringConfig中扫描BookDao,也就是说要让IOC容器中有一个bookDao对象\",\" @Configuration @ComponentScan(\\\"com.itheima.dao\\\") @Import({JdbcConfig.class}) public class SpringConfig { } \",\"在JdbcConfig方法里面加参数,容器会按类型自动装配\",\"@Bean public DataSource dataSource(BookDao bookDao){ System.out.println(bookDao); DruidDataSource ds=new DruidDataSource(); ds.setDriverClassName(driver); ds.setUrl(url); ds.setUsername(userName); ds.setPassword(password); return ds; } \"]},\"311\":{\"h\":\"Spring整合\"},\"312\":{\"h\":\"Spring整合Mybatis\",\"t\":[\"导包\",\" <dependencies> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-context</artifactId> <version>5.2.10.RELEASE</version> </dependency> <dependency> <groupId>com.alibaba</groupId> <artifactId>druid</artifactId> <version>1.1.16</version> </dependency> <dependency> <groupId>org.mybatis</groupId> <artifactId>mybatis</artifactId> <version>3.5.6</version> </dependency> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>5.1.47</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-jdbc</artifactId> <version>5.2.10.RELEASE</version> </dependency> <dependency> <groupId>org.mybatis</groupId> <artifactId>mybatis-spring</artifactId> <version>1.3.0</version> </dependency> </dependencies> \",\"Spring配置类\",\"//配置类注解 @Configuration //包扫描，主要扫描的是项目中的AccountServiceImpl类 @ComponentScan(\\\"com.itheima\\\") public class SpringConfig { } \",\"创建数据源\",\"public class JdbcConfig { @Value(\\\"${jdbc.driver}\\\") private String driver; @Value(\\\"${jdbc.url}\\\") private String url; @Value(\\\"${jdbc.username}\\\") private String userName; @Value(\\\"${jdbc.password}\\\") private String password; @Bean public DataSource dataSource() { DruidDataSource ds = new DruidDataSource(); ds.setDriverClassName(driver); ds.setUrl(url); ds.setUsername(userName); ds.setPassword(password); return ds; } } \",\"读取properties配置\",\" @Configuration @ComponentScan(\\\"com.itheima\\\") @PropertySource(\\\"classpath:jdbc.properties\\\") @Import(JdbcConfig.class) public class SpringConfig { } \",\"创建Mybatis配置类并配置SqlSessionFactory\",\"public class MybatisConfig { //定义bean，SqlSessionFactoryBean，用于产生SqlSessionFactory对象 @Bean public SqlSessionFactoryBean sqlSessionFactory(DataSource dataSource) { SqlSessionFactoryBean ssfb = new SqlSessionFactoryBean(); //设置模型类的别名扫描 ssfb.setTypeAliasesPackage(\\\"com.itheima.domain\\\"); //设置数据源 ssfb.setDataSource(dataSource); return ssfb; } //定义bean，返回MapperScannerConfigurer对象 @Bean public MapperScannerConfigurer mapperScannerConfigurer() { MapperScannerConfigurer msc = new MapperScannerConfigurer(); msc.setBasePackage(\\\"com.itheima.dao\\\"); return msc; } } \",\"导入Mybatis配置\",\" @Configuration @ComponentScan(\\\"com.itheima\\\") @PropertySource(\\\"classpath:jdbc.properties\\\") @Import({JdbcConfig.class, MybatisConfig.class}) public class SpringConfig { } \",\"测试\",\"public class App2 { public static void main(String[] args) { ApplicationContext ctx = new AnnotationConfigApplicationContext(SpringConfig.class); AccountService accountService = ctx.getBean(AccountService.class); Account ac = accountService.findById(1); System.out.println(ac); } } \"]},\"313\":{\"h\":\"Spring整合Junit\",\"t\":[\"依赖\",\" <dependency> <groupId>junit</groupId> <artifactId>junit</artifactId> <version>4.12</version> <scope>test</scope> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-test</artifactId> <version>5.2.10.RELEASE</version> </dependency> \",\"测试\",\"//设置类运行器 @RunWith(SpringJUnit4ClassRunner.class) //设置Spring环境对应的配置类 @ContextConfiguration(classes = {SpringConfiguration.class}) //加载配置类 //@ContextConfiguration(locations={\\\"classpath:applicationContext.xml\\\"})//加载配置文件 public class AccountServiceTest { //支持自动装配注入bean @Autowired private AccountService accountService; @Test public void testFindById() { System.out.println(accountService.findById(1)); } @Test public void testFindAll() { System.out.println(accountService.findAll()); } } \"]},\"314\":{\"c\":[\"Java\",\"Spring\"]},\"315\":{\"c\":[\"Java\",\"Spring\"]},\"316\":{\"h\":\"MinIO对象存储服务\",\"t\":[\"MinIO基于Apache License v2.0开源协议的对象存储服务，可以做为云存储的解决方案用来保存海量的图片，视频，文档。\",\"官网网站：官网文档：http://docs.minio.org.cn/docs/\"]},\"317\":{\"h\":\"快速入门\",\"t\":[\"使用docker 安装：\",\"搜索镜像：https://hub.docker.com/r/minio/minio\",\"docker search minio \",\"拉取镜像：\",\"docker pull minio/minio \",\"运行(无法访问)：\",\"docker run -p 9000:9000 --name minio -d --restart=always \\\\ -e \\\"MINIO_ACCESS_KEY=minio\\\" \\\\ -e \\\"MINIO_SECRET_KEY=minio123\\\" \\\\ -v ~/tools/docker-volumes/minio:/data \\\\ -v ~/tools/docker-volumes/minio-config:/root/.minio \\\\ minio/minio server /data \",\"参数解释：\",\"-v ~/tools/docker-volumes/minio:/data 表示将本地系统中的 ~/tools/docker-volumes/minio 目录挂载到 MinIO 容器中的 /data 目录。\",\"-v ~/tools/docker-volumes/minio-config:/root/.minio 表示将本地系统中的 ~/tools/docker-volumes/minio-config 目录挂载到 MinIO 容器中的 /root/.minio 目录。\",\"9000:9000 是将本地系统的9000端口映射到MinIO容器的9000端口，以便通过该端口访问MinIO服务。\",\"server /data 部分表示在MinIO容器内运行MinIO服务器，并将数据存储在容器内的 /data 目录。\",\"此时如果启动会发现访问本地的localhost:9000会自动跳转到其他静态端口，例如我的是：33625\",\"在 官网 ：https://www.minio.org.cn/docs/cn/minio/container/operations/install-deploy-manage/deploy-minio-single-node-single-drive.html\",\"找到，发现需要 设置两个端口，\",\"成功运行的命令如下：\",\"docker run -p 9000:9000 -p 9090:9090 \\\\ --name minio -d --restart=always \\\\ -e \\\"MINIO_ACCESS_KEY=minio\\\" \\\\ -e \\\"MINIO_SECRET_KEY=minio123\\\" \\\\ -v ~/tools/docker-volumes/minio:/data \\\\ -v ~/tools/docker-volumes/minio-config:/root/.minio \\\\ minio/minio server /data --console-address \\\":9090\\\" \",\"此时发现端口对应 上了：\",\"可以 正常访问：\",\"基本概念说明：\",\"Bucket 类似于文件系统的目录\",\"Object类似于文件系统的文件\",\"keys类似于文件名\"]},\"318\":{\"h\":\"Springboot中使用\",\"t\":[\"依赖：\",\" <dependencies> <dependency> <groupId>io.minio</groupId> <artifactId>minio</artifactId> <version>7.1.0</version> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> </dependency> </dependencies> \",\"进行上传之前先设置一下权限：\",\"public class MinIOTest { public static final String MY_FILE = \\\"/tmp/list.html\\\"; public static final String ACCESS_KEY = \\\"minio\\\"; public static final String SECRET_KEY = \\\"minio123\\\"; public static void main(String[] args) { FileInputStream fileInputStream = null; try { fileInputStream = new FileInputStream(MY_FILE); //1.创建minio链接客户端 MinioClient minioClient = MinioClient.builder().credentials(ACCESS_KEY, SECRET_KEY) .endpoint(\\\"http://localhost:9000\\\").build(); //2.上传 PutObjectArgs putObjectArgs = PutObjectArgs.builder() .object(\\\"list.html\\\")//文件名 .contentType(\\\"text/html\\\")//文件类型 .bucket(\\\"leadnews\\\")//桶名词 与minio创建的名词一致 .stream(fileInputStream, fileInputStream.available(), -1) //文件流 .build(); minioClient.putObject(putObjectArgs); System.out.println(\\\"http://localhost:9000/leadnews/list.html\\\"); } catch (Exception ex) { ex.printStackTrace(); } } } \",\"运行代码，此时可以进行访问.http://localhost:9000/leadnews/list.html\"]},\"319\":{\"h\":\"封装为starter\",\"t\":[\"配置类：\",\"@Data @ConfigurationProperties(prefix = \\\"minio\\\") // 文件上传 配置前缀file.oss public class MinIOConfigProperties implements Serializable { private String accessKey; private String secretKey; private String bucket; private String endpoint; private String readPath; } \",\"@Data @Configuration @EnableConfigurationProperties({MinIOConfigProperties.class}) //当引入FileStorageService接口时 @ConditionalOnClass(FileStorageService.class) public class MinIOConfig { @Autowired private MinIOConfigProperties minIOConfigProperties; @Bean public MinioClient buildMinioClient() { return MinioClient .builder() .credentials(minIOConfigProperties.getAccessKey(), minIOConfigProperties.getSecretKey()) .endpoint(minIOConfigProperties.getEndpoint()) .build(); } } \",\"业务实现：\",\"public interface FileStorageService { /** * 上传图片文件 * @param prefix 文件前缀 * @param filename 文件名 * @param inputStream 文件流 * @return 文件全路径 */ public String uploadImgFile(String prefix, String filename,InputStream inputStream); /** * 上传html文件 * @param prefix 文件前缀 * @param filename 文件名 * @param inputStream 文件流 * @return 文件全路径 */ public String uploadHtmlFile(String prefix, String filename,InputStream inputStream); /** * 删除文件 * @param pathUrl 文件全路径 */ public void delete(String pathUrl); /** * 下载文件 * @param pathUrl 文件全路径 * @return * */ public byte[] downLoadFile(String pathUrl); } \",\"@Slf4j @EnableConfigurationProperties(MinIOConfigProperties.class) @Import(MinIOConfig.class) public class MinIOFileStorageService implements FileStorageService { @Autowired private MinioClient minioClient; @Autowired private MinIOConfigProperties minIOConfigProperties; private final static String separator = \\\"/\\\"; /** * @param dirPath * @param filename yyyy/mm/dd/file.jpg * @return */ public String builderFilePath(String dirPath,String filename) { StringBuilder stringBuilder = new StringBuilder(50); if(!StringUtils.isEmpty(dirPath)){ stringBuilder.append(dirPath).append(separator); } SimpleDateFormat sdf = new SimpleDateFormat(\\\"yyyy/MM/dd\\\"); String todayStr = sdf.format(new Date()); stringBuilder.append(todayStr).append(separator); stringBuilder.append(filename); return stringBuilder.toString(); } /** * 上传图片文件 * @param prefix 文件前缀 * @param filename 文件名 * @param inputStream 文件流 * @return 文件全路径 */ @Override public String uploadImgFile(String prefix, String filename,InputStream inputStream) { String filePath = builderFilePath(prefix, filename); try { PutObjectArgs putObjectArgs = PutObjectArgs.builder() .object(filePath) .contentType(\\\"image/jpg\\\") .bucket(minIOConfigProperties.getBucket()).stream(inputStream,inputStream.available(),-1) .build(); minioClient.putObject(putObjectArgs); StringBuilder urlPath = new StringBuilder(minIOConfigProperties.getReadPath()); urlPath.append(separator+minIOConfigProperties.getBucket()); urlPath.append(separator); urlPath.append(filePath); return urlPath.toString(); }catch (Exception ex){ log.error(\\\"minio put file error.\\\",ex); throw new RuntimeException(\\\"上传文件失败\\\"); } } /** * 上传html文件 * @param prefix 文件前缀 * @param filename 文件名 * @param inputStream 文件流 * @return 文件全路径 */ @Override public String uploadHtmlFile(String prefix, String filename,InputStream inputStream) { String filePath = builderFilePath(prefix, filename); try { PutObjectArgs putObjectArgs = PutObjectArgs.builder() .object(filePath) .contentType(\\\"text/html\\\") .bucket(minIOConfigProperties.getBucket()).stream(inputStream,inputStream.available(),-1) .build(); minioClient.putObject(putObjectArgs); StringBuilder urlPath = new StringBuilder(minIOConfigProperties.getReadPath()); urlPath.append(separator+minIOConfigProperties.getBucket()); urlPath.append(separator); urlPath.append(filePath); return urlPath.toString(); }catch (Exception ex){ log.error(\\\"minio put file error.\\\",ex); ex.printStackTrace(); throw new RuntimeException(\\\"上传文件失败\\\"); } } /** * 删除文件 * @param pathUrl 文件全路径 */ @Override public void delete(String pathUrl) { String key = pathUrl.replace(minIOConfigProperties.getEndpoint()+\\\"/\\\",\\\"\\\"); int index = key.indexOf(separator); String bucket = key.substring(0,index); String filePath = key.substring(index+1); // 删除Objects RemoveObjectArgs removeObjectArgs = RemoveObjectArgs.builder().bucket(bucket).object(filePath).build(); try { minioClient.removeObject(removeObjectArgs); } catch (Exception e) { log.error(\\\"minio remove file error. pathUrl:{}\\\",pathUrl); e.printStackTrace(); } } /** * 下载文件 * @param pathUrl 文件全路径 * @return 文件流 * */ @Override public byte[] downLoadFile(String pathUrl) { String key = pathUrl.replace(minIOConfigProperties.getEndpoint()+\\\"/\\\",\\\"\\\"); int index = key.indexOf(separator); String bucket = key.substring(0,index); String filePath = key.substring(index+1); InputStream inputStream = null; try { inputStream = minioClient.getObject(GetObjectArgs.builder().bucket(minIOConfigProperties.getBucket()).object(filePath).build()); } catch (Exception e) { log.error(\\\"minio down file error. pathUrl:{}\\\",pathUrl); e.printStackTrace(); } ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); byte[] buff = new byte[100]; int rc = 0; while (true) { try { if (!((rc = inputStream.read(buff, 0, 100)) > 0)) break; } catch (IOException e) { e.printStackTrace(); } byteArrayOutputStream.write(buff, 0, rc); } return byteArrayOutputStream.toByteArray(); } } \",\"在其他模块中使用：\",\"导入依赖：\",\" <dependency> <groupId>com.heima</groupId> <artifactId>heima-file-starter</artifactId> <version>1.0-SNAPSHOT</version> </dependency> \",\"创建配置文件\",\"minio: accessKey: minio secretKey: minio123 bucket: leadnews endpoint: http://localhost:9000 readPath: http://localhost:9000 \",\"使用：\",\"@SpringBootTest class MinIOApplicationTest { @Autowired private FileStorageService fileStorageService; @Test void test() throws Exception{ FileInputStream fs = null; fs = new FileInputStream(\\\"/tmp/list.html\\\"); String path = fileStorageService.uploadHtmlFile(\\\"\\\", \\\"list.html\\\", fs); System.out.println(path); } } \",\"得到结果，可以直接访问页面：http://localhost:9000/leadnews/2023/11/25/list.html\"]},\"320\":{\"c\":[\"中间件\",\"MinIO\"]},\"321\":{\"c\":[\"中间件\",\"MinIO\"]},\"322\":{\"h\":\"MongoDB\"},\"323\":{\"h\":\"快速入门\",\"t\":[\"mac使用docker安装：\",\"docker pull mongo \",\"在本地创建一个挂载目录，用于存放数据,我的在以下文件夹：\",\"~/tools/docker-volumes/mongodb/data \",\"运行容器：\",\"docker run -itd --name mongo \\\\ -v ~/tools/docker-volumes/mongodb/data:/data/db \\\\ -p 27017:27017 mongo --auth \",\"进入容器 ：\",\"docker exec -it mongo mongosh admin \",\"创建角色：\",\"db.createUser({ user:'root',pwd:'123456',roles:[ { role:'userAdminAnyDatabase', db: 'admin'},'readWriteAnyDatabase']}); \"]},\"324\":{\"c\":[\"中间件\",\"MongoDB\"]},\"325\":{\"c\":[\"中间件\",\"MongoDB\"]},\"326\":{\"h\":\"RabbitMQ消息队列笔记\",\"t\":[\"官网：https://www.rabbitmq.com/\"]},\"327\":{\"h\":\"RabbitMQ基础\",\"t\":[\"同步与异步对比：\",\"同步：两个人实时打电话，问题：拓展性差，性能下降，级联失败\",\"异步：微信聊天，交互不实时\",\"异步调用模型：\",\"常见的MQ消息队列对比：\",\"RabbitMQ\",\"ActiveMQ\",\"RocketMQ\",\"Kafka\",\"公司/社区\",\"Rabbit\",\"Apache\",\"阿里\",\"Apache\",\"开发语言\",\"Erlang\",\"Java\",\"Java\",\"Scala&Java\",\"协议支持\",\"AMQP，XMPP，SMTP，STOMP\",\"OpenWire,STOMP，REST,XMPP,AMQP\",\"自定义协议\",\"自定义协议\",\"可用性\",\"高\",\"一般\",\"高\",\"高\",\"单机吞吐量\",\"一般\",\"差\",\"高\",\"非常高\",\"消息延迟\",\"微秒级\",\"毫秒级\",\"毫秒级\",\"毫秒以内\",\"消息可靠性\",\"高\",\"一般\",\"高\",\"一般\"]},\"328\":{\"h\":\"docker安装\",\"t\":[\"拉取镜像\",\"docker pull rabbitmq:3.8-management \",\"运行：\",\"docker run \\\\ -e RABBITMQ_DEFAULT_USER=admin \\\\ -e RABBITMQ_DEFAULT_PASS=admin \\\\ --name mq \\\\ --hostname mq \\\\ -p 15672:15672 \\\\ -p 5672:5672 \\\\ -d \\\\ rabbitmq:3.8-management \",\"访问：http://localhost:15672/#/\"]},\"329\":{\"h\":\"收发消息\",\"t\":[\"创建消息队列：\",\"将交换机与消息队列绑定：\",\"发送消息：\",\"接收消息：\"]},\"330\":{\"h\":\"数据隔离\",\"t\":[\"添加一个用户：\",\"新加虚拟主机\",\"达到隔离效果：\"]},\"331\":{\"h\":\"AMQP\"},\"332\":{\"h\":\"快速入门\",\"t\":[\"AMQP的全称为：Advanced Message Queuing Protocol（高级消息队列协议）\",\"Spring-AMQP：https://spring.io/projects/spring-amqp\",\"Spring AMQP是一个基于AMQP协议的消息中间件框架，它提供了一个简单的API来发送和接收异步、可靠的消息。它是Spring框架的一部分，可以与Spring Boot和其他Spring项目一起使用。\",\"依赖：\",\" <!--AMQP依赖，包含RabbitMQ--> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-amqp</artifactId> </dependency> \",\"为了测试方便，我们也可以直接向队列发送消息，跳过交换机。\",\"配置：\",\"spring: rabbitmq: host: 192.168.150.101 # 你的虚拟机IP port: 5672 # 端口 virtual-host: /hmall # 虚拟主机 username: hmall # 用户名 password: 123 # 密码 \",\"发送消息：\",\"@SpringBootTest public class PublisherApplicationTest { @Autowired private RabbitTemplate rabbitTemplate; @Test public void test(){ String queueName = \\\"simple.queue\\\"; String message = \\\"hello springboot\\\"; rabbitTemplate.convertAndSend(queueName,message); } } \",\"接收消息：\",\"@Component public class SpringRabbitListener { @RabbitListener(queues = \\\"simple.queue\\\") public void listenSimpleQueueMessage(String msg) throws InterruptedException { System.out.println(\\\"spring 消费者接收到消息：【\\\" + msg + \\\"】\\\"); } } \"]},\"333\":{\"h\":\"WorkQueues模式\",\"t\":[\"多个消费者共同处理消息处理,\",\"发送消息：\",\"@Test public void testWorkQueue() throws InterruptedException { // 队列名称 String queueName = \\\"work.queue\\\"; // 消息 String message = \\\"hello, message_\\\"; for (int i = 0; i < 50; i++) { // 发送消息，每20毫秒发送一次，相当于每秒发送50条消息 rabbitTemplate.convertAndSend(queueName, message + i); Thread.sleep(20); } } \",\"接收消息：\",\"@RabbitListener(queues = \\\"work.queue\\\") public void listenWorkQueue1(String msg) throws InterruptedException { System.out.println(\\\"消费者1接收到消息：【\\\" + msg + \\\"】\\\" + LocalTime.now()); Thread.sleep(20); } @RabbitListener(queues = \\\"work.queue\\\") public void listenWorkQueue2(String msg) throws InterruptedException { System.err.println(\\\"消费者2........接收到消息：【\\\" + msg + \\\"】\\\" + LocalTime.now()); Thread.sleep(200); } \",\"这样两个消费者接收到的消息数量是相同的，时间却没有均匀分配，导致第一个消费者处理完了，空闲了很多时间，后面都是2在干活\",\"为了解决这个问题，使用能者多劳策略：\",\"spring: rabbitmq: listener: simple: prefetch: 1 # 每次只能获取一条消息，处理完成才能获取下一个消息 \",\"运行结果：\",\"可以发现，由于消费者1处理速度较快，所以处理了更多的消息；消费者2处理速度较慢，所以处理了较少的消息\"]},\"334\":{\"h\":\"交换机\",\"t\":[\"Exchange（交换机）只负责转发消息，不具备存储消息的能力，因此如果没有任何队列与Exchange绑定，或者没有符合路由规则的队列，那么消息会丢失！\",\"交换机的类型有四种：\",\"Fanout：广播，将消息交给所有绑定到交换机的队列。我们最早在控制台使用的正是Fanout交换机\",\"Direct：订阅，基于RoutingKey（路由key）发送给订阅了消息的队列\",\"Topic：通配符订阅，与Direct类似，只不过RoutingKey可以使用通配符\",\"Headers：头匹配，基于MQ的消息头匹配，用的较少。\"]},\"335\":{\"h\":\"Fanout交换机\",\"t\":[\"发布者发布消息：\",\"@Test public void testFanoutExchange() { // 交换机名称 String exchangeName = \\\"cxk.fanout\\\"; // 消息 String message = \\\"hello, everyone!\\\"; rabbitTemplate.convertAndSend(exchangeName, \\\"\\\", message); } \",\"消费者接收消息：\",\"@RabbitListener(queues = \\\"fanout.q1\\\") public void listenFanoutQueue1(String msg) { System.out.println(\\\"消费者1接收到Fanout消息：【\\\" + msg + \\\"】\\\"); } @RabbitListener(queues = \\\"fanout.q2\\\") public void listenFanoutQueue2(String msg) { System.out.println(\\\"消费者2接收到Fanout消息：【\\\" + msg + \\\"】\\\"); } \"]},\"336\":{\"h\":\"Direct交换机\",\"t\":[\"Fanout会被所有队列消费，direct需要指定key，根据消息的Routing Key进行判断，只有队列的Routingkey与消息的 Routing key完全一致，才会接收到消息\",\"创建交换机，和队列进行绑定，同时绑定key\",\"消费者接收代码：\",\"@RabbitListener(queues = \\\"direct.q1\\\") public void listenDirectQueue1(String msg) { System.out.println(\\\"消费者1接收到direct.queue1的消息：【\\\" + msg + \\\"】\\\"); } @RabbitListener(queues = \\\"direct.q2\\\") public void listenDirectQueue2(String msg) { System.out.println(\\\"消费者2接收到direct.queue2的消息：【\\\" + msg + \\\"】\\\"); } \",\"生产者：\",\"@Test public void testSendDirectExchange() { // 交换机名称 String exchangeName = \\\"cxk.direct\\\"; // 消息 String message = \\\"红色警报！日本乱排核废水，导致海洋生物变异，惊现哥斯拉！\\\"; // 发送消息 rabbitTemplate.convertAndSend(exchangeName, \\\"red\\\", message); } \",\"将red改为blue，只有1可以接受\"]},\"337\":{\"h\":\"Topic交换机\",\"t\":[\"Topic类型Exchange可以让队列在绑定BindingKey 的时候使用通配符，规则如下：\",\"创建交换机和队列绑定：\",\"接受者：\",\"@RabbitListener(queues = \\\"topic.q1\\\") public void listenTopicQueue1(String msg){ System.out.println(\\\"消费者1接收到topic.queue1的消息：【\\\" + msg + \\\"】\\\"); } @RabbitListener(queues = \\\"topic.q2\\\") public void listenTopicQueue2(String msg){ System.out.println(\\\"消费者2接收到topic.queue2的消息：【\\\" + msg + \\\"】\\\"); } \",\"发送者：\",\"@Test public void testSendTopicExchange() { // 交换机名称 String exchangeName = \\\"cxk.topic\\\"; // 消息 String message = \\\"喜报！孙悟空大战哥斯拉，胜!\\\"; // 发送消息 rabbitTemplate.convertAndSend(exchangeName, \\\"china.news\\\", message); } \"]},\"338\":{\"h\":\"声明队列和交换机\",\"t\":[\"SpringAMQP提供了一个Exchange接口，来表示所有不同类型的交换机：\",\"可以通过ExchangeBuilder来简化这个过程：\",\"在绑定队列和交换机时，则需要使用BindingBuilder来创建Binding对象\",\"Fanout交换机：\",\"@Configuration public class FanoutConfig { @Bean public FanoutExchange fanoutExchange(){ return new FanoutExchange(\\\"cxk.fanout\\\"); } @Bean public Queue fanoutQueue1(){ return new Queue(\\\"fanout.queue1\\\"); } /** * 绑定队列和交换机 */ @Bean public Binding bindingQueue1(Queue fanoutQueue1, FanoutExchange fanoutExchange){ return BindingBuilder.bind(fanoutQueue1).to(fanoutExchange); } @Bean public Queue fanoutQueue2(){ return new Queue(\\\"fanout.queue2\\\"); } @Bean public Binding bindingQueue2(Queue fanoutQueue2, FanoutExchange fanoutExchange){ return BindingBuilder.bind(fanoutQueue2).to(fanoutExchange); } } \",\"Direct交换机\",\"@Configuration public class DirectConfig { @Bean public DirectExchange directExchange() { return ExchangeBuilder.directExchange(\\\"cxk.direct\\\").build(); } @Bean public Queue directQueue1() { return new Queue(\\\"direct.queue1\\\"); } @Bean public Binding bindingQueue1WithRed(Queue directQueue1, DirectExchange directExchange) { return BindingBuilder.bind(directQueue1).to(directExchange).with(\\\"red\\\"); } @Bean public Binding bindingQueue1WithBlue(Queue directQueue1, DirectExchange directExchange) { return BindingBuilder.bind(directQueue1).to(directExchange).with(\\\"blue\\\"); } @Bean public Queue directQueue2() { return new Queue(\\\"direct.queue2\\\"); } @Bean public Binding bindingQueue2WithRed(Queue directQueue2, DirectExchange directExchange) { return BindingBuilder.bind(directQueue2).to(directExchange).with(\\\"red\\\"); } @Bean public Binding bindingQueue2WithYellow(Queue directQueue2, DirectExchange directExchange) { return BindingBuilder.bind(directQueue2).to(directExchange).with(\\\"yellow\\\"); } } \",\"显然这种方式比较麻烦，还可以使用注解方式来声明：\",\"Direct交换机\",\"@RabbitListener(bindings = @QueueBinding( value = @Queue(name = \\\"direct.queue1\\\"), exchange = @Exchange(name = \\\"cxk.direct\\\", type = ExchangeTypes.DIRECT), key = {\\\"red\\\", \\\"blue\\\"} )) public void listenDirectQueue3(String msg) { System.out.println(\\\"消费者1接收到direct.queue1的消息：【\\\" + msg + \\\"】\\\"); } @RabbitListener(bindings = @QueueBinding( value = @Queue(name = \\\"direct.queue2\\\"), exchange = @Exchange(name = \\\"cxk.direct\\\", type = ExchangeTypes.DIRECT), key = {\\\"red\\\", \\\"yellow\\\"} )) public void listenDirectQueue4(String msg) { System.out.println(\\\"消费者2接收到direct.queue2的消息：【\\\" + msg + \\\"】\\\"); } \",\"Topic交换机：\",\"@RabbitListener(bindings = @QueueBinding( value = @Queue(name = \\\"topic.queue1\\\"), exchange = @Exchange(name = \\\"cxk.topic\\\", type = ExchangeTypes.TOPIC), key = \\\"china.#\\\" )) public void listenTopicQueue3(String msg){ System.out.println(\\\"消费者1接收到topic.queue1的消息：【\\\" + msg + \\\"】\\\"); } @RabbitListener(bindings = @QueueBinding( value = @Queue(name = \\\"topic.queue2\\\"), exchange = @Exchange(name = \\\"cxk.topic\\\", type = ExchangeTypes.TOPIC), key = \\\"#.news\\\" )) public void listenTopicQueue4(String msg){ System.out.println(\\\"消费者2接收到topic.queue2的消息：【\\\" + msg + \\\"】\\\"); } \"]},\"339\":{\"h\":\"消息转换器\",\"t\":[\"默认的消息转换器是JDK序列化，问题如下：\",\"数据体积过大\",\"有安全漏洞\",\"可读性差\",\"测试发送\",\"@Test public void testSendMap() throws InterruptedException { Map<String,Object> msg = new HashMap<>(); msg.put(\\\"name\\\", \\\"蔡徐坤\\\"); msg.put(\\\"age\\\", 21); rabbitTemplate.convertAndSend(\\\"object.queue\\\", msg); } \",\"结果如下：\",\"使用jackson转换：\",\"<dependency> <groupId>com.fasterxml.jackson.dataformat</groupId> <artifactId>jackson-dataformat-xml</artifactId> <version>2.9.10</version> </dependency> \",\"配置消息转换器：\",\"@Bean public MessageConverter messageConverter(){ // 1.定义消息转换器 Jackson2JsonMessageConverter jackson2JsonMessageConverter = new Jackson2JsonMessageConverter(); // 2.配置自动创建消息id，用于识别不同消息，也可以在业务中基于ID判断是否是重复消息 jackson2JsonMessageConverter.setCreateMessageIds(true); return jackson2JsonMessageConverter; } \",\"接收：\",\"@RabbitListener(queues = \\\"object.queue\\\") public void listenSimpleQueueMessage(Map<String, Object> msg) throws InterruptedException { System.out.println(\\\"消费者接收到object.queue消息：【\\\" + msg + \\\"】\\\"); } \"]},\"340\":{\"h\":\"RabbitMQ高级\",\"t\":[\"导入依赖：\",\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-amqp</artifactId> </dependency> \",\"配置：\",\"spring: rabbitmq: host: localhost port: 5672 username: cxk password: cxk \",\"配置消息转换器：\",\"@Bean public MessageConverter jackson2JsonMessageConverter(){ return new Jackson2JsonMessageConverter(); } \",\"修改代码：\",\"@RabbitListener(bindings = @QueueBinding( value = @Queue(name = \\\"mark.order.pay.queue\\\", durable = \\\"true\\\"), exchange = @Exchange(name = \\\"pay.topic\\\", type = ExchangeTypes.TOPIC), key = \\\"pay.success\\\" )) public void listenOrderPay(Long orderId) { orderService.markOrderPaySuccess(orderId); } \",\"下单后修改状态，发送消息：\",\"try { rabbitTemplate.convertAndSend(\\\"pay.topic\\\", \\\"pay.success\\\", po.getBizOrderNo()); } catch (AmqpException e) { log.error(\\\"支付成功，但是通知交易服务失败\\\", e); } \",\"如果MQ通知失败，支付服务中支付流水显示支付成功，而交易服务中的订单状态却显示未支付，就会导致数据出现了不一致。\",\"问题：\",\"我们该如何确保MQ消息的可靠性？\",\"如果发送失败，有没有其它的兜底方案？\"]},\"341\":{\"h\":\"发送者可靠性\",\"t\":[\"消息队列的流程：\",\"消息从生产者到消费者的每一步都可能导致消息丢失：\",\"发送消息时丢失： \",\"生产者发送消息时连接MQ失败\",\"生产者发送消息到达MQ后未找到Exchange\",\"生产者发送消息到达MQ的Exchange后，未找到合适的Queue\",\"消息到达MQ后，处理消息的进程发生异常\",\"MQ导致消息丢失： \",\"消息到达MQ，保存到队列后，尚未消费就突然宕机\",\"消费者处理消息时： \",\"消息接收后尚未处理突然宕机\",\"消息接收后处理过程中抛出异常\",\"综上，我们要解决消息丢失问题，保证MQ的可靠性，就必须从3个方面入手：\",\"确保生产者一定把消息发送到MQ\",\"确保MQ不会将消息弄丢\",\"确保消费者一定要处理消息\"]},\"342\":{\"h\":\"生产者重试机制\",\"t\":[\"当RabbitTemplate与MQ连接超时后，多次重试。\",\"spring: rabbitmq: connection-timeout: 1s # 设置MQ的连接超时时间 template: retry: enabled: true # 开启超时重试机制 initial-interval: 1000ms # 失败后的初始等待时间 multiplier: 1 # 失败后下次的等待时长倍数，下次等待时长 = initial-interval * multiplier max-attempts: 3 # 最大重试次数 \",\"SpringAMQP提供的重试机制是阻塞式的重试，也就是说多次重试等待的过程中，当前线程是被阻塞的。\"]},\"343\":{\"h\":\"生产者确认机制\",\"t\":[\"RabbitMQ提供了生产者消息确认机制，包括Publisher Confirm和Publisher Return两种。在开启确认机制的情况下，当生产者发送消息给MQ后，MQ会根据消息处理的情况返回不同的回执。\",\"总结如下：\",\"当消息投递到MQ，但是路由失败时，通过Publisher Return返回异常信息，同时返回ack的确认信息，代表投递成功\",\"临时消息投递到了MQ，并且入队成功，返回ACK，告知投递成功\",\"持久消息投递到了MQ，并且入队完成持久化，返回ACK ，告知投递成功\",\"其它情况都会返回NACK，告知投递失败\",\"其中ack和nack属于Publisher Confirm机制，ack是投递成功；nack是投递失败。而return则属于Publisher Return机制。\",\"默认两种机制都是关闭状态，需要通过配置文件来开启。\"]},\"344\":{\"h\":\"实现生产者确认\",\"t\":[\"spring: rabbitmq: publisher-confirm-type: correlated # 开启publisher confirm机制，并设置confirm类型 publisher-returns: true # 开启publisher return机制 \",\"none：关闭confirm机制\",\"simple：同步阻塞等待MQ的回执\",\"correlated：MQ异步回调返回回执\",\"每个RabbitTemplate只能配置一个ReturnCallback，因此我们可以在配置类中统一设置\",\"@Slf4j @Configuration public class MqConfirmConfig implements ApplicationContextAware { @Override public void setApplicationContext(ApplicationContext applicationContext) throws BeansException { RabbitTemplate rabbitTemplate = applicationContext.getBean(RabbitTemplate.class); // 配置回调 rabbitTemplate.setReturnsCallback(new RabbitTemplate.ReturnsCallback() { @Override public void returnedMessage(ReturnedMessage returned) { log.debug(\\\"收到消息的return callback，exchange:{}, key:{}, msg:{}, code:{}, text:{}\\\", returned.getExchange(), returned.getRoutingKey(), returned.getMessage(), returned.getReplyCode(), returned.getReplyText()); } }); } } \",\"定义ConfirmCallback：\",\"测试\",\" @Test void testConfirmCallback() throws InterruptedException { // 1.创建cd CorrelationData cd = new CorrelationData(UUID.randomUUID().toString()); // 2.添加ConfirmCallback cd.getFuture().addCallback(new ListenableFutureCallback<CorrelationData.Confirm>() { @Override public void onFailure(Throwable ex) { log.error(\\\"消息回调失败\\\", ex); } @Override public void onSuccess(CorrelationData.Confirm result) { log.debug(\\\"收到confirm callback回执\\\"); if(result.isAck()){ // 消息发送成功 log.debug(\\\"消息发送成功，收到ack\\\"); }else{ // 消息发送失败 log.error(\\\"消息发送失败，收到nack， 原因：{}\\\", result.getReason()); } } }); rabbitTemplate.convertAndSend(\\\"cxk.direct\\\", \\\"red\\\", \\\"hello\\\", cd); Thread.sleep(2000); } \",\"开启生产者确认比较消耗MQ性能，一般不建议开启。\"]},\"345\":{\"h\":\"MQ可靠性\"},\"346\":{\"h\":\"数据持久化\",\"t\":[\"默认情况下MQ的数据都是在内存存储的临时数据，重启后就会消失。\",\"交换机持久化\",\"队列持久化\",\"消息持久化\",\"交换机：\",\"设置为Durable就是持久化模式，Transient就是临时模式。\"]},\"347\":{\"h\":\"LazyQueue持久化\",\"t\":[\"默认情况下，RabbitMQ会将接收到的信息保存在内存中以降低消息收发的延迟。但在某些特殊情况下，这会导致消息积压，比如：\",\"消费者宕机或出现网络故障\",\"消息发送量激增，超过了消费者处理速度\",\"消费者处理业务发生阻塞\",\"一旦出现消息堆积问题，RabbitMQ的内存占用就会越来越高，直到触发内存预警上限。此时RabbitMQ会将内存消息刷到磁盘上，这个行为成为PageOut. PageOut会耗费一段时间，并且会阻塞队列进程。因此在这个过程中RabbitMQ不会再处理新的消息，生产者的所有请求都会被阻塞。为了解决这个问题，从RabbitMQ的3.6.0版本开始，就增加了Lazy Queues的模式，也就是惰性队列。惰性队列的特征如下：\",\"接收到消息后直接存入磁盘而非内存\",\"消费者要消费消息时才会从磁盘中读取并加载到内存（也就是懒加载）\",\"支持数百万条的消息存储\",\"配置lazy模式\",\"代码配置\",\"@Bean public Queue lazyQueue(){ return QueueBuilder .durable(\\\"lazy.queue\\\") .lazy() // 开启Lazy模式 .build(); } \",\"或者：\",\"@RabbitListener(queuesToDeclare = @Queue( name = \\\"lazy.queue\\\", durable = \\\"true\\\", arguments = @Argument(name = \\\"x-queue-mode\\\", value = \\\"lazy\\\") )) public void listenLazyQueue(String msg){ log.info(\\\"接收到 lazy.queue的消息：{}\\\", msg); } \",\"测试代码：\",\"@Test void testPageOut() { Message message = MessageBuilder .withBody(\\\"hello\\\".getBytes(StandardCharsets.UTF_8)) .setDeliveryMode(MessageDeliveryMode.NON_PERSISTENT).build(); for (int i = 0; i < 1000000; i++) { rabbitTemplate.convertAndSend(\\\"lazy.queue\\\", message); } } \"]},\"348\":{\"h\":\"消费者可靠性\",\"t\":[\"RabbitMQ 消费者可靠性是指确保消费者能够成功消费消息，并且不会丢失或重复消费消息。\"]},\"349\":{\"h\":\"消费者确认机制\",\"t\":[\"消息确认机制是 RabbitMQ 确保消息可靠性的核心机制。它允许消费者在消费消息后向 RabbitMQ 发送确认消息，表示消息已成功消费。RabbitMQ 在收到确认消息后才会从队列中删除该消息。\",\"RabbitMQ提供了消费者确认机制（Consumer Acknowledgement）。即：当消费者处理消息结束后，应该向RabbitMQ发送一个回执，告知RabbitMQ自己消息处理状态。回执有三种可选值：\",\"ack：成功处理消息，RabbitMQ从队列中删除该消息\",\"nack：消息处理失败，RabbitMQ需要再次投递消息\",\"reject：消息处理失败并拒绝该消息，RabbitMQ从队列中删除该消息\",\"RabbitMQ 提供了三种消息确认模式：\",\"none：不处理。即消息投递给消费者后立刻ack，消息会立刻从MQ删除。非常不安全，不建议使用\",\"manual：手动模式。需要自己在业务代码中调用api，发送ack或reject，存在业务入侵，但更灵活\",\"auto：自动模式。SpringAMQP利用AOP对我们的消息处理逻辑做了环绕增强，当业务正常执行时则自动返回ack. 当业务出现异常时，根据异常判断返回不同结果： \",\"如果是业务异常，会自动返回nack；\",\"如果是消息处理或校验异常，自动返回reject;\",\"配置如下\",\"spring: rabbitmq: listener: simple: acknowledge-mode: none # 不做处理 \"]},\"350\":{\"h\":\"失败重试机制\",\"t\":[\"当消费者出现异常后，消息会不断requeue（重入队）到队列，再重新发送给消费者。如果消费者再次执行依然出错，消息会再次requeue到队列，再次投递，直到消息处理成功为止。\",\"极端情况就是消费者一直无法执行成功，那么消息requeue就会无限循环，导致mq的消息处理飙升，带来不必要的压力：\",\"配置文件\",\"spring: rabbitmq: listener: simple: retry: enabled: true # 开启消费者失败重试 initial-interval: 1000ms # 初识的失败等待时长为1秒 multiplier: 1 # 失败的等待时长倍数，下次等待时长 = multiplier * last-interval max-attempts: 3 # 最大重试次数 stateless: true # true无状态；false有状态。如果业务中包含事务，这里改为false \",\"测试发现，消费者在失败后消息没有重新回到MQ无限重新投递，而是在本地重试了3次,3次失败后消息被删除，reject\"]},\"351\":{\"h\":\"失败处理策略\",\"t\":[\"策略是由MessageRecovery接口来定义的，它有3个不同实现：\",\"RejectAndDontRequeueRecoverer：重试耗尽后，直接reject，丢弃消息。默认就是这种方式\",\"ImmediateRequeueMessageRecoverer：重试耗尽后，返回nack，消息重新入队\",\"RepublishMessageRecoverer：重试耗尽后，将失败消息投递到指定的交换机\",\"较好的处理方案是RepublishMessageRecoverer，失败后将消息投递到一个指定的，专门存放异常消息的队列，后续由人工集中处理。\",\"consumer中定义失败交换机和队列：\",\"@Bean public DirectExchange errorMessageExchange(){ return new DirectExchange(\\\"error.direct\\\"); } @Bean public Queue errorQueue(){ return new Queue(\\\"error.queue\\\", true); } @Bean public Binding errorBinding(Queue errorQueue, DirectExchange errorMessageExchange){ return BindingBuilder.bind(errorQueue).to(errorMessageExchange).with(\\\"error\\\"); } \",\"定义一个RepublishMessageRecoverer，关联队列和交换机\",\"@Bean public MessageRecoverer republishMessageRecoverer(RabbitTemplate rabbitTemplate){ return new RepublishMessageRecoverer(rabbitTemplate, \\\"error.direct\\\", \\\"error\\\"); } \",\"完整代码：\",\"@Configuration @ConditionalOnProperty(name = \\\"spring.rabbitmq.listener.simple.retry.enabled\\\", havingValue = \\\"true\\\") public class ErrorMessageConfig { @Bean public DirectExchange errorMessageExchange(){ return new DirectExchange(\\\"error.direct\\\"); } @Bean public Queue errorQueue(){ return new Queue(\\\"error.queue\\\", true); } @Bean public Binding errorBinding(Queue errorQueue, DirectExchange errorMessageExchange){ return BindingBuilder.bind(errorQueue).to(errorMessageExchange).with(\\\"error\\\"); } @Bean public MessageRecoverer republishMessageRecoverer(RabbitTemplate rabbitTemplate){ return new RepublishMessageRecoverer(rabbitTemplate, \\\"error.direct\\\", \\\"error\\\"); } } \"]},\"352\":{\"h\":\"业务幂等性\",\"t\":[\"业务幂等性是指无论对一个操作执行多少次，其结果应该与执行一次的结果相同。在分布式系统和消息队列中，确保业务操作的幂等性是非常重要的，因为可能会出现重试、消息重复传递或者其他原因导致同一个操作被执行多次。\",\"不幂等场景：\",\"取消订单，恢复库存，多次恢复会出现库存增加现象\",\"退款，多次退款堆商家有损失\",\"实际业务场景中，经常会出现业务被重复执行的情况，例如：\",\"页面卡顿时频繁刷新导致表单重复提交\",\"服务间调用的重试\",\"MQ消息的重复投递\",\"解决方案：\",\"唯一消息ID\",\"业务状态判断\",\"唯一消息ID：\",\"每一条消息都生成一个唯一的id，与消息一起投递给消费者。\",\"消费者接收到消息后处理自己的业务，业务处理成功后将消息ID保存到数据库\",\"如果下次又收到相同消息，去数据库查询判断是否存在，存在则为重复消息放弃处理。\",\"如何给消息添加唯一ID：SpringAMQP的MessageConverter自带了MessageID的功能，只要开启这个功能即可\",\"@Bean public MessageConverter messageConverter(){ // 1.定义消息转换器 Jackson2JsonMessageConverter jjmc = new Jackson2JsonMessageConverter(); // 2.配置自动创建消息id，用于识别不同消息，也可以在业务中基于ID判断是否是重复消息 jjmc.setCreateMessageIds(true); return jjmc; } \",\"业务判断，类似于乐观锁\",\" @Override public void markOrderPaySuccess(Long orderId) { // 1.查询订单 Order old = getById(orderId); // 2.判断订单状态 if (old == null || old.getStatus() != 1) { // 订单不存在或者订单状态不是1，放弃处理 return; } // 3.尝试更新订单 Order order = new Order(); order.setId(orderId); order.setStatus(2); order.setPayTime(LocalDateTime.now()); updateById(order); } \",\"或者\",\"@Override public void markOrderPaySuccess(Long orderId) { // UPDATE order SET status = ? , pay_time = ? WHERE id = ? AND status = 1 lambdaUpdate() .set(Order::getStatus, 2) .set(Order::getPayTime, LocalDateTime.now()) .eq(Order::getId, orderId) .eq(Order::getStatus, 1) .update(); } \",\"兜底方案：思想很简单：既然MQ通知不一定发送到交易服务，那么交易服务就必须自己主动去查询支付状态。这样即便支付服务的MQ通知失败，我们依然能通过主动查询来保证订单状态的一致。\",\"通常我们采取的措施就是利用定时任务定期查询，例如每隔20秒就查询一次，并判断支付状态。如果发现订单已经支付，则立刻更新订单状态为已支付即可。\"]},\"353\":{\"h\":\"延迟消息\",\"t\":[\"订单支付超时时间为30分钟，则我们应该在用户下单后的第30分钟检查订单支付状态，如果发现未支付，应该立刻取消订单，释放库存。问题：如何准确的实现在下单后第30分钟去检查支付状态呢？\",\"延迟任务:在一段时间以后才执行的任务.\",\"解决方案：\",\"死信交换机+TTL\",\"延迟消息插件\"]},\"354\":{\"h\":\"死信交换机\",\"t\":[\"死信交换机（Dead Letter Exchange，简称 DLX）是 RabbitMQ 中一个特殊的交换机，用于接收和路由成为死信的消息。\",\"消息被拒绝 (basic.reject 或 basic.nack)\",\"消息队列满了\",\"消息 TTL 超时\",\"如果一个队列中的消息已经成为死信，并且这个队列通过**dead-letter-exchange属性指定了一个交换机，那么队列中的死信就会投递到这个交换机中，而这个交换机就称为死信交换机**（Dead Letter Exchange）。而此时加入有队列与死信交换机绑定，则最终死信就会被投递到这个队列中。\",\"使用死信交换机实现延迟消息的原理是：\",\"将消息发送到一个 TTL 超时时间为指定延迟时间的队列中。\",\"消息在队列中存活时间超过 TTL 时，会成为死信。\",\"死信会被路由到死信交换机\",\"死信交换机将死信路由到指定的队列，以便进行处理。\"]},\"355\":{\"h\":\"DelayExchange插件\",\"t\":[\"地址：https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases/tag/3.8.9\",\"下载好后：\",\"docker exec -it mq rabbitmq-plugins enable rabbitmq_delayed_message_exchange \",\"声明交换机：\",\"@RabbitListener(bindings = @QueueBinding( value = @Queue(name = \\\"delay.queue\\\", durable = \\\"true\\\"), exchange = @Exchange(name = \\\"delay.direct\\\", delayed = \\\"true\\\"), key = \\\"delay\\\" )) public void listenDelayMessage(String msg){ log.info(\\\"接收到delay.queue的延迟消息：{}\\\", msg); } \",\"发送延迟消息：\",\"@Test void testPublisherDelayMessage() { // 1.创建消息 String message = \\\"hello, delayed message\\\"; // 2.发送消息，利用消息后置处理器添加消息头 rabbitTemplate.convertAndSend(\\\"delay.direct\\\", \\\"delay\\\", message, new MessagePostProcessor() { @Override public Message postProcessMessage(Message message) throws AmqpException { // 添加延迟消息属性 message.getMessageProperties().setDelay(5000); return message; } }); } \",\"超时订单问题\",\"假如订单超时支付时间为30分钟，理论上说我们应该在下单时发送一条延迟消息，延迟时间为30分钟。这样就可以在接收到消息时检验订单支付状态，关闭未支付订单。\",\"但是大多数情况下用户支付都会在1分钟内完成，我们发送的消息却要在MQ中停留30分钟，额外消耗了MQ的资源。因此，我们最好多检测几次订单支付状态，而不是在最后第30分钟才检测。\",\"例如：我们在用户下单后的第10秒、20秒、30秒、45秒、60秒、1分30秒、2分、...30分分别设置延迟消息，如果提前发现订单已经支付，则后续的检测取消即可。\",\"定义记录消息延迟时间的消息体\",\"@Data public class MultiDelayMessage<T> { /** * 消息体 */ private T data; /** * 记录延迟时间的集合 */ private List<Long> delayMillis; public MultiDelayMessage(T data, List<Long> delayMillis) { this.data = data; this.delayMillis = delayMillis; } public static <T> MultiDelayMessage<T> of(T data, Long ... delayMillis){ return new MultiDelayMessage<>(data, CollUtils.newArrayList(delayMillis)); } /** * 获取并移除下一个延迟时间 * @return 队列中的第一个延迟时间 */ public Long removeNextDelay(){ return delayMillis.remove(0); } /** * 是否还有下一个延迟时间 */ public boolean hasNextDelay(){ return !delayMillis.isEmpty(); } } \",\"实现\",\"@Slf4j @Component @RequiredArgsConstructor public class OrderStatusListener { private final IOrderService orderService; private final PayClient payClient; private final RabbitTemplate rabbitTemplate; @RabbitListener(bindings = @QueueBinding( value = @Queue(name = MqConstants.DELAY_ORDER_QUEUE, durable = \\\"true\\\"), exchange = @Exchange(name = MqConstants.DELAY_EXCHANGE, type = ExchangeTypes.TOPIC), key = MqConstants.DELAY_ORDER_ROUTING_KEY )) public void listenOrderCheckDelayMessage(MultiDelayMessage<Long> msg) { // 1.获取消息中的订单id Long orderId = msg.getData(); // 2.查询订单，判断状态：1是未支付，大于1则是已支付或已关闭 Order order = orderService.getById(orderId); if (order == null || order.getStatus() > 1) { // 订单不存在或交易已经结束，放弃处理 return; } // 3.可能是未支付，查询支付服务 PayOrderDTO payOrder = payClient.queryPayOrderByBizOrderNo(orderId); if (payOrder != null && payOrder.getStatus() == 3) { // 支付成功，更新订单状态 orderService.markOrderPaySuccess(orderId); return; } // 4.确定未支付，判断是否还有剩余延迟时间 if (msg.hasNextDelay()) { // 4.1.有延迟时间，需要重发延迟消息，先获取延迟时间的int值 int delayVal = msg.removeNextDelay().intValue(); // 4.2.发送延迟消息 rabbitTemplate.convertAndSend(MqConstants.DELAY_EXCHANGE, MqConstants.DELAY_ORDER_ROUTING_KEY, msg, message -> { message.getMessageProperties().setDelay(delayVal); return message; }); return; } // 5.没有剩余延迟时间了，说明订单超时未支付，需要取消订单 orderService.cancelOrder(orderId); } } \"]},\"356\":{\"c\":[\"中间件\",\"RabbitMQ\"]},\"357\":{\"c\":[\"中间件\",\"RabbitMQ\"]},\"358\":{\"h\":\"RabbitMQ面试题\"},\"359\":{\"h\":\"RabbitMQ如何保证消息不丢失\",\"t\":[\"出现消息丢失可能会出现在以下场景：\",\"异步发送（验证码，短信，邮件）\",\"MySQL和Redis，ES之间的数据同步\",\"分布式事务\",\"削峰消谷\",\"总结为：消息未达到交换机，消息未达到队列，队列中丢失消息，消费者未接收到消息\",\"解决办法：生产者确认机制：\",\"生产者确认机制是指生产者发送消息后，需要等待RabbitMQ服务器的确认消息，以确保消息已经被成功地发送到RabbitMQ服务器。如果RabbitMQ服务器没有收到消息或者消息发送失败，生产者会收到一个确认消息，从而可以进行重发或者其他处理。\",\"消息失败之后如何处理呢？\",\"回调方法即时重发\",\"记录日志\",\"保存到数据库然后定时重发，成功发送后即刻删除表中的数据\",\"MQ宕机导致消息丢失：\",\"解决办法：消息持久化\",\"MQ默认是内存存储消息，开启持久化可以确保缓存中MQ消息不丢失\",\"主要是交换机，队列，消息持久化\",\"交换机持久化\",\"@Bean public DirectExchange simpleExchange(){ //三个参数分别是：交换机名称，durable是否持久化，autoDelete是否自动删除 return new DirectExchange(\\\"simple.direct\\\",true,true); } \",\"队列持久化\",\"@Bean public Queue simpleQueue1(){ //使用QueueBuilder创建队列，durable就是持久化 return QueueBuilder.durable(\\\"simple.queue1\\\").build(); } \",\"消息持久化,通过MessageDeliveryMode.PERSISTENT实现\",\"Message message = MessageBuilder .withBody(\\\"hello\\\".getBytes(StandardCharsets.UTF_8)) .setDeliveryMode(MessageDeliveryMode.PERSISTENT).build();// 持久化消息 \",\"解决办法消费者确认机制\",\"RabbitMQ支持消费者确认机制，即：消费者处理消息后可以向MQ发送ack回执，MQ收到ack回执后才会删除该消息。而SpringAMQP.则允许配置三种确认模式：\",\"manual:手动ack,需要在业务代码结束后，调用api发送ack。\",\"auto:自动ack,由spring监测listener代码是香出现异常，没有异常则返回ack;抛出异常则返回nack\",\"none:关闭ack,MQ假定消费者获取消息后会成功处理，因此消息投递后立即被删除\",\"我们可以利用Spring的retry机制，在消费者出现异常时利用本地重试，设置重试次数，当次数达到了以后，如果消息依然失败，将消息投递到异常交换机，交由人工处理\",\"回答：\",\"开启生产者确认机制，确保生产者的消息能到达队列\",\"开启持久化功能，确保消息未消费前在队列中不会丢失\",\"开启消费者确认机制为auto,由spring确认消息处理成功后完成ack\",\"开启消费者失败重试机制，多次重试失败后将消息投递到异常交换机，交由人工处理\"]},\"360\":{\"h\":\"RabbitMQ消息的重复消费问题如何解决\",\"t\":[\"消息重复消费出现场景：\",\"网络抖动导致消息投递失败，RabbitMQ会重试投递消息。\",\"消费者在处理消息过程中发生异常，导致消息未被确认，RabbitMQ会重新投递消息。\",\"负载均衡导致消息被多个消费者消费。\",\"解决办法：\",\"每条消息设置一个唯一的标识id\",\"幂等方案：分布式锁、数据库锁（悲观锁、乐观锁）\"]},\"361\":{\"h\":\"RabbitMQ中死信交换机（延迟队列有了解过吗）\",\"t\":[\"死信交换机是 RabbitMQ 中的一个特殊交换机，用于处理无法投递的消息。当消息无法投递到任何队列时，它会被路由到死信交换机。死信交换机可以将消息路由到另一个队列或执行其他操作。\",\"当一个队列中的消息满足下列情况之一时，可以成为死信(dead letter):\",\"消费者使用basic.reject或basic..nack声明消费失败，并且消息的requeue:参数设置为false\",\"消息是一个过期消息，超时无人消费\",\"要投递的队列消息堆积满了，最早的消息可能成为死信\",\"延迟队列是一种特殊的队列，消息在队列中会等待一段指定的时间后才会被投递给消费者。\",\"场景：超时订单，限时优惠，定时发布\",\"TTL,也就是Time-To-Live。如果一个队列中的消息TTL结束仍未消费，则会变为死信，tt超时分为两种情况：\",\"消息所在的队列设置了存活时间\",\"消息本身设置了存活时间\",\"Delay Exchange插件：使用时只需要声明一个交换机，delayed属性为true即可\",\"回答：\",\"我们当时一个什么业务使用到了延迟队列（超时订单、限时优惠、定时发布.…）\",\"其中延迟队列就用到了死信交换机和TTL(消息存活时间)实现的\",\"消息超时未消费就会变成死信（死信的其他情况：拒绝被消费，队列满了）\",\"延迟队列插件实现延迟队列DelayExchange\",\"声明一个交换机，添加delayed属性为true\",\"发送消息时，添加x-delay头，值为超时时间\"]},\"362\":{\"h\":\"如果有100万消息堆积在MQ , 如何解决 ?\",\"t\":[\"当生产者发送消息的速度超过了消费者处理消息的速度，就会导致队列中的消息堆积，直到队列 存储消息达到上限。之后发送的消息就会成为死信，可能会被丢弃，这就是消息堆积问题\",\"解决消息堆积有三种种思路：\",\"增加更多消费者，提高消费速度\",\"在消费者内开启线程池加快消息处理速度\",\"扩大队列容积，提高堆积上限\",\"惰性队列的特征如下：\",\"接收到消息后直接存入磁盘而非内存\",\"消费者要消费消息时才会从磁盘中读取并加载到内存\",\"支持数百万条的消息存储\",\"回答：\",\"解决消息堆积有三种种思路：\",\"增加更多消费者，提高消费速度\",\"在消费者内开启线程池加快消息处理速度\",\"扩大队列容积，提高堆积上限，采用惰性队列 \",\"在声明队列的时候可以设置属性x-queue-mode为lazy,即为惰性队列\",\"基于磁盘存储，消息上限高\",\"性能比较稳定，但基于磁盘存储，受限于磁盘O,时效性会降低\"]},\"363\":{\"h\":\"RabbitMQ的高可用机制有了解过嘛\",\"t\":[\"在生产环境下，使用集群来保证高可用性\",\"普通集群、镜像集群、仲裁队列\",\"RabbitMQ 提供了多种高可用机制来确保消息队列的可靠性和稳定性，包括：\",\"1. 普通集群\",\"普通集群模式会在各个节点间共享部分数据（交换机和队列元信息），但不包含队列里的消息；如果队列不在该节点，会从数据所在节点传递到当前节点并返回；当所在节点宕机，队列中的消息就会丢失。\",\"2. 镜像集群\",\"镜像集群本质是主从模式。镜像集群特征如下：\",\"交换机、队列、队列中的消息会在各个MQ的镜像节点之间同步备份。\",\"创建队列的节点称为该队列的主节点，备份的其他节点叫该队列的镜像节点。\",\"一个队列的主节点可能是另一个队列的镜像节点。\",\"3. 仲裁队列\",\"仲裁队列用于解决镜像集群中主节点故障时的数据一致性问题。仲裁队列使用 Raft 协议保证强一致性。\",\"回答：\",\"在生产环境下，我们当时采用的镜像模式搭建的集群，共有3个节点\",\"镜像队列结构是一主多从（从就是镜像），所有操作都是主节点完成，然后同步给镜像节点\",\"主宕机后，镜像节点会替代成新的主（如果在主从同步完成前，主就已经宕机，可能出现数据丢失）\",\"出现数据丢失如何解决：我们可以采用仲裁队列，与镜像队列一样，都是主从模式，支持主从数据同步，主从同步基于Rft协议，强一致。并且使用起来也非常简单，不需要额外的配置，在声明队列的时候只要指定这个是仲裁队列即可\"]},\"364\":{\"c\":[\"中间件\",\"RabbitMQ\"]},\"365\":{\"c\":[\"中间件\",\"RabbitMQ\"]},\"366\":{\"h\":\"分布式缓存\"},\"367\":{\"h\":\"Redis持久化\",\"t\":[\"Redis持久化有两种方案：\",\"RDB持久化\",\"AOF持久化\"]},\"368\":{\"h\":\"RDB持久化\",\"t\":[\"RDB（Relational Database）持久化是指将内存中的数据库状态保存到硬盘上的一种持久化存储方式，以便在服务器重新启动时恢复数据。当Redis实例故障重启后，从磁盘读取快照文件，恢复数据。快照文件称为RDB文件，默认是保存在当前运行目录。\"]},\"369\":{\"h\":\"执行时机\",\"t\":[\"手动触发： 可以使用命令 SAVE 或 BGSAVE 来手动触发RDB持久化。 \",\"SAVE 阻塞服务器进程，直到持久化过程完成，期间服务器不能处理其他请求。\",\"BGSAVE 在后台进行持久化，不会阻塞服务器的正常操作。\",\"自动触发：\",\"你可以通过配置文件中的 save 指令设置自动触发RDB持久化的条件。默认配置中会有一条规则，表示当900秒（15分钟）内至少有1个键被修改，就执行 BGSAVE 操作。\",\"Redis停机时\",\"执行save命令\",\"查看保存在哪里：config get dir,即redis的安装目录\",\"执行bgsave 这个命令执行后会开启独立进程完成RDB，主进程可以持续处理用户请求，不受影响。\",\"修改redis.conf文件：\",\"修改save之后的保存位置：\"]},\"370\":{\"h\":\"RDB原理\",\"t\":[\"bgsave开始时会fork主进程得到子进程，子进程共享主进程的内存数据。完成fork后读取内存数据并写入 RDB 文件。 fork采用的是copy-on-write技术：\",\"当主进程执行读操作时，访问共享内存；\",\"当主进程执行写操作时，则会拷贝一份数据，执行写操作。\"]},\"371\":{\"h\":\"AOF持久化\",\"t\":[\"AOF（Append-only File）是Redis中另一种持久化机制，用于将写操作追加到一个文件中。相较于RDB持久化，AOF持久化提供了更细粒度的持久化，记录每个写命令的操作，而不是周期性地保存整个数据集的快照。 等 需要数据的时候，将这个文件 从头到尾执行一边，即可 得到准确的数据\",\"修改conf文件 进行 配置：\",\"# 是否开启AOF功能，默认是no appendonly yes # AOF文件的名称 appendfilename \\\"appendonly.aof\\\" \",\"修改记录 频率：\",\"# 表示每执行一次写命令，立即记录到AOF文件 appendfsync always # 写命令执行完先放入AOF缓冲区，然后表示每隔1秒将缓冲区数据写到AOF文件，是默认方案 appendfsync everysec # 写命令执行完先放入AOF缓冲区，由操作系统决定何时将缓冲区内容写回磁盘 appendfsync no \"]},\"372\":{\"h\":\"AOF文件重写\",\"t\":[\"因为是记录命令，AOF文件会比RDB文件大的多。而且AOF会记录对同一个key的多次写操作，但只有最后一次写操作才有意义。通过执行bgrewriteaof命令，可以让AOF文件执行重写功能，用最少的命令达到相同效果。\",\"bgrewriteaof \",\"也可以配置自动触发：\",\"# AOF文件比上次文件 增长超过多少百分比则触发重写 auto-aof-rewrite-percentage 100 # AOF文件体积最小多大以上才触发重写 auto-aof-rewrite-min-size 64mb \",\"两种方式对比：\"]},\"373\":{\"h\":\"Redis主从集群\",\"t\":[\"单节点Redis的并发能力是有上限的，要进一步提高Redis的并发能力，就需要搭建主从集群，实现读写分离。\",\"搭建Redis集群 新建三个文件夹 7001 7002 7003 将配置文件拷贝到每一个文件夹下面 分别修改每个配置文件的端口为7001 ,7002,7003 修改rdb文件的保存目录：\",\"dir /Users/houyunfei/tools/redis/7001 \",\"三个都需要修改\",\"然后启动三个redis\",\"redis-server 7001/redis.conf \",\"让7002的主设置为7001，7003同理\",\"可以看到此时7001成为了master\",\"当7001成为了主之后，他设置的值都可以被7002和7003读取到，但是7002和7003不可以写，只可以读\",\"主从分离：\",\"主节点做写\",\"从节点做读\"]},\"374\":{\"c\":[\"中间件\",\"Redis\"]},\"375\":{\"c\":[\"中间件\",\"Redis\"]},\"376\":{\"h\":\"SpringBoot使用Redis\"},\"377\":{\"h\":\"Redis介绍\",\"t\":[\"官方网站：https://redis.io/ Redis是一种键值型的NoSql数据库，这里有两个关键字：\",\"键值型：Redis中存储的数据都是以key、value对的形式存储\",\"NoSql：相对于传统关系型数据库而言，有很大差异的一种数据库。（not only sql,非关系型数据库）\",\"NoSql则对数据库格式没有严格约束，往往形式松散，自由。 对比传统数据库： 关系型数据库（RDBMS）和非关系型数据库（NoSQL数据库）是两种不同类型的数据库管理系统，它们在数据存储、数据模型和适用场景等方面存在显著的区别。\",\"数据模型： \",\"关系型数据库：使用表格（表）来组织数据，数据之间的关系通过外键建立。数据存储在结构化表格中，每行代表一个记录，每列代表一个属性。\",\"非关系型数据库：使用不同的数据模型，如文档、键值对、列族、图形等。这些数据库通常更自由灵活，不需要固定的模式，允许存储不同结构的数据。\",\"查询语言： \",\"关系型数据库：通常使用SQL（Structured Query Language）来查询和操作数据，支持复杂的查询和事务。\",\"非关系型数据库：使用不同的查询语言或API，通常是根据数据库类型而变化的。有些NoSQL数据库支持查询，但通常不如SQL数据库灵活。\",\"扩展性： \",\"关系型数据库：通常采用垂直扩展（增加服务器性能）或水平分区来提高性能，但有一定限制。\",\"非关系型数据库：通常更容易水平扩展，可以更好地处理大规模数据。\",\"一致性： \",\"关系型数据库：强调ACID（原子性、一致性、隔离性和持久性）事务特性，确保数据的一致性和完整性。\",\"非关系型数据库：一些NoSQL数据库可能牺牲ACID属性以获得更高的性能和可用性，而强调CAP（一致性、可用性和分区容忍性）理论。\",\"适用场景： \",\"关系型数据库：适用于需要强一致性和复杂事务处理的应用，如金融系统、ERP系统等。\",\"非关系型数据库：适用于需要高度可扩展性和灵活性的应用，如大数据、社交媒体、物联网、日志存储等。\"]},\"378\":{\"h\":\"Macos安装Redis\",\"t\":[\"https://redis.io/docs/getting-started/installation/install-redis-on-mac-os/安装redis\",\"brew install redis \",\"查看安装信息：\",\"brew info redis \",\"前台启动redis:\",\"redis-server \",\"后台启动redis:\",\"brew services start redis \",\"查看信息：\",\"brew services info redis \",\"停止：\",\"brew services stop redis \"]},\"379\":{\"h\":\"配置\",\"t\":[\"打开/opt/homebrew/etc/redis.conf配置文件 修改密码\",\"requirepass 123456 \",\"前台启动的时候可以加 配置文件\",\"cd /opt/homebrew/etc/ redis-server redis.conf \",\"在后台启动redis,这个时候不需要加配置文件\",\"brew services start redis \",\"登录redis\",\"redis-cli -h localhost -p 6379 -a 123456 \"]},\"380\":{\"h\":\"启动问题\",\"t\":[\"后台启动的时候报错： 解决办法：\",\"cd /opt/homebrew/Library/Taps/homebrew rm -rf homebrew-services brew tap homebrew/services \"]},\"381\":{\"h\":\"客户端工具\",\"t\":[\"可以选择 another redis desktophttps://goanother.com/cn/#download\"]},\"382\":{\"h\":\"Redis中的数据结构\",\"t\":[\"Redis是键值对结构，即key-value，我们需要保证key不冲突， 常见的方式为：\",\" 项目名:业务名:类型:id \",\"例如：\",\"user相关的key：heima:user:1\",\"product相关的key：heima:product:1 如果Value是一个Java对象，例如一个User对象，则可以将对象序列化为JSON字符串后存储：\"]},\"383\":{\"h\":\"字符串\",\"t\":[\"String类型，也就是字符串类型，是Redis中最简单的存储类型。 String结构是将对象序列化为JSON字符串后存储，当需要修改对象某个字段时很不方便\",\"KEY\",\"VALUE\",\"heima:user:1\",\"heima:product:1\"]},\"384\":{\"h\":\"常用命令\",\"t\":[\"SET key value ：设置GET key ：获取SETEX key seconds value ：设置指定key过期时间，单位sSETNX key vvalue ：只有在key不存在时才设置\"]},\"385\":{\"h\":\"哈希\",\"t\":[\"Hash结构可以将对象中的每个字段独立存储，可以针对单个字段做CRUD：\"]},\"386\":{\"h\":\"常用命令\",\"t\":[\"HSET key fiele value 将key设置为valueHGET key field 获取HDEL key field 删除HKEYS key 获取所有字段HVALS key 获取所有值\"]},\"387\":{\"h\":\"列表\",\"t\":[\"Redis中的List类型与Java中的LinkedList类似，可以看做是一个双向链表结构。既可以支持正向检索和也可以支持反向检索。 常用来存储一个有序数据，例如：朋友圈点赞列表，评论列表等。\"]},\"388\":{\"h\":\"常用命令\",\"t\":[\"LPUSH key value1[value2] 插入到头部 左侧LRANGE key start stop 获取指定范围达到元素RPOP key 移除并获取列表最后一个元素 右侧LLEN key 获取列表长度\"]},\"389\":{\"h\":\"集合\",\"t\":[\"Redis的Set结构与Java中的HashSet类似，可以看做是一个value为null的HashMap。因为也是一个hash表，因此具备与HashSet类似的\"]},\"390\":{\"h\":\"常用命令\",\"t\":[\"SADD key number1 [number2] 插入一个成员SMEMBERS key 返回集合中所有成员SCARD key 获取成员数SINTER key1[key2] 返回定义所哟集合的交集SUNION key1 [key2] 返回所有集合的并集SREM key number1[numer2] 删除集合中成员\"]},\"391\":{\"h\":\"有序集合\",\"t\":[\"Redis的SortedSet是一个可排序的set集合，与Java中的TreeSet有些类似，但底层数据结构却差别很大。SortedSet中的每一个元素都带有一个score属性，可以基于score属性对元素排序，底层的实现是一个跳表（SkipList）加 hash表。\",\"因为SortedSet的可排序特性，经常被用来实现排行榜这样的功能。\"]},\"392\":{\"h\":\"常用命令\",\"t\":[\"ZADD key score1 member1 [score2 member2] 向有序集合添加一个成员ZRANGE key start stop [WITHSCORES] 通过索引区间返回有序集合指定区间内的成员ZINCRBY key increment member 对指定成员分数加上增量incrementZREM key member [member..] 删除成员\"]},\"393\":{\"h\":\"通用命令\",\"t\":[\"KEYS pattern： 查找所有符合给定模式的keyEXISTS key： 检查给定key是否存在TYPE key： 返回key 所存储的值的类型DEL key ：在key存在时删除keyEXPIRE：给一个key设置有效期，到期会被自动删除\"]},\"394\":{\"h\":\"Redis的Java客户端Jedis\"},\"395\":{\"h\":\"入门\",\"t\":[\"引入依赖：\",\"<!--jedis--> <dependency> <groupId>redis.clients</groupId> <artifactId>jedis</artifactId> <version>3.7.0</version> </dependency> <!--单元测试--> <dependency> <groupId>org.junit.jupiter</groupId> <artifactId>junit-jupiter</artifactId> <version>5.7.0</version> <scope>test</scope> </dependency> \",\"建立连接，存数据，以及取数据，最后释放连接测试：\",\"public class TestJedis { private Jedis jedis; @BeforeEach void setup() { // 1.建立连接 jedis = new Jedis(\\\"localhost\\\", 6379); // 2.设置密码 jedis.auth(\\\"123456\\\"); // 3.选择库 jedis.select(0); } @Test void testString() { // 存入数据 String result = jedis.set(\\\"name\\\", \\\"cxk\\\"); System.out.println(\\\"result=\\\" + result); // 获取数据 String name = jedis.get(\\\"name\\\"); System.out.println(\\\"name=\\\" + name); } @Test void testHash() { jedis.hset(\\\"user:1\\\", \\\"name\\\", \\\"cxk\\\"); jedis.hset(\\\"user:1\\\", \\\"age\\\", \\\"18\\\"); Map<String, String> map = jedis.hgetAll(\\\"user:1\\\"); System.out.println(map); } @AfterEach void tearDown() { // 关闭连接 jedis.close(); } } \"]},\"396\":{\"h\":\"连接池\",\"t\":[\"Jedis本身是线程不安全的，并且频繁的创建和销毁连接会有性能损耗，因此我们推荐使用Jedis连接池代替Jedis的直连方式。 创建factory\",\"public class JedisConnectionFactory { private static JedisPool jedisPool; static { // 配置连接池 JedisPoolConfig poolConfig = new JedisPoolConfig(); poolConfig.setMaxTotal(8); poolConfig.setMaxIdle(8); poolConfig.setMinIdle(0); poolConfig.setMaxWaitMillis(1000); jedisPool = new JedisPool(poolConfig, \\\"localhost\\\", 6379, 1000, \\\"123321\\\"); } public static Jedis getJedis() { return jedisPool.getResource(); } } \",\"创建对象：\",\" @BeforeEach void setup() { // 1.建立连接 // jedis = new Jedis(\\\"localhost\\\", 6379); jedis= JedisConnectionFactory.getJedis(); // 2.设置密码 jedis.auth(\\\"123456\\\"); // 3.选择库 jedis.select(0); } \"]},\"397\":{\"h\":\"SpringBoot中使用Redis\",\"t\":[\"SpringData是Spring中数据操作的模块，包含对各种数据库的集成，其中对Redis的集成模块就叫做SpringDataRedis，官网地址：https://spring.io/projects/spring-data-redis\",\"提供了对不同Redis客户端的整合（Lettuce和Jedis）\",\"提供了RedisTemplate统一API来操作Redis\",\"支持Redis的发布订阅模型\",\"支持Redis哨兵和Redis集群\",\"支持基于Lettuce的响应式编程\",\"支持基于JDK、JSON、字符串、Spring对象的数据序列化及反序列化\",\"支持基于Redis的JDKCollection实现\"]},\"398\":{\"h\":\"入门\",\"t\":[\"导入依赖 pool是连接池\",\" <!--redis依赖--> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-redis</artifactId> </dependency> <!--common-pool--> <dependency> <groupId>org.apache.commons</groupId> <artifactId>commons-pool2</artifactId> </dependency> <!--Jackson依赖--> <dependency> <groupId>com.fasterxml.jackson.core</groupId> <artifactId>jackson-databind</artifactId> </dependency> \",\"配置Redis 配置redis，以及连接池设置\",\"spring: redis: host: localhost port: 6379 password: 123456 lettuce: # 连接池 pool: max-active: 8 max-idle: 8 min-idle: 0 max-wait: 1000ms \",\"编写配置类 RedisTemplate可以接收任意Object作为值写入Redis，写入前会把Object序列化为字节形式，默认是采用JDK序列化， 缺点：\",\"可读性差\",\"内存占用较大 可以自定义序列化方式\"]},\"399\":{\"h\":\"自定义序列化方式\",\"t\":[\"@Configuration public class RedisConfig { @Bean public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory redisConnectionFactory) { //创建RedisTemplate<String, Object>对象 RedisTemplate<String, Object> template = new RedisTemplate<>(); //设置RedisTemplate的连接工厂 template.setConnectionFactory(redisConnectionFactory); //创建json格式序列化对象 GenericJackson2JsonRedisSerializer genericJackson2JsonRedisSerializer = new GenericJackson2JsonRedisSerializer(); //设置key和hashKey的序列化方式 template.setKeySerializer(RedisSerializer.string()); template.setHashKeySerializer(RedisSerializer.string()); //设置value的序列化 template.setValueSerializer(genericJackson2JsonRedisSerializer); template.setHashValueSerializer(genericJackson2JsonRedisSerializer); return template; } } \",\"测试：\",\"@SpringBootTest class RedisDemoApplicationTests { @Autowired private RedisTemplate redisTemplate; @Test void testString() { // 写入一条String数据 redisTemplate.opsForValue().set(\\\"name\\\", \\\"蔡徐坤\\\"); // 获取string数据 Object name = redisTemplate.opsForValue().get(\\\"name\\\"); System.out.println(\\\"name = \\\" + name); } } \",\"测试写入一个Pojo类\",\" @Test void testPojo(){ User user = new User(\\\"蔡徐坤\\\", 18); redisTemplate.opsForValue().set(\\\"user\\\", user); Object user1 = redisTemplate.opsForValue().get(\\\"user\\\"); System.out.println(\\\"user1 = \\\" + user1); } \",\"结果如下：\",\"整体可读性有了很大提升，并且能将Java对象自动的序列化为JSON字符串，并且查询时能自动把JSON反序列化为Java对象。不过，其中记录了序列化时对应的class名称，目的是为了查询时实现自动反序列化。这会带来额外的内存开销。\"]},\"400\":{\"h\":\"使用StringRedisTemplate\",\"t\":[\"为了节省内存空间，我们可以不使用JSON序列化器来处理value，而是统一使用String序列化器，要求只能存储String类型的key和value。当需要存储Java对象时，手动完成对象的序列化和反序列化。\",\" @Autowired private StringRedisTemplate stringRedisTemplate; //json格式化工具 private static final ObjectMapper mapper = new ObjectMapper(); @Test void testSaveUser() throws Exception{ User user = new User(\\\"蔡徐坤\\\", 18); //手动序列化 String userJson = mapper.writeValueAsString(user); stringRedisTemplate.opsForValue().set(\\\"user:1\\\",userJson); String jsonUser = stringRedisTemplate.opsForValue().get(\\\"user:1\\\"); //手动反序列化 User user1 = mapper.readValue(jsonUser, User.class); System.out.println(\\\"user1 = \\\" + user1); } \",\"其他的类型一些测试：\",\"@SpringBootTest class RedisConfigurationTest { @Autowired private RedisTemplate redisTemplate; @Test public void testString() { ValueOperations valueOperations = redisTemplate.opsForValue(); valueOperations.set(\\\"name\\\", \\\"cxk\\\"); String name = (String) valueOperations.get(\\\"name\\\"); System.out.println(name); valueOperations.set(\\\"code\\\", \\\"1234\\\", 3, TimeUnit.HOURS); //3小时后过期 valueOperations.setIfAbsent(\\\"code1\\\", \\\"1234\\\"); //如果不存在则设置 } @Test public void testHash() { HashOperations hashOperations = redisTemplate.opsForHash(); hashOperations.put(\\\"user\\\", \\\"name\\\", \\\"cxk\\\"); hashOperations.put(\\\"user\\\", \\\"age\\\", \\\"18\\\"); String name = (String) hashOperations.get(\\\"user\\\", \\\"name\\\"); System.out.println(name); Set user = hashOperations.keys(\\\"user\\\"); System.out.println(user); List user1 = hashOperations.values(\\\"user\\\"); System.out.println(user1); hashOperations.delete(\\\"user\\\", \\\"name\\\"); } @Test public void testList() { ListOperations listOperations = redisTemplate.opsForList(); listOperations.leftPushAll(\\\"list\\\", \\\"a\\\", \\\"b\\\", \\\"c\\\"); listOperations.leftPush(\\\"list\\\", \\\"d\\\"); List list = listOperations.range(\\\"list\\\", 0, -1); System.out.println(list); listOperations.rightPop(\\\"list\\\"); Long size = listOperations.size(\\\"list\\\"); System.out.println(size); } @Test public void testSet() { SetOperations setOperations = redisTemplate.opsForSet(); setOperations.add(\\\"set\\\", \\\"a\\\", \\\"b\\\", \\\"c\\\", \\\"d\\\", \\\"e\\\"); Set set = setOperations.members(\\\"set\\\"); System.out.println(set); setOperations.remove(\\\"set\\\", \\\"a\\\", \\\"b\\\"); set = setOperations.members(\\\"set\\\"); System.out.println(set); setOperations.add(\\\"set2\\\", \\\"a\\\", \\\"b\\\", \\\"c\\\", \\\"d\\\", \\\"e\\\"); Set union = setOperations.union(\\\"set\\\", \\\"set2\\\"); Set intersect = setOperations.intersect(\\\"set\\\", \\\"set2\\\"); Set difference = setOperations.difference(\\\"set\\\", \\\"set2\\\"); System.out.println(union); System.out.println(intersect); System.out.println(difference); } @Test public void testZset(){ ZSetOperations zSetOperations = redisTemplate.opsForZSet(); zSetOperations.add(\\\"zset\\\", \\\"a\\\", 1); zSetOperations.add(\\\"zset\\\", \\\"b\\\", 2); zSetOperations.add(\\\"zset\\\", \\\"c\\\", 3); Set zset = zSetOperations.range(\\\"zset\\\", 0, -1); System.out.println(zset); zSetOperations.incrementScore(\\\"zset\\\", \\\"a\\\", 1); zSetOperations.remove(\\\"zset\\\", \\\"a\\\"); } @Test public void testCommon(){ Set keys = redisTemplate.keys(\\\"*\\\"); System.out.println(keys); Boolean name = redisTemplate.hasKey(\\\"name\\\"); for (Object key : keys) { DataType type = redisTemplate.type(key); System.out.println(type.name()); } redisTemplate.delete(\\\"name\\\"); } } \"]},\"401\":{\"c\":[\"Java\",\"中间件\",\"Redis\"]},\"402\":{\"c\":[\"Java\",\"中间件\",\"Redis\"]},\"403\":{\"h\":\"WebSocket\",\"t\":[\"WebSocket是基于TCP的一种新的网络协议。它实现了浏览器与服务器全双工通信-浏览器和服务器只需要完成一次握手，两者之间就可以创建持久性的连接，并实现 双向数据传输。\"]},\"404\":{\"h\":\"使用\"},\"405\":{\"h\":\"导入maven坐标\",\"t\":[\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-websocket</artifactId> </dependency> \"]},\"406\":{\"h\":\"前端页面\",\"t\":[\"<!DOCTYPE HTML> <html> <head> <meta charset=\\\"UTF-8\\\"> <title>WebSocket Demo</title> </head> <body> <input id=\\\"text\\\" type=\\\"text\\\" /> <button onclick=\\\"send()\\\">发送消息</button> <button onclick=\\\"closeWebSocket()\\\">关闭连接</button> <div id=\\\"message\\\"> </div> </body> <script type=\\\"text/javascript\\\"> var websocket = null; var clientId = Math.random().toString(36).substr(2); //判断当前浏览器是否支持WebSocket if('WebSocket' in window){ //连接WebSocket节点 websocket = new WebSocket(\\\"ws://localhost:8080/ws/\\\"+clientId); } else{ alert('Not support websocket') } //连接发生错误的回调方法 websocket.onerror = function(){ setMessageInnerHTML(\\\"error\\\"); }; //连接成功建立的回调方法 websocket.onopen = function(){ setMessageInnerHTML(\\\"连接成功\\\"); } //接收到消息的回调方法 websocket.onmessage = function(event){ setMessageInnerHTML(event.data); } //连接关闭的回调方法 websocket.onclose = function(){ setMessageInnerHTML(\\\"close\\\"); } //监听窗口关闭事件，当窗口关闭时，主动去关闭websocket连接，防止连接还没断开就关闭窗口，server端会抛异常。 window.onbeforeunload = function(){ websocket.close(); } //将消息显示在网页上 function setMessageInnerHTML(innerHTML){ document.getElementById('message').innerHTML += innerHTML + '<br/>'; } //发送消息 function send(){ var message = document.getElementById('text').value; websocket.send(message); } //关闭连接 function closeWebSocket() { websocket.close(); } </script> </html> \"]},\"407\":{\"h\":\"后端Server\",\"t\":[\" package com.sky.websocket; import org.springframework.stereotype.Component; import javax.websocket.OnClose; import javax.websocket.OnMessage; import javax.websocket.OnOpen; import javax.websocket.Session; import javax.websocket.server.PathParam; import javax.websocket.server.ServerEndpoint; import java.util.Collection; import java.util.HashMap; import java.util.Map; /** * WebSocket服务 */ @Component @ServerEndpoint(\\\"/ws/{sid}\\\") public class WebSocketServer { //存放会话对象 private static Map<String, Session> sessionMap = new HashMap(); /** * 连接建立成功调用的方法 */ @OnOpen public void onOpen(Session session, @PathParam(\\\"sid\\\") String sid) { System.out.println(\\\"客户端：\\\" + sid + \\\"建立连接\\\"); sessionMap.put(sid, session); } /** * 收到客户端消息后调用的方法 * * @param message 客户端发送过来的消息 */ @OnMessage public void onMessage(String message, @PathParam(\\\"sid\\\") String sid) { System.out.println(\\\"收到来自客户端：\\\" + sid + \\\"的信息:\\\" + message); } /** * 连接关闭调用的方法 * * @param sid */ @OnClose public void onClose(@PathParam(\\\"sid\\\") String sid) { System.out.println(\\\"连接断开:\\\" + sid); sessionMap.remove(sid); } /** * 群发 * * @param message */ public void sendToAllClient(String message) { Collection<Session> sessions = sessionMap.values(); for (Session session : sessions) { try { //服务器向客户端发送消息 session.getBasicRemote().sendText(message); } catch (Exception e) { e.printStackTrace(); } } } } \"]},\"408\":{\"h\":\"编写配置类\",\"t\":[\"package com.sky.config; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.web.socket.server.standard.ServerEndpointExporter; /** * WebSocket配置类，用于注册WebSocket的Bean */ @Configuration public class WebSocketConfiguration { @Bean public ServerEndpointExporter serverEndpointExporter() { return new ServerEndpointExporter(); } } \"]},\"409\":{\"h\":\"定时任务类\",\"t\":[\"package com.sky.task; import com.sky.websocket.WebSocketServer; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.scheduling.annotation.Scheduled; import org.springframework.stereotype.Component; import java.time.LocalDateTime; import java.time.format.DateTimeFormatter; @Component public class WebSocketTask { @Autowired private WebSocketServer webSocketServer; /** * 通过WebSocket每隔5秒向客户端发送消息 */ @Scheduled(cron = \\\"0/5 * * * * ?\\\") public void sendMessageToClient() { webSocketServer.sendToAllClient(\\\"这是来自服务端的消息：\\\" + DateTimeFormatter.ofPattern(\\\"HH:mm:ss\\\").format(LocalDateTime.now())); } } \",\"测试成功：\",\"public void onActivityResult(ActivityResult result) { if (result != null) { Intent data = result.getData(); if (data != null && result.getResultCode() == RESULT_OK) { boolean isCheated = data.getBooleanExtra(CheatActivity.IS_CHEATED, false); if (isCheated) { Toast.makeText(getApplicationContext(), \\\"使用答案提示\\\", LENGTH_SHORT).show(); } else { Toast.makeText(getApplicationContext(), \\\"没有使用答案提示\\\", LENGTH_SHORT).show(); } } else { Toast.makeText(getApplicationContext(), \\\"从CheatAcitivity返回\\\", LENGTH_SHORT).show(); } } } \"]},\"410\":{\"c\":[\"Java\",\"WebSocket\"]},\"411\":{\"c\":[\"Java\",\"WebSocket\"]},\"412\":{\"h\":\"consul微服务注册问题\",\"t\":[\"参考连接：https://blog.csdn.net/lushuaiyin/article/details/104585630\",\"consul和微服务间的网络不稳定，断开了几分钟。在此情况下，consul向微服务发的健康检查请求发不通，认为微服务挂了，就从服务列表里剔除他。\",\"当网络恢复后，注意，已经剔除的服务，consul是不会主动再发健康检查的。那么服务列表里没有他，也就不正常了。网关的转发都是需要获取可用服务列表，才能做转发的！这时候，你想让微服务注册上consul就只能重启微服务了。这在生产环境意味着什么就不用多说了吧。是不是很坑？\\n原因：因为consul的健康检查机制是consul主动发\"]},\"413\":{\"c\":[\"Java\",\"微服务\"]},\"414\":{\"c\":[\"Java\",\"微服务\"]},\"415\":{\"h\":\"freemarker\",\"t\":[\"​ FreeMarker 是一款 模板引擎： 即一种基于模板和要改变的数据， 并用来生成输出文本(HTML网页，电子邮件，配置文件，源代码等)的通用工具。 它不是面向最终用户的，而是一个Java类库，是一款程序员可以嵌入他们所开发产品的组件。\",\"官网链接：http://freemarker.foofun.cn/\",\"常用的java模板引擎还有哪些？\",\"Jsp、Freemarker、Thymeleaf 、Velocity 等。\",\"1.Jsp 为 Servlet 专用，不能单独进行使用。\",\"2.Thymeleaf 为新技术，功能较为强大，但是执行的效率比较低。\",\"3.Velocity从2010年更新完 2.0 版本后，便没有在更新。Spring Boot 官方在 1.4 版本后对此也不在支持，虽然 Velocity 在 2017 年版本得到迭代，但为时已晚。\"]},\"416\":{\"h\":\"快速入门\",\"t\":[\"导入依赖：\",\" <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-freemarker</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> </dependency> <!-- lombok --> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> </dependency> <!-- apache 对 java io 的封装工具库 --> <dependency> <groupId>org.apache.commons</groupId> <artifactId>commons-io</artifactId> <version>1.3.2</version> </dependency> </dependencies> \",\"配置yml\",\"server: port: 8881 #服务端口 spring: application: name: freemarker-demo #指定服务名 freemarker: cache: false #关闭模板缓存，方便测试 settings: template_update_delay: 0 #检查模板更新延迟时间，设置为0表示立即检查，如果时间大于0会有缓存不方便进行模板测试 suffix: .ftl #指定Freemarker模板文件的后缀名 \",\"在resources/templates目录下面创建一个文件01-basic.ftl\",\"代码：\",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"utf-8\\\"> <title>Hello World!</title> </head> <body> <b>普通文本 String 展示：</b><br><br> Hello ${name} <br> <hr> <b>对象Student中的数据展示：</b><br/> 姓名：${stu.name}<br/> 年龄：${stu.age} <hr> </body> </html> \",\"学生对象：\",\"@Data public class Student { private String name;//姓名 private int age;//年龄 private Date birthday;//生日 private Float money;//钱包 } \",\"创建 一个控制器：\",\" @GetMapping(\\\"/basic\\\") public String test(Model model) { //1.纯文本形式的参数 model.addAttribute(\\\"name\\\", \\\"freemarker\\\"); //2.实体类相关的参数 Student student = new Student(); student.setName(\\\"小明\\\"); student.setAge(18); model.addAttribute(\\\"stu\\\", student); return \\\"01-basic\\\"; } \",\"页面 展示效果 ：\"]},\"417\":{\"h\":\"语法\",\"t\":[\"注释：\",\"<#--我是一个freemarker注释--> \",\"插值：\",\"Hello ${name} \",\"FTL指令，根html标签类似\",\"<# >FTL指令</#> \"]},\"418\":{\"h\":\"集合List和Map\",\"t\":[\"控制器构造一些List和Map数据：\",\" public String list(Model model){ //------------------------------------ Student stu1 = new Student(); stu1.setName(\\\"小强\\\"); stu1.setAge(18); stu1.setMoney(1000.86f); stu1.setBirthday(new Date()); //小红对象模型数据 Student stu2 = new Student(); stu2.setName(\\\"小红\\\"); stu2.setMoney(200.1f); stu2.setAge(19); //将两个对象模型数据存放到List集合中 List<Student> stus = new ArrayList<>(); stus.add(stu1); stus.add(stu2); //------------------------------------ //创建Map数据 HashMap<String,Student> stuMap = new HashMap<>(); stuMap.put(\\\"stu1\\\",stu1); stuMap.put(\\\"stu2\\\",stu2); // 3.1 向model中存放Map数据 //向model中存放List集合数据 model.addAttribute(\\\"stus\\\",stus); model.addAttribute(\\\"stuMap\\\", stuMap); return \\\"02-list\\\"; } \",\"页面展示：\",\"<#-- list 数据的展示 --> <b>展示list中的stu数据:</b> <br> <br> <table> <tr> <td>序号</td> <td>姓名</td> <td>年龄</td> <td>钱包</td> </tr> <#list stus as stu> <td>${stu_index+1}</td> <td>${stu.name}</td> <td>${stu.age}</td> <td>${stu.money}</td> </#list> </table> <hr> <#-- Map 数据的展示 --> <b>map数据的展示：</b> <br/><br/> <a href=\\\"###\\\">方式一：通过map['keyname'].property</a><br/> 输出stu1的学生信息：<br/> 姓名：${stuMap['stu1'].name}<br/> 年龄：${stuMap['stu1'].age}<br/> <br/> <a href=\\\"###\\\">方式二：通过map.keyname.property</a><br/> 输出stu2的学生信息：<br/> 姓名：${stuMap.stu2.name}<br/> 年龄：${stuMap.stu2.age}<br/> <br/> <a href=\\\"###\\\">遍历map中两个学生信息：</a><br/> <table> <tr> <td>序号</td> <td>姓名</td> <td>年龄</td> <td>钱包</td> </tr> <#list stuMap?keys as key > <tr> <td>${key_index}</td> <td>${stuMap[key].name}</td> <td>${stuMap[key].age}</td> <td>${stuMap[key].money}</td> </tr> </#list> </table> <hr> \",\"运行结果：\"]},\"419\":{\"h\":\"if指令\",\"t\":[\"判断名称为小红的数据字体显示为红色。\",\" <#list stus as stu > <#if stu.name='小红'> <tr style=\\\"color: red\\\"> <td>${stu_index}</td> <td>${stu.name}</td> <td>${stu.age}</td> <td>${stu.money}</td> </tr> <#else > <tr> <td>${stu_index}</td> <td>${stu.name}</td> <td>${stu.age}</td> <td>${stu.money}</td> </tr> </#if> </#list> \"]},\"420\":{\"h\":\"运算\",\"t\":[\"<b>算数运算符</b> <br/><br/> 100+5 运算： ${100 + 5 }<br/> 100 - 5 * 5运算：${100 - 5 * 5}<br/> 5 / 2运算：${5 / 2}<br/> 12 % 10运算：${12 % 10}<br/> <hr> \",\"=或者==:判断两个值是否相等.\",\"!=:判断两个值是否不等.\",\">或者gt:判断左边值是否大于右边值\",\">=或者gte:判断左边值是否大于等于右边值\",\"<或者lt:判断左边值是否小于右边值\",\"<=或者lte:判断左边值是否小于等于右边值\"]},\"421\":{\"h\":\"空值处理\",\"t\":[\"用法为:variable??,如果该变量存在,返回true,否则返回false\",\"缺失变量默认值使用 “!” ,例如 ${name!''}表示如果name为空显示空字符串。\"]},\"422\":{\"h\":\"内置函数\",\"t\":[\"集合大小\",\"集合大小：${stus?size} \",\"日期格式化：\",\"现在时间:${today?date}-${today?time}-${today?datetime} \",\"内建函数c\",\"数字默认3位会有一个,使用c就不会有\",\"${point?c} \",\"字符串转json\",\"<#assign text=\\\"{'bank':'工商银行','account':'10101920201920212'}\\\" /> <#assign data=text?eval /> 开户行：${data.bank} 账号：${data.account} \"]},\"423\":{\"h\":\"根据模版生成html页面\",\"t\":[\"修改配置，增加模版存放位置：\",\"server: port: 8881 #服务端口 spring: application: name: freemarker-demo #指定服务名 freemarker: cache: false #关闭模板缓存，方便测试 settings: template_update_delay: 0 #检查模板更新延迟时间，设置为0表示立即检查，如果时间大于0会有缓存不方便进行模板测试 suffix: .ftl #指定Freemarker模板文件的后缀名 template-loader-path: classpath:/templates #模板存放位置 \",\"代码：\",\"@SpringBootTest(classes = FreemarkerDemoApplication.class) @RunWith(SpringRunner.class) public class FreemarkerTest { @Autowired private Configuration configuration; @Test public void test() throws IOException, TemplateException { //freemarker的模板对象，获取模板 Template template = configuration.getTemplate(\\\"02-list.ftl\\\"); Map params = getData(); //合成 //第一个参数 数据模型 //第二个参数 输出流 template.process(params, new FileWriter(\\\"/tmp/list.html\\\")); } private Map getData() { Map<String, Object> map = new HashMap<>(); //小强对象模型数据 Student stu1 = new Student(); stu1.setName(\\\"小强\\\"); stu1.setAge(18); stu1.setMoney(1000.86f); stu1.setBirthday(new Date()); //小红对象模型数据 Student stu2 = new Student(); stu2.setName(\\\"小红\\\"); stu2.setMoney(200.1f); stu2.setAge(19); //将两个对象模型数据存放到List集合中 List<Student> stus = new ArrayList<>(); stus.add(stu1); stus.add(stu2); //向map中存放List集合数据 map.put(\\\"stus\\\", stus); //创建Map数据 HashMap<String, Student> stuMap = new HashMap<>(); stuMap.put(\\\"stu1\\\", stu1); stuMap.put(\\\"stu2\\\", stu2); //向map中存放Map数据 map.put(\\\"stuMap\\\", stuMap); //返回Map return map; } } \"]},\"424\":{\"c\":[\"中间件\",\"freemarker\"]},\"425\":{\"c\":[\"中间件\",\"freemarker\"]},\"426\":{\"h\":\"nginx\",\"t\":[\"拉取镜像：\",\"docker pull nginx \",\"先用docker启动一次nginx\",\"docker run -p 80:80 --name nginx -d nginx:latest \",\"将容器内的配置文件拷贝到当前目录\",\"docker container cp nginx:/etc/nginx . \",\"修改文件夹名字为conf\",\"启动nginx，前端页面可以放在html中\",\"docker run -p 80:80 --name nginx \\\\ -v ~/tools/docker-volumes/nginx/html:/usr/share/nginx/html \\\\ -v ~/tools/docker-volumes/nginx/logs:/var/log/nginx \\\\ -v ~/tools/docker-volumes/nginx/conf:/etc/nginx \\\\ -d nginx:latest \"]},\"427\":{\"c\":[\"java\",\"nginx\"]},\"428\":{\"c\":[\"java\",\"nginx\"]},\"429\":{\"h\":\"Easy Excel\",\"t\":[\"官网：https://easyexcel.opensource.alibaba.com/ 依赖：\",\"<dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <version>1.18.30</version> </dependency> <dependency> <groupId>com.alibaba</groupId> <artifactId>easyexcel</artifactId> <version>3.3.2</version> </dependency> \"]},\"430\":{\"h\":\"写Excel\",\"t\":[\"TestFileUtil 工具类 ：\",\"package test; import java.io.File; import java.io.InputStream; import java.util.ArrayList; import java.util.List; import org.apache.commons.collections4.CollectionUtils; public class TestFileUtil { public static InputStream getResourcesFileInputStream(String fileName) { return Thread.currentThread().getContextClassLoader().getResourceAsStream(\\\"\\\" + fileName); } public static String getPath() { return TestFileUtil.class.getResource(\\\"/\\\").getPath(); } public static TestPathBuild pathBuild() { return new TestPathBuild(); } public static File createNewFile(String pathName) { File file = new File(getPath() + pathName); if (file.exists()) { file.delete(); } else { if (!file.getParentFile().exists()) { file.getParentFile().mkdirs(); } } return file; } public static File readFile(String pathName) { return new File(getPath() + pathName); } public static File readUserHomeFile(String pathName) { return new File(System.getProperty(\\\"user.home\\\") + File.separator + pathName); } /** * build to test file path **/ public static class TestPathBuild { private TestPathBuild() { subPath = new ArrayList<>(); } private final List<String> subPath; public TestPathBuild sub(String dirOrFile) { subPath.add(dirOrFile); return this; } public String getPath() { if (CollectionUtils.isEmpty(subPath)) { return TestFileUtil.class.getResource(\\\"/\\\").getPath(); } if (subPath.size() == 1) { return TestFileUtil.class.getResource(\\\"/\\\").getPath() + subPath.get(0); } StringBuilder path = new StringBuilder(TestFileUtil.class.getResource(\\\"/\\\").getPath()); path.append(subPath.get(0)); for (int i = 1; i < subPath.size(); i++) { path.append(File.separator).append(subPath.get(i)); } return path.toString(); } } } \",\"先创建一个实体类,使用ExcelProperty注解标注列的名字：\",\" @Getter @Setter @EqualsAndHashCode public class DemoData { @ExcelProperty(\\\"字符串标题\\\") private String string; @ExcelProperty(\\\"日期标题\\\") private Date date; @ExcelProperty(\\\"数字标题\\\") private Double doubleData; /** * 忽略这个字段 */ @ExcelIgnore private String ignore; } \",\"写入Excel\",\"package test; import com.alibaba.excel.EasyExcel; import com.alibaba.excel.util.ListUtils; import java.util.Date; import java.util.List; public class Test { private List<DemoData> data() { List<DemoData> list = ListUtils.newArrayList(); for (int i = 0; i < 10; i++) { DemoData data = new DemoData(); data.setString(\\\"字符串\\\" + i); data.setDate(new Date()); data.setDoubleData(0.56); list.add(data); } return list; } @Test public void doWrite() { String fileName = TestFileUtil.getPath() + \\\"simpleWrite\\\" + System.currentTimeMillis() + \\\".xlsx\\\"; EasyExcel.write(fileName, DemoData.class).sheet(\\\"模板\\\").doWrite(data()); } } \",\"结果：\"]},\"431\":{\"h\":\"百万数据写入\",\"t\":[\"@Test public void doWrite100() { // 方法2: 如果写到不同的sheet 同一个对象 String fileName = TestFileUtil.getPath() + \\\"repeatedWrite\\\" + System.currentTimeMillis() + \\\".xlsx\\\"; // 这里 指定文件 long begin = System.currentTimeMillis(); try (ExcelWriter excelWriter = EasyExcel.write(fileName, DemoData.class).build()) { // 去调用写入,这里我调用了五次，实际使用时根据数据库分页的总的页数来。这里最终会写到5个sheet里面 for (int i = 0; i < 100; i++) { // 每次都要创建writeSheet 这里注意必须指定sheetNo 而且sheetName必须不一样 WriteSheet writeSheet = EasyExcel.writerSheet(i, \\\"模板\\\" + i).build(); // 分页去数据库查询数据 这里可以去数据库查询每一页的数据 List<DemoData> data = data(10000); excelWriter.write(data, writeSheet); } } long end = System.currentTimeMillis(); System.out.println(\\\"耗时：\\\" + (end - begin) + \\\"ms\\\"); } \"]},\"432\":{\"h\":\"使用模版写入\",\"t\":[\"@Test public void testMoban() { // 方案2 分多次 填充 会使用文件缓存（省内存） String fileName = TestFileUtil.getPath() + \\\"listFill\\\" + System.currentTimeMillis() + \\\".xlsx\\\"; String templateFileName = TestFileUtil.getPath() + \\\"moban\\\" + \\\".xlsx\\\"; try (ExcelWriter excelWriter = EasyExcel.write(fileName).withTemplate(templateFileName).build()) { WriteSheet writeSheet = EasyExcel.writerSheet().build(); for (int i = 0; i < 5; i++) { excelWriter.fill(data(10), writeSheet); } } } \"]},\"433\":{\"h\":\"读Excel\",\"t\":[\"@Test public void doRead() { String fileName = TestFileUtil.getPath() + \\\"simpleWrite1710133712129.xlsx\\\"; EasyExcel.read(fileName, DemoData.class, new PageReadListener<DemoData>(dataList -> { for (DemoData demoData : dataList) { System.out.println(demoData); } })).sheet().doRead(); } \"]},\"434\":{\"c\":[\"Java\",\"Easy Excel\"]},\"435\":{\"c\":[\"Java\",\"EasyExcel\"]},\"436\":{\"h\":\"Java地图基础API\",\"t\":[\"百度地图API：https://lbsyun.baidu.com/ 应用创建：\",\"为了方便，白名单设计为所有：\"]},\"437\":{\"h\":\"基本使用\"},\"438\":{\"h\":\"创建地图\",\"t\":[\"展示地图：https://lbsyun.baidu.com/index.php?title=jspopularGL/guide/show 修改script里面的ak为自己的ak\",\"<!DOCTYPE html> <html> <head> <meta name=\\\"viewport\\\" content=\\\"initial-scale=1.0, user-scalable=no\\\" /> <meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=utf-8\\\" /> <title>Baidu Map </title> <style type=\\\"text/css\\\"> html{height:100%} body{height:100%;margin:0px;padding:0px} #container{height:100%} </style> <script type=\\\"text/javascript\\\" src=\\\"https://api.map.baidu.com/api?v=1.0&type=webgl&ak=xxx\\\"></script> </head> <body> <div id=\\\"container\\\"></div> <script> var map = new BMapGL.Map(\\\"container\\\"); // 创建地图实例 var point = new BMapGL.Point(116.404, 39.915); // 创建点坐标 map.centerAndZoom(point, 15); // 初始化地图，设置中心点坐标和地图级别 </script> </body> </html> \",\"开启鼠标滚轮缩放\",\"map.enableScrollWheelZoom(true); //开启鼠标滚轮缩放 \",\"设置地图的旋转角度和倾斜角度\",\"map.setHeading(64.5); //设置地图旋转角度 map.setTilt(73); //设置地图的倾斜角度 // 禁止地图旋转和倾斜可以通过配置项进行设置 var map = new BMapGL.Map(\\\"allmap\\\",{ enableRotate: false, enableTilt: false }); \"]},\"439\":{\"h\":\"添加覆盖物\",\"t\":[\"添加一个标注：\",\"var point = new BMapGL.Point(116.404, 39.915); var marker = new BMapGL.Marker(point); // 创建标注 map.addOverlay(marker); // 将标注添加到地图中 \",\"要想知道点的位置：https://api.map.baidu.com/lbsapi/getpoint/index.html 可以使用百度提供的坐标提取系统\",\"向地图中添加标注\",\"var myIcon = new BMapGL.Icon(\\\"markers.png\\\", new BMapGL.Size(23, 25), { // 指定定位位置。 // 当标注显示在地图上时，其所指向的地理位置距离图标左上 // 角各偏移10像素和25像素。您可以看到在本例中该位置即是 // 图标中央下端的尖角位置。 anchor: new BMapGL.Size(10, 25), // 设置图片偏移。 // 当您需要从一幅较大的图片中截取某部分作为标注图标时，您 // 需要指定大图的偏移位置，此做法与css sprites技术类似。 imageOffset: new BMapGL.Size(0, 0 - 25) // 设置图片偏移 }); // 创建标注对象并添加到地图 var marker = new BMapGL.Marker(point, {icon: myIcon}); map.addOverlay(marker); \",\"添加折线\",\"var polyline = new BMapGL.Polyline([ new BMapGL.Point(116.399, 39.910), new BMapGL.Point(116.405, 39.920), new BMapGL.Point(116.425, 39.900) ], {strokeColor:\\\"blue\\\", strokeWeight:2, strokeOpacity:0.5}); map.addOverlay(polyline); \",\"效果如下：\",\"添加地图点击事件：\",\"map.addEventListener('click', function(e) { alert('点击的经纬度：' + e.latlng.lng + ', ' + e.latlng.lat); var mercator = map.lnglatToMercator(e.latlng.lng, e.latlng.lat); alert('点的墨卡托坐标：' + mercator[0] + ', ' + mercator[1]); }); \",\"更换地图类型：\",\"map.setMapType(BMAP_EARTH_MAP); // 设置地图类型为地球模式 \",\"1.标准地图：BMAP_NORMAL_MAP 2.地球模式：BMAP_EARTH_MAP 3.普通卫星地图：BMAP_SATELLITE_MAP\"]},\"440\":{\"h\":\"检索服务\",\"t\":[\" var local = new BMapGL.LocalSearch(map, { renderOptions:{map: map} }); local.search(\\\"景点\\\"); \"]},\"441\":{\"h\":\"WebAPI使用\",\"t\":[\"创建ak的时候：白名单设置为：0.0.0.0/0\"]},\"442\":{\"h\":\"坐标转换\",\"t\":[\"https://lbsyun.baidu.com/faq/api?title=webapi/guide/changeposition-base\",\" @Test public void test() { String url = \\\"https://api.map.baidu.com/geoconv/v1/?coords=114.21892734521,29.575429778924&from=1&to=5&ak=\\\" + ak; String body = HttpRequest.get(url).execute().body(); System.out.println(body); } \",\"运行结果：\",\"{\\\"status\\\":0,\\\"result\\\":[{\\\"x\\\":114.2307519546763,\\\"y\\\":29.57908428837437}]} \"]},\"443\":{\"h\":\"IP定位服务\",\"t\":[\"https://lbs.baidu.com/faq/api?title=webapi/ip-api-base\",\"@Test public void test2(){ String url =\\\"https://api.map.baidu.com/location/ip?ip=111.206.214.37&coor=bd09ll&ak=\\\"+ak; String body = HttpRequest.get(url).execute().body(); System.out.println(body); } \",\"运行结果：\",\"{\\\"address\\\":\\\"CN|\\\\u5317\\\\u4eac\\\\u5e02|\\\\u5317\\\\u4eac\\\\u5e02|None|None|100|100\\\",\\\"content\\\":{\\\"address\\\":\\\"\\\\u5317\\\\u4eac\\\\u5e02\\\",\\\"address_detail\\\":{\\\"adcode\\\":\\\"110000\\\",\\\"city\\\":\\\"\\\\u5317\\\\u4eac\\\\u5e02\\\",\\\"city_code\\\":131,\\\"district\\\":\\\"\\\",\\\"province\\\":\\\"\\\\u5317\\\\u4eac\\\\u5e02\\\",\\\"street\\\":\\\"\\\",\\\"street_number\\\":\\\"\\\"},\\\"point\\\":{\\\"x\\\":\\\"116.41338370\\\",\\\"y\\\":\\\"39.91092455\\\"}},\\\"status\\\":0} \"]},\"444\":{\"h\":\"地点检索联想\",\"t\":[\"https://lbs.baidu.com/faq/api?title=webapi/guide/webservice-placeapi/use\",\" @Test public void test3() { String url = \\\"https://api.map.baidu.com/place/v2/search?query=ATM机&tag=银行&region=北京&output=json&ak=\\\" + ak; String body = HttpRequest.get(url).execute().body(); System.out.println(body); } \",\"运行结果：\",\"{ \\\"status\\\":0, \\\"message\\\":\\\"ok\\\", \\\"result_type\\\":\\\"poi_type\\\", \\\"results\\\":[ { \\\"name\\\":\\\"中国工商银行24小时自助银行(北京回龙观支行)\\\", \\\"location\\\":{ \\\"lat\\\":40.086878, \\\"lng\\\":116.361511 }, \\\"address\\\":\\\"北京市昌平区回龙观镇天龙苑25号楼1单元102室\\\", \\\"province\\\":\\\"北京市\\\", \\\"city\\\":\\\"北京市\\\", \\\"area\\\":\\\"昌平区\\\", \\\"street_id\\\":\\\"da9b8387f72f1c529de32146\\\", \\\"detail\\\":1, \\\"uid\\\":\\\"da9b8387f72f1c529de32146\\\" }, { \\\"name\\\":\\\"招商银行24小时自助银行服务(望京融科支行)\\\", \\\"location\\\":{ \\\"lat\\\":40.003785, \\\"lng\\\":116.489532 }, \\\"address\\\":\\\"北京市朝阳区望京东园523号融科望京中心A座101号\\\", \\\"province\\\":\\\"北京市\\\", \\\"city\\\":\\\"北京市\\\", \\\"area\\\":\\\"朝阳区\\\", \\\"street_id\\\":\\\"647a352e9bbbaa226268580a\\\", \\\"detail\\\":1, \\\"uid\\\":\\\"647a352e9bbbaa226268580a\\\" }, { \\\"name\\\":\\\"中国建设银行24小时自助银行(北京广顺北大街支行)\\\", \\\"location\\\":{ \\\"lat\\\":40.010135, \\\"lng\\\":116.47503 }, \\\"address\\\":\\\"北京市朝阳区望京西园二区211号\\\", \\\"province\\\":\\\"北京市\\\", \\\"city\\\":\\\"北京市\\\", \\\"area\\\":\\\"朝阳区\\\", \\\"street_id\\\":\\\"2f1f2bfb43807615d23ce33c\\\", \\\"detail\\\":1, \\\"uid\\\":\\\"2f1f2bfb43807615d23ce33c\\\" }, { \\\"name\\\":\\\"中国工商银行24小时自助银行(北京府学路支行)\\\", \\\"location\\\":{ \\\"lat\\\":40.227332, \\\"lng\\\":116.263379 }, \\\"address\\\":\\\"北京市昌平区府学路福地家园7号楼07号1-2层\\\", \\\"province\\\":\\\"北京市\\\", \\\"city\\\":\\\"北京市\\\", \\\"area\\\":\\\"昌平区\\\", \\\"street_id\\\":\\\"22e11407287926b4d5b74e09\\\", \\\"detail\\\":1, \\\"uid\\\":\\\"22e11407287926b4d5b74e09\\\" }, { \\\"name\\\":\\\"北京银行24小时自助银行服务\\\", \\\"location\\\":{ \\\"lat\\\":40.086083, \\\"lng\\\":116.344453 }, \\\"address\\\":\\\"北京市昌平区回龙观西大街19号北店时代广场E座\\\", \\\"province\\\":\\\"北京市\\\", \\\"city\\\":\\\"北京市\\\", \\\"area\\\":\\\"昌平区\\\", \\\"street_id\\\":\\\"0ed20a155aedbde956bfff9e\\\", \\\"detail\\\":1, \\\"uid\\\":\\\"0ed20a155aedbde956bfff9e\\\" }, { \\\"name\\\":\\\"中国建设银行ATM(昌平沙河支行)\\\", \\\"location\\\":{ \\\"lat\\\":40.12088, \\\"lng\\\":116.289465 }, \\\"address\\\":\\\"北京市昌平区京藏高速碧水庄园\\\", \\\"province\\\":\\\"北京市\\\", \\\"city\\\":\\\"北京市\\\", \\\"area\\\":\\\"昌平区\\\", \\\"street_id\\\":\\\"3eda5f5002bdd6fc40afe6d9\\\", \\\"detail\\\":1, \\\"uid\\\":\\\"3eda5f5002bdd6fc40afe6d9\\\" }, { \\\"name\\\":\\\"广发银行24小时自助银行服务\\\", \\\"location\\\":{ \\\"lat\\\":40.085671, \\\"lng\\\":116.599251 }, \\\"address\\\":\\\"北京市朝阳区航管南路北京首都国际机场T2航站楼P2停车场F1\\\", \\\"province\\\":\\\"北京市\\\", \\\"city\\\":\\\"北京市\\\", \\\"area\\\":\\\"朝阳区\\\", \\\"street_id\\\":\\\"\\\", \\\"detail\\\":1, \\\"uid\\\":\\\"e6ff32edf4232929fda778a3\\\" }, { \\\"name\\\":\\\"招商银行24小时自助银行(回龙观支行)\\\", \\\"location\\\":{ \\\"lat\\\":40.085153, \\\"lng\\\":116.344808 }, \\\"address\\\":\\\"北京市昌平区龙冠商务中心1层\\\", \\\"province\\\":\\\"北京市\\\", \\\"city\\\":\\\"北京市\\\", \\\"area\\\":\\\"昌平区\\\", \\\"street_id\\\":\\\"5165c94b870f3ec5d92f289b\\\", \\\"detail\\\":1, \\\"uid\\\":\\\"5165c94b870f3ec5d92f289b\\\" }, { \\\"name\\\":\\\"中国工商银行24小时自助银行服务(京奥嘉园支行)\\\", \\\"location\\\":{ \\\"lat\\\":39.967008, \\\"lng\\\":116.551822 }, \\\"address\\\":\\\"北京市朝阳区东坝乡京奥家园186幢一楼西侧\\\", \\\"province\\\":\\\"北京市\\\", \\\"city\\\":\\\"北京市\\\", \\\"area\\\":\\\"朝阳区\\\", \\\"street_id\\\":\\\"f757e6eee5b37817260bd043\\\", \\\"detail\\\":1, \\\"uid\\\":\\\"f757e6eee5b37817260bd043\\\" }, { \\\"name\\\":\\\"中国农业银行24小时自助银行(北京航天城支行)\\\", \\\"location\\\":{ \\\"lat\\\":40.085405, \\\"lng\\\":116.274654 }, \\\"address\\\":\\\"北京市海淀区友谊路193号\\\", \\\"province\\\":\\\"北京市\\\", \\\"city\\\":\\\"北京市\\\", \\\"area\\\":\\\"海淀区\\\", \\\"street_id\\\":\\\"dffd631c453f76bf38221c7a\\\", \\\"detail\\\":1, \\\"uid\\\":\\\"dffd631c453f76bf38221c7a\\\" } ] } \"]},\"445\":{\"h\":\"地图导航\",\"t\":[\"https://lbs.baidu.com/faq/api?title=webapi/webservice-direction/dirve\",\"@Test public void test4() { String url = \\\"https://api.map.baidu.com/direction/v2/driving?origin=40.01116,116.339303\\\" + \\\"&destination=39.936404,116.452562&ak=\\\" + ak; String body = HttpRequest.get(url).execute().body(); System.out.println(body); } \"]},\"446\":{\"c\":[\"Java\",\"地图API\"]},\"447\":{\"c\":[\"Java\",\"地图API\"]},\"448\":{\"h\":\"微信公众号开发\"},\"449\":{\"h\":\"基本配置\",\"t\":[\"官网：https://mp.weixin.qq.com/\"]},\"450\":{\"h\":\"配置内网穿透\",\"t\":[\"使用ngrok进行内网穿透。(这个方法不行，不要用了，可能是域名里面有-的影响) 错误链接：https://developers.weixin.qq.com/community/develop/doc/000684b1e282e0084f6ff3fcc5d000?highLine=-106\",\"ngrok http --domain=moving-enhanced-woodcock.ngrok-free.app 8080 \",\"使用natapp进行内网穿透： Nat官网：https://natapp.cn/ 注册好账号，在网站里面配置要映射的端口，然后启动\",\"./natapp -authtoken=你的token \"]},\"451\":{\"h\":\"注册一个测试号\",\"t\":[\"接入指南：https://developers.weixin.qq.com/doc/offiaccount/Basic_Information/Access_Overview.html 主要是配置接口信息，这里的URL需要填写刚才内网穿透的地址，并且需要返回微信需要的特定信息，如下： 开启端口映射：\",\"这是我提供的后端接口：\",\"/** * @author houyunfei */@RestController @RequestMapping(\\\"/wx\\\") @Slf4j public class WxController { @GetMapping(value = \\\"/hello\\\") public String hello() { return \\\"Hello, WeChat!\\\"; } /** * 微信接入验证 * * @param signature 签名 * @param timestamp 时间戳 * @param nonce 随机数 * @param echostr 随机字符串 */ @GetMapping(value = \\\"/signature\\\") public String signature(String signature, String timestamp, String nonce, String echostr, HttpServletResponse response) { log.info(\\\"signature: {}, timestamp: {}, nonce: {}, echostr: {}\\\", signature, timestamp, nonce, echostr); //请讲返回微信服务器的Respose的content-type字段，改成，text/html; charset=utf-8。 //怎么改？ answer: 在response header中设置content-type为text/html; charset=utf-8 response.setHeader(\\\"Content-Type\\\", \\\"text/html; charset=utf-8\\\"); return echostr; } } \",\"此时访问：http://yfjpvb.natappfree.cc/wx/signature 可以访问\",\"配置成功：\"]},\"452\":{\"h\":\"微信消息验证\",\"t\":[\"微信想要的验证方式如下：\",\"开发者通过检验signature对请求进行校验（下面有校验方式）。若确认此次GET请求来自微信服务器，请原样返回echostr参数内容，则接入生效，成为开发者成功，否则接入失败。加密/校验流程如下： 1）将token、timestamp、nonce三个参数进行字典序排序 2）将三个参数字符串拼接成一个字符串进行sha1加密 3）开发者获得加密后的字符串可与signature对比，标识该请求来源于微信\",\"校验的工具类：\",\"public class WxUtils { public static final String token = \\\"123\\\"; /** * 校验签名 * * @param signature 签名 * @param timestamp 时间戳 * @param nonce 随机数 * @return 布尔值 */ public static boolean checkSignature(String signature, String timestamp, String nonce) { String checktext = null; if (null != signature) { // 对ToKen,timestamp,nonce 按字典排序 String[] paramArr = new String[]{token, timestamp, nonce}; Arrays.sort(paramArr); // 将排序后的结果拼成一个字符串 String content = paramArr[0].concat(paramArr[1]).concat(paramArr[2]); try { MessageDigest md = MessageDigest.getInstance(\\\"SHA-1\\\"); // 对接后的字符串进行sha1加密 byte[] digest = md.digest(content.toString().getBytes()); checktext = byteToStr(digest); } catch (NoSuchAlgorithmException e) { e.printStackTrace(); } } // 将加密后的字符串与signature进行对比 return checktext != null ? checktext.equals(signature.toUpperCase()) : false; } /** * 将字节数组转化我16进制字符串 * * @param byteArrays 字符数组 * @return 字符串 */ private static String byteToStr(byte[] byteArrays) { String str = \\\"\\\"; for (int i = 0; i < byteArrays.length; i++) { str += byteToHexStr(byteArrays[i]); } return str; } /** * 将字节转化为十六进制字符串 * * @param myByte 字节 * @return 字符串 */ private static String byteToHexStr(byte myByte) { char[] Digit = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}; char[] tampArr = new char[2]; tampArr[0] = Digit[(myByte >>> 4) & 0X0F]; tampArr[1] = Digit[myByte & 0X0F]; String str = new String(tampArr); return str; } } \",\"完善验证逻辑：\",\"/** * 微信接入验证 * * @param signature 签名 * @param timestamp 时间戳 * @param nonce 随机数 * @param echostr 随机字符串 */ @GetMapping(value = \\\"/signature\\\") public String signature(String signature, String timestamp, String nonce, String echostr) { log.info(\\\"signature: {}, timestamp: {}, nonce: {}, echostr: {}\\\", signature, timestamp, nonce, echostr); boolean res = WxUtils.checkSignature(signature, timestamp, nonce); return res ? echostr : \\\"error\\\"; } \"]},\"453\":{\"h\":\"接收普通消息\",\"t\":[\"https://developers.weixin.qq.com/doc/offiaccount/Message_Management/Receiving_standard_messages.html\",\"注意：这里发送普通消息他调用的接口是一开始填的，所以我改成了http://tdikru.natappfree.cc/wx/\",\"@PostMapping(\\\"/\\\") public String post(HttpServletRequest request) { log.info(\\\"接收到消息\\\"); return \\\"success\\\"; } \",\"关注测试公众号，随便发送消息：\",\"接收消息： dom4j用来转换接收到的消息，xstream用来发送xml类型消息。\",\"<dependency> <groupId>com.thoughtworks.xstream</groupId> <artifactId>xstream</artifactId> <version>1.4.19</version> </dependency> <dependency> <groupId>org.dom4j</groupId> <artifactId>dom4j</artifactId> <version>2.1.3</version> </dependency> \",\"根据消息进行封装：\",\"封装实体类：\",\"@Data @XStreamAlias(\\\"xml\\\") public class TextMessage { @XStreamAlias(\\\"ToUserName\\\") private String toUserName; @XStreamAlias(\\\"FromUserName\\\") private String fromUserName; @XStreamAlias(\\\"CreateTime\\\") private Long createTime; @XStreamAlias(\\\"MsgType\\\") private String ssgType; @XStreamAlias(\\\"Content\\\") private String content; @XStreamAlias(\\\"MsgId\\\") private Long ssgId; @XStreamAlias(\\\"MsgDataId\\\") private String ssgDataId; @XStreamAlias(\\\"Idx\\\") private String idx; } \",\"具体的响应用户发送消息的代码：\",\"/** * 接收微信用户发送来的消息 * * @param request 请求 * @return 返回消息 * @throws IOException */@PostMapping(\\\"/\\\") public String receiveMessage(HttpServletRequest request) throws IOException { ServletInputStream inputStream = request.getInputStream(); HashMap<String, String> map = new HashMap<>(); SAXReader reader = new SAXReader(); try { Document document = reader.read(inputStream); Element root = document.getRootElement(); List<Element> elements = root.elements(); for (Element element : elements) { map.put(element.getName(), element.getStringValue()); } } catch (DocumentException e) { throw new RuntimeException(e); } System.out.println(map); log.info(\\\"接收到消息\\\"); String message = getReplyMessage(map); return message; } /** * 获取回复消息 发送给用户 xml格式 * * @param map * @return */ private String getReplyMessage(HashMap<String, String> map) { TextMessage message = new TextMessage(); message.setToUserName(map.get(\\\"FromUserName\\\")); message.setFromUserName(map.get(\\\"ToUserName\\\")); message.setCreateTime(System.currentTimeMillis()); message.setSsgType(\\\"text\\\"); message.setContent(\\\"小黑子，欢迎关注本公众号！\\\"); // XStream将对象转换为xml字符串 XStream xStream = new XStream(); xStream.processAnnotations(TextMessage.class); String xml = xStream.toXML(message); return xml; } \",\"结果如下：\"]},\"454\":{\"h\":\"开发案例：获取同义词\",\"t\":[\"System.out.println(map); log.info(\\\"接收到消息\\\"); String content = map.get(\\\"Content\\\"); if (content.contains(\\\"同义词\\\")) { String[] split = content.split(\\\" \\\"); String word = split[1]; String res = WordUtils.getWord(word); TextMessage message = new TextMessage(); message.setToUserName(map.get(\\\"FromUserName\\\")); message.setFromUserName(map.get(\\\"ToUserName\\\")); message.setCreateTime(System.currentTimeMillis()); message.setSsgType(\\\"text\\\"); message.setContent(res); // XStream将对象转换为xml字符串 XStream xStream = new XStream(); xStream.processAnnotations(TextMessage.class); String xml = xStream.toXML(message); return xml; } \",\"得到结果：\"]},\"455\":{\"h\":\"图文消息回复\",\"t\":[\"点击链接\",\"private String getReplyNewsMessage(HashMap<String, String> map) { NewsMessage newsMessage = new NewsMessage(); newsMessage.setToUserName(map.get(\\\"FromUserName\\\")); newsMessage.setFromUserName(map.get(\\\"ToUserName\\\")); newsMessage.setCreateTime(System.currentTimeMillis() / 1000); newsMessage.setMsgType(\\\"news\\\"); newsMessage.setArticleCount(1); List<Article> articles = new ArrayList<>(); Article article = new Article(); article.setTitle(\\\"跟着ikun学Java，最新教程！\\\"); article.setDescription(\\\"来自于Ikun学习Java，详细的Java开发教程\\\"); article.setPicUrl(\\\"http://yunfei.plus/site_logo.png\\\"); articles.add(article); newsMessage.setArticles(articles); XStream xStream = new XStream(); xStream.processAnnotations(NewsMessage.class); return xStream.toXML(newsMessage); } \",\"效果如下：\"]},\"456\":{\"h\":\"微信功能开发\"},\"457\":{\"h\":\"获取Access_token\",\"t\":[\"https://developers.weixin.qq.com/doc/offiaccount/Basic_Information/Get_access_token.html\",\"String url = \\\"https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=\\\" + APPID + \\\"&secret=\\\" + APPSECRET; // 发送请求 String result = HttpUtil.get((url)); System.out.println(result); return result; \",\"报错：原因是因为接口不在白名单\",\"配置IP白名单，把刚刚报错的IP输入进去：\",\"拿到结果：\",\"封装结果：\",\"@Data public class AccessToken { private String access_token; private long expires_in; public void setExpires_in(long expires_in) { this.expires_in = System.currentTimeMillis() + expires_in * 1000; } public boolean isExpired() { return System.currentTimeMillis() > expires_in; } } \",\"获取Token的代码，和单例模式非常像，并发问题？\",\"public static AccessToken token = new AccessToken(); public static void getAccessToken() { String APPID = \\\"xx\\\"; String APPSECRET = \\\"xx\\\"; String url = \\\"https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=\\\" + APPID + \\\"&secret=\\\" + APPSECRET; // 发送请求 String result = HttpUtil.get((url)); //{\\\"access_token\\\":\\\"xxx\\\",\\\"expires_in\\\":7200} // 解析 JSONObject jsonObject = JSONUtil.parseObj(result); String accessToken = jsonObject.getStr(\\\"access_token\\\"); long expiresIn = jsonObject.getLong(\\\"expires_in\\\"); token.setAccessToken(accessToken); token.setExpiresIn(expiresIn); } public static String getToken() { if (token == null || token.isExpired()) { getAccessToken(); } return token.getAccessToken(); } \"]},\"458\":{\"h\":\"自定义菜单\",\"t\":[\"链接：https://developers.weixin.qq.com/doc/offiaccount/Custom_Menus/Creating_Custom-Defined_Menu.html\",\"没有认证弄不了\"]},\"459\":{\"c\":[\"微信公众号\"]},\"460\":{\"c\":[\"微信公众号\"]},\"461\":{\"h\":\"MySQL面试题\"},\"462\":{\"h\":\"基础\"},\"463\":{\"h\":\"MySQL执行流程\",\"t\":[\"MYSQL执行流程如下：\",\"建立连接：客户端与MYSQL服务器建立连接，涉及TCP/IP握手以及身份验证\",\"查询缓存：查询语句可能会被查询缓存命中，如果之前执行过相同的查询，并且结果没有发生变化，则直接从缓存中返回结果\",\"解析SQL：数据库系统通过解析器对SQL查询语句进行词法分析和语法分析，构建语法树\",\"执行SQL： \",\"预处理阶段（Preprocessing）：检查表和字段是否存在，将查询中的符号扩展为实际的列。\",\"优化阶段（Query Optimization）：数据库系统根据查询的成本考虑选择最优的执行计划。\",\"执行阶段（Query Execution）：数据库系统根据优化器选择的执行计划执行SQL查询，将符合条件的结果返回给客户端。\"]},\"464\":{\"h\":\"索引\"},\"465\":{\"h\":\"了解过索引吗\",\"t\":[\"索引(index)是帮助MySQL高效获取数据的数据结构（有序）。在数据之外，数据库系统还维护着满足特定查找算法的数据结构(B+树)，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查找算法这种数据结构就是索引。\",\"MYSQL底层采用的数据结构是B+树\",\"B-Tree树：\",\"B+ Tree\",\"了解过索引吗？\",\"索引(index)是帮助小ySQL高效获取数据的数据结构（有序）\",\"提高数据检索的效率，降低数据库的O成本（不需要全表扫描）\",\"通过索引列对数据进行排序，降低数据排序的成本，降低了CPU的消耗 索引的底层数据结构了解过嘛？\",\"MySQL的InnoDB引擎采用的B+树的数据结构来存储索引\",\"阶数更多，路径更短\",\"磁盘读写代价B+树更低，非叶子节点只存储指针，叶子阶段存储数据\",\"B+树便于扫库和区间查询，叶子节点是一个双向链表\"]},\"466\":{\"h\":\"聚簇索引\",\"t\":[\"聚簇索引（Clustered Index）是一种特殊类型的索引，它改变了数据存储的物理结构以优化性能。在聚簇索引中，索引的键值决定了数据行在磁盘上的物理存储顺序，因此数据行的存储顺序与索引的顺序一致。\",\"聚集泰l(Clustered Index)将数据存储与索引放到了一块，索引结构的叶子节点保存了行数据，必须有，而且只有一个\",\"二级索引(Secondary Index)将数据与索引分开存储，索引结构的叶子节点关联的是对应的主键，可以存在多个 聚簇索引的选取规则：\",\"如果存在主键，主键索引就是聚集索引。\",\"如果不存在主键，将使用第一个唯一(UNIQUE)索引作为聚集索引。\",\"如果表没有主键，或没有合适的唯一索引，则InnoDB:会自动生成一个rowid作为隐藏的聚集索引。\",\"回表查询 回表查询是指在使用覆盖索引（Covering Index）时，虽然索引已经包含了查询需要的所有列，但为了获取完整的结果集，数据库仍然需要通过主键或者聚簇索引回到数据表中进行进一步的查询。这种额外的查询操作被称为回表查询。\",\"面试题回答： 什么是聚簇索引什么是非聚簇索引？\",\"聚簇索引（聚集索引）：数据与索引放到一块，B+树的叶子节点保存了整行数据，有且只有一个\",\"非聚簇索引（二级索）：数据与索引分开存储，B+树的叶子节点保存对应的主键，可以有多个 知道什么是回表查询嘛？\",\"通过二级索引找到对应的主键值，到聚集索引中查找整行数据，这个过程就是回表\"]},\"467\":{\"h\":\"覆盖索引\",\"t\":[\"覆盖索引（Covering Index）是一种特殊类型的索引，它包含了查询所需的所有列，可以完全满足查询需求，而不需要额外地回到数据表中去获取数据。因此，覆盖索引可以避免回表查询，提高查询性能。\",\"回表查询： 比如查询id，name，gender的时候，gender没有索引 ，查不到，回进行 回表查询\",\"回答面试： 知道什么叫覆盖索引嘛？\",\"覆盖索引是指查询使用了索引，返回的列，必须在索引中全部能够找到\",\"使用id查询，直接走聚集索引查询，一次索引扫描，直接返回数据，性能高。\",\"如果返回的列中没有创建索引，有可能会触发回表查询，尽量避免使用select*\"]},\"468\":{\"h\":\"MYSQL超大分页怎么处理？\",\"t\":[\"可以使用覆盖索引解决 回答问题： MYSQL超大分页怎么处理？ 问题：在数据量比较大时，imt分页查询，需要对数据进行排序，效率低\",\"解决方案：覆盖索引+子查询\",\"select * from tb_sku t, (select id from tb_sku order by id limit 9000000,10) a where t.id =a.id \"]},\"469\":{\"h\":\"索引创建 的原则\",\"t\":[\"1).针对于数据量较大，且查询比较频繁的表建立索引。单表超过10万数据（增加用户体验） 2).针对于常作为查询条件(where)、排序(order by)、分组(group by)操作的字段建立索引。 3).尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高。 4).如果是字符串类型的字段，字段的长度较长，可以针对于字段的特点，建立前缀索引。 5).尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率。 6).要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价也就越大，会影响增删改的效率。 7).如果索引列不能存储NULL值，请在创建表时使用NOT NULL约束它。当优化器知道每列是否包含NULL值时，它可以更好地确定哪个索引最有效地用于查询。\"]},\"470\":{\"h\":\"索引失效\",\"t\":[\"1.查询条件不满足索引最左前缀原则：\",\"在使用联合索引时，如果查询条件不满足索引的最左前缀原则，索引可能会失效。\",\"这意味着索引只能有效利用查询条件的最左边部分，而不能跳过中间的列。\",\"如图，索引有三个\",\"当跳过某一列的时候，索引会失效：\",\"范围查询右边的列，不能使用索引\",\"不要在索引列上进行运算操作，索引将失效。\",\"字符串不加单引号，造成索引失效\",\"%开头模糊查询导致索引失效\",\"回答面试： 什么情况下索引会失效？\",\"违反最左前缀法则\",\"范围查询右边的列，不能使用索\",\"不要在索引列上进行运算操作，索引将失效\",\"字符串不加单引号，造成索引失效。（类型转换）\",\"以%开头的Like模糊查询，索引失效\"]},\"471\":{\"h\":\"事务\"},\"472\":{\"h\":\"ACID\",\"t\":[\"ACID是什么？可以详细说一下吗？\",\"原子性(Atomicity）：事务是不可分割的最小操作单元，要么全部成功，要么全部失败。\",\"一致性(Consistency）:事务完成时，必须使所有的数据都保持一致状态。\",\"隔离性(Isolation)：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。\",\"持久性(Durability）：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的。 结合转账的案例来说\"]},\"473\":{\"h\":\"并发事务问题\",\"t\":[\"问题\",\"描述\",\"脏读\",\"一个事务读到另外一个事务还没有提交的数据。\",\"不可重复读\",\"一个事务先后读取同一条记录，但两次读取的数据不同，称之为不可重复读。\",\"幻读\",\"一个事务按照条件查询数据时，没有对应的数据行，但是在插入数据时，又发现这行数据已经存在，好像出现了”幻影”。\"]},\"474\":{\"h\":\"事务隔离级别\",\"t\":[\"隔离级别\",\"脏读\",\"不可重复读\",\"幻读\",\"未提交读\",\"1\",\"1\",\"1\",\"读已提交\",\"0\",\"1\",\"1\",\"默认可重复读\",\"0\",\"0\",\"1\",\"串行化\",\"0\",\"0\",\"0\",\"事务隔离级别越高，数据越安全，但是性能越低。\"]},\"475\":{\"h\":\"undo log和redo log\",\"t\":[\"redo log 如下： 重做日志，记录的是事务提交时数据页的物理修改，是用来实现事务的持久性。 该日志文件由两部分组成：重做日志缓冲(redo log buffer)以及重做日志文件(redo log file),前者是在内存中，后者在磁盘中。当事 务提交之后会把所有修改信息都存到该日志文件中，用于在刷新脏页到磁盘，发生错误时，进行数据恢复使用。\",\"undo log\",\"回滚日志，用于记录数据被修改前的信息，作用包含两个：提供回滚和MVCC(多版本并发控制)。undo log和redo log记录物理日志不一样，它是逻辑日志。\",\"可以认为当delete-一条记录时，undo log中会记录一条对应的insert记录，反之亦然，\",\"当update-一条记录时，它记录一条对应相反的update记录。当执行rollback时，就可以从undo log中的逻辑记录读取到相应的内容并进行回滚。\",\"undo log 和redo log区别\",\"redo log:记录的是数据页的物理变化，服务宕机可用来同步数据\",\"undo log:记录的是逻辑日志，当事务回滚时，通过逆操作恢复原来的数据\",\"redo log保证了事务的持久性，undo log保证了事务的原子性和一致性\"]},\"476\":{\"h\":\"事务中的隔离性是如何保证的呢？\",\"t\":[\"锁：排他锁（如一个事务获取了一个数据行的排他锁，其他事务就不能再获取该行的其他锁）\",\"mvcc:多版本并发控制 你解释一下MVCC? 全称Multi-Version Concurrency Control,.多版本并发控制。指维护一个数据的多个版本，使得读写操作没有冲突，MVCC的具体实现，主要依赖于数据库记录中的隐式字段、undo log日志、readView.。 MVCC的实现原理如下：\",\"版本号管理： \",\"每个数据行都有一个版本号，用于标识数据的修改版本。\",\"当一个事务对数据行进行更新时，系统会为新的数据行创建一个新版本，并将旧版本标记为无效。\",\"读取操作： \",\"当一个事务需要读取数据时，系统会根据事务的隔离级别选择合适的数据版本。\",\"在读取时，系统会忽略被其他事务修改的数据行，而只读取有效版本的数据行。\",\"写入操作： \",\"当一个事务对数据行进行更新时，系统会为新的数据行创建一个新版本，并将旧版本标记为无效。\",\"事务对数据行的修改不会影响到正在读取旧版本数据行的其他事务。\",\"快照读取： \",\"在一些隔离级别下，系统会为每个事务创建一个快照（Snapshot），用于读取数据时使用。\",\"快照包含了事务开始时数据库中所有数据行的有效版本，事务可以根据快照读取数据，而不受其他事务的影响。\",\"回滚段： \",\"当一个事务对数据进行更新时，系统会在回滚段（Undo Segment）中保存原始数据的副本。\",\"如果事务需要回滚，系统可以使用回滚段中的数据副本来恢复数据。\",\"回答问题： 事务中的隔离性是如何保证的呢？（你解释一下MVCC) MySQL中的多版本并发控制。指维护一个数据的多个版本，使得读写操作没有冲突\",\"隐藏字段： ①trx id(事务id),记录每一次操作的事务id,是自增的 ②roll pointer(回滚指针)，指向上一个版本的事务版本记录地址\",\"undo log: ①回滚日志，存储老版本数据 ②版本链：多个事务并行操作某一行记录，记录不同事务修改数据的版本，通过roll pointer指针形成一个链表\",\"readView解决的是一个事务查询选择版本的问题 \",\"根据readView的匹配规则和当前的一些事务id判断该访问那个版本的数据\",\"不同的隔离级别快照读是不一样的，最终的访问的结果不一样\",\"RC：每一次执行快照读时生成ReadView\",\"RR：仅在事务中第一次执行快照读时生成ReadView,后续复用\"]},\"477\":{\"h\":\"主从同步\",\"t\":[\"MySQL主从复制的核心就是二进制日志 二进制日志(BINLOG)记录了所有的DDL(数据定义语言)语句和DML(数据操纵语言)语句，但不包括数据查询(SELECT、SHOW)语句。\",\"MySQL主从复制的核心就是二进制日志binlog(DDL(数据定义语言)语句和DML(数据操纵语言)语句) ①主库在事务提交时，会把数据变更记录在二进制日志文件Binlog中。 ②从库读取主库的二进制日志文件Binlog,写入到从库的中继日志Relay Log。 ③从库重做中继日志中的事件，将改变反映它自己的数据\"]},\"478\":{\"h\":\"分库分表\",\"t\":[\"分库分表是一种数据库水平拆分（Sharding）的策略，用于解决单一数据库服务器无法满足大规模数据存储和处理需求的问题。在分库分表中，数据库中的数据被拆分成多个数据库实例和表集合，每个数据库实例和表集合负责存储和处理部分数据，从而提高系统的扩展性、性能和可用性。\",\"水平分库\",\"水平分表：\",\"问题：\",\"面试题：\",\"业务介绍\",\"根据自己简历上的项目，想一个数据量较大业务（请求数多或业务累积大）\",\"达到了什么样的量级（单表1000万或超过20G)\",\"具体拆分策略\",\"水平分库，将一个库的数据拆分到多个库中，解决海量数据存储和高并发的问题\",\"水平分表，解决单表存储和性能的问题\",\"垂直分库，根据业务进行拆分，高并发下提高磁盘O和网络连接数\",\"垂直分表，冷热数据分离，多表互不影响\"]},\"479\":{\"h\":\"锁\"},\"480\":{\"h\":\"日志\"},\"481\":{\"h\":\"内存\"},\"482\":{\"h\":\"触发器\"},\"483\":{\"h\":\"视图\"},\"484\":{\"h\":\"优化\"},\"485\":{\"h\":\"在MySQL中，如何定位慢查询？\",\"t\":[\"解决办法：\",\"使用开源工具 \",\"调试工具：Arthas\",\"运维工具：Prometheus,Skywalking，\",\"使用MYSQL自带的慢日志 \",\"在MySQL配置文件中启用慢查询日志。可以通过设置slow_query_log参数为1来启用。\",\"设置long_query_time参数，指定查询运行时间超过多少秒才会被记录到慢查询日志中，默认值为10秒。\",\"使用log_queries_not_using_indexes参数来记录未使用索引的查询。\",\"重启MySQL服务使配置生效。\",\"查看慢查询日志文件，通常位于MySQL的数据目录下，默认名称为hostname-slow.log。例如/var/lib/mysql/localhost-sow.log\",\"在查询前添加EXPLAIN关键字，可以让MySQL解释执行查询的计划。通过查看执行计划，可以确定查询是否使用了索引，以及是否存在性能问题。\"]},\"486\":{\"h\":\"SQL语句执行很慢，如何分析？\",\"t\":[\"对于聚合查询：可以新增一个临时表 对于多表查询：可以优化SQL结构 对于表数据量过大的查询：分析SQL 语句\",\"可以使用explain或者desc明亮来获取mysql执行的select语句信息，直接加在select前面即可\",\"id： \",\"这是查询中每个操作的标识符。\",\"对于复杂查询，可以通过该字段查看操作之间的父子关系。\",\"select_type： \",\"表示每个查询中的查询类型。\",\"可能的值包括：SIMPLE（简单查询）、PRIMARY（主查询）、SUBQUERY（子查询）、DERIVED（派生表查询）、UNION（联合查询）等。\",\"table： \",\"显示查询涉及的表名。\",\"如果查询涉及多个表，会显示使用的连接方式。\",\"partitions： \",\"表示查询使用的分区（如果适用）。\",\"type： \",\"表示MySQL在表中找到所需行的方式。\",\"常见的值有：ALL（全表扫描）、index（使用索引扫描）、range（范围扫描）、ref（基于索引的等值查找）、const（常量表）等。\",\"possible_keys： \",\"显示可能用于此查询的索引。\",\"如果MySQL选择了其中一个索引来执行查询，则该索引会在key字段中显示。\",\"key： \",\"表示MySQL实际选择用于查询的索引。\",\"如果该字段显示为NULL，则表示未使用索引，可能需要考虑创建适当的索引。\",\"type这条sql的连接的类型，性能由好到差为NULL、system、const、.eq_ref、ref range、index、all。system:查询系统中的表，const:根据主键查询，eq ref:主键索引查询或唯一索引查询，ref:索引查询，range:范围查询，index:索引树扫描，all:全盘扫描\",\"key_len： \",\"表示使用的索引的长度。\",\"可以帮助你了解索引的效率和覆盖范围。\",\"ref： \",\"显示索引之间的列之间的比较。\",\"对于使用索引的查询，此字段显示与索引列进行比较的列名。\",\"rows： \",\"表示MySQL预计扫描的行数。\",\"这是MySQL优化器根据统计信息估算的值，实际执行时可能会有所不同。\",\"filtered： \",\"表示从表中检索出的行的百分比。\",\"这是根据WHERE条件和表的统计信息估算的。\",\"Extra： \",\"提供其他信息，如使用临时表、文件排序、使用索引提示等。\",\"这里可能包含一些提示，帮助你理解查询执行的情况。\",\"对于 extra的额外建议：\",\"using where;using index,查找使用了索引，需要的数据都在索引列中能找到，不需要回表查询数据\",\"using index condition:查找使用了索引，但是需要回表查询数据\"]},\"487\":{\"h\":\"SQL优化经验\",\"t\":[\"表的设计优化 表的设计优化（参考阿里开发手册《嵩山版》） ①比如设置合适的数值(tinyint int bigint),要根据实际情况选择 ②比如设置合适的字符串类型(char和varchar)char定长效率高，varchari可变长度，效率稍低\",\"索引优化\",\"SQL语句优化 ①SELECT语句务必指明字段名称（避免直接使用select*) ②SQL语句要避免造成索引失效的写法 ③尽量用union all代替union union会多一次过滤，效率低 ④避免在where子句中对字段进行表达式操作 ⑤Join优化能用innerjoin就不用left join right join,如必须使用一定要以小表为驱动，内连接会对两个表进行优化，优先把小表放到外边，把大表放到里边。left join或right join,不会重新调整顺序\",\"主从复制、读写分离 如果数据库的使用场景读的操作比较多的时候，为了避免写的操作所造成的性能影响可以采用读写分离的架构。读写分离解决的是，数据库的写入，影响了查询的效率。\",\"分库分表\"]},\"488\":{\"c\":[\"MySQL\",\"面试\"]},\"489\":{\"c\":[\"MySQL\",\"面试\"]},\"490\":{\"h\":\"使用策略模式消除ifelse\",\"t\":[\"有这样的场景，根据不同的套餐，有不同的计算方式，全部在一个函数里面，使用if+else不停的判断，导致一个方法堆了成百上千行，而且不同的service里面都有这个关于不同套餐的计算方式。为了解决这个问题，学习使用策略模式消除，使得代码遵循开闭原则，新增新的套餐会变得容易\"]},\"491\":{\"h\":\"策略模式\",\"t\":[\"代码\",\"现在有一个coding函数，我们想要根据传入的codeType来进行判断使用那个编辑器coding，如果这样ifelse写的话，每次新加一个编辑器，这边都要进行修改，不符合软件设计的开闭原则。\",\"public void coding(String codeType) { if (Objects.equals(\\\"IDEA\\\", codeType)) { System.out.println(\\\"使用IDEA编码\\\"); } else if (Objects.equals(\\\"Eclipse\\\", codeType)) { System.out.println(\\\"使用Eclipse编码\\\"); } //... } \",\"修改\",\"我们先定义一个编码接口\",\"public interface Program { void coding(); } \",\"然后去实现不同种的编码方案：\",\"public class Eclipse implements Program{ @Override public void coding() { System.out.println(\\\"使用Eclipse编码\\\"); } } public class IDEA implements Program{ @Override public void coding() { System.out.println(\\\"使用IDEA编码\\\"); } } \",\"使用\",\"定义一个操作类，注入Program\",\"private Program program; public StrategyPattern(Program program) { this.program = program; } public Program getProgram() { return program; } public void setProgram(Program program) { this.program = program; } public void startCoding(){ program.coding(); } \",\"测试\",\" public void coding(String codeType) { switch (codeType) { case \\\"Eclipse\\\": new StrategyPattern(new Eclipse()).startCoding(); break; case \\\"IDEA\\\": new StrategyPattern(new IDEA()).startCoding(); break; default: System.out.println(\\\"使用其他IDE编码\\\"); } } \",\"这样其实还是ifelse，但是代码会简洁很多更容易维护，下面进行消除\"]},\"492\":{\"h\":\"策略模式+工厂模式+模版方法\",\"t\":[\"上面的代码其实还是有点冗余问题，我们可以使用策略模式+工厂模式+模版方法接口，\",\"todo\"]},\"493\":{\"h\":\"策略枚举\",\"t\":[\"定义一个枚举类，表示有哪些分支：\",\"public enum ProgramEnums { ECLIPSE(\\\"Eclipse\\\"), IDEA(\\\"IDEA\\\"); private String codeType; ProgramEnums(String codeType) { this.codeType = codeType; } public String getCodeType() { return codeType; } } \",\"定义一个工厂类，用来根据type获取对应的实现\",\"public class ProgramFactory { private static final Map<String, Program> PROGRAM_MAP = new HashMap<>(); static { PROGRAM_MAP.put(\\\"Eclipse\\\", new Eclipse()); PROGRAM_MAP.put(\\\"IDEA\\\", new IDEA()); } public static Map<String, Program> getProgramMap(String codeType) { return PROGRAM_MAP; } } \",\"使用：\",\"public static void main(String[] args) { String codeType = \\\"IDEA\\\"; Program programMap = ProgramFactory.getProgramMap(codeType); programMap.coding(); } \"]},\"494\":{\"c\":[\"Java\",\"设计模式\"]},\"495\":{\"c\":[\"Java\",\"设计模式\",\"策略模式\"]},\"496\":{\"h\":\"IDEA插件开发-Chatgpt\",\"t\":[\"启动报错：\",\"解决办法：https://stackoverflow.com/questions/61434438/intellij-plugin-development-class-not-found\",\"把kotlin目录下的文件放到Java目录下\",\"显示：\",\"成功：\"]},\"497\":{\"c\":[\"IDEA\"]},\"498\":{\"c\":[\"IDEA\"]},\"499\":{\"h\":\"ikun伙伴匹配系统1\",\"t\":[\"介绍：帮助大家找到志同道合的ikun\"]},\"500\":{\"h\":\"需求分析\",\"t\":[\"用户去添加标签，标签的分类（要有哪些标签，怎么把标签进行分类） 学习方向 java/c++，工作/大学\",\"主动搜索，允许用户根据标签去搜索其他用户 \",\"Redis缓存\",\"组队 \",\"创建队伍\",\"加入队伍\",\"根据标签查询队伍\",\"邀请其他人\",\"允许用户去修改标签\",\"推荐 \",\"相似度计算算法+本地式分布式计算\"]},\"501\":{\"h\":\"技术栈\"},\"502\":{\"h\":\"前端\",\"t\":[\"Vue3 开发框架\",\"Vant UI （基于Vue的移动组件库） （React版Zent）\",\"Vite\",\"nginx来单机部署\"]},\"503\":{\"h\":\"后端\",\"t\":[\"Java+Springboot框架\",\"SpringMVC+Mybatis+MybatisPlus\",\"MySQL数据库\",\"Redis缓存\",\"Swagger+Knife4j接口文档\"]},\"504\":{\"h\":\"前端项目初始化\",\"t\":[\"Vue：https://cn.vuejs.org/\",\"Vite：https://cn.vitejs.dev/\",\"Vant：https://vant-contrib.gitee.io/vant/#/zh-CN/home\",\"用脚手架初始项目\",\"yarn create vite \",\"整合组件库 Vant\",\"yarn add vant \",\"按需引入组件：\",\"yarn add @vant/auto-import-resolver unplugin-vue-components -D \",\"配置插件：\",\"import vue from '@vitejs/plugin-vue'; import Components from 'unplugin-vue-components/vite'; import { VantResolver } from '@vant/auto-import-resolver'; export default { plugins: [ vue(), Components({ resolvers: [VantResolver()], }), ], }; \",\"注意！\",\"有些样式样式还是需要自己引入\"]},\"505\":{\"h\":\"前端主页+组件\",\"t\":[\"导航条：展示当前页面名称：\",\"主页搜索框=>搜索页=>搜索结果页（标签筛选页面）\",\"内容\",\"tab栏：\",\"主页（推荐页） \",\"搜索框\",\"banner\",\"推荐信息流\",\"队伍页\",\"用户页（消息->考虑邮件发送方式）\"]},\"506\":{\"h\":\"添加navbar导航栏\",\"t\":[\" <van-nav-bar title=\\\"标题\\\" left-text=\\\"返回\\\" right-text=\\\"按钮\\\" left-arrow @click-left=\\\"onClickLeft\\\" @click-right=\\\"onClickRight\\\" > <template #right> <van-icon name=\\\"search\\\" size=\\\"18\\\" /> </template> </van-nav-bar> \",\"const onClickLeft = () => history.back(); const onClickRight = () => showToast('按钮'); \",\"页面效果如下：\"]},\"507\":{\"h\":\"添加tabbar标签栏\",\"t\":[\"vue页面\",\" <van-tabbar v-model=\\\"active\\\" @change=\\\"onChange\\\"> <van-tabbar-item icon=\\\"home-o\\\" name=\\\"index\\\">主页</van-tabbar-item> <van-tabbar-item icon=\\\"search\\\" name=\\\"team\\\">队伍</van-tabbar-item> <van-tabbar-item icon=\\\"friends-o\\\" name=\\\"user\\\">个人</van-tabbar-item> </van-tabbar> \",\"ts\",\"const active = ref(\\\"index\\\"); const onChange = (index) => showToast(`标签 ${index}`); \",\"效果如下\",\"页面的切换，组件化思想\",\" <div id=\\\"content\\\"> <template v-if=\\\"active==='index'\\\"> <Index/> </template> <template v-else-if=\\\"active==='team'\\\"> <Team/> </template> </div> \"]},\"508\":{\"h\":\"数据库设计\",\"t\":[\"标签的分类（要有哪些标签，怎么把标签进行分类）\",\"标签表（分类表）\",\"建议用标签，不要用分类，更灵活\",\"性别：男，女\",\"方向：Java，c++，go，前端\",\"目标：考研，春招，秋招，社招，考公，竞赛，转行，跳槽\",\"段位：初级，中级，高级，王者\",\"身份：大一，大二，大三，大四，学生，待业，以就业，研一，研二，研三\",\"状态：乐观，消极，一般，单身，已婚，有对象\"]},\"509\":{\"h\":\"标签表\",\"t\":[\"字段\",\"类型\",\"备注\",\"id\",\"int\",\"主键\",\"tagName\",\"varchar\",\"标签名，唯一，索引\",\"userId\",\"int\",\"上传标签的用户,普通索引\",\"parentId\",\"int\",\"父标签id\",\"isParent\",\"tinyint\",\"是否为父标签\",\"createTime\",\"datetime\",\"创建时间\",\"updateTime\",\"datetime\",\"修改时间\",\"isDelete\",\"tinyint\",\"是否删除\",\"怎么查询所有标签，并且把标签分好组？ 根据父标签id查询\",\"根据父标签查询子标签？根据id查询\",\"create table tag ( id bigint auto_increment comment 'id' primary key, tagName varchar(256) null comment '标签名称', userId bigint null comment '用户id', parentId bigint null comment '父标签id', isParent tinyint default 0 not null comment '0-否 1-是', createTime datetime default CURRENT_TIMESTAMP null comment '创建时间', updateTime datetime default CURRENT_TIMESTAMP null on update CURRENT_TIMESTAMP comment '更新时间', isDelete tinyint default 0 not null comment '是否删除' ) comment '标签'; \"]},\"510\":{\"h\":\"修改用户表\",\"t\":[\"用户有哪些标签？\",\"直接在用户表补充tags字段，['java','男'] 存json字符串\",\"优点：查询方便，不用新建关联表，标签是用户的固有属性（除了该系统，其他系统可能要用到，标签是用户的固有属性）\",\"查询用户列表，查关系表拿到这100个用户的所有标签id，再根据标签id去查标签表\",\"哪怕性能低，可以用缓存\",\"缺点：用户表多一列，会有点\",\"加一个关联表，记录用户和标签的关系\",\"关联表的应用场景：查询灵活，可以正查反查\",\"缺点：要多建一个表，多维护一个表\",\"重点：企业大项目开发中尽量减少关联查询，很影响扩展性，而且会影响查询性能\",\"选择第一种\",\"alter table user add tags varchar(1024) null comment '标签列表'; \"]},\"511\":{\"h\":\"添加索引\",\"t\":[\"create unique index tagName_idx on tag (tagName); create index userId_idx on tag (userId); \"]},\"512\":{\"h\":\"后端接口开发\",\"t\":[\"搜索标签\",\"允许用户传入多个标签，多个标签都存在才搜索出来 and\",\"允许用户传入多个标签，有任何一个标签存在就能搜索出来 or\",\"两种方式：\",\"SQL查询 （实现简单）\",\"内存查询 （灵活 ,可以通过并发进一步优化）\",\"如果参数可以分析，根据用户的参数去选择查询方式，比如标签数\",\"如果不可以分析，并且数据库足够，内存足够，可以并发查询，谁先返回用谁\",\"解析JSON字符串：\",\"序列化：把Java对象转为json\",\"反序列化：把json转为Java对象\",\"json序列化库：\",\"Fastjson alibaba （快，漏洞太多）\",\"gson （google ）\",\"jackson\",\"kryo\",\"<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson --> <dependency> <groupId>com.google.code.gson</groupId> <artifactId>gson</artifactId> <version>2.8.9</version> </dependency> \",\"代码：\",\" /** * 根据标签搜索用户 * * @param tagNameList 标签列表 * @return 用户列表 */ @Override public List<User> searchUsersByTags(List<String> tagNameList) { if (CollectionUtils.isEmpty(tagNameList)) { throw new BussinessException(Code.PARAMS_ERROR); } //return searchUsersByTagsBySQL(tagNameList); return searchUsersByTagsByMemory(tagNameList); } private List<User> searchUsersByTagsByMemory(List<String> tagNameList) { //先查询所有用户 QueryWrapper<User> queryWrapper = new QueryWrapper<>(); List<User> userList = userMapper.selectList(queryWrapper); //在内存中判断： Gson gson = new Gson(); List<User> users = userList.stream().filter(user -> { String tagsStr = user.getTags(); if (StringUtils.isBlank(tagsStr)) { return false; } Set<String> set = gson.fromJson(tagsStr, new TypeToken<Set<String>>() { }.getType()); set = Optional.ofNullable(set).orElse(new HashSet<>()); for (String tagName : tagNameList) { if (!set.contains(tagName)) { return false; } } return true; }).map(this::getSafetyUser).collect(Collectors.toList()); return users; } @Deprecated //废弃 private List<User> searchUsersByTagsBySQL(List<String> tagNameList) { QueryWrapper<User> queryWrapper = new QueryWrapper<>(); for (String tagName : tagNameList) { queryWrapper = queryWrapper.like(\\\"tags\\\", tagName); } List<User> userList = userMapper.selectList(queryWrapper); List<User> users = userList.stream().map(this::getSafetyUser).collect(Collectors.toList()); return users; } \",\"Java8\",\"stream /parallelStream 流失处理\",\"Optional可选类\"]},\"513\":{\"c\":[\"项目实战\",\"ikun伙伴匹配系统\"]},\"514\":{\"c\":[\"项目实战\",\"ikun伙伴匹配系统\"]},\"515\":{\"h\":\"ikun伙伴匹配系统2\"},\"516\":{\"h\":\"前端整合路由\",\"t\":[\"https://router.vuejs.org/zh/installation.html\"]},\"517\":{\"h\":\"安装\",\"t\":[\"vue-router\",\"yarn add vue-router@4 \",\"配置类route.ts\",\"import * as VueRouter from 'vue-router' import Index from \\\"../pages/Index/index.vue\\\"; import Team from \\\"../pages/Team/index.vue\\\"; import User from \\\"../pages/User/index.vue\\\"; const routes = [ {path: '/', component: Index}, {path: '/team', component: Team}, {path: '/user', component: User}, ] const router = VueRouter.createRouter({ history: VueRouter.createWebHashHistory(), routes, // `routes: routes` 的缩写 }) export default router \"]},\"518\":{\"h\":\"搜索页面\",\"t\":[\"前端vue\",\" <van-nav-bar title=\\\"标题\\\" left-text=\\\"返回\\\" right-text=\\\"按钮\\\" left-arrow @click-left=\\\"onClickLeft\\\" @click-right=\\\"onClickRight\\\" > <template #right> <van-icon name=\\\"search\\\" size=\\\"18\\\"/> </template> </van-nav-bar> <div id=\\\"content\\\"> <router-view/> </div> <van-tabbar v-model=\\\"active\\\" @change=\\\"onChange\\\" route> <van-tabbar-item icon=\\\"home-o\\\" name=\\\"index\\\" to=\\\"/\\\">主页</van-tabbar-item> <van-tabbar-item icon=\\\"search\\\" name=\\\"team\\\" to=\\\"/team\\\">队伍</van-tabbar-item> <van-tabbar-item icon=\\\"friends-o\\\" name=\\\"user\\\" to=\\\"/user\\\">个人</van-tabbar-item> </van-tabbar> \",\"添加选择标签组件：\",\"<van-divider content-position=\\\"left\\\">已选标签</van-divider> <template v-if=\\\"activeIds.length===0\\\">请选择标签</template> <van-row gutter=\\\"16\\\"> <van-col v-for=\\\"tag in activeIds\\\"> <van-tag closeable size=\\\"small\\\" type=\\\"primary\\\" @close=\\\"doClose(tag)\\\"> {{ tag }} </van-tag> </van-col> </van-row> <van-divider content-position=\\\"left\\\">选择标签</van-divider> <van-tree-select v-model:active-id=\\\"activeIds\\\" v-model:main-active-index=\\\"activeIndex\\\" :items=\\\"filterTagList\\\" /> \",\"ts代码\",\"//搜索框文字 const searchText = ref(''); //已选中标签 const activeIds = ref([]); //当前激活的标签 const activeIndex = ref(0); const tagList = [ { text: '性别', children: [ {text: '男', id: '男'}, {text: '女', id: '女'}, ], }, { text: '年级', children: [ {text: '大一', id: '大一'}, {text: '大二', id: '大二'}, ], }, ] const filterTagList = ref(tagList); //搜索 过滤 const onSearch = () => { filterTagList.value = tagList.map(parentTag => { const tempChildren = [...parentTag.children]; const tempParentTag = {...parentTag}; tempParentTag.children = tempChildren.filter(childTag => { return childTag.text.includes(searchText.value); }); return tempParentTag; }); } //清空搜索框 const onCancel = () => { showToast('取消'); searchText.value = ''; filterTagList.value = tagList; } //关闭标签 const doClose = (tag) => { activeIds.value = activeIds.value.filter(item => { return item !== tag; }); } \",\"效果如下：\",\"新建一个用户模型\",\"user.d.ts\",\"/** * 用户类别 */ export type UserType = { id: number; username: string; userAccount: string; avatarUrl?: string; profile?: string; gender:number; phone: string; email: string; userStatus: number; userRole: number; planetCode: string; tags: string; createTime: Date; }; \"]},\"519\":{\"h\":\"个人页面\",\"t\":[\"vue页面：\",\"<template> <van-cell title=\\\"用户名\\\" is-link :value=\\\"user.username\\\" @click=\\\"toEdit('username','用户名',user.username)\\\"/> <van-cell title=\\\"账号\\\" is-link :value=\\\"user.userAccount\\\"/> <van-cell title=\\\"头像\\\" is-link :value=\\\"user.avatarUrl\\\"> <VanImage :src=\\\"user.avatarUrl\\\" height=\\\"48px\\\" alt=\\\"cxk\\\"/> </van-cell> <van-cell title=\\\"性别\\\" is-link :value=\\\"user.gender\\\" @click=\\\"toEdit('gender','性别',user.gender)\\\"/> <van-cell title=\\\"电话\\\" is-link :value=\\\"user.phone\\\" @click=\\\"toEdit('phone','电话',user.phone)\\\"/> <van-cell title=\\\"邮箱\\\" is-link :value=\\\"user.email\\\" @click=\\\"toEdit('email','邮箱',user.email)\\\"/> <van-cell title=\\\"ikun编号\\\" is-link :value=\\\"user.ikunCode\\\"/> <van-cell title=\\\"注册时间\\\" is-link :value=\\\"user.createTime.toDateString()\\\"/> </template> \",\"ts路由跳转传参：\",\"<script setup lang=\\\"ts\\\"> import {useRouter} from \\\"vue-router\\\"; const user = { id: 1, username: 'ikun', userAccount: 'ikun', avatarUrl: \\\"https://s2.loli.net/2023/10/16/QRiUYmDLB2vZuE6.webp\\\", gender: '男', phone: \\\"114514\\\", email: \\\"1@qq.com\\\", ikunCode: 1, createTime: new Date() } const router = useRouter(); const toEdit = (editKey: string, editName: string, currentValue: string) => { router.push({ path: '/user/edit', query: { editKey, editName, currentValue, } }) } </script> \",\"效果如下：\"]},\"520\":{\"h\":\"编辑页面\",\"t\":[\"vue\",\"<template> <van-form @submit=\\\"onSubmit\\\"> <van-field v-model=\\\"editUser.currentValue\\\" :name=\\\"editUser.editKey\\\" :label=\\\"editUser.editName\\\" :placeholder=\\\"`请输入${editUser.editName}`\\\" /> <div style=\\\"margin: 16px;\\\"> <van-button round block type=\\\"primary\\\" native-type=\\\"submit\\\"> 提交 </van-button> </div> </van-form> </template> \",\"ts逻辑：\",\"<script setup lang=\\\"ts\\\"> import {useRoute} from \\\"vue-router\\\"; import {ref} from \\\"vue\\\"; const route = useRoute(); const editUser = ref({ editKey: route.query.editKey, editName: route.query.editName, currentValue: route.query.currentValue }) console.log(route.query) const onSubmit = (values) => { //todo 提交到后台 console.log('onSubmit', values) } </script> \",\"效果如下：\"]},\"521\":{\"h\":\"后端\",\"t\":[\"什么是接口文档？写接口信息的文档，每条接口包括：\",\"请求参数\",\"响应参数 \",\"错误码\",\"接口地址\",\"接口名称\",\"接口类型\",\"请求格式\",\"备注\",\"一般是后端或者负责人来提供，后端和前端都要用\",\"便于沉淀和维护\",\"便于前端和后端对接，前后端联调\",\"在线测试，作为工具\",\"怎么做：\",\"手写\",\"自动化接口文档生成 postman ，swagger，apifox，apipost\"]},\"522\":{\"h\":\"后端整合Swagger+Knife4j接口文档\",\"t\":[\"导入包：\",\" <dependency> <groupId>com.github.xiaoymin</groupId> <artifactId>knife4j-spring-boot-starter</artifactId> <version>2.0.7</version> </dependency> \",\"自定义配置类：\",\"package com.yunfei.ikunfriend.config; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import springfox.documentation.builders.ApiInfoBuilder; import springfox.documentation.builders.PathSelectors; import springfox.documentation.builders.RequestHandlerSelectors; import springfox.documentation.spi.DocumentationType; import springfox.documentation.spring.web.plugins.Docket; import springfox.documentation.swagger2.annotations.EnableSwagger2WebMvc; @Configuration @EnableSwagger2WebMvc @Profile({\\\"dev\\\",\\\"test\\\"}) public class Knife4jConfiguration { @Bean(value = \\\"defaultApi2\\\") public Docket defaultApi2() { Docket docket=new Docket(DocumentationType.SWAGGER_2) .apiInfo(new ApiInfoBuilder() //.title(\\\"swagger-bootstrap-ui-demo RESTful APIs\\\") .description(\\\"# swagger-bootstrap-ui-demo RESTful APIs\\\") .termsOfServiceUrl(\\\"http://www.xx.com/\\\") .contact(\\\"xx@qq.com\\\") .version(\\\"1.0\\\") .build()) //分组名称 .groupName(\\\"2.X版本\\\") .select() //这里指定Controller扫描包路径 .apis(RequestHandlerSelectors.basePackage(\\\"com.yunfei.ikunfriend.controller\\\")) .paths(PathSelectors.any()) .build(); return docket; } } \",\"注意：springboot2.6和swagger不兼容，需要增加配置application.yml\",\"spring: mvc: pathmatch: matching-strategy: ANT_PATH_MATCHER \",\"访问链接：http://localhost:8080/api/doc.html\",\"成功：\"]},\"523\":{\"h\":\"爬虫\",\"t\":[\"前端json插件\",\"复制爬虫链接：\",\"curl 'https://api.zsxq.com/v2/hashtags/51122528418454/topics?count=20' \\\\ -H 'authority: api.zsxq.com' \\\\ -H 'accept: application/json, text/plain, */*' \\\\ -H 'accept-language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7,en-GB;q=0.6' \\\\ -H 'cache-control: no-cache' \\\\ -H 'origin: https://wx.zsxq.com' \\\\ -H 'pragma: no-cache' \\\\ -H 'referer: https://wx.zsxq.com/' \\\\ -H 'sec-ch-ua: \\\"Chromium\\\";v=\\\"118\\\", \\\"Microsoft Edge\\\";v=\\\"118\\\", \\\"Not=A?Brand\\\";v=\\\"99\\\"' \\\\ -H 'sec-ch-ua-mobile: ?0' \\\\ -H 'sec-ch-ua-platform: \\\"macOS\\\"' \\\\ -H 'sec-fetch-dest: empty' \\\\ -H 'sec-fetch-mode: cors' \\\\ -H 'sec-fetch-site: same-site' \\\\ -H 'user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36 Edg/118.0.2088.57' \\\\ --compressed \",\"用程序去调用接口\",\"清洗数据，写到数据库\"]},\"524\":{\"h\":\"EasyExcel\",\"t\":[\"导入excel信息：\",\"官网：https://easyexcel.opensource.alibaba.com/\",\" <dependency> <groupId>com.alibaba</groupId> <artifactId>easyexcel</artifactId> <version>3.1.0</version> </dependency> \",\"两种读方式：\",\"确定表头：建立对象\",\"不确定表头：每一行数据映射为Map<String,Object>\"]},\"525\":{\"h\":\"第一种方式\",\"t\":[\"创建对象：\",\"@Data public class iKun { @ExcelProperty(\\\"ikun编号\\\") private String ikunCode; @ExcelProperty(\\\"ikun名称\\\") private String username; } \",\"创建监听器：\",\"@Slf4j public class TableListener implements ReadListener<iKun> { /** * 这个每一条数据解析都会来调用 */ @Override public void invoke(iKun data, AnalysisContext context) { System.out.println(\\\"解析到一条数据:{}\\\" + data); } /** * 所有数据解析完成了 都会来调用 */ @Override public void doAfterAllAnalysed(AnalysisContext context) { System.out.println(\\\"以解析完成\\\"); } } \",\"主程序：\",\"@Slf4j public class ImportExcel { public static void main(String[] args) { // 写法1：JDK8+ ,不用额外写一个DemoDataListener // since: 3.0.0-beta1 String fileName = \\\"/Users/houyunfei/资料/备战秋招/ikun伙伴匹配系统/ikunfriend-back/src/main/resources/testExcel.xlsx\\\"; // 这里默认每次会读取100条数据 然后返回过来 直接调用使用数据就行 // 具体需要返回多少行可以在`PageReadListener`的构造函数设置 EasyExcel.read(fileName, iKun.class, new TableListener()).sheet().doRead(); } } \",\"Excel表格内容为：\",\"读取结果：\"]},\"526\":{\"h\":\"第二种方式\",\"t\":[\"使用同步读取：\",\" public static void main(String[] args) { synchronousRead (); } public static void synchronousRead() { // 这里 需要指定读用哪个class去读，然后读取第一个sheet 同步读取会自动finish List<iKun> totalList = EasyExcel.read(fileName).head(iKun.class).sheet().doReadSync(); for (iKun iKun : totalList) { System.out.println(iKun); } } \",\"运行结果：\",\"两种读取模式：\",\"监听器：先创建监听器，在读取文件时绑定监听器，单独抽离处理逻辑，代码清晰易于维护，一条一条处理，适用于数据量大的场景\",\"同步读，无需创建监听器，一次性要获取完整数据，方便简单，数据量大的时候卡顿\"]},\"527\":{\"c\":[\"项目实战\",\"ikun伙伴匹配系统\"]},\"528\":{\"c\":[\"项目实战\",\"ikun伙伴匹配系统\"]},\"529\":{\"h\":\"ikun伙伴匹配系统3\"},\"530\":{\"h\":\"前端开发\"},\"531\":{\"h\":\"前端页面跳转传值\",\"t\":[\"Query =>url 附加参数，传递的值长度有限\",\"搜索页传递参数：\",\"const doSearchResult = () => { router.push({ path: '/user/list', query: { tags: activeIds.value } }) } \",\"搜索结果页面获取参数：\",\"const route = useRoute(); const {tags} = route.query; \",\"数据库新增一列个人简介：\",\"增加搜索接口：\",\" @GetMapping(\\\"/search/tags\\\") public Result<List<User>> searchUsersByTags(@RequestParam(required = false) List<String> tagNameList) { if (CollectionUtils.isEmpty(tagNameList)) { throw new BussinessException(Code.PARAMS_ERROR); } List<User> users = userService.searchUsersByTags(tagNameList); return ResultUtils.success(users); } \"]},\"532\":{\"h\":\"前端整合axios\",\"t\":[\"https://axios.nodejs.cn/docs/intro\",\"yarn add axios \",\"配置请求：\",\"import axios from \\\"axios\\\"; const request = axios.create({ baseURL: \\\"http://localhost:8080/api\\\" }); request.interceptors.request.use(function (config) { console.log(\\\"发送请求\\\") return config; }, function (error) { return Promise.reject(error); }); request.interceptors.response.use(function (response) { console.log(\\\"响应请求\\\") return response; }, function (error) { return Promise.reject(error); }); export default request; \",\"发送请求：\",\"onMounted(async () => { const userListData = await request.get('/user/search/tags', { params: {tagNameList: tags}, paramsSerializer: params => { return qs.stringify(params, {indices: false}) } }).then(function (response) { return response.data?.data; }).catch(function (error) { }) if (userListData) { userListData.forEach(user => { if (user.tags) { user.tags = JSON.parse(user.tags); } }) userList.value = userListData; } }) \",\"结果：\"]},\"533\":{\"h\":\"分布式Session\",\"t\":[\"jwt缺点：https://zhuanlan.zhihu.com/p/263410154\",\"种Session的时候注意范围 cookie.domain\",\"服务器A登录之后，请求发到服务器B，不认识该用户\",\"解决方案：共享存储？\",\"MySql\",\"文件服务器 ceph\",\"Redis（基于内存的K/V数据库） 因为用户信息读取/是否登录的判断极其频繁\",\"引入Redis\",\" <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-redis</artifactId> </dependency> \",\"配置application.yml\",\"spring: redis: port: 6379 host: localhost database: 0 password: 123456 \",\"引入Spring session redis\",\"使得自动将session存储到redis中\",\" <dependency> <groupId>org.springframework.session</groupId> <artifactId>spring-session-data-redis</artifactId> </dependency> \",\"修改配置：\",\"spring: session: timeout: 86400 store-type: redis \",\"测试\",\"允许多个实例：\",\"修改端口为8081\",\"在端口为8080的页面进行登录：\",\"成功加入到redis中\",\"此时在8081的端口查看登录信息：\"]},\"534\":{\"h\":\"主页推荐\",\"t\":[\"后端推荐算法\",\" @GetMapping(\\\"/recommend\\\") public Result<List<User>> recommendUser(HttpServletRequest request){ QueryWrapper<User> queryWrapper = new QueryWrapper<>(); List<User> userList = userService.list(queryWrapper); List<User> users = userList.stream().map(user -> userService.getSafetyUser(user)).collect(Collectors.toList()); return ResultUtils.success(users); } \",\"前端和搜索结果页的卡片一致，可以封装卡片组件：\",\"<template> <van-card v-for=\\\"user in props.userList\\\" :desc=\\\"user.profile\\\" :title=\\\"`${user.username}（${user.ikunCode}）`\\\" :thumb=\\\"user.avatarUrl\\\" > <template #tags> <van-tag plain type=\\\"primary\\\" v-for=\\\"tag in user.tags\\\" style=\\\"margin-right: 5px;margin-top: 5px;\\\"> {{ tag }} </van-tag> </template> <template #footer> <van-button size=\\\"mini\\\" type=\\\"default\\\">联系我</van-button> </template> </van-card> </template> <script setup lang=\\\"ts\\\"> import {UserType} from \\\"../models/user\\\"; interface UsercardListProps { userList: UserType[] } const props = defineProps<UsercardListProps>() </script> <style scoped> </style> \",\"使用：\",\"<user-card-list :user-list=\\\"userList\\\"/> \",\"效果如下：\"]},\"535\":{\"h\":\"模拟1000万数据\",\"t\":[\"导入数据：\",\"可视化界面：适合一次性导入，数据量可控\",\"写程序：for循环，建议分批 ，要保证可控\",\"执行SQL语句，适用于小数据\"]},\"536\":{\"h\":\"编写一次性任务\"},\"537\":{\"h\":\"普通插入\",\"t\":[\" @Test public void doInsertUsers() { StopWatch stopWatch = new StopWatch(); stopWatch.start(); final int NUM = 10; for (int i = 0; i < NUM; i++) { User user = new User(); user.setUsername(\\\"假ikun\\\"); user.setUserAccount(\\\"fakeIkun\\\"); user.setAvatarUrl(\\\"https://s2.loli.net/2023/10/16/QRiUYmDLB2vZuE6.webp\\\"); user.setGender(0); user.setUserPassword(\\\"12345678\\\"); user.setPhone(\\\"123\\\"); user.setEmail(\\\"123@qq.com\\\"); user.setUserStatus(0); user.setUserRole(0); user.setIkunCode(\\\"1212121\\\"); user.setTags(\\\"[]\\\"); userMapper.insert(user); } stopWatch.stop(); System.out.println(\\\"总时间：\\\" + stopWatch.getTotalTimeMillis()); } \",\"耗时比较大，主要花在数据库链接上\"]},\"538\":{\"h\":\"优化，分批插入\",\"t\":[\" public void doInsertUsers() { StopWatch stopWatch = new StopWatch(); stopWatch.start(); final int NUM = 1000; List<User> userList = new ArrayList<>(); for (int i = 0; i < NUM; i++) { User user = new User(); user.setUsername(\\\"假ikun\\\"); user.setUserAccount(\\\"fakeIkun\\\"); user.setAvatarUrl(\\\"https://s2.loli.net/2023/10/16/QRiUYmDLB2vZuE6.webp\\\"); user.setGender(0); user.setUserPassword(\\\"12345678\\\"); user.setPhone(\\\"123\\\"); user.setEmail(\\\"123@qq.com\\\"); user.setUserStatus(0); user.setUserRole(0); user.setIkunCode(\\\"1212121\\\"); user.setTags(\\\"[]\\\"); userList.add(user); } userService.saveBatch(userList,100); stopWatch.stop(); System.out.println(\\\"总时间：\\\" + stopWatch.getTotalTimeMillis()); } \",\"这次插入了1000条数据，耗时只有1秒多\",\"测试十万条：14s\"]},\"539\":{\"h\":\"并发执行\",\"t\":[\"十万条为：9s\",\"修改BatchSize为10000时：6s\",\"其他办法：\",\"package com.yunfei.ikunfriend.once; import com.yunfei.ikunfriend.mapper.UserMapper; import com.yunfei.ikunfriend.model.domain.User; import com.yunfei.ikunfriend.service.UserService; import org.junit.jupiter.api.Test; import org.springframework.boot.test.context.SpringBootTest; import org.springframework.scheduling.annotation.Scheduled; import org.springframework.util.StopWatch; import javax.annotation.Resource; import java.util.ArrayList; import java.util.List; import java.util.concurrent.*; import static org.junit.jupiter.api.Assertions.*; @SpringBootTest class InsertUsersTest { @Resource private UserMapper userMapper; @Resource private UserService userService; private ExecutorService executorService = new ThreadPoolExecutor(60, 1000, 10000, TimeUnit.MINUTES, new ArrayBlockingQueue<>(10000)); /** * 批量插入用户 */ @Test public void doInsertUsers() { StopWatch stopWatch = new StopWatch(); stopWatch.start(); final int NUM = 100000; int batchSize = 5000; //分10组 int j = 0; List<CompletableFuture<Void>> futures = new ArrayList<>(); for (int i = 0; i < 20; i++) { List<User> userList = new ArrayList<>(); while (true) { j++; User user = new User(); user.setUsername(\\\"假ikun\\\"); user.setUserAccount(\\\"fakeIkun\\\"); user.setAvatarUrl(\\\"https://s2.loli.net/2023/10/16/QRiUYmDLB2vZuE6.webp\\\"); user.setGender(0); user.setUserPassword(\\\"12345678\\\"); user.setPhone(\\\"123\\\"); user.setEmail(\\\"123@qq.com\\\"); user.setUserStatus(0); user.setUserRole(0); user.setIkunCode(\\\"1212121\\\"); user.setTags(\\\"[]\\\"); userList.add(user); if (j % batchSize == 0) break; } CompletableFuture<Void> future = CompletableFuture.runAsync(() -> { System.out.println(\\\"Thread name:\\\" + Thread.currentThread().getName()); userService.saveBatch(userList, batchSize); }, executorService); futures.add(future); } CompletableFuture.allOf(futures.toArray(new CompletableFuture[]{})).join(); stopWatch.stop(); System.out.println(\\\"总时间：\\\" + stopWatch.getTotalTimeMillis()); } } \"]},\"540\":{\"h\":\"分页查询\",\"t\":[\" @GetMapping(\\\"/recommend\\\") public Result<Page<User>> recommendUser(int pageSize, int pageNum, HttpServletRequest request) { QueryWrapper<User> queryWrapper = new QueryWrapper<>(); Page<User> userList = userService.page(new Page<>(pageNum, pageSize), queryWrapper); return ResultUtils.success(userList); } \",\"数据库查询慢？预先把数据 查出来，放到一个更快读取的地方，不用再查数据库了（缓存）\",\"预加载缓存，定时更新缓存\",\"多个机器都要执行任务？分布式锁，控制同一时间只有一台机器去执行定时任务，其他机器不用重复执行了\"]},\"541\":{\"c\":[\"项目实战\",\"ikun伙伴匹配系统\"]},\"542\":{\"c\":[\"项目实战\",\"ikun伙伴匹配系统\"]},\"543\":{\"h\":\"ikun伙伴匹配系统4\",\"t\":[\"mysql数据查询慢怎么办？\",\"用缓存：提前把数据取出来保存好，利于存在内存里\",\"缓存的实现：\",\"redis 分布式\",\"memcached 分布式\",\"ehcache 单机\",\"本地缓存 Java Map\",\"caffeine Java内存缓存，性能高\",\"Google guava\"]},\"544\":{\"h\":\"Redis缓存预热\",\"t\":[\"Spirng Data Redis\",\"设计缓存Key：\",\"不同用户看到的数据不同\",\"systemId:moduledId:func不要和别人冲突\",\"Ikon:user:recommend:userid\",\" @GetMapping(\\\"/recommend\\\") public Result<Page<User>> recommendUser(int pageSize, int pageNum, HttpServletRequest request) { User loginUser = userService.getLoginUser(request); String redisKey=String.format(\\\"ikun:user:recommend:%s\\\",loginUser.getId()); ValueOperations valueOperations = redisTemplate.opsForValue(); Page<User> userPage = (Page<User>) valueOperations.get(redisKey); if (userPage!=null){ log.info(\\\"get recommend user from redis\\\"); return ResultUtils.success(userPage); } QueryWrapper<User> queryWrapper = new QueryWrapper<>(); Page<User> userList = userService.page(new Page<>(pageNum, pageSize), queryWrapper); try { valueOperations.set(redisKey,userList); } catch (Exception e) { log.error(\\\"redis set error:{}\\\",e.getMessage()); } return ResultUtils.success(userList); } \",\"问题：第一个用户访问还是很慢怎么办？\",\"缓存预热：\",\"定时\",\"模拟触发（手动）\",\"定时任务的实现：\",\"Spring Scheduler springboot默认整合\",\"Quartz 独立于Spring存在的定时任务框架\",\"用定时任务：每天刷新所有用户的推荐\",\"注意点：\",\"缓存预热的意义：新增少，总用户多\",\"缓存的空间不能太大，要预留给其他缓存空间\",\"缓存数据的周期 ，\",\"定时任务：\",\"package com.yunfei.Job; import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper; import com.baomidou.mybatisplus.extension.plugins.pagination.Page; import com.sun.corba.se.spi.ior.ObjectKey; import com.yunfei.ikunfriend.model.domain.User; import com.yunfei.ikunfriend.service.UserService; import lombok.extern.slf4j.Slf4j; import org.springframework.data.redis.core.RedisTemplate; import org.springframework.data.redis.core.ValueOperations; import org.springframework.scheduling.annotation.Scheduled; import org.springframework.stereotype.Component; import javax.annotation.Resource; import java.util.Arrays; import java.util.List; /** * 缓存预热任务 */ @Component @Slf4j public class PreCacheJob { @Resource private UserService userService; @Resource private RedisTemplate<String, ObjectKey> redisTemplate; private List<Long> mainUserList= Arrays.asList(1L); //每天的23点59执行 @Scheduled(cron = \\\"0 59 23 * * *\\\") public void doCacheRecommendUser(){ for (Long userId : mainUserList) { QueryWrapper<User> queryWrapper = new QueryWrapper<>(); Page<User> page = userService.page(new Page<>(1, 10), queryWrapper); String redisKey=String.format(\\\"ikun:user:recommend:%s\\\",userId); ValueOperations valueOperations = redisTemplate.opsForValue(); try { valueOperations.set(redisKey,page.getRecords()); } catch (Exception e) { throw new RuntimeException(e); } } } } \"]},\"545\":{\"h\":\"分布式锁\",\"t\":[\"控制定时任务的执行？\",\"浪费资源，比如10000台服务器同时执行\",\"脏数据，比如重复插入\",\"有些定时任务要控制同一时间只有一个服务器能执行，\",\"怎么做？\",\"分离定时任务和主程序，只在一个服务器运行定时任务。成本太大\",\"写死配置，每个服务器都执行定时任务，但是只有ip符合配置的服务器才执行真实业务，其他的直接返回，成本最低。问题：ip是不固定的\",\"动态配置，\",\"数据库\",\"Redis\",\"配置中心（nacos，Apollo，Spring Cloud Config）\",\"问题：服务器多了，IP不可控还是很麻烦。\",\"分布式锁 ，只有抢到锁的服务器才能执行业务逻辑\",\"锁：有限的资源情况下，控制同一时间只有某些线程能访问到资源\",\"Java实现锁：synchronized关键字，并发包的类\",\"问题：只对单个JVM有效\"]},\"546\":{\"h\":\"分布式锁实现的关键\"},\"547\":{\"h\":\"抢锁机制\",\"t\":[\"怎么保证同一时间只有一个服务器能抢到锁？\",\"核心思想是：先来的人吧数据改为自己的表示，后来的人发现标识已经存在，就抢锁失败，继续等待。\",\"等先来的人执行方法结束，把标识清空，其他的人继续抢锁。\"]},\"548\":{\"h\":\"实现\",\"t\":[\"Mysql数据库：select for update 行级锁 最简单\",\"乐观锁\",\"Redis实现：内存数据库，读写速度快 ，支持setnx，lua脚本，方便\",\"zookeeper实现 （不推荐 企业中很少用 ）\"]},\"549\":{\"h\":\"注意事项\",\"t\":[\"用户要释放\",\"锁一定要 加过期时间\",\"如果方法执行时间过长，锁提前过起？\",\"问题：\",\"连锁效应：释放掉别人的锁\",\"这样还是会存在多个方法同时执行 的情况\",\"解决方案：\",\"续期\",\"boolean end=false; new Thread(()->{ if(!end){ 续期 } }) \",\"释放锁的时候，有可能先判断出是自己的锁，但这个时候锁过期了，最后还是释放了别人的锁\",\"//原子操作 if (get lock==A){ del lock } \",\"Redis+lua脚本实现\"]},\"550\":{\"h\":\"Redisson实现分布式锁\",\"t\":[\"是一个Java操作Redis的客户端，提供了大量的分布式数据集来简化对Redis的操作和使用，可以让开发者像使用本地集合一样使用Redis，完全感知不到Redis的存在\"]},\"551\":{\"h\":\"2种引入方式\",\"t\":[\"springboot-starter\",\" <dependency> <groupId>org.redisson</groupId> <artifactId>redisson-spring-boot-starter</artifactId> <version>3.24.2</version> </dependency> \",\"直接引入\",\"<dependency> <groupId>org.redisson</groupId> <artifactId>redisson</artifactId> <version>3.24.2</version> </dependency> \",\"配置类：\",\"package com.yunfei.ikunfriend.config; import lombok.Data; import org.redisson.Redisson; import org.redisson.api.RedissonClient; import org.redisson.api.RedissonReactiveClient; import org.redisson.api.RedissonRxClient; import org.redisson.config.Config; import org.springframework.boot.context.properties.ConfigurationProperties; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; /** * Redisson配置类 */ @Configuration @ConfigurationProperties(prefix = \\\"spring.redis\\\") @Data public class RedissonConfig { private String host; private String port; private String password; private String database; @Bean public RedissonClient redissonClient() { System.out.println(host); //配置 Config config = new Config(); String redisAddress = String.format(\\\"redis://%s:%s\\\", host, port); config.useSingleServer().setAddress(redisAddress).setDatabase(3).setPassword(password); //创建实例 RedissonClient redisson = Redisson.create(config); return redisson; } } \",\"测试 ：\",\"package com.yunfei.ikunfriend.service.impl; import org.junit.jupiter.api.Test; import org.redisson.api.RList; import org.redisson.api.RedissonClient; import org.springframework.boot.test.context.SpringBootTest; import javax.annotation.Resource; import java.util.ArrayList; import java.util.List; @SpringBootTest public class RedissonTest { @Resource private RedissonClient redissonClient; @Test void test() { List<String> ls=new ArrayList<>(); ls.add(\\\"cxk\\\"); System.out.println(\\\"list:\\\"+ls); RList<String> list = redissonClient.getList(\\\"test-list\\\"); list.add(\\\"cxk\\\"); System.out.println(\\\"redis:\\\"+list); list.get(0); } } \",\"定时任务+锁\",\"waitTime设置为0，只抢一次，抢不到就放弃\",\"注意释放锁要写在finally中\",\"看门狗机制\",\"redisson中提供的续期机制\",\"开一个监听线程，如果方法还没执行完，就帮你重置redis锁的过期时间。\",\"原理：\",\"监听当前线程，每10s续期一次\",\"如果线程挂掉（debug模式也会被当成服务器宕机）则不会过期\",\" @Resource private RedissonClient redissonClient; //每天的23点59执行 @Scheduled(cron = \\\"0 59 23 * * *\\\") public void doCacheRecommendUser() { String redisKey1 = \\\"ikun:precacheJob:docache:lock\\\"; RLock lock = redissonClient.getLock(redisKey1); try { if (lock.tryLock(0, 30000, TimeUnit.MICROSECONDS)) { for (Long userId : mainUserList) { QueryWrapper<User> queryWrapper = new QueryWrapper<>(); Page<User> page = userService.page(new Page<>(1, 10), queryWrapper); String redisKey = String.format(\\\"ikun:user:recommend:%s\\\", userId); ValueOperations valueOperations = redisTemplate.opsForValue(); try { valueOperations.set(redisKey, page.getRecords()); } catch (Exception e) { throw new RuntimeException(e); } } } } catch (InterruptedException e) { throw new RuntimeException(e); } finally { //只能释放自己的锁 if (lock.isHeldByCurrentThread()) { lock.unlock(); } } } \"]},\"552\":{\"c\":[\"项目实战\",\"ikun伙伴匹配系统\"]},\"553\":{\"c\":[\"项目实战\",\"ikun伙伴匹配系统\"]},\"554\":{\"h\":\"ikun伙伴匹配系统5\"},\"555\":{\"h\":\"组队功能\"},\"556\":{\"h\":\"需求分析\",\"t\":[\"理想场景：\",\"和别人一起参加竞赛，做项目，可以发起队伍或者加入别人的队伍\",\"用户可以创建一个队伍，设置队伍的人数，队伍名称（标题），描述，超时时间\",\"队长，剩余人数\",\"聊天？\",\"公开 or 加密\",\"不展示过期的队伍\",\"修改队伍信息\",\"用户可以加入队伍（其他人，未满，未过期）\",\"是否需要队长同意\",\"用户可以退出队伍（如果是队长，权限转给第二个进入的用户）\",\"队长可以解散队伍\",\"邀请其他用户加入队伍，分享队伍\"]},\"557\":{\"h\":\"实现\",\"t\":[\"数据库设计\",\"队伍表team\",\"字段\",\"类型\",\"说明\",\"id\",\"bigint\",\"主键\",\"name\",\"队伍名称\",\"description\",\"描述\",\"maxNum\",\"最大人数\",\"expireTime\",\"过期时间\",\"userId\",\"用户id\",\"status\",\"0-公开，1-私有，2-加密\",\"password\",\"密码\",\"createTime\",\"创建时间\",\"updateTime\",\"更新时间\",\"isDelete\",\"是否删除\",\"-- 队伍表 create table team ( id bigint auto_increment comment 'id' primary key, name varchar(256) not null comment '队伍名称', description varchar(1024) null comment '队伍描述 ', maxNum int default 1 not null comment '最大人数', expireTime datetime not null comment '过期时间', userId bigint comment '队长id', status int default 0 not null comment '0-公开，1-私有，2-加密 ', password varchar(256) null comment '密码', createTime datetime default CURRENT_TIMESTAMP null comment '创建时间', updateTime datetime default CURRENT_TIMESTAMP null on update CURRENT_TIMESTAMP comment '更新时间', isDelete tinyint default 0 not null comment '是否删除' ) comment '队伍'; \",\"两个关系：\",\"用户加入了哪些队伍\",\"队伍有哪些用户？\",\"建立 用户-队伍表 user_team\",\"字段\",\"类型\",\"说明\",\"id\",\"主键\",\"userId\",\"用户 id\",\"teamId\",\"队伍Id\",\"joinTime\",\"加入时间\",\"createTime\",\"创建时间\",\"updateTime\",\"更新时间\",\"isDelete\",\"是否删除\",\"-- 队伍表 create table user_team ( id bigint auto_increment comment 'id' primary key, userId bigint comment '用户id', teamId bigint comment '队伍id', joinTime datetime null comment '加入时间', createTime datetime default CURRENT_TIMESTAMP null comment '创建时间', updateTime datetime default CURRENT_TIMESTAMP null on update CURRENT_TIMESTAMP comment '更新时间', isDelete tinyint default 0 not null comment '是否删除' ) comment '用户-队伍表'; \",\"增删改查\"]},\"558\":{\"h\":\"创建队伍：\",\"t\":[\"请求参数是否为空\",\"是否登录，未登录不允许创建\",\"校验信息 \",\"队伍>1 且<=20\",\"队伍标题\",\"描述<=512\",\"status是否公开\",\"如果是加密，必须要有密码\",\"超时时间>当前时间\",\"校验用户最多创建五个队伍\",\"插入队伍信息到队伍表\",\"插入用户=>队伍关系到关系表\",\" @Override @Transactional(rollbackFor = Exception.class) public long addTeam(Team team, User loginUser) { //1. 请求参数是否为空 if (team == null) { throw new BussinessException(Code.PARAMS_ERROR); } //2. 是否登录，未登录不允许创建 if (loginUser == null) { throw new BussinessException(Code.NOT_LOGIN); } //3. 校验信息 // 1. 队伍>1 且<=20 int maxNum = Optional.ofNullable(team.getMaxNum()).orElse(0); if (maxNum < 1 || maxNum > 20) { throw new BussinessException(Code.PARAMS_ERROR, \\\"队伍人数不满足要求\\\"); } // 2. 队伍标题 String name = team.getName(); if (StringUtils.isBlank(name) || name.length() > 20) { throw new BussinessException(Code.PARAMS_ERROR, \\\"队伍标题不满足要求\\\"); } // 3. 描述<=512 String description = team.getDescription(); if (StringUtils.isNotBlank(description) && description.length() > 512) { throw new BussinessException(Code.PARAMS_ERROR, \\\"队伍描述过长\\\"); } // 4. status是否公开 Integer status = Optional.ofNullable(team.getStatus()).orElse(0); if (status < 0 || status > 3) { throw new BussinessException(Code.PARAMS_ERROR, \\\"队伍状态不满足要求\\\"); } // 5. 如果是加密，必须要有密码 String password = team.getPassword(); if (status.equals(TeamStatusEnum.PASSWORD)) { if (StringUtils.isBlank(password) || password.length() > 32) { throw new BussinessException(Code.PARAMS_ERROR, \\\"密码设置不正确\\\"); } } // 6. 超时时间>当前时间 Date expireTime = team.getExpireTime(); if (new Date().after(expireTime)) { throw new BussinessException(Code.PARAMS_ERROR, \\\"超时时间不正确\\\"); } // 7. 校验用户最多创建五个队伍 QueryWrapper<Team> queryWrapper = new QueryWrapper<>(); queryWrapper.eq(\\\"userId\\\", loginUser.getId()); long hasTeamCount = this.count(queryWrapper); if (hasTeamCount >= 5) { throw new BussinessException(Code.PARAMS_ERROR, \\\"最多创建五个队伍\\\"); } //4. 插入队伍信息到队伍表 team.setId(null); team.setUserId(loginUser.getId()); boolean save = this.save(team); if (!save) { throw new BussinessException(Code.PARAMS_ERROR, \\\"创建队伍失败\\\"); } //5. 插入用户=>队伍关系到关系表 Long teamId = team.getId(); UserTeam userTeam = new UserTeam(); userTeam.setUserId(loginUser.getId()); userTeam.setTeamId(teamId); userTeam.setJoinTime(new Date()); boolean save1 = userTeamService.save(userTeam); if (!save1) { throw new BussinessException(Code.PARAMS_ERROR, \\\"创建队伍失败\\\"); } return teamId; } \"]},\"559\":{\"h\":\"查询队伍列表\",\"t\":[\"分页展示队伍列表，根据名称、最大人数等搜索队伍 P0，信息流中不展示已过期的队伍\",\"从请求参数中取出队伍名称等查询条件，如果存在则作为查询条件\",\"不展示已过期的队伍（根据过期时间筛选）\",\"可以通过某个关键词同时对名称和描述查询\",\"只有管理员才能查看加密还有非公开的房间\",\"关联查询已加入队伍的用户信息\",\"关联查询已加入队伍的用户信息（可能会很耗费性能，建议大家用自己写 SQL 的方式实现）\",\" @Override public List<TeamUserVO> listTeams(TeamQueryDTO teamQueryDto, boolean isAdmin) { QueryWrapper<Team> queryWrapper = new QueryWrapper<>(); if (teamQueryDto != null) { Long teamId = teamQueryDto.getId(); if (teamId != null && teamId > 0) { queryWrapper.eq(\\\"id\\\", teamId); } String name = teamQueryDto.getName(); if (StringUtils.isNotBlank(name)) { queryWrapper.like(\\\"name\\\", name); } String description = teamQueryDto.getDescription(); if (StringUtils.isNotBlank(description)) { queryWrapper.like(\\\"description\\\", description); } Integer maxNum = teamQueryDto.getMaxNum(); if (maxNum != null && maxNum > 0) { queryWrapper.eq(\\\"maxNum\\\", maxNum); } Long userId = teamQueryDto.getUserId(); if (userId != null && userId > 0) { queryWrapper.eq(\\\"userId\\\", userId); } Integer status = teamQueryDto.getStatus(); if (status == null) { status = 0; } if (status > -1) { queryWrapper.eq(\\\"status\\\", status); } if (!isAdmin && !status.equals(TeamStatusEnum.PUBLIC)) { throw new BussinessException(Code.PARAMS_ERROR, \\\"只能查看公开的队伍\\\"); } String searchText = teamQueryDto.getSearchText(); if (StringUtils.isNotBlank(searchText)) { queryWrapper.and(wrapper -> wrapper.like(\\\"name\\\", searchText) .or().like(\\\"description\\\", searchText)); } } //不展示已过期的队伍 queryWrapper.and(wrapper -> wrapper.gt(\\\"expireTime\\\", new Date()) .or().isNull(\\\"expireTime\\\")); List<Team> teamList = this.list(queryWrapper); if (CollectionUtils.isEmpty(teamList)) { return new ArrayList<>(); } //关联查询用户信息 //查询队伍和已加入队伍成员信息 log.info(\\\"teamList size:{}\\\", teamList.size()); List<TeamUserVO> teamUserVOList = new ArrayList<>(); for (Team team : teamList) { Long userId = team.getUserId(); if (userId == null) { continue; } User user = userService.getById(userId); if (user == null) { continue; } TeamUserVO teamUserVO = new TeamUserVO(); BeanUtils.copyProperties(team, teamUserVO); UserVO userVO = new UserVO(); BeanUtils.copyProperties(user, userVO); teamUserVO.setCreateUser(userVO); teamUserVOList.add(teamUserVO); } return teamUserVOList; } \"]},\"560\":{\"h\":\"修改队伍信息\",\"t\":[\"查询队伍是否存在\",\"只有管理员或者队伍的创建者可以修改\",\"如果用户传入的值和老的一致，就不用update\",\" @Override public boolean updateTeam(TeamUpdateDTO teamUpdateDTO, User loginUser) { if (teamUpdateDTO == null) { throw new BussinessException(Code.PARAMS_ERROR); } Long id = teamUpdateDTO.getId(); if (id == null || id <= 0) { throw new BussinessException(Code.PARAMS_ERROR); } Team oldTeam = this.getById(id); if (oldTeam == null) { throw new BussinessException(Code.PARAMS_ERROR); } if (oldTeam.getUserId() != loginUser.getId() && !userService.isAdmin(loginUser)) { throw new BussinessException(Code.NO_AUTH, \\\"只能修改自己创建的队伍\\\"); } if (oldTeam.getStatus().equals(TeamStatusEnum.PASSWORD)) { if (StringUtils.isBlank(teamUpdateDTO.getPassword())) { throw new BussinessException(Code.PARAMS_ERROR, \\\"加密房间必须要设置密码\\\"); } } Team team = new Team(); BeanUtils.copyProperties(teamUpdateDTO, team); return this.updateById(team); } \"]},\"561\":{\"h\":\"用户加入队伍\",\"t\":[\"其他人、未满、未过期，允许加入多个队伍，但是要有个上限 P0\",\"用户最多加入 5 个队伍\",\"队伍必须存在，只能加入未满、未过期的队伍\",\"不能加入自己的队伍，不能重复加入已加入的队伍（幂等性）\",\"禁止加入私有的队伍\",\"如果加入的队伍是加密的，必须密码匹配才可以\",\"新增队伍 - 用户关联信息\",\"加入队伍，如果一个用户疯狂点击，可能会出现错误，需要加一把分布式锁\",\" public boolean joinTeam(TeamJoinDTO teamJoinDTO, User loginUser) { if (teamJoinDTO == null) { throw new BussinessException(Code.PARAMS_ERROR); } Long teamId = teamJoinDTO.getTeamId(); Team team = getTeamById(teamId); if (team.getExpireTime() != null && team.getExpireTime().before(new Date())) { throw new BussinessException(Code.PARAMS_ERROR, \\\"队伍已过期\\\"); } if (team.getStatus().equals(TeamStatusEnum.PRIVATE)) { throw new BussinessException(Code.NULL_ERROR, \\\"禁止加入私有队伍\\\"); } String password = teamJoinDTO.getPassword(); if (team.getStatus().equals(TeamStatusEnum.PASSWORD)) { if (StringUtils.isBlank(password) || !password.equals(team.getPassword())) { throw new BussinessException(Code.PARAMS_ERROR, \\\"密码错误\\\"); } } Long userId = loginUser.getId(); //分布式锁 RLock lock = redissonClient.getLock(\\\"ikun:join_team\\\"); try { while (true) { if (lock.tryLock(0, 30000, TimeUnit.MICROSECONDS)) { System.out.println(\\\"getLock\\\" + Thread.currentThread().getId()); QueryWrapper<UserTeam> userTeamQueryWrapper = new QueryWrapper<>(); userTeamQueryWrapper.eq(\\\"userId\\\", userId); long count = userTeamService.count(userTeamQueryWrapper); if (count > 5) { throw new BussinessException(Code.PARAMS_ERROR, \\\"最多创建和加入五个队伍\\\"); } //不能重复加入已加入的队伍 userTeamQueryWrapper = new QueryWrapper<>(); userTeamQueryWrapper.eq(\\\"userId\\\", userId); userTeamQueryWrapper.eq(\\\"teamId\\\", teamId); long count2 = userTeamService.count(userTeamQueryWrapper); if (count2 > 0) { throw new BussinessException(Code.PARAMS_ERROR, \\\"不能重复加入已加入的队伍\\\"); } //已加入队伍的人数 long count1 = countTeamUserByTeamId(teamId); if (count1 >= team.getMaxNum()) { throw new BussinessException(Code.PARAMS_ERROR, \\\"队伍已满\\\"); } //插入用户=>队伍关系到关系表 UserTeam userTeam = new UserTeam(); userTeam.setUserId(userId); userTeam.setTeamId(teamId); userTeam.setJoinTime(new Date()); return userTeamService.save(userTeam); } } } catch (Exception e) { throw new BussinessException(Code.SYSTEM_ERROR); } finally { //只能释放自己的锁 if (lock.isHeldByCurrentThread()) { lock.unlock(); } } } \"]},\"562\":{\"h\":\"用户可以退出队伍\",\"t\":[\"请求参数：队伍 id\",\"校验请求参数\",\"校验队伍是否存在\",\"校验我是否已加入队伍\",\"如果队伍\",\"只剩一人，队伍解散\",\"还有其他人\",\"如果是队长退出队伍，权限转移给第二早加入的用户 —— 先来后到\",\"> 只用取 id 最小的 2 条数据\",\"非队长，自己退出队伍\",\" @Transactional(rollbackFor = Exception.class) public boolean quitTeam(TeamQuitDTO teamQuitDTO, User loginUser) { if (teamQuitDTO == null) { throw new BussinessException(Code.PARAMS_ERROR); } long teamId = teamQuitDTO.getTeamId(); Team team = getTeamById(teamId); long userId = loginUser.getId(); UserTeam queryUserTeam = new UserTeam(); queryUserTeam.setTeamId(teamId); queryUserTeam.setUserId(userId); QueryWrapper<UserTeam> userTeamQueryWrapper = new QueryWrapper<>(queryUserTeam); long count = userTeamService.count(userTeamQueryWrapper); if (count == 0) { throw new BussinessException(Code.PARAMS_ERROR, \\\"未加入队伍\\\"); } long teamHasJoinNum = countTeamUserByTeamId(teamId); if (teamHasJoinNum == 1) { //如果队伍只有一个人，直接删除队伍 return this.removeById(teamId); } else { //如果队伍有多个人 if (team.getUserId() == userId) { //如果是队长，把队伍给最早加入的用户 QueryWrapper<UserTeam> userTeamQueryWrapper1 = new QueryWrapper<>(); userTeamQueryWrapper1.eq(\\\"teamId\\\", teamId); userTeamQueryWrapper1.last(\\\"order by id asc limit 2\\\"); List<UserTeam> userTeamList = userTeamService.list(userTeamQueryWrapper1); if (CollectionUtils.isEmpty(userTeamList) || userTeamList.size() < 2) { throw new BussinessException(Code.SYSTEM_ERROR, \\\"队伍异常\\\"); } UserTeam nextUserTeam = userTeamList.get(1); Long nextUserTeamUserId = nextUserTeam.getUserId(); //更新队伍的队长 Team updateTeam = new Team(); updateTeam.setId(teamId); updateTeam.setUserId(nextUserTeamUserId); boolean result = this.updateById(updateTeam); if (!result) { throw new BussinessException(Code.SYSTEM_ERROR, \\\"更新队伍队长失败\\\"); } } } //删除用户=>队伍关系到关系表 return userTeamService.remove(userTeamQueryWrapper); } \"]},\"563\":{\"h\":\"队长可以解散队伍\",\"t\":[\"请求参数：队伍 id\",\"业务流程：\",\"校验请求参数\",\"校验队伍是否存在\",\"校验你是不是队伍的队长\",\"移除所有加入队伍的关联信息\",\"删除队伍\"]},\"564\":{\"h\":\"获取当前用户已加入的队伍\",\"t\":[\" public Result<List<TeamUserVO>> listMyJoinTeams(TeamQueryDTO teamQueryDto, HttpServletRequest request) { if (teamQueryDto == null) { throw new BussinessException(Code.PARAMS_ERROR); } User loginUser = userService.getLoginUser(request); QueryWrapper<UserTeam> userTeamQueryWrapper = new QueryWrapper<>(); userTeamQueryWrapper.eq(\\\"userId\\\", loginUser.getId()); List<UserTeam> userTeamList = userTeamService.list(userTeamQueryWrapper); //取出不重复的队伍id teamId(单)=>userId(多) Map<Long, List<UserTeam>> listMap = userTeamList.stream().collect(Collectors.groupingBy(UserTeam::getTeamId)); List<Long> idList = new ArrayList<>(listMap.keySet()); teamQueryDto.setIdList(idList); List<TeamUserVO> teamList = teamService.listTeams(teamQueryDto, true); return ResultUtils.success(teamList); } \"]},\"565\":{\"h\":\"获取当前用户创建的队伍\",\"t\":[\"复用 listTeam 方法，只新增查询条件，不做修改（开闭原则）\",\" public Result<List<TeamUserVO>> listMyCreateTeams(TeamQueryDTO teamQueryDto, HttpServletRequest request) { if (teamQueryDto == null) { throw new BussinessException(Code.PARAMS_ERROR); } User loginUser = userService.getLoginUser(request); teamQueryDto.setUserId(loginUser.getId()); List<TeamUserVO> teamList = teamService.listTeams(teamQueryDto, true); return ResultUtils.success(teamList); } \"]},\"566\":{\"h\":\"随机匹配\",\"t\":[\"根据标签tag匹配\",\"找到有相似标签的用户\",\"找到有共同标签最多的用户\",\"共同标签越多，分数越高，越排在前面\",\"如果没有匹配的用户，随机推荐几个\",\" public static int minDistance(List<String> tagList1, List<String> tagList2) { int n = tagList1.size(); int m = tagList2.size(); if (n * m == 0) return n + m; int[][] d = new int[n + 1][m + 1]; for (int i = 0; i < n + 1; i++) { d[i][0] = i; } for (int j = 0; j < m + 1; j++) { d[0][j] = j; } for (int i = 1; i < n + 1; i++) { for (int j = 1; j < m + 1; j++) { int left = d[i - 1][j] + 1; int down = d[i][j - 1] + 1; int left_down = d[i - 1][j - 1]; if (!tagList1.get(i - 1).equals(tagList2.get(j - 1))) left_down += 1; d[i][j] = Math.min(left, Math.min(down, left_down)); } } return d[n][m]; } \",\" public List<User> matchUsers(long num, User loginUser) { QueryWrapper<User> queryWrapper = new QueryWrapper<>(); queryWrapper.select(\\\"id\\\", \\\"tags\\\"); queryWrapper.isNotNull(\\\"tags\\\"); List<User> userList = this.list(queryWrapper); String tags = loginUser.getTags(); Gson gson = new Gson(); List<String> tagList = gson.fromJson(tags, new TypeToken<List<String>>() { }.getType()); List<Pair<User, Long>> list = new ArrayList<>(); for (int i = 0; i < userList.size(); i++) { User user = userList.get(i); String userTags = user.getTags(); //无标签或者是自己，跳过 if (StringUtils.isBlank(userTags) || user.getId().equals(loginUser.getId())) { continue; } List<String> userTagList = gson.fromJson(userTags, new TypeToken<List<String>>() { }.getType()); int distance = AlgorithmUtils.minDistance(tagList, userTagList); list.add(new Pair<>(user, (long) distance)); } //按照编辑距离从小到达排序 List<Pair<User, Long>> topUserPairList = list.stream() .sorted((a, b) -> (int) (a.getValue() - b.getValue())) .limit(num) .collect(Collectors.toList()); List<Long> userIdList = topUserPairList.stream().map(userLongPair -> userLongPair.getKey().getId()).collect(Collectors.toList()); QueryWrapper<User> userQueryWrapper = new QueryWrapper<>(); userQueryWrapper.in(\\\"id\\\", userIdList); Map<Long, List<User>> userIdUserListMap = this.list(userQueryWrapper) .stream() .map(user -> getSafetyUser(user)) .collect(Collectors.groupingBy(User::getId)); List<User> finalUserList = new ArrayList<>(); for (Long userId : userIdList) { finalUserList.add(userIdUserListMap.get(userId).get(0)); } return finalUserList; } \",\"编辑距离算法：https://blog.csdn.net/DBC_121/article/details/104198838\",\"最小编辑距离：字符串 1 通过最少多少次增删改字符的操作可以变成字符串 2\"]},\"567\":{\"h\":\"2. 怎么对所有用户匹配，取 TOP\",\"t\":[\"直接取出所有用户，依次和当前用户计算分数，取 TOP N（54 秒）\",\"优化方法：\",\"切忌不要在数据量大的时候循环输出日志（取消掉日志后 20 秒）\",\"Map 存了所有的分数信息，占用内存\",\"解决：维护一个固定长度的有序集合（sortedSet），只保留分数最高的几个用户（时间换空间）\",\"e.g.【3, 4, 5, 6, 7】取 TOP 5，id 为 1 的用户就不用放进去了\",\"细节：剔除自己 √\",\"尽量只查需要的数据：\",\"过滤掉标签为空的用户 √\",\"根据部分标签取用户（前提是能区分出来哪个标签比较重要）\",\"只查需要的数据（比如 id 和 tags） √（7.0s）\",\"提前查？（定时任务）\",\"提前把所有用户给缓存（不适用于经常更新的数据）\",\"提前运算出来结果，缓存（针对一些重点用户，提前缓存）\",\"大数据推荐，比如说有几亿个商品，难道要查出来所有的商品？\",\"难道要对所有的数据计算一遍相似度？\",\"检索 => 召回 => 粗排 => 精排 => 重排序等等\",\"检索：尽可能多地查符合要求的数据（比如按记录查）\",\"召回：查询可能要用到的数据（不做运算）\",\"粗排：粗略排序，简单地运算（运算相对轻量）\",\"精排：精细排序，确定固定排位\",\"优化、上线\",\"重复加入队伍的问题（加锁、分布式锁）并发请求时可能出现问题\",\"分布式锁\"]},\"568\":{\"c\":[\"项目实战\",\"ikun伙伴匹配系统\"]},\"569\":{\"c\":[\"项目实战\",\"ikun伙伴匹配系统\"]},\"570\":{\"h\":\"ikun伙伴匹配系统优化\",\"t\":[\"以下优化均是在用户量为100万的情况下进行：\"]},\"571\":{\"h\":\"分布式Session登录\",\"t\":[\"⽤户登录：使⽤ Redis 实现分布式 Session，解决集群间登录态同步问题；并使⽤ Hash 代替 String 来存储⽤户信息，节约了 xx% 的内存并便于单字段的修改。\",\"节省内存的原因是不⽤保存序列化对象信息或者 JSON 的⼀些额外字符串\",\"使⽤ Easy Excel 读取收集来的基础⽤户信息，并通过⾃定义线程池 + CompletableFuture 并 发编程提⾼批量导⼊数据库的性能。实测导⼊ 100 万⾏的时间从 xx 秒缩短⾄ xx 秒。（需要 ⾃⼰实际测试对⽐数据）\"]},\"572\":{\"h\":\"Redis缓存首页高频访问用户\",\"t\":[\"使⽤ Redis 缓存⾸⻚⾼频访问的⽤户信息列表，将接⼝响应时⻓从 216ms缩短⾄ 43ms。且通 过⾃定义 Redis 序列化器来解决数据乱码、空间浪费的问题。\",\"不使用redis进行缓存\",\"使用redis进行缓存\"]},\"573\":{\"h\":\"定时任务缓存预热\",\"t\":[\"为解决⾸次访问系统的⽤户主⻚加载过慢的问题，使⽤ Spring Scheduler 定时任务来实现缓存 预热，并通过分布式锁保证多机部署时定时任务不会重复执⾏。\",\"缓存的时候只给重要客户 进行缓存，例如vip\",\" @Resource private RedisTemplate<String, ObjectKey> redisTemplate; private List<Long> mainUserList = Arrays.asList(1L); @Resource private RedissonClient redissonClient; //每天的23点59执行 @Scheduled(cron = \\\"0 59 23 * * *\\\") public void doCacheRecommendUser() { String redisKey1 = \\\"ikun:precacheJob:docache:lock\\\"; RLock lock = redissonClient.getLock(redisKey1); try { if (lock.tryLock(0, 30000, TimeUnit.MICROSECONDS)) { for (Long userId : mainUserList) { QueryWrapper<User> queryWrapper = new QueryWrapper<>(); Page<User> page = userService.page(new Page<>(1, 10), queryWrapper); String redisKey = String.format(\\\"ikun:user:recommend:%s\\\", userId); ValueOperations valueOperations = redisTemplate.opsForValue(); try { valueOperations.set(redisKey, page.getRecords()); } catch (Exception e) { throw new RuntimeException(e); } } } } catch (InterruptedException e) { throw new RuntimeException(e); } finally { //只能释放自己的锁 if (lock.isHeldByCurrentThread()) { lock.unlock(); } } } \"]},\"574\":{\"h\":\"加入队伍锁\",\"t\":[\"为解决同⼀⽤户重复加⼊队伍、⼊队⼈数超限的问题，使⽤ Redisson 分布式锁来实现操作互 斥，保证了接⼝幂等性。\",\" @Override public boolean joinTeam(TeamJoinDTO teamJoinDTO, User loginUser) { if (teamJoinDTO == null) { throw new BussinessException(Code.PARAMS_ERROR); } Long teamId = teamJoinDTO.getTeamId(); Team team = getTeamById(teamId); if (team.getExpireTime() != null && team.getExpireTime().before(new Date())) { throw new BussinessException(Code.PARAMS_ERROR, \\\"队伍已过期\\\"); } if (team.getStatus().equals(TeamStatusEnum.PRIVATE)) { throw new BussinessException(Code.NULL_ERROR, \\\"禁止加入私有队伍\\\"); } String password = teamJoinDTO.getPassword(); if (team.getStatus().equals(TeamStatusEnum.PASSWORD)) { if (StringUtils.isBlank(password) || !password.equals(team.getPassword())) { throw new BussinessException(Code.PARAMS_ERROR, \\\"密码错误\\\"); } } Long userId = loginUser.getId(); //分布式锁 RLock lock = redissonClient.getLock(\\\"ikun:join_team\\\"); try { while (true) { if (lock.tryLock(0, 30000, TimeUnit.MICROSECONDS)) { System.out.println(\\\"getLock\\\" + Thread.currentThread().getId()); QueryWrapper<UserTeam> userTeamQueryWrapper = new QueryWrapper<>(); userTeamQueryWrapper.eq(\\\"userId\\\", userId); long count = userTeamService.count(userTeamQueryWrapper); if (count > 5) { throw new BussinessException(Code.PARAMS_ERROR, \\\"最多创建和加入五个队伍\\\"); } //不能重复加入已加入的队伍 userTeamQueryWrapper = new QueryWrapper<>(); userTeamQueryWrapper.eq(\\\"userId\\\", userId); userTeamQueryWrapper.eq(\\\"teamId\\\", teamId); long count2 = userTeamService.count(userTeamQueryWrapper); if (count2 > 0) { throw new BussinessException(Code.PARAMS_ERROR, \\\"不能重复加入已加入的队伍\\\"); } //已加入队伍的人数 long count1 = countTeamUserByTeamId(teamId); if (count1 >= team.getMaxNum()) { throw new BussinessException(Code.PARAMS_ERROR, \\\"队伍已满\\\"); } //插入用户=>队伍关系到关系表 UserTeam userTeam = new UserTeam(); userTeam.setUserId(userId); userTeam.setTeamId(teamId); userTeam.setJoinTime(new Date()); return userTeamService.save(userTeam); } } } catch (Exception e) { throw new BussinessException(Code.SYSTEM_ERROR); } finally { //只能释放自己的锁 if (lock.isHeldByCurrentThread()) { lock.unlock(); } } } \"]},\"575\":{\"h\":\"编辑距离算法优化\",\"t\":[\"使⽤编辑距离算法实现了根据标签匹配最相似⽤户的功能，并通过优先队列来优化 TOP N 运 算过程中的内存占⽤。\",\"原来是先一次性把数据全部都查出来，然后再排序，取出前N名：\",\" private List<User> matchUsersByListSorted(long num, User loginUser) { QueryWrapper<User> queryWrapper = new QueryWrapper<>(); queryWrapper.select(\\\"id\\\", \\\"tags\\\"); queryWrapper.isNotNull(\\\"tags\\\"); List<User> userList = this.list(queryWrapper); String tags = loginUser.getTags(); Gson gson = new Gson(); List<String> tagList = gson.fromJson(tags, new TypeToken<List<String>>() { }.getType()); List<Pair<User, Long>> list = new ArrayList<>(); for (int i = 0; i < userList.size(); i++) { User user = userList.get(i); String userTags = user.getTags(); //无标签或者是自己，跳过 if (StringUtils.isBlank(userTags) || user.getId().equals(loginUser.getId())) { continue; } List<String> userTagList = gson.fromJson(userTags, new TypeToken<List<String>>() { }.getType()); int distance = AlgorithmUtils.minDistance(tagList, userTagList); list.add(new Pair<>(user, (long) distance)); } //按照编辑距离从小到达排序 编辑距离越小说明相似度越高 List<Pair<User, Long>> topUserPairList = list.stream() .sorted((a, b) -> (int) (a.getValue() - b.getValue())) .limit(num) .collect(Collectors.toList()); List<Long> userIdList = topUserPairList.stream().map(userLongPair -> userLongPair.getKey().getId()).collect(Collectors.toList()); QueryWrapper<User> userQueryWrapper = new QueryWrapper<>(); userQueryWrapper.in(\\\"id\\\", userIdList); Map<Long, List<User>> userIdUserListMap = this.list(userQueryWrapper) .stream() .map(this::getSafetyUser) .collect(Collectors.groupingBy(User::getId)); List<User> finalUserList = new ArrayList<>(); for (Long userId : userIdList) { finalUserList.add(userIdUserListMap.get(userId).get(0)); } return finalUserList; } \",\"使用优先队列优化空间，只需要维护num个数据即可：\",\" public List<User> matchUsersByPriorityQueue(long num, User loginUser) { QueryWrapper<User> queryWrapper = new QueryWrapper<>(); queryWrapper.select(\\\"id\\\", \\\"tags\\\"); queryWrapper.isNotNull(\\\"tags\\\"); // 获取所有用户列表 List<User> userList = this.list(queryWrapper); // 获取登录用户的标签 String tags = loginUser.getTags(); Gson gson = new Gson(); List<String> tagList = gson.fromJson(tags, new TypeToken<List<String>>() { }.getType()); // 创建一个优先队列，按照距离进行排序 队列始终保持最小距离的用户,每次删除编辑距离值最大的那个 PriorityQueue<Pair<User, Long>> priorityQueue = new PriorityQueue<>((a, b) -> (int) (b.getValue() - a.getValue())); // 遍历所有用户，计算距离并加入优先队列 for (User user : userList) { String userTags = user.getTags(); if (StringUtils.isBlank(userTags) || user.getId().equals(loginUser.getId())) { continue; } List<String> userTagList = gson.fromJson(userTags, new TypeToken<List<String>>() { }.getType()); int distance = AlgorithmUtils.minDistance(tagList, userTagList); priorityQueue.offer(new Pair<>(user, (long) distance)); // 保持优先队列的大小不超过 num if (priorityQueue.size() > num) { priorityQueue.poll(); } } //获取id列表 List<Long> matchUserIds = priorityQueue.stream() .map(userLongPair -> userLongPair.getKey().getId()) .collect(Collectors.toList()); QueryWrapper<User> userQueryWrapper = new QueryWrapper<>(); userQueryWrapper.in(\\\"id\\\", matchUserIds); List<User> users = this.list(userQueryWrapper) .stream() .map(this::getSafetyUser) .collect(Collectors.toList()); return users; } \",\"将两种方法进行测试比较\",\" @Override public List<User> matchUsers(long num, User loginUser) { //先查一次数据库，防止数据库连接耗时。影响了下面的对比 this.getById(loginUser.getId()); long startTime1 = System.currentTimeMillis(); List<User> users1 = matchUsersByListSorted(num, loginUser); long endTime1 = System.currentTimeMillis(); long executionTime1 = endTime1 - startTime1; long startTime2 = System.currentTimeMillis(); List<User> users2 = matchUsersByPriorityQueue(num, loginUser); long endTime2 = System.currentTimeMillis(); long executionTime2 = endTime2 - startTime2; log.info(\\\"使用list排序耗时：{}ms,使用优先队列耗时：{}ms,差距：{}ms,优化比例：{}%\\\", executionTime1, executionTime2, executionTime1 - executionTime2, (executionTime1 - executionTime2) * 100 / executionTime1); return users2; } \",\"结果如下：\",\"通过测试类进行测试：\",\"@Test void matchUsers() { int num = 10; User user = userService.getById(1001); long costTime1 = 0; long startTime1 = System.currentTimeMillis(); for (int i = 0; i < 100; i++) { List<User> users1 = userService.matchUsersByListSorted(num, user); } long endTime1 = System.currentTimeMillis(); costTime1 = endTime1 - startTime1; long startTime2 = System.currentTimeMillis(); for (int i = 0; i < 100; i++) { List<User> users2 = userService.matchUsersByPriorityQueue(num, user); } long endTime2 = System.currentTimeMillis(); long costTime2 = endTime2 - startTime2; log.info(\\\"100运算情况下：List排序耗时:{}ms,优先队列耗时:{}ms,相差:{}ms,优化比例:{}%\\\", costTime1, costTime2, costTime1 - costTime2, (costTime1 - costTime2) * 100 / costTime1); } \",\"结果如下：\"]},\"576\":{\"c\":[\"项目实战\",\"ikun伙伴匹配系统\"]},\"577\":{\"c\":[\"项目实战\",\"ikun伙伴匹配系统\"]},\"578\":{\"h\":\"用户中心1\"},\"579\":{\"h\":\"目的\",\"t\":[\"完整了解做项目的思路，接触一些企业级的开发技术\"]},\"580\":{\"h\":\"企业做项目流程\",\"t\":[\"需求分析=> 设计(概要设计，详细设计)=> 技术选型 =>初始化 /引入需要的技术 => 写小Demo =>写 代码(实验 业务逻辑) => 测试(单元测试) => 代码提交 /代码评审 => 部署发布\"]},\"581\":{\"h\":\"需求分析\",\"t\":[\"登录/注册\",\"用户管理（仅管理员可见）对用户对查询或者修改\",\"用户校验\"]},\"582\":{\"h\":\"技术选型\",\"t\":[\"前端：三件套+React+组件库Ant Design +Umi +Ant Design Pro（现成的管理系统）\",\"后端：Java+Spring+SpringMVC+Mybati+MybatisPlus+SpringBoot+MySQL\",\"部署：服务器/容器（平台）\"]},\"583\":{\"h\":\"前端页面初始化\",\"t\":[\"Ant Design Pro 官网 在这里面 \"]},\"584\":{\"h\":\"初始化项目\",\"t\":[\"运行安装命令\",\"npm i @ant-design/pro-cli -g pro create myapp \",\"选择umi版本为 umi@3\",\"安装依赖并运行：\",\"cd myapp &&yarn \",\"安装可视化界面\",\" yarn add @umijs/preset-ui -D \",\"运行项目\",\"yarn start \",\"成功运行：\"]},\"585\":{\"h\":\"项目瘦身\",\"t\":[\"移除一些不需要的东西：\",\"首先移除i18多国语言\",\"yarn i18n-remove \",\"删除src/e2e文件夹,因为此文件夹是用来测试的\",\"删除src/services/swagger，这是接口文档工具\",\"删除config/oneapi.json，也是前端mock数据类似的\",\"也需要删除配置里的关于oneapi的配置\",\"删除test文件夹，用不到测试\",\"删除 jest.config.js文件,测试用的\",\"删除playwright.conf前端用于测试的\"]},\"586\":{\"h\":\"后端初始化\",\"t\":[\"三种初始化 Java项目的方式\",\"GitHub搜现成的代码\",\"SpringBoot官方模版生成器\",\"IDEA生成\"]},\"587\":{\"h\":\"用到的依赖\",\"t\":[\"maven依赖官网：https://mvnrepository.com/\"]},\"588\":{\"h\":\"Lombok\",\"t\":[\" <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <optional>true</optional> </dependency> \"]},\"589\":{\"h\":\"devtools\",\"t\":[\"主要用于热更新\",\" <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-devtools</artifactId> <scope>runtime</scope> <optional>true</optional> </dependency> \"]},\"590\":{\"h\":\"processor\",\"t\":[\"主要用于读取配置文件\",\" <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-configuration-processor</artifactId> <optional>true</optional> </dependency> \"]},\"591\":{\"h\":\"MySQL\",\"t\":[\" <dependency> <groupId>com.mysql</groupId> <artifactId>mysql-connector-j</artifactId> <scope>runtime</scope> </dependency> \"]},\"592\":{\"h\":\"Spring Web\",\"t\":[\" <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> \"]},\"593\":{\"h\":\"Mybatis\",\"t\":[\" <dependency> <groupId>org.mybatis.spring.boot</groupId> <artifactId>mybatis-spring-boot-starter</artifactId> <version>3.0.2</version> </dependency> \"]},\"594\":{\"h\":\"Mybatis-Plus\",\"t\":[\"官网：https://baomidou.com/\",\" <dependency> <groupId>com.baomidou</groupId> <artifactId>mybatis-plus-boot-starter</artifactId> <version>3.5.3.2</version> </dependency> \"]},\"595\":{\"h\":\"配置文件\",\"t\":[\"application.yml\",\"spring: application: name: user-center datasource: driver-class-name: com.mysql.cj.jdbc.Driver url: jdbc:mysql://localhost:3306/qiuzhao username: root password: 12345678 server: port: 8080 mybatis-plus: configuration: map-underscore-to-camel-case: false \",\"启动类上面加注解扫描mapper包：\",\"@MapperScan(\\\"com.yunfei.usercenterback.mapper\\\") \"]},\"596\":{\"h\":\"数据库设计\",\"t\":[\"用户表：\",\"字段\",\"类型\",\"备注\",\"id\",\"varchar\",\"主键\",\"username\",\"varchar\",\"昵称\",\"userAccount\",\"varchar\",\"账号\",\"avatarUrl\",\"varchar\",\"头像\",\"gender\",\"tinyint\",\"性别\",\"password\",\"varchar\",\"密码\",\"phone\",\"varchar\",\"电话\",\"email\",\"varchar\",\"邮箱\",\"userStatus\",\"tinyint\",\"0-正常\",\"createTime\",\"datetime\",\"创建时间\",\"updateTime\",\"datetime\",\"更新时间\",\"isDelete\",\"tinyint\",\"是否删除\",\"userRole\",\"tinyint\",\"0-普通用户 1-管理员\",\"使用可视化界面 创建数据库：\",\"对应的SQL语句为：\",\"-- auto-generated definition create table user ( id bigint auto_increment comment '用户id' primary key, username varchar(256) null comment '用户昵称', userAccount varchar(256) null comment '用户账户', avatarUrl varchar(1024) null comment '用户头像', gender tinyint null comment '性别', userPassword varchar(512) not null comment '用户密码', phone varchar(128) null comment '点话', email varchar(512) null comment '邮箱', userStatus int default 0 not null comment '0-正常', createTime datetime default CURRENT_TIMESTAMP null comment '创建时间', updateTime datetime default CURRENT_TIMESTAMP null on update CURRENT_TIMESTAMP comment '更新时间', isDelete tinyint default 0 not null comment '是否删除' ) comment '用户'; \"]},\"597\":{\"h\":\"后端业务编写\"},\"598\":{\"h\":\"代码生成器\",\"t\":[\"MybatisX插件，可以自动生成domain实体对象等\",\"选择要生成的数据库的表，\",\"如下操作：\",\"下一步，按图中的选，mybatis-plus3\",\"生成的代码如下：\",\"测试生成的代码是否可行：\",\"来个头像链接：\",\"再来一个小的单元测试：\",\" @Test void testAddUser() { User user = new User(); user.setUsername(\\\"testuser\\\"); user.setUserAccount(\\\"123\\\"); user.setAvatarUrl(\\\"https://s2.loli.net/2023/10/16/QRiUYmDLB2vZuE6.webp\\\"); user.setGender(0); user.setUserPassword(\\\"123\\\"); user.setPhone(\\\"123\\\"); user.setEmail(\\\"123\\\"); boolean result = userService.save(user); System.out.println(user.getId()); Assertions.assertEquals(true,result); } \"]},\"599\":{\"h\":\"注册逻辑\",\"t\":[\"用户在前端输入账户，密码，校验码（todo ）\",\"校验用户的账户，密码，二次密码是否符合要求 \",\"账户不少于四位\",\"密码不少于四位\",\"账户不能重复\",\"账户不包含特殊字符\",\"其他的校验\",\"对密码进行加密(密码不能明文存储)\",\"向数据库插入用户数据\",\"为了进行非空校验，可以使用commons lang库进行非空校验\",\"maven依赖如下：\",\" <dependency> <groupId>org.apache.commons</groupId> <artifactId>commons-lang3</artifactId> </dependency> \",\"前端注册传的数据DTO：\",\"@Data public class UserRegisterDto { private String userAccount; private String userPassword; private String checkPassword; } \",\"Serivce接口：\",\" /** * 用户注册 * @param userRegisterDto 用户注册信息 * @return 用户id */ long userRegister(UserRegisterDto userRegisterDto); \",\"实现注册方法：\",\"重点逻辑,账户不能包含特殊字符\",\"String validPattern = \\\"^[a-zA-Z0-9_]+$\\\"; Matcher matcher = Pattern.compile(validPattern).matcher(userAccount); if (!matcher.find()) { return -1; } \",\"密码进行 md5加密：\",\"final String SALT = \\\"yunfei\\\"; String encryptPassword = DigestUtils.md5DigestAsHex((SALT + userPassword).getBytes()); \",\"完整代码：\",\"public long userRegister(UserRegisterDto userRegisterDto) { String userAccount = userRegisterDto.getUserAccount(); String userPassword = userRegisterDto.getUserPassword(); String checkPassword = userRegisterDto.getCheckPassword(); if (StringUtils.isAnyBlank(userAccount, userPassword, checkPassword)) { return -1; } if (userAccount.length() < 4) { return -1; } if (userPassword.length() < 4 || checkPassword.length() < 4) { return -1; } //账户不能包含字符 //账户不能包含特殊字符 String validPattern = \\\"^[a-zA-Z0-9_]+$\\\"; Matcher matcher = Pattern.compile(validPattern).matcher(userAccount); if (!matcher.find()) { return -1; } //密码和确认密码必须一致 if (!userPassword.equals(checkPassword)) { return -1; } //账户不能重复 QueryWrapper<User> userQueryWrapper = new QueryWrapper<>(); userQueryWrapper.eq(\\\"userAccount\\\", userAccount); long count = userMapper.selectCount(userQueryWrapper); if (count > 0) { return -1; } //加密 final String SALT = \\\"yunfei\\\"; String encryptPassword = DigestUtils.md5DigestAsHex((SALT + userPassword).getBytes()); //插入数据 User user = new User(); user.setUserAccount(userAccount); user.setUserPassword(encryptPassword); int result = userMapper.insert(user); if (result < 1) { return -1; } return user.getId(); } \"]},\"600\":{\"c\":[\"项目实战\",\"用户中心\"]},\"601\":{\"c\":[\"项目实战\",\"用户中心\"]},\"602\":{\"h\":\"用户中心2\"},\"603\":{\"h\":\"登录逻辑\",\"t\":[\"接受参数：用户账户，密码\",\"接受类型：POST\",\"请求体：JSON格式的数据\",\"请求参数很长时不建议用get\",\"返回值：用户信息(脱敏)\"]},\"604\":{\"h\":\"具体逻辑：\",\"t\":[\"校验用户的账户，密码，是否符合要求 \",\"账户不少于四位\",\"密码不少于四位\",\"账户不能重复\",\"账户不包含特殊字符\",\"其他的校验\",\"校验密码是否输入正确 ，要和数据库中的密码进行对比\",\"记录用户的登录态（Session），存到服务器上，（用后端SpringBoot 框架封装的服务器tomcat去记录）\",\"返回用户信息（脱敏）\"]},\"605\":{\"h\":\"如何知道是哪个用户？\",\"t\":[\"连接服务器之后，得到一个session态，返回给前端\",\"登录成功，得到登录成功的session，返回给前端一个设置cookie的命令 session => cookie\",\"前端接收到后端命令后，设置cookie，保存到浏览器中\",\"前端再次去请求后端的时候，在请求头中带着cookie去请求\",\"后端拿到前端传来的cookie，找到对应的session\",\"后端从session中可以取出基于该session存储的变量等。\",\"登录service\",\"/** * 用户登录 * * @param userLoginDto 用户登录信息 * @param request * @return 脱敏后的用户信息 */ User userLogin(UserLoginDto userLoginDto, HttpServletRequest request); \",\"重点逻辑，用户脱敏：\",\"//用户脱敏 User safetyUser = new User(); safetyUser.setId(user.getId()); safetyUser.setUsername(user.getUsername()); safetyUser.setUserAccount(userAccount); safetyUser.setAvatarUrl(user.getAvatarUrl()); safetyUser.setGender(user.getGender()); safetyUser.setPhone(user.getPhone()); safetyUser.setEmail(user.getEmail()); safetyUser.setUserStatus(user.getUserStatus()); \",\"记录登录态：\",\"request.getSession().setAttribute(UserConstant.USER_LOGIN_STATE,user); \",\"完整代码：\",\"public User userLogin(UserLoginDto userLoginDto, HttpServletRequest request) { String userAccount = userLoginDto.getUserAccount(); String userPassword = userLoginDto.getUserPassword(); if (StringUtils.isAnyBlank(userAccount, userPassword)) { //todo 修改为自定义异常 return null; } if (userAccount.length() < 4) { return null; } if (userPassword.length() < 4) { return null; } //账户不能包含字符 //账户不能包含特殊字符 String validPattern = \\\"^[a-zA-Z0-9_]+$\\\"; Matcher matcher = Pattern.compile(validPattern).matcher(userAccount); if (!matcher.find()) { return null; } String encryptPassword = DigestUtils.md5DigestAsHex((SALT + userPassword).getBytes()); //查询用户是否存在 QueryWrapper<User> userQueryWrapper = new QueryWrapper<>(); userQueryWrapper.eq(\\\"userAccount\\\", userAccount); userQueryWrapper.eq(\\\"userPassword\\\", encryptPassword); User user = userMapper.selectOne(userQueryWrapper); if (user == null) { log.info(\\\"user login failed, userAccount cannot match userPassword\\\"); return null; } //用户脱敏 User safetyUser = new User(); safetyUser.setId(user.getId()); safetyUser.setUsername(user.getUsername()); safetyUser.setUserAccount(userAccount); safetyUser.setAvatarUrl(user.getAvatarUrl()); safetyUser.setGender(user.getGender()); safetyUser.setPhone(user.getPhone()); safetyUser.setEmail(user.getEmail()); safetyUser.setUserStatus(user.getUserStatus()); //记录用户登录态 request.getSession().setAttribute(UserConstant.USER_LOGIN_STATE,user); return safetyUser; } \",\"这里注意，系统设置的删除并不是真正的删除，而是逻辑删除(0-未删除 1-删除)可以在mybatis-plus中设置\",\"mybatis-plus: configuration: map-underscore-to-camel-case: false global-config: db-config: logic-delete-field: flag # 全局逻辑删除的实体字段名(since 3.3.0,配置后可以忽略不配置步骤2) logic-delete-value: 1 # 逻辑已删除值(默认为 1) logic-not-delete-value: 0 # 逻辑未删除值(默认为 0) \"]},\"606\":{\"h\":\"控制器UserController\"},\"607\":{\"h\":\"提高效率的插件\",\"t\":[\"下面这个插件可以自动填充函数 的参数\",\"使用如下：\",\"此时就可以自动填充了\",\"完整逻辑如下：\",\"@RestController @RequestMapping(\\\"/user\\\") public class UserController { @Resource private UserService userService; @PostMapping(\\\"/register\\\") public Long userRegister(@RequestBody UserRegisterDto userRegisterDto) { if (userRegisterDto == null) { throw new RuntimeException(\\\"参数不能为空\\\"); } long id = userService.userRegister(userRegisterDto); return id; } @PostMapping(\\\"/login\\\") public User userLogin(@RequestBody UserLoginDto userLoginDto, HttpServletRequest request) { if (userLoginDto == null) { throw new RuntimeException(\\\"参数不能为空\\\"); } String userAccount = userLoginDto.getUserAccount(); String userPassword = userLoginDto.getUserPassword(); if (StringUtils.isAnyBlank(userAccount, userPassword)) { throw new RuntimeException(\\\"用户名或密码不能为空\\\"); } return userService.userLogin(userLoginDto, request); } } \"]},\"608\":{\"h\":\"登录注册测试\",\"t\":[\"使用RestfulTool 进行接口测试：\",\"测试成功：\",\"查询用户：\",\"@GetMapping(\\\"/search\\\") public List<User> searchUsers(String username, HttpServletRequest request) { if (!isAdmin(request)) { return new ArrayList<>(); } QueryWrapper<User> userQueryWrapper = new QueryWrapper<>(); if (StringUtils.isNotBlank(username)) { userQueryWrapper.like(\\\"username\\\", username); } List<User> userList = userService.list(userQueryWrapper); return userList.stream().map(user -> { return userService.getSafetyUser(user); }).collect(Collectors.toList()); } \",\"这里封装了一个用户脱敏的函数：\",\"@Override public User getSafetyUser(User user) { User safetyUser = new User(); safetyUser.setId(user.getId()); safetyUser.setUsername(user.getUsername()); safetyUser.setUserAccount(user.getUserAccount()); safetyUser.setAvatarUrl(user.getAvatarUrl()); safetyUser.setGender(user.getGender()); safetyUser.setPhone(user.getPhone()); safetyUser.setEmail(user.getEmail()); safetyUser.setUserStatus(user.getUserStatus()); safetyUser.setUserRole(user.getUserRole()); return safetyUser; } \",\"删除用户：\",\"@PostMapping(\\\"/delete/{id}\\\") public boolean deleteUser(@PathVariable Long id, HttpServletRequest request) { if (!isAdmin(request)) { return false; } if (id < 0) { return false; } return userService.removeById(id); } \",\"判断是不是管理员：\",\"private boolean isAdmin(HttpServletRequest request) { //仅管理员可以查询 User user = (User) request.getSession().getAttribute(UserConstant.USER_LOGIN_STATE); if (user == null || user.getUserRole() != UserConstant.ADMIN_USER_ROLE) { return false; } return true; } \"]},\"609\":{\"h\":\"前端代码编写\",\"t\":[\"修改页脚代码为自己的信息：\",\"{ key: 'github', title: <GithubOutlined />, href: 'https://github.com/yunfeidog', blankTarget: true, }, { key: 'Blog', title: 'Blog', href: 'https://yunfeidog.github.io/blogv2/', blankTarget: true, }, \",\"页脚如下：\",\"定义一个LOGO的常量：\",\"export const SYSTEM_LOGO = \\\"https://s2.loli.net/2023/10/16/QRiUYmDLB2vZuE6.webp\\\" \",\"使用：\",\" logo={<img alt=\\\"logo\\\" src={SYSTEM_LOGO} />} \",\"删掉一些代码，保留登录页面：\",\"修改前端登录参数：\",\" type LoginParams = { userAccount?: string; userPassword?: string; autoLogin?: boolean; type?: string; }; \"]},\"610\":{\"h\":\"前后端交互\",\"t\":[\"前端 需要向后端发送请求 ajax\",\"axios封装了ajax\",\"request 是ant design 项目又封装了aixos\",\"追踪request源码,用到了umi插件，requesConfig是一个配置\"]},\"611\":{\"h\":\"代理\",\"t\":[\"正向代理：替客户端向服务器发送请求\",\"反向代理：替服务器接受请求。\",\"Nginx服务器，nodejs服务器\",\"原本请求：http://localhost:8000/api/user/login\",\"代理之后：http://localhost:8080/user/login\",\"proxy.ts文件：\",\"dev: { // localhost:8000/api/** -> http://localhost:8080/api/** '/api/': { // 要代理的地址 target: 'http://localhost:8080', // 配置了这个可以从 http 代理到 https // 依赖 origin 的功能可能需要这个，比如 cookie changeOrigin: true, //去掉 api 前缀 pathRewrite: { '^/api': '' }, }, \",\"成功测试登录：\"]},\"612\":{\"h\":\"注册页面\",\"t\":[\"直接复制login页面进行修改即可：\",\"添加一个路由：\",\" { path: '/user', layout: false, routes: [ { name: '登录', path: '/user/login', component: './user/Login' }, { name: '注册', path: '/user/register', component: './user/Register' }, { component: './404' }, ], }, \",\"此时访问http://localhost:8000/user/register发现会重定向到login\",\"在app.tsx中，需要修改onPageChange和fetchUserInfo函数\",\" onPageChange: () => { const {location} = history; const whiteList = ['/user/register', loginPath] // 如果在白名单中，不做任何处理 if (whiteList.includes(location.pathname)) { return; } // 如果没有登录，重定向到 login if (!initialState?.currentUser && location.pathname !== loginPath) { history.push(loginPath); } }, \",\"此时发现 注册按钮的字是登录 无法进行修改，因为这是procomponents里面写死的组件这里我们查看源码进行修改\",\"找到登录按钮，这时就可以修改属性来 修改注册 按钮的值\",\"修改如下：\",\"成功：\",\"注册逻辑：\",\" const handleSubmit = async (values: API.RegisterParams) => { const {userPassword, checkPassword} = values; if (userPassword != checkPassword) { message.error('两次输入的密码不一致！'); return; } try { // 注册 const id = await register(values); if (id > 0) { const defaultLoginSuccessMessage = '注册成功！'; message.success(defaultLoginSuccessMessage); /** 此方法会跳转到 redirect 参数所在的位置 */ if (!history) return; const {query} = history.location; history.push({ pathname: '/user/login', query }) return; } else { throw new Error(`register error id =${id}`) } // 如果失败去设置用户错误信息 } catch (error) { const defaultLoginFailureMessage = '注册失败，请重试！'; message.error(defaultLoginFailureMessage); } }; \",\"注册 成功页面：\"]},\"613\":{\"h\":\"获取当前用户\",\"t\":[\"获取当前用户后端接口：\",\" @GetMapping(\\\"/current\\\") public User gerCurrentUser(HttpServletRequest request) { User user = (User) request.getSession().getAttribute(UserConstant.USER_LOGIN_STATE); if (user == null) { return null; } Long userId = user.getId(); User user1 = userService.getById(userId); return userService.getSafetyUser(user1); } \",\"修改前端每次刷新自动获取当前用户的逻辑：\",\"export async function getInitialState(): Promise<{ settings?: Partial<LayoutSettings>; currentUser?: API.CurrentUser; loading?: boolean; fetchUserInfo?: () => Promise<API.CurrentUser | undefined>; }> { // 页面刚进入时，获取用户信息 const fetchUserInfo = async () => { try { return await queryCurrentUser(); } catch (error) { // history.push(loginPath); } return undefined; }; // 如果是无需登录的页面，不执行 if (WHITE_LIST.includes(history.location.pathname)) { return { fetchUserInfo, settings: defaultSettings, }; } const currentUser = await fetchUserInfo(); return { fetchUserInfo, currentUser, settings: defaultSettings, }; } \"]},\"614\":{\"h\":\"查询用户表格\",\"t\":[\"复制一份组件，修改为UserManage,并且在Admin目录下面：\"]},\"615\":{\"h\":\"Ant Design Pro（Umi 框架）\",\"t\":[\"app.tsx 项目全局入口文件，定义了整个项目中使用的公共数据（比如用户信息）\",\"access.ts 控制用户的访问权限\",\"首次访问页面（刷新页面），进入 app.tsx，执行 getInitialState 方法，该方法的返回值就是全局可用的状态值。\",\"access.ts代码：用户判断当前用户是不是管理员\",\"export default function access(initialState: { currentUser?: API.CurrentUser } | undefined) { const { currentUser } = initialState ?? {}; return { canAdmin: currentUser && currentUser.userRole === 1, }; } \",\"添加一个路由，用户管理：\",\" { path: '/admin', name: '管理页', icon: 'crown', access: 'canAdmin', component: './Admin', // 该组件下的路由都会被添加到路由配置中 routes: [ { path: '/admin/user-manage', name: '用户管理', icon: 'smile', component: './Admin/UserManage' }, { component: './404' }, ], }, \",\"修改Admin.tsx页面，使用children来控制子页面： 里面的children就是子页面\",\"const Admin: React.FC = (props) => { const {children} = props; return ( <PageHeaderWrapper> {children} </PageHeaderWrapper> ); }; export default Admin; \"]},\"616\":{\"h\":\"ProComponents 高级表单\",\"t\":[\"通过 columns 定义表格有哪些列\",\"columns 属性 \",\"dataIndex 对应返回数据对象的属性\",\"title 表格列名\",\"copyable 是否允许复制\",\"ellipsis 是否允许缩略\",\"valueType：用于声明这一列的类型（dateTime、select）\",\"直接复制源代码进行使用\",\"前端定义搜索用户接口：\",\"/** 搜索用户 GET /api/search */ export async function searchUsers(options?: { [key: string]: any }) { return request<API.CurrentUser[]>('/api/user/search', { method: 'GET', ...(options || {}), }); } \",\"查询表格完整代码如下：\",\"import type {ActionType, ProColumns} from '@ant-design/pro-components'; import {ProTable, TableDropdown} from '@ant-design/pro-components'; import {useRef} from 'react'; import {searchUsers} from \\\"@/services/ant-design-pro/api\\\"; import {SYSTEM_LOGO} from \\\"@/constant\\\"; const columns: ProColumns<API.CurrentUser>[] = [ { dataIndex: 'id', title: 'ID', width: 48, }, { title: '用户名', dataIndex: 'username', copyable: true, }, { title: '用户账户', dataIndex: 'userAccount', copyable: true, }, { title: '用户头像', dataIndex: 'avatarUrl', render: (_, record) => ( <div> <img src={record.avatarUrl ?? SYSTEM_LOGO} alt={\\\"cxk\\\"} width={100}/> {/*<Image src={record.avatarUrl} width={100}/>*/} </div> ), copyable: true, }, { title: '性别', dataIndex: 'gender', }, { title: '电话', dataIndex: 'phone', copyable: true, }, { title: '邮件', dataIndex: 'email', copyable: true, }, { title: '状态', dataIndex: 'userStatus', }, { title: '角色', dataIndex: 'userRole', valueType: 'select', valueEnum: { 0: {text: '普通用户', status: 'Default'}, 1: {text: '管理员', status: 'Success'}, } }, { title: '创建时间', dataIndex: 'createTime', valueType: 'date', }, { title: '操作', valueType: 'option', key: 'option', render: (text, record: any, _, action) => [ <a key=\\\"editable\\\" onClick={() => { action?.startEditable?.(record.id); }} > 编辑 </a>, <a href={record.url} target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\" key=\\\"view\\\"> 查看 </a>, <TableDropdown key=\\\"actionGroup\\\" onSelect={() => action?.reload()} menus={[ {key: 'copy', name: '复制'}, {key: 'delete', name: '删除'}, ]} />, ], }, ]; export default () => { const actionRef = useRef<ActionType>(); // @ts-ignore return ( <ProTable<API.CurrentUser> columns={columns} actionRef={actionRef} cardBordered request={async (params = {}, sort, filter) => { console.log(sort, filter); const userList = await searchUsers(); return { data: userList } }} editable={{ type: 'multiple', }} columnsState={{ persistenceKey: 'pro-table-singe-demos', persistenceType: 'localStorage', onChange(value) { console.log('value: ', value); }, }} rowKey=\\\"id\\\" search={{ labelWidth: 'auto', }} // options={{ // setting: { // listsHeight: 400, // }, // }} form={{ // 由于配置了 transform，提交的参与与定义的不同这里需要转化一下 syncToUrl: (values, type) => { if (type === 'get') { return { ...values, created_at: [values.startTime, values.endTime], }; } return values; }, }} pagination={{ pageSize: 5, onChange: (page) => console.log(page), }} dateFormatter=\\\"string\\\" headerTitle=\\\"高级表格\\\" /> ); }; \",\"页面 效果如下：\",\"Todo: bug 使用react自带的Image标签无法请求后端，但是自带的 img可以。\"]},\"617\":{\"c\":[\"项目实战\",\"用户中心\"]},\"618\":{\"c\":[\"项目实战\",\"用户中心\"]},\"619\":{\"h\":\"用户中心3\"},\"620\":{\"h\":\"用户注销\",\"t\":[\"后端代码：\",\" @PostMapping(\\\"/logout\\\") public Integer logout(HttpServletRequest request) { if (request == null) { return null; } return userService.logout(request); } @Override public Integer logout(HttpServletRequest request) { request.getSession().removeAttribute(UserConstant.USER_LOGIN_STATE); return 1; } \",\"前端接口：\",\"/** 退出登录接口 POST /api/user/logout */ export async function outLogin(options?: { [key: string]: any }) { return request<Record<string, any>>('/api/user/logout', { method: 'POST', ...(options || {}), }); } \"]},\"621\":{\"h\":\"后端优化\"},\"622\":{\"h\":\"封装通用返回对象\",\"t\":[\"目的：给对象补充一些信息，告诉前端这个请求在业务层面上是成功还是失败了\",\"{ \\\"code\\\":xxx, \\\"data\\\":{ }, \\\"msg\\\":xxx } \"]},\"623\":{\"h\":\"定义统一返回结果Result\",\"t\":[\"package com.yunfei.usercenterback.common; import lombok.Data; import java.io.Serializable; @Data public class Result<T> implements Serializable { private Integer code; private T data; private String message; private String description; public Result(Integer code, T data, String message,String description) { this.code = code; this.data = data; this.message = message; this.description = description; } public Result(Integer code, T data,String message) { this(code,data,message,\\\"\\\"); } public Result(Integer code,T data){ this(code,data,\\\"\\\",\\\"\\\"); } public Result(Code code) { this(code.getCode(),null,code.getMessage(),code.getDescription()); } } \"]},\"624\":{\"h\":\"定义创建Result对象的ResultUtils\",\"t\":[\"package com.yunfei.usercenterback.common; public class ResultUtils { public static <T> Result<T> success(T data) { return new Result<>(0, data, \\\"ok\\\"); } public static Result error(Integer code, String message, String description) { return new Result(code, null, message, description); } public static Result error(Code code, String message, String description) { return new Result(code.getCode(), message, description); } public static Result error(Code code, String description) { return new Result(code.getCode(), code.getMessage(), description); } } \"]},\"625\":{\"h\":\"定义Code枚举类\",\"t\":[\"package com.yunfei.usercenterback.common; /** * 错误码 */ public enum Code { SUCCESS(0, \\\"ok\\\", \\\"\\\"), PARAMS_ERROR(40000, \\\"请求参数错误\\\", \\\"\\\"), PARAMS_NULL_ERROR(40001,\\\"请求参数为空\\\",\\\"\\\"), NO_AUTH(40100, \\\"没有权限\\\", \\\"\\\"), NOT_LOGIN(40101, \\\"未登录\\\", \\\"\\\"), SYSTEM_ERROR(50000, \\\"系统内部异常\\\", \\\"\\\"), ; private final Integer code; private final String message; private final String description; Code(Integer code, String message, String description) { this.code = code; this.message = message; this.description = description; } public Integer getCode() { return code; } public String getMessage() { return message; } public String getDescription() { return description; } } \"]},\"626\":{\"h\":\"封装全局异常处理\",\"t\":[\"定义业务异常类 \",\"相对于Java的异常类，支持更多的字段\",\"自定义构造函数，更灵活/快捷的设置字段\",\"全局异常处理器 \",\"捕获代码中所有的异常，集中处理，不然前端感受到异常\",\"同时屏蔽掉项目框架本身的异常\",\"实现：\",\"使用Spring AOP 在调用方法前后进行额外的处理\"]},\"627\":{\"h\":\"BussinessException类：\",\"t\":[\"package com.yunfei.usercenterback.exception; import com.yunfei.usercenterback.common.Code; /** * 自定义异常 业务异常 */ public class BussinessException extends RuntimeException { private final Integer code; private final String description; public BussinessException(Integer code, String message, String description) { super(message); this.code = code; this.description = description; } public BussinessException(Code code) { super(code.getMessage()); this.code = code.getCode(); this.description = code.getDescription(); } public BussinessException(Code code, String description) { super(code.getMessage()); this.code = code.getCode(); this.description = description; } public Integer getCode() { return code; } public String getDescription() { return description; } } \"]},\"628\":{\"h\":\"GlobalExceptionHandler类\",\"t\":[\"package com.yunfei.usercenterback.exception; import com.yunfei.usercenterback.common.Code; import com.yunfei.usercenterback.common.Result; import com.yunfei.usercenterback.common.ResultUtils; import lombok.extern.slf4j.Slf4j; import org.springframework.web.bind.annotation.ExceptionHandler; import org.springframework.web.bind.annotation.RestControllerAdvice; @RestControllerAdvice @Slf4j public class GlobalExceptionHandler { @ExceptionHandler(BussinessException.class) public Result businessExceptionHandler(BussinessException e) { log.error(\\\"businessException:\\\" + e.getMessage(), e); return ResultUtils.error(e.getCode(), e.getMessage(), e.getDescription()); } @ExceptionHandler(RuntimeException.class) public Result runtimeExceptionHandler(RuntimeException e) { log.error(\\\"runtimeException\\\", e); return ResultUtils.error(Code.SYSTEM_ERROR, e.getMessage(), \\\"\\\"); } } \"]},\"629\":{\"h\":\"前端优化\"},\"630\":{\"h\":\"全局响应处理\",\"t\":[\"需要对接口的 通用响应 进行统一处理，比如从 response 中取出 data；或者根据 code 去集中处理错误，比如用户未登录、没权限之类的。\",\"优点：不需要在每个接口请求中都去写相同的逻辑\",\"参考文档：https://blog.csdn.net/huantai3334/article/details/116780020\",\"新建一个自己的request.ts文件：\",\"/** * request 网络请求工具 * 更详细的 api 文档: https://github.com/umijs/umi-request */ import {extend} from 'umi-request'; import {message} from \\\"antd\\\"; import {stringify} from \\\"querystring\\\"; import {history} from \\\"umi\\\"; /** * 配置request请求时的默认参数 */ const request = extend({ credentials: 'include', // 默认请求是否带上cookie }); /** * 所以请求拦截器 */ request.interceptors.request.use((url, options): any => { console.log(`do request url=${url}`) return { url, options: { ...options, headers: {}, }, }; }); /** * 所有响应拦截器 */ request.interceptors.response.use(async (response, options): Promise<any> => { const res = await response.clone().json(); if (res.code === 0) { return res.data } if (res.code === 40100) { message.error(\\\"请先登录\\\") //跳转到登录页面 history.replace({ pathname: '/user/login', search: stringify({ redirect: location.pathname }), }) }else{ message.error(res.description) return null; } return res; }); export default request; \",\"定义一个统一结果返回类型：\",\" type Result<T> = { code: number; data: T; message: string; description: string; } \",\"修改原本接口的返回结果类型：\",\"使用自己的request，而不是umi的request\",\"成功完成对接：\"]},\"631\":{\"c\":[\"项目实战\",\"用户中心\"]},\"632\":{\"c\":[\"项目实战\",\"用户中心\"]},\"633\":{\"h\":\"用户中心4-部署\"},\"634\":{\"h\":\"多环境\",\"t\":[\"本地开发：localhost{127.0.0.1}\",\"多环境：同一套项目代码在不同的阶段需要根据实际情况 来调整配置 并且数部署 到不同的机器上\",\"为什么需要？\",\"每个环境互不影响\",\"为了区分不同的阶段：开发/测试\",\"对项目进行优化： \",\"本地日志\",\"精简依赖，节省项目体积，\",\"参数调整，比如JVM参数\",\"多环境 分类：\",\"本地环境（自己的电脑）localhost\",\"开发环境（远程开发）连同一台机器\",\"测试环境 开发/测试/产品 ，性能测试/单元测试/功能测试/系统集成测试，独立的数据库/独立的服务器\",\"预发布环境，和正式环境 一致，正式数据库\",\"正式环境，保证代码是“完美的”\",\"沙箱环境：为了做实验\"]},\"635\":{\"h\":\"前端多环境\",\"t\":[\"用了umi框架，build的时候 会自动传入NODE_ENV==production参数 ，\",\"启动方式：\",\"开发环境：npm run start\",\"线上环境：npm run build 项目构建打包，可以使用serve服务器\",\"在自己的请求里面添加请求前缀，如果是production环境，就用服务器url\",\"const request = extend({ credentials: 'include', // 默认请求是否带上cookie prefix:process.env.NODE_ENV==='production'?'your real url':undefined }); \",\"项目的配置\",\"不同的项目框架都有不同的配置文件，umi的配置文件是config，可以在配置文件后添加对应的环境名称后缀来区分开发环境和生产环境\",\"开发环境：config.dev.ts\",\"生产环境：config.prod.ts\",\"公共配置：config.ts\"]},\"636\":{\"h\":\"后端多环境\",\"t\":[\"新建一个application-prod.yml文件，里面配置自己服务器的信息\",\"连接服务器的时候遇到下面这个报错，可以在url里面添加 useSSL=false\",\"将写好的代码打包为jar包\",\"可以在启动时启动环境变量\",\"java -jar usercenter-back-0.0.1.jar --spring.profiles.active=prod \"]},\"637\":{\"h\":\"部署\",\"t\":[\"什么都需要 自己装\"]},\"638\":{\"h\":\"前端\",\"t\":[\"需要web服务器 ：nginx，apache，tomcat\"]},\"639\":{\"h\":\"安装nginx服务器\",\"t\":[\"下载源码到服务器\",\"curl -o nginx-1.21.6.tar.gz http://nginx.org/download/nginx-1.21.6.tar.gz \",\"解压：\",\"tar -zxvf nginx-1.21.6.tar.gz \",\"进入文件夹\",\"cd nginx-1.21.6 \",\"安装依赖：\",\"yum install pcre pcre-devel -y yum install openssl openssl-devel -y \",\"配置\",\"./configure --with-http_ssl_module --with-http_v2_module --with-stream \",\"make \",\"make install \",\"查看是否安装好\",\"ls /usr/local/nginx/sbin/nginx \",\"设置环境变量：\",\"Vim /etc/profile\",\"export PATH=$PATH:/usr/local/nginx/sbin \",\"启动nginx\",\"nginx \",\"查看运行 情况\",\"netstat -ntlp \",\"重新加载：\",\"nginx -s reload \",\"停止\",\"nginx -s stop \",\"nginx配置文件目录在/usr/local/nginx/conf\",\"查看端口占用：\",\"netstat -ntlp \",\"或者\",\"上传文件解压：\",\"unzip dist.zip \",\"我的html页面在/root/services/dist文件夹下面\",\"修改nginx配置文件：\",\"查看nginx进程\",\"ps -ef |grep 'nginx' \",\"此时发现nginx进程的启动者是nobody，需要修改为root,否则没有权限访问文件夹\",\"重新加载 ：\",\"nginx -s reload \",\"部署 成功：\"]},\"640\":{\"h\":\"后端\",\"t\":[\"安装Java\",\"yum install -y java-1.8.0-openjdk* \",\"将构建好的jar包上传到服务器\",\"使用下面命令运行代码\",\"java -jar +文件名 \",\"但是这样不是在后台运行，修改命令如下：\",\"让进程在后台运行\",\"nohup java -jar usercenter-back-0.0.1.jar & \",\"输入jobs查看状态\",\"或者使用 netstat -ntlp查看\"]},\"641\":{\"h\":\"宝塔部署\",\"t\":[\"先安装宝塔面板\",\"登录宝塔后进入软件商店，安装tomcat和nginx\",\"后端：\"]},\"642\":{\"h\":\"Docker部署\",\"t\":[\"可以将环境 代码一起打包为镜像\",\"Dockerfile 编写：\",\"FROM 依赖的基础镜像\",\"WORKDIR 工作目录\",\"COPY 从本机复制文件\",\"RUN 执行命令\",\"CMD / ENTRYPOINT（附加额外参数）指定运行容器时默认执行的命令\"]},\"643\":{\"h\":\"前端\",\"t\":[\"下面无需改动\",\"Dockerfile\",\"FROM nginx WORKDIR /usr/share/nginx/html/ USER root COPY ./docker/nginx.conf /etc/nginx/conf.d/default.conf COPY ./dist /usr/share/nginx/html/ EXPOSE 80 CMD [\\\"nginx\\\", \\\"-g\\\", \\\"daemon off;\\\"] \",\"docker/nginx.conf\",\"server { listen 80; # gzip config gzip on; gzip_min_length 1k; gzip_comp_level 9; gzip_types text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml; gzip_vary on; gzip_disable \\\"MSIE [1-6]\\\\.\\\"; root /usr/share/nginx/html; include /etc/nginx/mime.types; location / { try_files $uri /index.html; } } \",\"后端Dockerfile\",\"需要改一下启动参数\",\"FROM maven:3.5-jdk-8-alpine as builder # Copy local code to the contaier image WORKDIR /app COPY pom.xml . COPY src ./src # Build a release artifact RUN mvn package -DskipTests # Run the web service on container startup CMD [\\\"java\\\", \\\"-jar\\\", \\\"/app/target/usercenter-back-0.0.1.jar\\\"] \",\"根据 Dockerfile 构建镜像：\",\"# 后端 docker build -t user-center-backend:v0.0.1 . # 前端 docker build -t user-center-frontend:v0.0.1 . \",\"使用如下命令查看镜像\",\"关闭占用80和8080端口的进程\",\"启动：\",\"docker run 启动\",\"# 前端 docker run -p 80:80 -d user-center-frontend:v0.0.1 # 后端 docker run -p 8080:8080 user-center-backend:v0.0.1 \",\"进入容器\",\"docker exec -i -t fee2bbb7c9ee /bin/bash \",\"查看进程\",\"docker ps \",\"查看日志\",\"docker logs -f [container-id] \",\"杀死容器\",\"docker kill \",\"强制删除镜像\",\"docker rmi -f \",\"成功部署，并且接通后端\"]},\"644\":{\"c\":[\"项目实战\",\"用户中心\"]},\"645\":{\"c\":[\"项目实战\",\"用户中心\"]},\"646\":{\"h\":\"用户中心5-持续优化\",\"t\":[\"部署上面的优化：\",\"这些把前端也通过打包的方式进行构建，每次修改页面之后都要重新打包构建一个镜像，不方便动态的修改页面\",\"考虑使用数据卷挂载的方式来启动docker\",\"docker run -p 80:80 -d --name user-center-frontend \\\\ -v /www/wwwroot/user-center/dist:/usr/share/nginx/html \\\\ -v /www/wwwroot/user-center/nginx.conf:/etc/nginx/nginx.conf \\\\ nginx:latest \",\"解释：\",\"/www/wwwroot/user-center 是服务器上的前端文件和Nginx配置文件的目录。\",\"/usr/share/nginx/html 是Nginx容器内的默认HTML根目录，通过挂载可以让Nginx访问这些文件。\",\"/etc/nginx/nginx.conf 是Nginx配置文件，也通过挂载让容器内的Nginx使用该配置文件。\",\"修改前端代码和Nginx配置：在服务器上的/www/wwwroot/user-center目录中进行前端代码和Nginx配置的修改。\",\"重启Docker容器：在容器内，可以使用以下命令来重新加载Nginx，以应用前端文件和Nginx配置的更改：\",\"进入 nginx容器：\",\"docker exec -it user-center-frontend /bin/bash \",\"热更新nginx\",\"nginx -s reload \",\"Nginx.conf的配置文件内容为：\",\"events { worker_connections 1024; } http{ server { listen 80; # gzip config gzip on; gzip_min_length 1k; gzip_comp_level 9; gzip_types text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml; gzip_vary on; gzip_disable \\\"MSIE [1-6]\\\\.\\\"; root /usr/share/nginx/html; include /etc/nginx/mime.types; server_name 121.40.105.246; location / { try_files $uri /index.html; } location /api { proxy_pass http://121.40.105.246:8080; } } } \",\"下次有想要的东西，可以直接放在dist 目录下面即可。\"]},\"647\":{\"c\":[\"项目实战\",\"用户中心\"]},\"648\":{\"c\":[\"项目实战\",\"用户中心\"]},\"649\":{\"h\":\"谷粒商城分布式基础篇\"},\"650\":{\"h\":\"环境搭建\"},\"651\":{\"h\":\"Docker安装mysql\",\"t\":[\"拉取镜像image\",\"docker pull mysql \",\"创建实例container并启动\",\"docker run -p 3307:3306 --name mysql \\\\ -v ~/tools/docker-volumes/mysql/log:/var/log/mysql \\\\ -v ~/tools/docker-volumes/mysql/data:/var/lib/mysql \\\\ -v ~/tools/docker-volumes/mysql/conf:/etc/mysql/conf.d \\\\ -e MYSQL_ROOT_PASSWORD=12345678 \\\\ -d mysql:latest \",\"参数说明\",\"-p 3307:3306: 将容器内部的3306端口映射到主机的3307端口，即将容器中的 MySQL 服务映射到主机上的3307端口。\",\"--name mysql: 为容器指定一个名称，这里为 \\\"mysql\\\"。\",\"-v ~/tools/docker-volumes/mysql/log:/var/log/mysql: 将主机上的 ~/tools/docker-volumes/mysql/log 目录挂载到容器内的 /var/log/mysql 目录，用于存储 MySQL 的日志文件。\",\"-v ~/tools/docker-volumes/mysql/data:/var/lib/mysql: 将主机上的 ~/tools/docker-volumes/mysql/data 目录挂载到容器内的 /var/lib/mysql 目录，用于存储 MySQL 的数据文件。\",\"-v ~/tools/docker-volumes/mysql/conf:/etc/mysql: 将主机上的 ~/tools/docker-volumes/mysql/conf 目录挂载到容器内的 /etc/mysql 目录，用于存储 MySQL 的配置文件。\",\"-e MYSQL_ROOT_PASSWORD=12345678: 设置 MySQL 的 root 用户密码为 \\\"12345678\\\"。\",\"-d mysql:latest: 以后台模式运行最新版本的 MySQL 容器。\",\"进入容器：\",\"docker exec -it mysql /bin/bash \",\"我的配置文件挂载到了~/tools/docker-volumes/mysql/conf文件夹下面，因此需要在这个文件夹下面创建一个my.cnf的配置文件\",\"vim my.cnf \",\"输入以下配置内容：\",\"[client] default-character-set=utf8 [mysql] default-character-set=utf8 [mysqld] init_connect='SET collation_connection = utf8_unicode_ci' init_connect='SET NAMES utf8' character-set-server=utf8 collation-server=utf8_unicode_ci skip-character-set-client-handshake skip-name-resolve \",\"接着重启mysql：\",\"docker restart mysql \"]},\"652\":{\"h\":\"Docker 安装redis\",\"t\":[\"拉取镜像image\",\"docker pull redis \",\"先提前创建一个redis.conf配置文件在~/tools/docker-volumes/redis/conf目录下面\",\"运行redis容器：\",\"docker run -p 6379:6379 --name redis -v ~/tools/docker-volumes/redis/data:/data \\\\ -v ~/tools/docker-volumes/redis/conf/redis.conf:/etc/redis/redis.conf \\\\ -d redis redis-server /etc/redis/redis.conf \",\"使用redis-cli\",\"docker exec -it redis redis-cli \",\"新版本已经默认可以数据持久化了\",\"设置开机自启：\",\"docker update redis --restart=always \"]},\"653\":{\"h\":\"创建项目\",\"t\":[\"父级maven用于聚合\",\" <groupId>com.cxk</groupId> <artifactId>gulimall</artifactId> <version>0.0.1</version> <name>gulimall</name> <description>聚合服务</description> <modules> <module>gulimall-coupon</module> <module>gulimall-member</module> <module>gulimall-order</module> <module>gulimall-product</module> <module>gulimall-ware</module> </modules> \",\"项目结构如下：\",\"报错：\",\"解决办法：将父级pom文件里面设置：\",\" <packaging>pom</packaging> \"]},\"654\":{\"h\":\"数据库导入\",\"t\":[\"创建五个数据库，再导入sql文件\"]},\"655\":{\"h\":\"开源项目导入\",\"t\":[\"导入开源项目renren-fast-vue:https://gitee.com/renrenio/renren-fast-vue\",\"导入开源项目renren-fast:https://gitee.com/renrenio/renren-fast\",\"父级maven加入renrnefast依赖：\",\" <modules> <module>gulimall-coupon</module> <module>gulimall-member</module> <module>gulimall-order</module> <module>gulimall-product</module> <module>gulimall-ware</module> <module>renren-fast</module> </modules> \",\"创建数据库gulimall_admin并导入sql\",\"前端安装依赖的时候会有很多报错，解决办法如下（M1 Pro芯片）：要加sudo\",\"使用nvm， node版本选择v12.22.12\",\"1.先安装node-sass: sudo npm install node-sass@npm:sass --ignore-scripts\",\"2.安装chromedriver的时候会报错\",\"这时候先去下载链接中的这个chromedriver,\",\"然后再安装，使用命令：后面的位置要改为自己的下载路径\",\"sudo npm install chromedriver --chromedriver_filepath=/Users/houyunfei/Downloads/chromedriver_mac64.zip\",\"最后再安装其他依赖：sudo npm install \",\"成功登录：\",\"导入开源项目renren-generator：https://gitee.com/renrenio/renren-generator\",\"加入父级maven\",\" <modules> <module>gulimall-coupon</module> <module>gulimall-member</module> <module>gulimall-order</module> <module>gulimall-product</module> <module>gulimall-ware</module> <module>renren-fast</module> <module>renren-generator</module> </modules> \",\"修改代码生成器数据库信息为自己要生成的数据库：\",\"修改下面几项信息：\",\"访问localhost:\",\"勾选所有表，然后生成代码，将生成的main文件夹复制到项目中，因为代码中有报错，缺少代码，所以还要进行下面的操作\",\"创建gulimall-common模块，再让其他模块添加这个依赖\",\"common模块导入mybatisplus等依赖\",\" <!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --> <dependency> <groupId>javax.servlet</groupId> <artifactId>javax.servlet-api</artifactId> <version>3.1.0</version> <scope>provided</scope> </dependency> <dependency> <groupId>com.baomidou</groupId> <artifactId>mybatis-plus-boot-starter</artifactId> <version>3.2.0</version> </dependency> <dependency> <groupId>com.mysql</groupId> <artifactId>mysql-connector-j</artifactId> <version>8.0.33</version> </dependency> <!-- https://mvnrepository.com/artifact/org.apache.httpcomponents/httpcore --> <dependency> <groupId>org.apache.httpcomponents</groupId> <artifactId>httpcore</artifactId> <version>4.4.12</version> </dependency> <dependency> <groupId>commons-lang</groupId> <artifactId>commons-lang</artifactId> <version>${commons.lang.version}</version> </dependency> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <version>1.18.8</version> </dependency> \",\"暂时用不到RequiresPermissions，可以先将逆向工程里的这个注释掉，然后重新生成代码\",\"其他地方报错的，可以将renrenfast里面的代码复制过来，大概有如下几个：\",\"导入mybatis plus配置：\",\"启动类加MapperScan\",\"@SpringBootApplication @MapperScan(\\\"com.cxk.gulimall.product.dao\\\") public class GulimallProductApplication { public static void main(String[] args) { SpringApplication.run(GulimallProductApplication.class, args); } } \",\"配置文件：\",\"spring: datasource: username: root password: 12345678 url: jdbc:mysql://localhost:3307/gulimall_pms?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai driver-class-name: com.mysql.cj.jdbc.Driver mybatis-plus: mapper-locations: \\\"classpath*:/mapper/**/*.xml\\\" # mapper文件位置 global-config: db-config: id-type: auto # 自增 \",\"maven多模块聚合compile 时报错：\",\"执行命令：\",\"mvn clean install -U \",\"清理本地仓库并重新构建\",\"写个测试类测试：\",\"package com.cxk.product; import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper; import com.cxk.gulimall.product.GulimallProductApplication; import com.cxk.gulimall.product.entity.BrandEntity; import com.cxk.gulimall.product.service.BrandService; import org.junit.Test; import org.junit.runner.RunWith; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.test.context.SpringBootTest; import org.springframework.test.context.junit4.SpringRunner; import java.util.List; @SpringBootTest(classes=GulimallProductApplication.class) @RunWith(SpringRunner.class) public class GulimallProductApplicationTests { @Autowired private BrandService brandService; @Test public void contextLoads() { BrandEntity brandEntity = new BrandEntity(); brandEntity.setName(\\\"华为\\\"); boolean save = brandService.save(brandEntity); System.out.println(\\\"保存成功：\\\" + save); LambdaQueryWrapper<BrandEntity> wrapper = new LambdaQueryWrapper<>(); wrapper.eq(BrandEntity::getBrandId, 6L); List<BrandEntity> list = brandService.list(wrapper); list.forEach(System.out::println); } @Test public void test(){ } } \",\"接下来为其他服务也逆向生成代码：\",\"优惠券系统coupon\",\"修改配置generator.properties\",\"mainPath=com.cxk #\\\\u5305\\\\u540D package=com.cxk.gulimall moduleName=coupon #\\\\u4F5C\\\\u8005 author=yunfei #Email email=hyf1844025705@gmail.com #\\\\u8868\\\\u524D\\\\u7F00(\\\\u7C7B\\\\u540D\\\\u4E0D\\\\u4F1A\\\\u5305\\\\u542B\\\\u8868\\\\u524D\\\\u7F00) tablePrefix=sms_ \",\"以及mysql：\",\"# mysql spring: datasource: type: com.alibaba.druid.pool.DruidDataSource #MySQL配置 driverClassName: com.mysql.cj.jdbc.Driver url: jdbc:mysql://localhost:3307/gulimall_sms?useUnicode=true&characterEncoding=UTF-8&useSSL=false&serverTimezone=Asia/Shanghai username: root password: 12345678 \",\"加入common模块依赖：\",\" <dependency> <groupId>com.cxk</groupId> <artifactId>gulimall-common</artifactId> <version>0.0.1-SNAPSHOT</version> </dependency> \"]},\"656\":{\"h\":\"分布式组件\"},\"657\":{\"h\":\"SpringCloud Alibaba\",\"t\":[\"eureka停止维护，这里使用spring cloud Alibaba\",\"根据spring cloud Alibaba 技术搭配方案：https://github.com/alibaba/spring-cloud-alibaba/blob/2022.x/README-zh.md\",\"SpringCloud Alibaba - Nacos：注册中心（服务发现/注册）\",\"SpringCloud Alibaba - Nacos：配置中心（动态配置管理）（相当于替换eureka）\",\"SpringCloud - Ribbon：负载均衡\",\"SpringCloud - Feign：声明式 HTTP 客户端（调用远程服务）\",\"SpringCloud Alibaba - Sentinel：服务容错（限流、降级、熔断）\",\"SpringCloud - Gateway：API 网关（webflux 编程模式）\",\"SpringCloud - Sleuth：调用链监控\",\"SpringCloud Alibaba - Seata：原 Fescar，即分布式事务解决方案\",\"导入依赖到common模块：\",\" <dependencyManagement> <dependencies> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-dependencies</artifactId> <version>${spring-cloud.version}</version> <type>pom</type> <scope>import</scope> </dependency> <dependency> <groupId>com.alibaba.cloud</groupId> <artifactId>spring-cloud-alibaba-dependencies</artifactId> <version>2.1.0.RELEASE</version> <type>pom</type> <scope>import</scope> </dependency> </dependencies> </dependencyManagement> \"]},\"658\":{\"h\":\"Nacos注册中心\",\"t\":[\"Mac启动nacos\",\" sh startup.sh -m standalone \",\"导入到common模块：\",\" <!-- 服务注册/发现--> <dependency> <groupId>com.alibaba.cloud</groupId> <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId> </dependency> \",\"在其他模块如coupon中：\",\"spring: cloud: nacos: discovery: server-addr: localhost:8848 # nacos服务注册中心地址 application: name: gulimall-coupon # 应用名称 \",\"在启动类上面加注解EnableDiscoveryClient：\",\"@SpringBootApplication @EnableDiscoveryClient public class GulimallCouponApplication { public static void main(String[] args) { SpringApplication.run(GulimallCouponApplication.class, args); } } \",\"启动后：\"]},\"659\":{\"h\":\"OpenFeign远程调用\",\"t\":[\"导入依赖到每个模块\",\" <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> \",\"写一个接口：\",\"@RestController @RequestMapping(\\\"coupon/coupon\\\") public class CouponController { @Autowired private CouponService couponService; @RequestMapping(\\\"/member/list\\\") public R membercoupons(){ CouponEntity couponEntity = new CouponEntity(); couponEntity.setCouponName(\\\"满100减10\\\"); return R.ok().put(\\\"coupons\\\", Arrays.asList(couponEntity)); } } \",\"在member模块进行远程调用：\",\"package com.cxk.gulimall.member.feign; import com.cxk.common.utils.R; import org.springframework.cloud.openfeign.FeignClient; import org.springframework.web.bind.annotation.RequestMapping; @FeignClient(\\\"gulimall-coupon\\\") public interface CouponFeignService { @RequestMapping(\\\"/coupon/coupon/member/list\\\") public R membercoupons(); } \",\"启动类添加EnableFeignClients注解\",\"@EnableFeignClients(basePackages=\\\"com.cxk.gulimall.member.feign\\\") @SpringBootApplication @EnableDiscoveryClient // 开启服务注册发现功能 public class GulimallMemberApplication { public static void main(String[] args) { SpringApplication.run(GulimallMemberApplication.class, args); } } \",\"在MemberController中进行远程调用\",\"@RestController @RequestMapping(\\\"member/member\\\") public class MemberController { @Autowired private MemberService memberService; @Autowired private CouponFeignService couponFeignService; @RequestMapping(\\\"/coupons\\\") public R test(){ MemberEntity memberEntity = new MemberEntity(); memberEntity.setNickname(\\\"张三\\\"); R membercoupons = couponFeignService.membercoupons(); Object coupons = membercoupons.get(\\\"coupons\\\"); return R.ok() .put(\\\"member\\\", memberEntity) .put(\\\"coupons\\\", coupons); } } \",\"此时调用接口即可\"]},\"660\":{\"h\":\"Nacos配置中心\",\"t\":[\"导入依赖到common模块：\",\" <!-- 配置中心来做配置管理--> <dependency> <groupId>com.alibaba.cloud</groupId> <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId> </dependency> \",\"在coupon模块下面创建一个bootstrap.yml文件,bootstrap文件会优先于application文件：\",\"spring: application: name: gulimall-coupon cloud: nacos: config: server-addr: localhost:8848 \",\"测试配置coupon模块：\",\"在application.properties创建一个配置文件：\",\"coupon.user.name=\\\"cxk\\\" coupon.user.age=18 \",\"写一个测试接口用来获取：\",\"@RestController @RequestMapping(\\\"coupon/coupon\\\") public class CouponController { @Value(\\\"${coupon.user.name}\\\") private String name; @Value(\\\"${coupon.user.age}\\\") private Integer age; @RequestMapping(\\\"/test\\\") public R test() { return R.ok().put(\\\"name\\\", name).put(\\\"age\\\", age); } } \",\"此时发送请求可以获取到值。\",\"现在有新的需求，希望修改值之后可以实时看到结果，步骤如下：\",\"在配置列表中创建配置：\",\"写入以下内容：\",\"在控制器上面加注解RefreshScope：\",\"@RestController @RequestMapping(\\\"coupon/coupon\\\") @RefreshScope public class CouponController { \",\"此时nacos中的配置重新发布即可。如果配置中心和配置文件配置相同的项，优先使用配置中心的配置。\",\"使用细节：\",\"命名空间：\",\"默认为public，用来做配置隔离，可以自己创建命名空间，如dev，test等\",\"此时需要在bootstrap文件中配置namespace 命名空间id:\",\"spring: application: name: gulimall-coupon cloud: nacos: config: server-addr: localhost:8848 namespace: 12e5ed93-2be2-44c0-93d4-4cdc0a65426e \",\"配置集：所有配置文件的集合\",\"配置集ID：类似文件名 Data ID：类似文件名\",\"配置分组： 默认DEFAULT_GROUP\"]},\"661\":{\"h\":\"Gateway网关\",\"t\":[\"官方文档：https://docs.spring.io/spring-cloud-gateway/docs/3.0.8/reference/html/#gateway-starter\",\"创建一个网关模块：\",\"添加common模块依赖，以及gateway依赖：\",\" <dependency> <groupId>com.cxk</groupId> <artifactId>gulimall-common</artifactId> <version>0.0.1-SNAPSHOT</version> </dependency> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-gateway</artifactId> </dependency> \",\"开启nacos注册发现：\",\"@SpringBootApplication(exclude = {DataSourceAutoConfiguration.class}) @EnableDiscoveryClient public class GulimallGatewayApplication { public static void main(String[] args) { SpringApplication.run(GulimallGatewayApplication.class, args); } } \",\"测试配置路由规则：\",\"spring: cloud: gateway: routes: - id: test_route uri: https://www.baidu.com predicates: - Query=url, baidu - id: qq_route uri: https://www.qq.com predicates: - Query=url, qq \",\"此时可以访问：http://localhost:88?url=qq. -> qq.com\",\"http://localhost:88?url=baidu\"]},\"662\":{\"h\":\"商品服务\"},\"663\":{\"h\":\"三级分类\",\"t\":[\"导入数据pms_catelog.sql\",\"功能：查出所有分类以及子分类，以树形结构组装起来\",\"控制器：\",\"/** * 查出所有分类以及子分类，以树形结构组装起来 */ @RequestMapping(\\\"/list/tree\\\") public R listWithTree(){ List<CategoryEntity> entities= categoryService.listWithTree(); return R.ok().put(\\\"data\\\", entities); } \",\"逻辑：\",\"@Override public List<CategoryEntity> listWithTree() { //1. 查出所有分类 List<CategoryEntity> entities = baseMapper.selectList(null); //2, 组装成父子的树形结构 先找到所有的一级分类 List<CategoryEntity> level1Menu = entities.stream().filter(categoryEntity -> { return categoryEntity.getParentCid().equals(0L); }).map(menu -> { menu.setChildren(getChildrens(menu, entities)); return menu; }).sorted((menu1, menu2) -> { return (menu1.getSort() == null ? 0 : menu1.getSort()) - (menu2.getSort() == null ? 0 : menu2.getSort()); }).collect(Collectors.toList()); return entities; } private List<CategoryEntity> getChildrens(CategoryEntity root, List<CategoryEntity> all) { List<CategoryEntity> children = all.stream().filter(categoryEntity -> { //找到所有的二级分类 return categoryEntity.getParentCid().equals(root.getCatId()); }).map(categoryEntity -> { categoryEntity.setChildren(getChildrens(categoryEntity, all)); return categoryEntity; }).sorted((menu1, menu2) -> { return (menu1.getSort() == null ? 0 : menu1.getSort()) - (menu2.getSort() == null ? 0 : menu2.getSort()); }).collect(Collectors.toList()); return children; } \",\"运行结果：\",\"前端开发：\",\"添加一个菜单：\",\"再添加一个分类维护菜单：\",\"创建vue文件，路径需要和菜单路径匹配\",\"这里发送请求会直接发送到8080端口，因此需要使用网关进行处理\",\"修改renrenfast的xml文件\",\"修改lombok版本 <lombok.version>1.18.20</lombok.version> 修改springboot版本 <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.1.8.RELEASE</version> <relativePath></relativePath> </parent> 导入common模块 <dependency> <groupId>com.cxk</groupId> <artifactId>gulimall-common</artifactId> <version>0.0.1-SNAPSHOT</version> </dependency> \",\"修改配置：\",\"@Configuration public class CorsConfig implements WebMvcConfigurer { @Override public void addCorsMappings(CorsRegistry registry) { registry.addMapping(\\\"/**\\\") .allowedOriginPatterns(\\\"*\\\") .allowCredentials(true) .allowedMethods(\\\"GET\\\", \\\"POST\\\", \\\"PUT\\\", \\\"DELETE\\\", \\\"OPTIONS\\\") .maxAge(3600); } } \",\"修改为：\",\" .allowedOrigins(\\\"*\\\") \",\"配置文件中加nacos注册：\",\" application: name: renren-fast cloud: nacos: discovery: server-addr: localhost:8848 \",\"修改前端的配置向后端网关88端口发送请求：\",\"在网关配置文件中配置路由规则：\",\" - id: admin_route uri: lb://renren-fast predicates: - Path=/api/** filters: - RewritePath=/api/(?<segment>.*), /renren-fast/$\\\\{segment} \",\"此时 http://localhost:88/api/xx 会被路由到http://localhost:8080/renren-fast/xx\",\"此时点登录会出现跨域问题：\",\"解决办法：\",\"nginx服务器 反向代理\",\"后端处理前端发送的预检请求\",\"网关添加配置允许跨域：\",\"@Configuration public class GulimallCorsConfiguration { @Bean public CorsWebFilter corsWebFilter(){ UrlBasedCorsConfigurationSource source=new UrlBasedCorsConfigurationSource(); CorsConfiguration corsConfiguration = new CorsConfiguration(); //配置跨域 corsConfiguration.addAllowedHeader(\\\"*\\\"); corsConfiguration.addAllowedMethod(\\\"*\\\"); corsConfiguration.addAllowedOrigin(\\\"*\\\"); corsConfiguration.setAllowCredentials(true); source.registerCorsConfiguration(\\\"/**\\\",corsConfiguration); return new CorsWebFilter(source); } } \",\"此时重新登录，预检请求通过：\",\"但是真实请求出现问题：\",\"出现了多个值，需要解决，这是因为ren ren fast 项目中也配置了跨域请求，将renrenfast中的跨域配置注释掉，可以成功解决问题\",\"接着编写分类管理：\",\"先编写product模块的路由规则，注意要放在renrenfast上面，否则会先匹配到renrenfast模块\",\"spring: cloud: gateway: routes: # - id: test_route # uri: https://www.baidu.com # predicates: # - Query=url, baidu # # - id: qq_route # uri: https://www.qq.com # predicates: # - Query=url, qq - id: product_route # product模块 uri: lb://gulimall-product predicates: - Path=/api/product/** filters: - RewritePath=/api/(?<segment>.*), /$\\\\{segment} - id: admin_route # admin模块 uri: lb://renren-fast predicates: - Path=/api/** filters: - RewritePath=/api/(?<segment>.*), /renren-fast/$\\\\{segment} \",\"前端代码：\",\"<template> <div> <h2>商品分类</h2> <el-tree :data=\\\"menus\\\" :props=\\\"defaultProps\\\" @node-click=\\\"handleNodeClick\\\"></el-tree> </div> </template> <script> export default { name: \\\"category\\\", data() { return { menus: [], defaultProps: { children: 'children', label: 'name' } }; }, methods: { handleNodeClick(data) { console.log(data); }, getMenus() { this.$http({ url: this.$http.adornUrl('/product/category/list/tree'), method: 'get', }).then(res => { const {data} = res //解构赋值 data 中 code data msg this.menus = data.data }) } }, created() { this.getMenus() } }; </script> <style scoped lang=\\\"scss\\\"> </style> \",\"效果：\",\"删除分类：\",\"使用逻辑删除，需要配置mybatis-plus\",\"mybatis-plus: global-config: db-config: logic-delete-value: 1 logic-not-delete-value: 0 \",\"给categoryEntity类加上TableLogic字段：\",\"上面配置的是全局，这里和上面刚好相反，可以主动配置value和delval\",\" /** * 是否显示[0-不显示，1显示] */ @TableLogic(value = \\\"1\\\", delval = \\\"0\\\") private Integer showStatus; \",\"拖拽节点，批量修改：\",\" /** * 批量修改 */ @RequestMapping(\\\"/update/sort\\\") //@RequiresPermissions(\\\"product:category:update\\\") public R updateSort(@RequestBody CategoryEntity[] category){ categoryService.updateBatchById(Arrays.asList(category)); return R.ok(); } \"]},\"664\":{\"h\":\"品牌管理\",\"t\":[\"新增品牌管理菜单：\",\"之前逆向工程生成代码的时候已经生成了页面，可以直接复制过来：\",\"此时页面已经存在增删改查功能：\",\"发现没有增加功能，这是因为没有权限,先始终拥有权限即可\",\"/** * 是否有权限 * @param {*} key */ export function isAuth(key) { // return JSON.parse(sessionStorage.getItem('permissions') || '[]').indexOf(key) !== -1 || false return true; } \"]},\"665\":{\"h\":\"OSS对象存储\",\"t\":[\"https://oss.console.aliyun.com/bucket\",\"新建bucket\",\"上传方式：\",\"用自己图片先上传自己服务器 ，然后再上传阿里云\",\"前端js直接上传阿里云\",\"这里选择第二种方式：\",\"导入依赖：\",\"<dependency> <groupId>com.aliyun.oss</groupId> <artifactId>aliyun-sdk-oss</artifactId> <version>3.15.1</version> </dependency> \",\"根据开发文档：https://help.aliyun.com/zh/oss/developer-reference/simple-upload-11?spm=a2c4g.11186623.0.0.23c65c718FO651#p-yqj-z1w-rl2\",\" @Test public void testUpload() throws Exception{ // Endpoint以华东1（杭州）为例，其它Region请按实际情况填写。 String endpoint = \\\"https://oss-cn-beijing.aliyuncs.com\\\"; // 从环境变量中获取访问凭证。运行本代码示例之前，请确保已设置环境变量OSS_ACCESS_KEY_ID和OSS_ACCESS_KEY_SECRET。 String OSS_ACCESS_KEY_ID = \\\"x\\\"; String OSS_ACCESS_KEY_SECRET =\\\"x\\\"; // 填写Bucket名称，例如examplebucket。 String bucketName = \\\"x\\\"; // 填写Object完整路径，完整路径中不能包含Bucket名称，例如exampledir/exampleobject.txt。 String objectName = \\\"vue.jpg\\\"; // 填写本地文件的完整路径，例如D:\\\\\\\\localpath\\\\\\\\examplefile.txt。 // 如果未指定本地路径，则默认从示例程序所属项目对应本地路径中上传文件流。 String filePath= \\\"/Users/houyunfei/Pictures/CSDN/Vue.jpg\\\"; // 创建OSSClient实例。 OSS ossClient = new OSSClientBuilder().build(endpoint, OSS_ACCESS_KEY_ID, OSS_ACCESS_KEY_SECRET); try { InputStream inputStream = new FileInputStream(filePath); // 创建PutObjectRequest对象。 PutObjectRequest putObjectRequest = new PutObjectRequest(bucketName, objectName, inputStream); // 创建PutObject请求。 PutObjectResult result = ossClient.putObject(putObjectRequest); // 打印ETag System.out.println(result.getETag()); System.out.println(\\\"上传成功\\\"); } catch (OSSException oe) { System.out.println(\\\"Caught an OSSException, which means your request made it to OSS, \\\" + \\\"but was rejected with an error response for some reason.\\\"); System.out.println(\\\"Error Message:\\\" + oe.getErrorMessage()); System.out.println(\\\"Error Code:\\\" + oe.getErrorCode()); System.out.println(\\\"Request ID:\\\" + oe.getRequestId()); System.out.println(\\\"Host ID:\\\" + oe.getHostId()); } catch (ClientException ce) { System.out.println(\\\"Caught an ClientException, which means the client encountered \\\" + \\\"a serious internal problem while trying to communicate with OSS, \\\" + \\\"such as not being able to access the network.\\\"); System.out.println(\\\"Error Message:\\\" + ce.getMessage()); } finally { if (ossClient != null) { ossClient.shutdown(); } } } \",\"可以成功上传\",\"第二种方式，使用Spring Boot OSS\",\" <dependency> <groupId>com.alibaba.cloud</groupId> <artifactId>spring-cloud-starter-alicloud-oss</artifactId> <version>2.2.0.RELEASE</version> </dependency> \",\"配置：\",\"spring: alicloud: access-key: x secret-key: x oss: endpoint: oss-cn-beijing.aliyuncs.com \",\"测试：\",\" @Autowired private OSSClient ossClient; @Test public void testUpload() throws Exception{ String filePath= \\\"/Users/houyunfei/Pictures/CSDN/Vue.jpg\\\"; try { InputStream inputStream = new FileInputStream(filePath); // 创建PutObjectRequest对象。 // 创建PutObject请求。 PutObjectResult result = ossClient.putObject(\\\"gulimall-cxk\\\", \\\"vue2.jpg\\\", inputStream); // 打印ETag System.out.println(result.getETag()); System.out.println(\\\"上传成功\\\"); } catch (OSSException oe) { System.out.println(\\\"Caught an OSSException, which means your request made it to OSS, \\\" + \\\"but was rejected with an error response for some reason.\\\"); System.out.println(\\\"Error Message:\\\" + oe.getErrorMessage()); System.out.println(\\\"Error Code:\\\" + oe.getErrorCode()); System.out.println(\\\"Request ID:\\\" + oe.getRequestId()); System.out.println(\\\"Host ID:\\\" + oe.getHostId()); } catch (ClientException ce) { System.out.println(\\\"Caught an ClientException, which means the client encountered \\\" + \\\"a serious internal problem while trying to communicate with OSS, \\\" + \\\"such as not being able to access the network.\\\"); System.out.println(\\\"Error Message:\\\" + ce.getMessage()); } finally { if (ossClient != null) { ossClient.shutdown(); } } } \",\"服务端签名直传：https://help.aliyun.com/zh/oss/use-cases/obtain-signature-information-from-the-server-and-upload-data-to-oss\",\"Java：https://help.aliyun.com/zh/oss/use-cases/java-1?spm=a2c4g.11186623.0.i4#concept-ahk-rfz-2fb\",\"新建一个第三方模块，按之前的步骤配置注册中心,网关：\",\" - id: third_party_route # 第三方 uri: lb://gulimall-third-party predicates: - Path=/api/thirdparty/** filters: - RewritePath=/api/thirdparty/(?<segment>.*), /$\\\\{segment} \",\"获取签名：\",\"@RestController(\\\"/thirdparty\\\") public class OssController { @Resource private OSSClient ossClient; @Value(\\\"${spring.cloud.alicloud.access-key}\\\") private String accessKeyId; @Value(\\\"${spring.cloud.alicloud.oss.endpoint}\\\") private String endpoint; @Value(\\\"${spring.cloud.alicloud.oss.bucket}\\\") private String bucket; @RequestMapping(\\\"/oss/policy\\\") public R policy() { // 填写Host名称，格式为https://bucketname.endpoint。 String host = \\\"https://\\\" + bucket + \\\".\\\" + endpoint; // 设置上传到OSS文件的前缀，可置空此项。置空后，文件将上传至Bucket的根目录下。 String date = new SimpleDateFormat(\\\"yyyy-MM-dd\\\").format(new Date()); String dir = date + \\\"/\\\"; Map<String, String> respMap = null; // 创建OSSClient实例。 try { long expireTime = 30; long expireEndTime = System.currentTimeMillis() + expireTime * 1000; Date expiration = new Date(expireEndTime); // PostObject请求最大可支持的文件大小为5 GB，即CONTENT_LENGTH_RANGE为5*1024*1024*1024。 PolicyConditions policyConds = new PolicyConditions(); policyConds.addConditionItem(PolicyConditions.COND_CONTENT_LENGTH_RANGE, 0, 1048576000); policyConds.addConditionItem(MatchMode.StartWith, PolicyConditions.COND_KEY, dir); String postPolicy = ossClient.generatePostPolicy(expiration, policyConds); byte[] binaryData = postPolicy.getBytes(\\\"utf-8\\\"); String encodedPolicy = BinaryUtil.toBase64String(binaryData); String postSignature = ossClient.calculatePostSignature(postPolicy); respMap = new LinkedHashMap<String, String>(); respMap.put(\\\"accessid\\\", accessKeyId); respMap.put(\\\"policy\\\", encodedPolicy); respMap.put(\\\"signature\\\", postSignature); respMap.put(\\\"dir\\\", dir); respMap.put(\\\"host\\\", host); respMap.put(\\\"expire\\\", String.valueOf(expireEndTime / 1000)); // respMap.put(\\\"expire\\\", formatISO8601Date(expiration)); } catch (Exception e) { System.out.println(e.getMessage()); } finally { ossClient.shutdown(); } return R.ok().put(\\\"data\\\", respMap); } } \",\"导入上传文件的三个文件：\",\"数据发送给阿里云时存在跨域问题：\",\"数据成功上传：\"]},\"666\":{\"h\":\"新增品牌后端校验\",\"t\":[\"使用JSR303进行校验：\",\"在实体类上面加注解：\",\"@Data @TableName(\\\"pms_brand\\\") public class BrandEntity implements Serializable { private static final long serialVersionUID = 1L; /** * 品牌id */ @TableId private Long brandId; /** * 品牌名 */ @NotBlank(message = \\\"品牌名不能为空\\\") private String name; /** * 品牌logo地址 */ @NotEmpty @URL(message = \\\"logo必须是一个合法的url地址\\\") private String logo; /** * 介绍 */ private String descript; /** * 显示状态[0-不显示；1-显示] */ private Integer showStatus; /** * 检索首字母 */ @NotEmpty @Pattern(regexp = \\\"/^[a-zA-Z]$/\\\",message = \\\"检索首字母必须是一个字母\\\") private String firstLetter; /** * 排序 */ @NotNull @Min(value = 0,message = \\\"排序必须大于等于0\\\") private Integer sort; } \",\"控制器中加注解：\",\"/** * 保存 */ @RequestMapping(\\\"/save\\\") //@RequiresPermissions(\\\"product:brand:save\\\") public R save(@Valid @RequestBody BrandEntity brand, BindingResult result) { if (result.hasErrors()) { Map<String, String> map = new HashMap<>(); result.getFieldErrors().forEach((item) -> { //获取到错误提示 String message = item.getDefaultMessage(); //获取错误的属性的名字 String field = item.getField(); map.put(field, message); }); return R.error(400, \\\"submit data not valid\\\").put(\\\"data\\\", map); } brandService.save(brand); return R.ok(); } \",\"BindingResult要紧跟在校验的后面\",\"测试结果：\",\"统一异常校验：\",\"@RestControllerAdvice(basePackages = \\\"com.cxk.gulimall.product.controller\\\") @Slf4j public class GulimallExceptionControllerAdvice { @ExceptionHandler(value = {MethodArgumentNotValidException.class}) public R handleVaildException(MethodArgumentNotValidException e) { log.error(\\\"数据校验出现异常，异常类型：{}\\\", MethodArgumentNotValidException.class); BindingResult bindingResult = e.getBindingResult(); Map<String, String> map = new HashMap<>(); bindingResult.getFieldErrors().forEach((item) -> { map.put(item.getField(), item.getDefaultMessage()); }); return R.error(BizCodeEnum.VALID_EXCEPTION.getCode(), BizCodeEnum.VALID_EXCEPTION.getMsg()) .put(\\\"data\\\", map); } @ExceptionHandler(value = Exception.class) public R handleException(Exception e) { return R.error(BizCodeEnum.UNKNOW_EXCEPTION.getCode(), BizCodeEnum.UNKNOW_EXCEPTION.getMsg()); } } \",\"状态码枚举：\",\"public enum BizCodeEnum { UNKNOW_EXCEPTION(10000, \\\"系统未知异常\\\"), VALID_EXCEPTION(10001, \\\"参数格式校验失败\\\"); private Integer code; private String msg; BizCodeEnum(Integer code, String msg) { this.code = code; this.msg = msg; } public Integer getCode() { return code; } public String getMsg() { return msg; } } \"]},\"667\":{\"h\":\"JSR303分组校验\",\"t\":[\"创建两个类，增加和修改分组：\",\"public interface AddGroup { } public interface UpdateGroup { } \",\"给实体类增加组：\",\"@Data @TableName(\\\"pms_brand\\\") public class BrandEntity implements Serializable { private static final long serialVersionUID = 1L; /** * 品牌id */ @TableId @NotNull(message = \\\"品牌id必须提交\\\",groups = {UpdateGroup.class}) @Null(message = \\\"新增不能指定id\\\",groups = {AddGroup.class}) private Long brandId; /** * 品牌名 */ @NotBlank(message = \\\"品牌名不能为空\\\",groups = {UpdateGroup.class,AddGroup.class}) private String name; /** * 品牌logo地址 */ @NotBlank(message = \\\"logo不能为空\\\",groups = {AddGroup.class}) @URL(message = \\\"logo必须是一个合法的url地址\\\",groups = {UpdateGroup.class,AddGroup.class}) private String logo; /** * 介绍 */ private String descript; /** * 显示状态[0-不显示；1-显示] */ private Integer showStatus; /** * 检索首字母 */ @NotEmpty(groups = {AddGroup.class}) @Pattern(regexp = \\\"/^[a-zA-Z]$/\\\",message = \\\"检索首字母必须是一个字母\\\",groups = {UpdateGroup.class,AddGroup.class}) private String firstLetter; /** * 排序 */ @NotNull(message = \\\"排序不能为空\\\",groups = {AddGroup.class}) @Min(value = 0,message = \\\"排序必须大于等于0\\\",groups = {UpdateGroup.class,AddGroup.class}) private Integer sort; } \",\"控制器上面添加组：\",\"/** * 保存 */ @RequestMapping(\\\"/save\\\") //@RequiresPermissions(\\\"product:brand:save\\\") public R save(@Validated(AddGroup.class) @RequestBody BrandEntity brand) { brandService.save(brand); return R.ok(); } /** * 修改 */ @RequestMapping(\\\"/update\\\") //@RequiresPermissions(\\\"product:brand:update\\\") public R update(@Validated(UpdateGroup.class) @RequestBody BrandEntity brand) { brandService.updateById(brand); return R.ok(); } \"]},\"668\":{\"h\":\"自定义校验规则\",\"t\":[\"创建一个ListValue注解：\",\"@Documented @Constraint(validatedBy = {ListValueConstraintValidator.class}) @Target({METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER, TYPE_USE}) @Retention(RUNTIME) public @interface ListValue { String message() default \\\"{com.cxk.common.validator.ListValue.message}\\\"; Class<?>[] groups() default {}; Class<? extends Payload>[] payload() default {}; int[] vals() default {}; } \",\"在Resources目录下面创建ValidationMessages.properties\",\"com.cxk.common.validator.ListValue.message = 必须提交给定的值 \",\"创建一个ListValueConstraintValidator类，只允许制定的整数\",\"public class ListValueConstraintValidator implements ConstraintValidator<ListValue, Integer> { private Set<Integer> set = new HashSet<>(); @Override public void initialize(ListValue constraintAnnotation) { int[] vals = constraintAnnotation.vals(); for (int val : vals) { set.add(val); } } @Override public boolean isValid(Integer value, ConstraintValidatorContext context) { return set.contains(value); } } \",\"在实体类上面加注解：\",\"/** * 显示状态[0-不显示；1-显示] */ @NotNull(groups = {AddGroup.class, UpdateStatusGroup.class}) @ListValue(vals = {0,1},groups = {AddGroup.class, UpdateStatusGroup.class}) private Integer showStatus; \"]},\"669\":{\"h\":\"商品属性\",\"t\":[\"基本概念：\",\"SPU：Standard Product Unit（标准化产品单元）（如iPhone）\",\"SKU：Stock Keeping Unit（库存量单位）（如iPhone 64G，详细）\"]},\"670\":{\"h\":\"数据库设计\",\"t\":[\"商品属性表：\",\"create table pms_attr ( attr_id bigint auto_increment comment '属性id' primary key, attr_name char(30) null comment '属性名', search_type tinyint null comment '是否需要检索[0-不需要，1-需要]', value_type tinyint null comment '值类型[0-为单个值，1-可以选择多个值]', icon varchar(255) null comment '属性图标', value_select char(255) null comment '可选值列表[用逗号分隔]', attr_type tinyint null comment '属性类型[0-销售属性，1-基本属性，2-既是销售属性又是基本属性]', enable bigint null comment '启用状态[0 - 禁用，1 - 启用]', catelog_id bigint null comment '所属分类', show_desc tinyint null comment '快速展示【是否展示在介绍上；0-否 1-是】，在sku中仍然可以调整' )comment '商品属性'; \",\"属性分组表：\",\"create table pms_attr_group ( attr_group_id bigint auto_increment comment '分组id' primary key, attr_group_name char(20) null comment '组名', sort int null comment '排序', descript varchar(255) null comment '描述', icon varchar(255) null comment '组图标', catelog_id bigint null comment '所属分类id' )comment '属性分组'; \",\"将上面两个表关联起来：\",\"属性-分组-关联表：\",\"create table pms_attr_attrgroup_relation ( id bigint auto_increment comment 'id' primary key, attr_id bigint null comment '属性id', attr_group_id bigint null comment '属性分组id', attr_sort int null comment '属性组内排序' ) comment '属性&属性分组关联'; \",\"如 这里的 基本信息 就是分组表里的attr_group_name 分组名字\",\"机身颜色就是attr_name 属性名字\",\"商品属性值表，如上面的魅海蓝，其实也是一张关联表：\",\"create table pms_product_attr_value ( id bigint auto_increment comment 'id' primary key, spu_id bigint null comment '商品id', attr_id bigint null comment '属性id', attr_name varchar(200) null comment '属性名', attr_value varchar(200) null comment '属性值', attr_sort int null comment '顺序', quick_show tinyint null comment '快速展示【是否展示在介绍上；0-否 1-是】' ) comment 'spu属性值'; \",\"商品真正的信息，商品信息表：\",\"create table pms_spu_info ( id bigint auto_increment comment '商品id' primary key, spu_name varchar(200) null comment '商品名称', spu_description varchar(1000) null comment '商品描述', catalog_id bigint null comment '所属分类id', brand_id bigint null comment '品牌id', weight decimal(18, 4) null, publish_status tinyint null comment '上架状态[0 - 下架，1 - 上架]', create_time datetime null, update_time datetime null ) comment 'spu信息'; \",\"sku信息表：\",\"create table pms_sku_info ( sku_id bigint auto_increment comment 'skuId' primary key, spu_id bigint null comment 'spuId', sku_name varchar(255) null comment 'sku名称', sku_desc varchar(2000) null comment 'sku介绍描述', catalog_id bigint null comment '所属分类id', brand_id bigint null comment '品牌id', sku_default_img varchar(255) null comment '默认图片', sku_title varchar(255) null comment '标题', sku_subtitle varchar(2000) null comment '副标题', price decimal(18, 4) null comment '价格', sale_count bigint null comment '销量' ) comment 'sku信息'; \",\"如下图的标题，副标题等信息\",\"sku图片表：\",\"存不同种如手机等图片\",\"create table pms_sku_images ( id bigint auto_increment comment 'id' primary key, sku_id bigint null comment 'sku_id', img_url varchar(255) null comment '图片地址', img_sort int null comment '排序', default_img int null comment '默认图[0 - 不是默认图，1 - 是默认图]' ) comment 'sku图片'; \",\"颜色，128G，这些信息\",\"存在sku销售属性表里面\",\"create table pms_sku_sale_attr_value ( id bigint auto_increment comment 'id' primary key, sku_id bigint null comment 'sku_id', attr_id bigint null comment 'attr_id', attr_name varchar(200) null comment '销售属性名', attr_value varchar(200) null comment '销售属性值', attr_sort int null comment '顺序' ) comment 'sku销售属性&值'; \",\"整个关系如下：\",\"前端页面，我们希望点击左侧的分类，在右侧能查出对应的内容，但是左边是一个子组件，因此我们需要用子组件给父组件传递数据\",\"使用事件机制，类似于冒泡\",\"子组件：\",\" <el-tree :data=\\\"menus\\\" :props=\\\"defaultProps\\\" node-key=\\\"catId\\\" @node-click=\\\"modeClick\\\" ref=\\\"tree\\\"> </el-tree> modeClick(data,node,component){ console.log(\\\"子组件被点击\\\",data,node,component) //向父附件发送事件 this.$emit('tree-node-click',data,node,component) }, \",\"使用this.$emit来传递事件\",\"在父组件中：\",\" <category @tree-node-click=\\\"treeNodeClick\\\"></category> treeNodeClick(data, node, component) { console.log(\\\"父组件感知\\\", data, node, component) console.log(\\\"被点击的菜单id\\\", data.catId) }, \",\"绑定这个事件\",\"运行结果：\",\"根据categoryId查询组\",\"后端接口：\",\"/** * 列表 */ @GetMapping(\\\"/list/{categoryId}\\\") //@RequiresPermissions(\\\"product:attrgroup:list\\\") public R listCategoryById(@RequestParam Map<String, Object> params, @PathVariable(\\\"categoryId\\\") Long categoryId) { PageUtils page = attrGroupService.queryPage(params, categoryId); return R.ok().put(\\\"page\\\", page); } \",\"实现类：\",\"@Override public PageUtils queryPage(Map<String, Object> params, Long categoryId) { //如果categoryId为0，则查询所有 if (categoryId == 0) { IPage<AttrGroupEntity> page = this.page( new Query<AttrGroupEntity>().getPage(params), new QueryWrapper<AttrGroupEntity>() ); return new PageUtils(page); } // select * from pms_attr_group where catelog_id = ? and (attr_group_id = ? or attr_group_name like %?%) String key = (String) params.get(\\\"key\\\"); LambdaQueryWrapper<AttrGroupEntity> wrapper = new LambdaQueryWrapper<AttrGroupEntity>(); wrapper.eq(AttrGroupEntity::getCatelogId, categoryId); if (StringUtils.isNotEmpty(key)) { wrapper.and((obj) -> { obj.eq(AttrGroupEntity::getAttrGroupId, key) .or() .like(AttrGroupEntity::getAttrGroupName, key); }); } IPage<AttrGroupEntity> page = this.page(new Query<AttrGroupEntity>().getPage(params), wrapper); return new PageUtils(page); } \",\"选择三级分类时：\",\"原因在于三级之后的children为空：\",\"因此我们要做到让这个字段为空的时候不展示给前端,给这个字段设置@JsonInclude(JsonInclude.Include.NON_EMPTY)：\",\"@TableField(exist = false) @JsonInclude(JsonInclude.Include.NON_EMPTY) private List <CategoryEntity> children; \",\"修改回显,由于后端返回数据的时候只有一个categoryId，而前端的三级分类是一个数组，因此需要修改后端：\",\"/** * 信息 */ @RequestMapping(\\\"/info/{attrGroupId}\\\") //@RequiresPermissions(\\\"product:attrgroup:info\\\") public R info(@PathVariable(\\\"attrGroupId\\\") Long attrGroupId) { AttrGroupEntity attrGroup = attrGroupService.getById(attrGroupId); Long catelogId = attrGroup.getCatelogId(); //查询完整路径 Long[] path = categoryService.findCatelogPath(catelogId); attrGroup.setCatelogPath(path); return R.ok().put(\\\"attrGroup\\\", attrGroup); } \",\"业务逻辑：\",\"@Override public Long[] findCatelogPath(Long catelogId) { List<Long> paths = new ArrayList<>(); List<Long> parentPath = findParentPath(catelogId, paths); Collections.reverse(parentPath); return parentPath.toArray(new Long[parentPath.size()]); } private List<Long> findParentPath(Long catelogId, List<Long> paths) { paths.add(catelogId); CategoryEntity categoryEntity = this.getById(catelogId); if (categoryEntity.getParentCid() != 0) { findParentPath(categoryEntity.getParentCid(), paths); } return paths; } \"]},\"671\":{\"h\":\"MybatisPlus分页插件配置\",\"t\":[\"package com.cxk.gulimall.product.config; import com.baomidou.mybatisplus.annotation.DbType; import com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor; import org.mybatis.spring.annotation.MapperScan; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.transaction.annotation.EnableTransactionManagement; @Configuration @EnableTransactionManagement @MapperScan(\\\"com.cxk.gulimall.product.dao\\\") public class MybatisConfig { /** * 添加分页插件 */ @Bean public PaginationInterceptor mybatisPlusInterceptor() { PaginationInterceptor paginationInterceptor = new PaginationInterceptor(); paginationInterceptor.setOverflow(true); paginationInterceptor.setLimit(1000); // 设置数据库类型为mysql return paginationInterceptor; } } \"]},\"672\":{\"h\":\"品牌分类关联\",\"t\":[\"品牌和分类是多对多的问题：\",\"一个品牌可能属于多个分类\",\"一个分类下面有多个品牌\",\"create table pms_category_brand_relation ( id bigint auto_increment primary key, brand_id bigint null comment '品牌id', catelog_id bigint null comment '分类id', brand_name varchar(255) null, catelog_name varchar(255) null ) comment '品牌分类关联'; \",\"多对多关系一般都有一张中间表，记录他们的关系，这里还设置了两个冗余字段，提高效率。\",\"根据品牌id查询所有关联关系\",\"/** * 列表 */ @GetMapping(\\\"/catelog/list\\\") //@RequiresPermissions(\\\"product:categorybrandrelation:list\\\") public R cateloglist(@RequestParam(\\\"brandId\\\") Long brandId) { LambdaQueryWrapper<CategoryBrandRelationEntity> wrapper = new LambdaQueryWrapper<>(); wrapper.eq(CategoryBrandRelationEntity::getBrandId, brandId); List<CategoryBrandRelationEntity> data = categoryBrandRelationService.list(wrapper); return R.ok().put(\\\"data\\\", data); } \",\"保存品牌和分类的关联关系：\",\"@Override public void saveDetail(CategoryBrandRelationEntity categoryBrandRelation) { Long brandId = categoryBrandRelation.getBrandId(); Long catelogId = categoryBrandRelation.getCatelogId(); //查询详细名字 BrandEntity brandEntity = brandDao.selectById(brandId); CategoryEntity categoryEntity = categoryDao.selectById(catelogId); categoryBrandRelation.setBrandName(brandEntity.getName()); categoryBrandRelation.setCatelogName(categoryEntity.getName()); this.save(categoryBrandRelation); } \",\"但是这个冗余字段存在问题，就是当品牌名字或者分类名字变化的时候，这里的冗余字段也需要进行更改，因此还需要去修改代码\",\"BrandServiceImpl中：\",\" @Override @Transactional public void updateDetail(BrandEntity brand) { //保证冗余字段的数据一致 this.updateById(brand); if (StringUtils.isNotEmpty(brand.getName())) { categoryBrandRelationService.updateBrand(brand.getBrandId(), brand.getName()); //TODO 更新其他关联 } } \",\"CategoryBrandRelationServiceImpl中\",\"public void updateBrand(Long brandId, String name) { CategoryBrandRelationEntity relationEntity = new CategoryBrandRelationEntity(); relationEntity.setBrandId(brandId); relationEntity.setBrandName(name); LambdaUpdateWrapper<CategoryBrandRelationEntity> wrapper = new LambdaUpdateWrapper<>(); wrapper.eq(CategoryBrandRelationEntity::getBrandId, brandId); this.update(relationEntity, wrapper); } \",\"同理分类修改时,注意开启事物：\",\" @Override @Transactional public void updateCascade(CategoryEntity category) { this.updateById(category); if (StringUtils.isNotEmpty(category.getName())) { categoryBrandRelationService.updateCategory(category.getCatId(), category.getName()); //TODO 同步更新其他关联表的数据 } } \",\"这里使用mapper做，学习不同的方式：\",\"@Override public void updateCategory(Long catId, String name) { this.baseMapper.updateCategory(catId, name); } \",\"void updateCategory(@Param(\\\"catId\\\") Long catId, @Param(\\\"name\\\") String name); \",\"<update id=\\\"updateCategory\\\"> update pms_category_brand_relation set catelog_name = #{name} where catelog_id = #{catId} </update> \"]},\"673\":{\"h\":\"商品属性\",\"t\":[\"保存：\",\" /** * 保存 */ @RequestMapping(\\\"/save\\\") //@RequiresPermissions(\\\"product:attr:save\\\") public R save(@RequestBody AttrVo attr){ attrService.saveAttr(attr); return R.ok(); } \",\"@Override @Transactional public void saveAttr(AttrVo attr) { AttrEntity attrEntity = new AttrEntity(); BeanUtils.copyProperties(attr, attrEntity); // 保存基本数据 this.save(attrEntity); // 保存关联关系 AttrAttrgroupRelationEntity entity = new AttrAttrgroupRelationEntity(); entity.setAttrGroupId(attr.getAttrGroupId()); entity.setAttrId(attrEntity.getAttrId()); relationDao.insert(entity); } \",\"关联查询属性分类和分组名称\",\"定义响应类，\",\"@Data public class AttrRespVo extends AttrVo { /** * 所属分类名字 */ private String catelogName; /** * 所属分组名字 */ private String groupName; } \",\"查询代码：\",\"@Override public PageUtils queryBaseAttrPage(Map<String, Object> params, Long catelogId) { LambdaQueryWrapper<AttrEntity> wrapper = new LambdaQueryWrapper<>(); if (catelogId != 0) { wrapper.eq(AttrEntity::getCatelogId, catelogId); } String key = (String) params.get(\\\"key\\\"); if (StringUtils.isNotEmpty(key)) { wrapper.and((obj) -> { obj.eq(AttrEntity::getAttrId, key).or().like(AttrEntity::getAttrName, key); }); } IPage<AttrEntity> page = this.page( new Query<AttrEntity>().getPage(params), wrapper ); PageUtils pageUtils = new PageUtils(page); List<AttrEntity> list = page.getRecords(); List<AttrRespVo> collect = list.stream().map(attrEntity -> { AttrRespVo attrRespVo = new AttrRespVo(); BeanUtils.copyProperties(attrEntity, attrRespVo); //设置分类和分组名字 //查询分类 CategoryEntity categoryEntity = categoryDao.selectById(attrEntity.getCatelogId()); if (categoryEntity != null) { attrRespVo.setCatelogName(categoryEntity.getName()); } //查询分组 AttrAttrgroupRelationEntity attrAttrgroupRelationEntity = relationDao.selectOne(new LambdaQueryWrapper<AttrAttrgroupRelationEntity>() .eq(AttrAttrgroupRelationEntity::getAttrId, attrEntity.getAttrId())); if (attrAttrgroupRelationEntity != null) { Long groupId = attrAttrgroupRelationEntity.getAttrGroupId(); AttrGroupEntity attrGroupEntity = attrGroupDao.selectById(groupId); attrRespVo.setGroupName(attrGroupEntity.getAttrGroupName()); } return attrRespVo; }).collect(Collectors.toList()); pageUtils.setList(collect); return pageUtils; } \",\"修改规格参数：\",\"发现所属分类和分组无法回显\",\"AttrRespVo类中添加catelogPath\",\"@Data public class AttrRespVo extends AttrVo { /** * 所属分类名字 */ private String catelogName; /** * 所属分组名字 */ private String groupName; /** * 分类完整路径 */ private Long[] catelogPath; } \",\" @Override public AttrRespVo getAttrInfo(Long attrId) { AttrEntity attrEntity = this.getById(attrId); AttrRespVo attrRespVo = new AttrRespVo(); BeanUtils.copyProperties(attrEntity, attrRespVo); //还需要设置分组id和分类路径 // attrRespVo.setCatelogPath(); // attrRespVo.setAttrGroupId(); // attrRespVo.setCatelogName(); //1、设置分组信息 AttrAttrgroupRelationEntity relationEntity = relationDao.selectOne( new LambdaQueryWrapper<AttrAttrgroupRelationEntity>() .eq(AttrAttrgroupRelationEntity::getAttrId, attrId)); if (relationEntity != null) { attrRespVo.setAttrGroupId(relationEntity.getAttrGroupId()); AttrGroupEntity attrGroupEntity = attrGroupDao.selectById(relationEntity.getAttrGroupId()); if (attrGroupEntity != null) { attrRespVo.setGroupName(attrGroupEntity.getAttrGroupName()); } } //2、设置分类信息 Long catelogId = attrEntity.getCatelogId(); Long[] catelogPath = categoryService.findCatelogPath(catelogId); attrRespVo.setCatelogPath(catelogPath); CategoryEntity categoryEntity = categoryDao.selectById(catelogId); if (categoryEntity != null) { attrRespVo.setCatelogName(categoryEntity.getName()); } return attrRespVo; } \",\"修改操作：\",\"需要先判断是否存在\",\"@Override @Transactional public void updateAttr(AttrVo attr) { AttrEntity attrEntity = new AttrEntity(); BeanUtils.copyProperties(attr, attrEntity); //修改基本数据 this.updateById(attrEntity); AttrAttrgroupRelationEntity relationEntity = new AttrAttrgroupRelationEntity(); relationEntity.setAttrGroupId(attr.getAttrGroupId()); relationEntity.setAttrId(attrEntity.getAttrId()); //统计是否存在 Integer count = relationDao.selectCount(new LambdaQueryWrapper<AttrAttrgroupRelationEntity>() .eq(AttrAttrgroupRelationEntity::getAttrId, attrEntity.getAttrId())); if (count > 0) { //修改关联关系 relationDao.update(relationEntity, new LambdaUpdateWrapper<AttrAttrgroupRelationEntity>() .eq(AttrAttrgroupRelationEntity::getAttrId, attrEntity.getAttrId())); } else { //新增关联关系 relationDao.insert(relationEntity); } } \"]},\"674\":{\"h\":\"分组关联关系\",\"t\":[\"@PostMapping(\\\"/attr/relation/delete\\\") public R deleteRelation(@RequestBody AttrGroupRelationVo[] vos) { attrService.deleteRelation(vos); return R.ok(); } \",\"@Override public void deleteRelation(AttrGroupRelationVo[] vos) { List<AttrAttrgroupRelationEntity> entities = Arrays.asList(vos).stream().map((item) -> { AttrAttrgroupRelationEntity entity = new AttrAttrgroupRelationEntity(); BeanUtils.copyProperties(item, entity); return entity; }).collect(Collectors.toList()); relationDao.deleteBatchRelation(entities); } \",\"void deleteBatchRelation(@Param(\\\"entities\\\") List<AttrAttrgroupRelationEntity> entities); \",\"<delete id=\\\"deleteBatchRelation\\\"> delete from gulimall_pms.pms_attr_attrgroup_relation where <foreach collection=\\\"entities\\\" item=\\\"item\\\" separator=\\\" or \\\"> ( attr_id =#{item.attrId} and attr_group_id =#{item.attrGroupId} ) </foreach> </delete> \",\"获取当前分组还没有关联的属性\",\"一个属性只能被一个一个分组使用，\",\"所以这里新建关联的时候查询的应该是当前分类的其他分组没有使用过的，以及自己没有用过的\",\"@GetMapping(\\\"/{attrGroupId}/noattr/relation\\\") public R attrNoRelation(@PathVariable(\\\"attrGroupId\\\") Long attrGroupId, @RequestParam Map<String, Object> params) { //获取当前分组没有关联的所有属性 PageUtils page = attrService.getNoRelationAttr(params,attrGroupId); return R.ok().put(\\\"page\\\", page); } \",\"@Override public PageUtils getNoRelationAttr(Map<String, Object> params, Long attrGroupId) { //当前分组只能关联自己所属分组里面的所有属性 AttrGroupEntity attrGroupEntity = attrGroupDao.selectById(attrGroupId); //当前分类的id Long catelogId = attrGroupEntity.getCatelogId(); //当前分组只能关联别的分组没有引用的属性 List<AttrGroupEntity> group = attrGroupDao.selectList(new LambdaQueryWrapper<AttrGroupEntity>() .eq(AttrGroupEntity::getCatelogId, catelogId)); //所有的分组id List<Long> collect = group.stream().map(AttrGroupEntity::getAttrGroupId).collect(Collectors.toList()); //这些分组的关联属性 List<AttrAttrgroupRelationEntity> groupId = relationDao.selectList(new LambdaQueryWrapper<AttrAttrgroupRelationEntity>() .in(AttrAttrgroupRelationEntity::getAttrGroupId, collect)); List<Long> attrIds = groupId.stream().map((AttrAttrgroupRelationEntity::getAttrId)).collect(Collectors.toList()); //从当前分类的所有属性中移除这些属性 LambdaQueryWrapper<AttrEntity> wrapper = new LambdaQueryWrapper<AttrEntity>() .eq(AttrEntity::getCatelogId, catelogId) .eq(AttrEntity::getAttrType, ProductConstant.AttrEnum.ATTR_TYPE_BASE.getCode()); if (attrIds != null && attrIds.size() > 0) { wrapper.notIn(AttrEntity::getAttrId, attrIds); } //模糊，分页查询 String key = (String) params.get(\\\"key\\\"); if (StringUtils.isNotEmpty(key)) { wrapper.and((obj) -> { obj.eq(AttrEntity::getAttrId, key).or().like(AttrEntity::getAttrName, key); }); } IPage<AttrEntity> page = this.page(new Query<AttrEntity>().getPage(params), wrapper); return new PageUtils(page); } \"]},\"675\":{\"h\":\"新增商品\",\"t\":[\"前端出现报错PubSub is not definded：\",\"npm install --save pubsub-js \",\"再新加一句话\",\"同时下面删除this\",\"查询指定分类里的所有品牌信息：\",\"/** *查询指定分类里的所有品牌信息 */ @GetMapping(\\\"/brands/list\\\") public R relationBrandsList(@RequestParam(value = \\\"catId\\\") Long catId) { List<BrandEntity> vos = categoryBrandRelationService.getBrandsByCatId(catId); List<BrandVo> collect = vos.stream().map(item -> { BrandVo brandVo = new BrandVo(); brandVo.setBrandId(item.getBrandId()); brandVo.setBrandName(item.getName()); return brandVo; }).collect(Collectors.toList()); return R.ok().put(\\\"data\\\", collect); } \",\"controller一共做三件事情：\",\"处理请求，接受和校验数据\",\"service接受controller传来的数据，进行业务处理\",\"controller接受service处理完的数据，封装页面指定的vo\",\"保存新增商品\",\" /** * 保存 */ @RequestMapping(\\\"/save\\\") //@RequiresPermissions(\\\"product:spuinfo:save\\\") public R save(@RequestBody SpuSaveVo vo){ spuInfoService.saveSpuInfo(vo); return R.ok(); } \",\"业务逻辑：\",\" @Override @Transactional public void saveSpuInfo(SpuSaveVo vo) { //1.保存spu基本信息 pms_spu_info SpuInfoEntity spuInfoEntity = new SpuInfoEntity(); BeanUtils.copyProperties(vo, spuInfoEntity); spuInfoEntity.setCreateTime(new Date()); spuInfoEntity.setUpdateTime(new Date()); this.saveBaseSpInfo(spuInfoEntity); //2.保存spu描述图片 pms_spu_info_desc List<String> decript = vo.getDecript(); SpuInfoDescEntity descEntity = new SpuInfoDescEntity(); descEntity.setSpuId(spuInfoEntity.getId()); descEntity.setDecript(String.join(\\\",\\\", decript)); spuInfoDescService.saveSpuInfoDesc(descEntity); //3.保存spu图片集 pms_spu_images List<String> images = vo.getImages(); spuImagesService.saveImages(spuInfoEntity.getId(), images); //4.保存spu规格参数 pms_product_attr_value List<BaseAttrs> baseAttrs = vo.getBaseAttrs(); List<ProductAttrValueEntity> collect = baseAttrs.stream().map(attr -> { ProductAttrValueEntity entity = new ProductAttrValueEntity(); entity.setSpuId(spuInfoEntity.getId()); entity.setAttrId(attr.getAttrId()); AttrEntity attrEntity = attrService.getById(attr.getAttrId()); entity.setAttrName(attrEntity.getAttrName()); entity.setAttrValue(attr.getAttrValues()); entity.setQuickShow(attr.getShowDesc()); return entity; }).collect(Collectors.toList()); productAttrValueService.saveProductAttr(collect); //5.保存spu的积分信息 gulimall_sms->sms_spu_bounds Bounds bounds = vo.getBounds(); SpuBoundTo spuBoundTo = new SpuBoundTo(); BeanUtils.copyProperties(bounds, spuBoundTo); spuBoundTo.setSpuId(spuInfoEntity.getId()); //todo 调用远程服务 R r = couponFeignService.saveSpuBounds(spuBoundTo); if (r.getCode() != 0) { log.error(\\\"远程保存spu积分信息失败\\\"); } //5.保存当前spu对应的所有sku信息 pms_sku_info List<Skus> skus = vo.getSkus(); if (skus != null && skus.size() > 0) { skus.forEach(item -> { String defaultImage = \\\"\\\"; for (Images image : item.getImages()) { if (image.getDefaultImg() == 1) { defaultImage = image.getImgUrl(); } } SkuInfoEntity entity = new SkuInfoEntity(); BeanUtils.copyProperties(item, entity); entity.setSpuId(spuInfoEntity.getId()); //todo sku介绍描述 skuDesc entity.setCatalogId(spuInfoEntity.getCatalogId()); entity.setBrandId(spuInfoEntity.getBrandId()); entity.setSkuDefaultImg(defaultImage); //todo saleCount //5.1 sku基本信息 pms_sku_info skuInfoService.saveSkuInfo(entity); List<SkuImagesEntity> skuImagesEntities = item.getImages().stream().map(img -> { SkuImagesEntity skuImagesEntity = new SkuImagesEntity(); skuImagesEntity.setSkuId(entity.getSkuId()); skuImagesEntity.setImgUrl(img.getImgUrl()); skuImagesEntity.setDefaultImg(img.getDefaultImg()); return skuImagesEntity; }).filter(entity2 -> { return StringUtils.isNotEmpty(entity2.getImgUrl()); }).collect(Collectors.toList()); //5.2 sku的图片信息 pms_sku_images skuImagesService.saveBatch(skuImagesEntities); //5.3 sku的销售属性信息 pms_sku_sale_attr_value List<Attr> attr = item.getAttr(); List<SkuSaleAttrValueEntity> collect1 = attr.stream().map(attr1 -> { SkuSaleAttrValueEntity skuSaleAttrValueEntity = new SkuSaleAttrValueEntity(); BeanUtils.copyProperties(attr1, skuSaleAttrValueEntity); skuSaleAttrValueEntity.setSkuId(entity.getSkuId()); return skuSaleAttrValueEntity; }).collect(Collectors.toList()); skuSaleAttrValueService.saveBatch(collect1); //5.4 sku的优惠、满减等信息 gms_sku_ladder gms_sku_full_reduction gms_member_price SkuReductionTo skuReductionTo = new SkuReductionTo(); BeanUtils.copyProperties(item, skuReductionTo); skuReductionTo.setSkuId(entity.getSkuId()); if (skuReductionTo.getFullCount() > 0 || skuReductionTo.getFullPrice().compareTo(new BigDecimal(0)) > 0) { //满减 R r1 = couponFeignService.saveSkuReductionTo(skuReductionTo); if (r1.getCode() != 0) { log.error(\\\"远程保存sku优惠信息失败\\\"); } } }); } } @Override public void saveBaseSpInfo(SpuInfoEntity spuInfoEntity) { this.baseMapper.insert(spuInfoEntity); } \",\"feign调用超时了\",\"第一次调用可能要初始化很多东西，重新试一下即可\",\"spu管理：\",\"总是会出现publish错误： main.js中：\",\"import PubSub from 'pubsub-js' Vue.prototype.PubSub = PubSub \",\"/** * 列表 */ @RequestMapping(\\\"/list\\\") //@RequiresPermissions(\\\"product:spuinfo:list\\\") public R list(@RequestParam Map<String, Object> params){ PageUtils page = spuInfoService.queryPageByCondition(params); return R.ok().put(\\\"page\\\", page); } \",\"@Override public PageUtils queryPageByCondition(Map<String, Object> params) { LambdaQueryWrapper<SpuInfoEntity> wrapper = new LambdaQueryWrapper<>(); String key = (String) params.get(\\\"key\\\"); if (StringUtils.isNotEmpty(key)) { wrapper.and((obj) -> { obj.eq(SpuInfoEntity::getId, key).or().like(SpuInfoEntity::getSpuName, key); }); } String status = (String) params.get(\\\"status\\\"); if (StringUtils.isNotEmpty(status)) { wrapper.eq(SpuInfoEntity::getPublishStatus, status); } String brandId = (String) params.get(\\\"brandId\\\"); if (StringUtils.isNotEmpty(brandId)) { wrapper.eq(SpuInfoEntity::getBrandId, brandId); } String catelogId = (String) params.get(\\\"catelogId\\\"); if (StringUtils.isNotEmpty(catelogId)) { wrapper.eq(SpuInfoEntity::getCatalogId, catelogId); } IPage<SpuInfoEntity> page = this.page( new Query<SpuInfoEntity>().getPage(params), wrapper ); return new PageUtils(page); } \",\"时间后端来格式化\",\"spring: jackson: date-format: yyyy-MM-dd HH:mm:ss \",\"商品管理：\",\"@Override public PageUtils queryPageByCondition(Map<String, Object> params) { /** * key: * catelogId: 0 * brandId: 0 * min: 0 * max: 0 */ LambdaQueryWrapper<SkuInfoEntity> wrapper = new LambdaQueryWrapper<>(); String key = (String) params.get(\\\"key\\\"); if (StringUtils.isNotEmpty(key)) { wrapper.and(obj -> { obj.eq(SkuInfoEntity::getSkuId, key).or().like(SkuInfoEntity::getSkuName, key); }); } String catelogId = (String) params.get(\\\"catelogId\\\"); if (StringUtils.isNotEmpty(catelogId) && !\\\"0\\\".equals(catelogId)) { wrapper.eq(SkuInfoEntity::getCatalogId, catelogId); } String brandId = (String) params.get(\\\"brandId\\\"); if (StringUtils.isNotEmpty(brandId) && !\\\"0\\\".equals(brandId)) { wrapper.eq(SkuInfoEntity::getBrandId, brandId); } String min = (String) params.get(\\\"min\\\"); if (StringUtils.isNotEmpty(min)) { wrapper.ge(SkuInfoEntity::getPrice, min); } String max = (String) params.get(\\\"max\\\"); if (StringUtils.isNotEmpty(max)) { try { BigDecimal bigDecimal = new BigDecimal(max); if (bigDecimal.compareTo(new BigDecimal(\\\"0\\\")) > 0) { wrapper.le(SkuInfoEntity::getPrice, max); } } catch (Exception e) { e.printStackTrace(); } } IPage<SkuInfoEntity> page = this.page( new Query<SkuInfoEntity>().getPage(params), wrapper ); return new PageUtils(page); } \"]},\"676\":{\"c\":[\"项目实战\",\"谷粒商城\"]},\"677\":{\"c\":[\"项目实战\",\"谷粒商城\"]},\"678\":{\"h\":\"谷粒商城分布式高级篇\"},\"679\":{\"h\":\"ElasticSearch全文检索\"},\"680\":{\"h\":\"基本概念\",\"t\":[\"索引index\",\"动词，相当于mysql的insert\",\"名词，相当于mysql的databse\",\"类型type\",\"在index索引中，可以定义一个或者多个类型\",\"类似于mysql的table，每一种类型的数据放在一起\",\"文档Document\",\"文档是json格式\",\"倒排索引\"]},\"681\":{\"h\":\"Docker安装ES环境\",\"t\":[\"docker pull elasticsearch:7.17.17 #存储和检索数据 docker pull kibana:7.17.17 #可视化检索数据 \",\"创建挂载目录~/tools/docker-volumes/elasticsearch：\",\"config文件夹，里面放一个elasticsearch.yml文件,写入http.host: 0.0.0.0注意冒号后面要加空格\",\"data文件夹\",\"运行容器\",\"docker run --name elasticsearch -p 9200:9200 -p 9300:9300 \\\\ -e \\\"discovery.type=single-node\\\" \\\\ -e ES_JAVA_OPTS=\\\"-Xms64m -Xmx512m\\\" \\\\ -v ~/tools/docker-volumes/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \\\\ -v ~/tools/docker-volumes/elasticsearch/data:/usr/share/elasticsearch/data \\\\ -v ~/tools/docker-volumes/elasticsearch/plugins:/usr/share/elasticsearch/plugins \\\\ -d elasticsearch:7.17.17 \",\"访问：http://localhost:9200/，看到下面界面成功\",\"运行kibana:\",\"docker run --name kibana -e ELASTICSEARCH_HOSTS=\\\"http://192.168.1.11:9200\\\" -p 5601:5601 \\\\ -d kibana:7.17.17 \",\"注意：\",\"ip不可以使用localhost，否则会一直出现Kibana server is not ready yet\",\"使用ifconfig查看本机ip\"]},\"682\":{\"h\":\"初步检索\",\"t\":[\"cat\",\"GET http://localhost:9200/_cat/nodes 查看所有节点 GET http://localhost:9200/_cat/health 查看es健康状况 GET http://localhost:9200/_cat/master 查看主节点信息 GET http://localhost:9200/_cat/indices 查看所有的索引 \",\"索引文档（保存）POST/PUT\",\"PUT http://localhost:9200/customer/external/1 { \\\"name\\\": \\\"John Doe\\\" } \",\"PUT 和 POST 都可以，\",\"POST 新增。如果不指定 id，会自动生成 id。指定 id 就会修改这个数据，并新增版本号PUT 可以新增可以修改。\",\"PUT 必须指定 id；由于 PUT 需要指定 id，我们一般都用来做修改操作，不指定 id 会报错。\",\"查询文档GET\",\"{ \\\"_index\\\": \\\"customer\\\", //在哪个索引 \\\"_type\\\": \\\"external\\\", //在哪个类型 \\\"_id\\\": \\\"1\\\", //记录 id \\\"_version\\\": 2, //版本号 \\\"_seq_no\\\": 1, //并发控制字段，每次更新就会+1，用来做乐观锁 \\\"_primary_term\\\": 1, //同上，主分片重新分配，如重启，就会变化 \\\"found\\\": true, \\\"_source\\\": { //真正的内容 \\\"name\\\": \\\"John Doe\\\" } } \",\"更新文档POST/PUT\",\"POST customer/external/1/_update { \\\"doc\\\": { \\\"name\\\": \\\"John Doew\\\" } } \",\"或者：\",\"POST customer/external/1 { \\\"name\\\": \\\"John Doe2\\\" } \",\"POST 操作会对比源文档数据，如果相同不会有什么操作，文档version 不增加\",\"PUT 操作总会将数据重新保存并增加 version 版本；\",\"带_update 对比元数据如果一样就不进行任何操作\",\"或者：\",\"PUT customer/external/1 { \\\"name\\\": \\\"John Doe\\\" } \",\"删除DELETE\",\"删除文档\",\"DELETE customer/external/1 \",\"删除索引\",\"DELETE customer \",\"bulk批量API\",\"POST /customer/external/_bulk {\\\"index\\\":{\\\"_id\\\":\\\"1\\\"}} {\\\"name\\\": \\\"John Doe\\\" } {\\\"index\\\":{\\\"_id\\\":\\\"2\\\"}} {\\\"name\\\": \\\"Jane Doe\\\" } \",\"使用kibana\",\"复杂操作：\",\"POST /_bulk { \\\"delete\\\": { \\\"_index\\\": \\\"website\\\", \\\"_type\\\": \\\"blog\\\", \\\"_id\\\": \\\"123\\\" }} { \\\"create\\\": { \\\"_index\\\": \\\"website\\\", \\\"_type\\\": \\\"blog\\\", \\\"_id\\\": \\\"123\\\" }} { \\\"title\\\": \\\"My first blog post\\\" } { \\\"index\\\": { \\\"_index\\\": \\\"website\\\", \\\"_type\\\": \\\"blog\\\" }} { \\\"title\\\": \\\"My second blog post\\\" } { \\\"update\\\": { \\\"_index\\\": \\\"website\\\", \\\"_type\\\": \\\"blog\\\", \\\"_id\\\": \\\"123\\\" } } { \\\"doc\\\" : {\\\"title\\\" : \\\"My updated blog post\\\"} } \",\"测试数据：\",\"https://github.com/elastic/elasticsearch/blob/7.4/docs/src/test/resources/accounts.json\",\"POST /bank/account/_bulk +数据 \"]},\"683\":{\"h\":\"进阶检索\"},\"684\":{\"h\":\"SearchAPI\",\"t\":[\"请求方式检索：\",\"GET bank/_search?q=*&sort=account_number:asc \",\"uri+请求体进行检索\",\"GET bank/_search { \\\"query\\\": { \\\"match_all\\\": {} }, \\\"sort\\\": [ { \\\"account_number\\\": { \\\"order\\\": \\\"desc\\\" } }, { \\\"balance\\\": \\\"desc\\\" } ] } \"]},\"685\":{\"h\":\"Query DSL\",\"t\":[\"基本语法：\",\"GET bank/_search { \\\"query\\\": { \\\"match_all\\\": {} }, \\\"sort\\\": [ { \\\"balance\\\": { \\\"order\\\": \\\"desc\\\" } } ], \\\"from\\\": 1, \\\"size\\\": 3, \\\"_source\\\": [\\\"balance\\\",\\\"firstname\\\"] } \",\"说明:\",\"GET bank/_search: 这是Elasticsearch中执行搜索操作的基本语法。正在请求bank索引中的文档。\",\"\\\"query\\\": {\\\"match_all\\\": {}}: 这个查询部分指定了搜索的条件。在这里，使用了match_all查询，表示你想要匹配所有文档，即检索所有数据。\",\"\\\"sort\\\": [{\\\"balance\\\": {\\\"order\\\": \\\"desc\\\"}}]: 这个部分用于对结果进行排序。希望按照balance字段降序排序，这意味着余额最高的文档将排在前面。\",\"\\\"from\\\": 1: 这个参数指定了从搜索结果的第几条文档开始返回。在这里，从第二条文档开始返回（因为Elasticsearch使用0-based索引）。\",\"\\\"size\\\": 3: 这个参数定义了返回的文档数量，即最多返回3条匹配的文档。\",\"\\\"_source\\\": [\\\"balance\\\", \\\"firstname\\\"]: 这个参数用于指定返回结果中包含的字段。在这里，只关心balance和firstname字段的值，其他字段将不会包含在结果中。\",\"match匹配查询：\",\"基本类型，非字符串精确匹配\",\"GET /bank/_search { \\\"query\\\": { \\\"match\\\": { \\\"account_number\\\": \\\"20\\\" } } } \",\"字符串，全文检索（倒排索引）计算相关性得分\",\"GET /bank/_search { \\\"query\\\": { \\\"match\\\": { \\\"address\\\": \\\"mill\\\" } } } \",\"字符串，分词检索\",\"GET /bank/_search { \\\"query\\\": { \\\"match\\\": { \\\"address\\\": \\\"mill road\\\" } } } \",\"match_phrase短语匹配\",\"GET /bank/_search { \\\"query\\\": { \\\"match_phrase\\\": { \\\"address\\\": \\\"mill road\\\" } } } \",\"和上面的区别是：\",\"match_phrase 匹配 必须包含mill road\",\"match匹配 mill或者road或者mill road\",\"multi_match 多字段匹配\",\"GET /bank/_search { \\\"query\\\": { \\\"multi_match\\\": { \\\"query\\\": \\\"mill\\\", \\\"fields\\\": [\\\"state\\\",\\\"address\\\"] } } } \",\"bool复合查询\",\"must必须达到的所有条件\",\"GET /bank/_search { \\\"query\\\": { \\\"bool\\\": { \\\"must\\\": [ {\\\"match\\\": {\\\"address\\\": \\\"mill\\\"}}, {\\\"match\\\": {\\\"gender\\\": \\\"M\\\"}} ] } } } \",\"should：应该达到的条件，符合会加分\",\"GET /bank/_search { \\\"query\\\": { \\\"bool\\\": { \\\"must\\\": [ {\\\"match\\\": {\\\"address\\\": \\\"mill\\\"}}, {\\\"match\\\": {\\\"gender\\\": \\\"M\\\"}} ], \\\"should\\\": [ {\\\"match\\\": { \\\"address\\\": \\\"lane\\\" }} ] } } } \",\"must_not必须不是指定的情况：\",\"GET /bank/_search { \\\"query\\\": { \\\"bool\\\": { \\\"must\\\": [ {\\\"match\\\": {\\\"address\\\": \\\"mill\\\"}}, {\\\"match\\\": {\\\"gender\\\": \\\"M\\\"}} ], \\\"should\\\": [ {\\\"match\\\": { \\\"address\\\": \\\"lane\\\" }} ], \\\"must_not\\\": [ {\\\"match\\\": { \\\"email\\\": \\\"baluba.com\\\" }} ] } } } \",\"filter结果过滤\",\"GET /bank/_search { \\\"query\\\": { \\\"bool\\\": { \\\"must\\\": [ {\\\"match\\\": { \\\"address\\\": \\\"mill\\\" }} ], \\\"filter\\\": [ {\\\"range\\\": { \\\"balance\\\": { \\\"gte\\\": 10000, \\\"lte\\\": 20000 } }} ] } } } \",\"term,匹配某个属性的值，精确匹配\",\"全文检索字段用match，其他非text用term\",\"GET /bank/_search { \\\"query\\\": { \\\"bool\\\": { \\\"must\\\": [ {\\\"term\\\": { \\\"age\\\": { \\\"value\\\": \\\"28\\\" } } } ] } } } \",\"aggregations执行聚合\",\"GET /bank/_search { \\\"query\\\": { \\\"match\\\": { \\\"address\\\": \\\"mill\\\" }}, \\\"aggs\\\": { \\\"ageAgg\\\": { \\\"terms\\\": { \\\"field\\\": \\\"age\\\", \\\"size\\\": 10 } }, \\\"ageAvg\\\":{ \\\"avg\\\": { \\\"field\\\": \\\"age\\\" } }, \\\"balanceAvg\\\":{ \\\"avg\\\": { \\\"field\\\": \\\"balance\\\" } } }, \\\"size\\\": 0 } \",\"\\\"aggs\\\": {...}: 这是聚合部分，用于对结果进行汇总分析。 \",\"\\\"ageAgg\\\": {...}: 这是一个名为ageAgg的聚合，使用了terms聚合，它将文档按照age字段的值分组，并且设置了size为10，表示只返回前10个分组。\",\"\\\"ageAvg\\\": {...}: 这是计算age字段的平均值的聚合。\",\"\\\"balanceAvg\\\": {...}: 这是计算balance字段的平均值的聚合。\",\"\\\"size\\\": 0: 这个参数表示不返回文档，只返回聚合结果。\",\"复杂聚合:\",\"查年龄分布和这个年龄的平均薪资\",\"GET /bank/_search { \\\"query\\\": { \\\"match_all\\\": {} }, \\\"aggs\\\": { \\\"ageAgg\\\": { \\\"terms\\\": { \\\"field\\\": \\\"age\\\", \\\"size\\\": 100 }, \\\"aggs\\\": { \\\"ageAvg\\\": { \\\"avg\\\": { \\\"field\\\": \\\"balance\\\" } } } } } } \",\"查出所有年龄分布，并且这些年龄段中M的平均薪资和F的平均薪资以及这个年龄段的总体平均薪资\",\"GET /bank/_search { \\\"query\\\": {\\\"match_all\\\": {}} , \\\"aggs\\\": { \\\"ageAgg\\\": { \\\"terms\\\": { \\\"field\\\": \\\"age\\\", \\\"size\\\": 100 }, \\\"aggs\\\": { \\\"genderAgg\\\": { \\\"terms\\\": { \\\"field\\\": \\\"gender.keyword\\\", \\\"size\\\": 10 } , \\\"aggs\\\": { \\\"balanceAgg\\\": { \\\"avg\\\": { \\\"field\\\": \\\"balance\\\" } } } }, \\\"ageBalanceAvg\\\":{ \\\"avg\\\": { \\\"field\\\": \\\"balance\\\" } } } } } } \"]},\"686\":{\"h\":\"Mapping映射\",\"t\":[\"创建时可以指定字段的类型\",\"PUT /my_index { \\\"mappings\\\": { \\\"properties\\\": { \\\"age\\\":{ \\\"type\\\": \\\"integer\\\" }, \\\"email\\\":{ \\\"type\\\": \\\"keyword\\\" }, \\\"name\\\":{ \\\"type\\\": \\\"text\\\" } } } } \",\"添加新的映射：\",\"PUT /my_index/_mapping { \\\"properties\\\":{ \\\"employee_id\\\":{ \\\"type\\\":\\\"keyword\\\", \\\"index\\\":false } } } \",\"更新：\",\"索引不可以更新，只可以重新创建\",\"数据迁移：\",\" POST _reindex { \\\"source\\\": { \\\"index\\\": \\\"bank\\\", \\\"type\\\": \\\"account\\\" }, \\\"dest\\\": { \\\"index\\\": \\\"newbank\\\" } } \"]},\"687\":{\"h\":\"分词器\",\"t\":[\"POST _analyze { \\\"analyzer\\\": \\\"standard\\\", \\\"text\\\": \\\"The 2 QUICK Brown-Foxes jumped over the lazy dog's bone.\\\" } \",\"这种分词器只能对英文有用，需要安装中文分词器ik\",\"https://github.com/medcl/elasticsearch-analysis-ik/releases\",\"将下载好的文件放到自己电脑挂载的plugins目录下面，如果版本不一致可以修改 plugin-descriptor.properties文件中的最后一行。\",\"改为自己的elasticsearch版本,此时可以进行分词\",\"POST _analyze { \\\"analyzer\\\": \\\"ik_smart\\\", \\\"text\\\": \\\"我是中国人\\\" } \",\"使用docker安装nginx\",\"在html/es目录下面创建fenci.txt文件\",\"编辑配置：\",\"修改分词文件位置：\",\"此时重启elasticsearch\",\"Elasticsearch整合springboot\",\"导入maven依赖：\",\"<dependency> <groupId>org.elasticsearch.client</groupId> <artifactId>elasticsearch-rest-high-level-client</artifactId> <version>7.17.17</version> </dependency> \",\"注意需要更换版本\",\"<elasticsearch.version>7.17.17</elasticsearch.version> \",\"创建配置类官网：\",\"@Configuration public class GulimallElasticSearchConfig { public static final RequestOptions COMMON_OPTIONS; static { RequestOptions.Builder builder = RequestOptions.DEFAULT.toBuilder(); // builder.addHeader(\\\"Authorization\\\", \\\"Bearer \\\" + TOKEN); // builder.setHttpAsyncResponseConsumerFactory( // new HttpAsyncResponseConsumerFactory // .HeapBufferedResponseConsumerFactory(30 * 1024 * 1024 * 1024)); COMMON_OPTIONS = builder.build(); } @Bean public RestHighLevelClient esRestClient() { RestHighLevelClient client = new RestHighLevelClient( RestClient.builder( new HttpHost(\\\"192.168.1.11\\\", 9200, \\\"http\\\"))); return client; } } \",\"测试，检索数据：\",\" @Test public void indexData() throws IOException { IndexRequest indexRequest = new IndexRequest(\\\"users\\\"); indexRequest.id(\\\"1\\\"); // indexRequest.source(\\\"userName\\\",\\\"zhangsan\\\",\\\"age\\\",18,\\\"gender\\\",\\\"男\\\"); User user = new User(); user.setUserName(\\\"zhangsan\\\"); user.setAge(18); user.setGender(\\\"男\\\"); String jsonString = JSON.toJSONString(user); indexRequest.source(jsonString, XContentType.JSON); IndexResponse index = client.index(indexRequest, GulimallElasticSearchConfig.COMMON_OPTIONS); System.out.println(index); } @Data class User{ private String userName; private Integer age; private String gender; } \",\"复杂搜索：\",\" @Test public void searchData() throws Exception { //创建检索请求 SearchRequest searchRequest = new SearchRequest(); //指定索引 searchRequest.indices(\\\"bank\\\"); //构建检索条件 SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder(); searchSourceBuilder.query(QueryBuilders.matchQuery(\\\"address\\\", \\\"mill\\\"));//匹配查询 TermsAggregationBuilder ageAgg = AggregationBuilders.terms(\\\"ageAgg\\\").field(\\\"age\\\").size(10); AvgAggregationBuilder balanceAvg = AggregationBuilders.avg(\\\"balanceAvg\\\").field(\\\"balance\\\"); searchSourceBuilder.aggregation(ageAgg);//聚合查询 searchSourceBuilder.aggregation(balanceAvg);//聚合查询 System.out.println(\\\"检索条件\\\" + searchSourceBuilder.toString()); searchRequest.source(searchSourceBuilder); //执行检索 SearchResponse searchResponse = client.search(searchRequest, GulimallElasticSearchConfig.COMMON_OPTIONS); System.out.println(searchResponse.toString()); SearchHits hits = searchResponse.getHits(); SearchHit[] searchHits = hits.getHits(); for (SearchHit hit : searchHits) { String sourceAsString = hit.getSourceAsString(); Account account = JSON.parseObject(sourceAsString, Account.class); System.out.println(\\\"account = \\\" + account); } //获取分析数据 Aggregations aggregations = searchResponse.getAggregations(); for (Aggregation aggregation : aggregations.asList()) { String name = aggregation.getName(); System.out.println(\\\"当前聚合name = \\\" + name); } Terms ageAgg1 = aggregations.get(\\\"ageAgg\\\"); for (Terms.Bucket bucket : ageAgg1.getBuckets()) { String keyAsString = bucket.getKeyAsString(); System.out.println(\\\"年龄 = \\\" + keyAsString); } Avg balanceAvg1 = aggregations.get(\\\"balanceAvg\\\"); System.out.println(\\\"平均薪资 = \\\" + balanceAvg1.getValue()); } \"]},\"688\":{\"h\":\"商品上架\",\"t\":[\"@PostMapping(\\\"/{spuId}/up\\\") public R spuUp(@PathVariable(\\\"spuId\\\") Long spuId){ spuInfoService.up(spuId); return R.ok(); } \",\"逻辑：\",\" @Override public void up(Long spuId) { //1.查出当前spuId对应的所有sku信息，品牌的名字 List<SkuInfoEntity> skuInfoEntities = skuInfoService.getSkuInfoBySpuId(spuId); //todo 4.查询当前sku的所有可以被用来检索的规格属性 List<ProductAttrValueEntity> baseAttr = productAttrValueService.baseAttrlistforspu(spuId); List<Long> attrIds = baseAttr.stream().map(attr -> { return attr.getAttrId(); }).collect(Collectors.toList()); List<Long> searchAttrIds = attrService.selectSearchAttrIds(attrIds); HashSet<Long> idSet = new HashSet<>(searchAttrIds); List<SkuEsModel.Attrs> attrsList = baseAttr.stream().filter(item -> { return idSet.contains(item.getAttrId()); }).map(item -> { SkuEsModel.Attrs attrs = new SkuEsModel.Attrs(); BeanUtils.copyProperties(item, attrs); return attrs; }).collect(Collectors.toList()); //todo 1.发送远程调用 ，查询库存系统是否有库存 hasStock Map<Long, Boolean> collect = null; try { List<Long> skuIdList = skuInfoEntities.stream().map(SkuInfoEntity::getSkuId).collect(Collectors.toList()); R<List<SkuHasStockVo>> skuHasStock = wareFeignService.getSkuHasStock(skuIdList); collect = skuHasStock.getData() .stream().collect(Collectors.toMap(SkuHasStockVo::getSkuId, SkuHasStockVo::getHasStock)); } catch (Exception e) { log.error(\\\"库存服务查询异常，原因：{}\\\",e); } //2.封装每个sku的信息 Map<Long, Boolean> finalCollect = collect; List<SkuEsModel> upProducts = skuInfoEntities.stream().map(sku -> { SkuEsModel esModel = new SkuEsModel(); BeanUtils.copyProperties(sku, esModel); //skuPrice,skuImg,hasStock,hotScore,brandName,brandImg,catalogName,attrs // public static class Attr { // private Long attrId; // private String attrName; // private String attrValue; // } esModel.setSkuPrice(sku.getPrice()); esModel.setSkuImg(sku.getSkuDefaultImg()); if (finalCollect ==null){ esModel.setHasStock(true); }else{ esModel.setHasStock(finalCollect.get(sku.getSkuId())); } //todo 2.热度评分 0 esModel.setHotScore(0L); //todo 3.查询品牌和分类的名字信息 BrandEntity brand = brandService.getById(esModel.getBrandId()); esModel.setBrandName(brand.getName()); esModel.setBrandImg(brand.getLogo()); CategoryEntity category = categoryService.getById(esModel.getCatalogId()); esModel.setCatalogName(category.getName()); esModel.setAttrs(attrsList); return esModel; }).collect(Collectors.toList()); // todo 5.将数据发送给es进行保存 R r = searchFeignService.productStatusUp(upProducts); if (r.getCode() == 0) { //远程调用成功 //todo 6.修改当前spu的状态 this.baseMapper.updateSpuStatus(spuId, ProductConstant.StatusEnum.SPU_UP.getCode()); } else { //远程调用失败 //todo 7.重复调用？接口幂等性，重试机制 } } \",\"ElasticSearchController\",\"@RequestMapping(\\\"/search/save\\\") @RestController @Slf4j public class ElasticSaveController { @Autowired private ProductSaveService productSaveService; //上架商品 @PostMapping(\\\"/product\\\") public R productStatusUp(@RequestBody List<SkuEsModel> skuEsModels) { try { boolean b = productSaveService.productStatusUp(skuEsModels); if (b) { return R.ok(); } else { return R.error(BizCodeEnum.PRODUCT_UP_EXCEPTION.getCode(), BizCodeEnum.PRODUCT_UP_EXCEPTION.getMsg()); } } catch (IOException e) { log.error(\\\"ElasticSaveController controller商品上架错误:{}\\\", e); return R.error(BizCodeEnum.PRODUCT_UP_EXCEPTION.getCode(), BizCodeEnum.PRODUCT_UP_EXCEPTION.getMsg()); } } } \",\"逻辑实现：\",\"@Service @Slf4j public class ProductSaveServiceImpl implements ProductSaveService { @Autowired private RestHighLevelClient restHighLevelClient; @Override public boolean productStatusUp(List<SkuEsModel> skuEsModels) throws IOException { //保存到es //1.给es中建立索引。product，建立好映射关系 //2.给es中保存这些数据 BulkRequest bulkRequest = new BulkRequest(); for (SkuEsModel skuEsModel : skuEsModels) { //构造保存请求 IndexRequest indexRequest = new IndexRequest(EsConstant.PRODUCT_INDEX); indexRequest.id(skuEsModel.getSkuId().toString()); String jsonString = JSON.toJSONString(skuEsModel); indexRequest.source(jsonString, XContentType.JSON); bulkRequest.add(indexRequest); } BulkResponse bulk = restHighLevelClient.bulk(bulkRequest, GulimallElasticSearchConfig.COMMON_OPTIONS); //TODO 如果批量错误 boolean b = bulk.hasFailures(); List<String> collect = Arrays.stream(bulk.getItems()).map(BulkItemResponse::getId).collect(Collectors.toList()); log.error(\\\"商品上架错误:{}\\\",collect); return b; } } \"]},\"689\":{\"h\":\"商城业务\"},\"690\":{\"h\":\"首页\",\"t\":[\"product模块使用模版引擎\",\"<!-- 模板引擎 --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-thymeleaf</artifactId> </dependency> \",\"关闭缓存：\",\"spring: thymeleaf: cache: false \",\"拷贝页面：\",\"devtools热部署\",\"<!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-devtools --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-devtools</artifactId> <optional>true</optional> </dependency> \",\"快捷键command+shift+F9\",\"首页三级分类接口：\",\"//index/catalog.json @GetMapping(\\\"/index/catalog.json\\\") @ResponseBody public Map<String, List<Catelog2Vo>> getCatalogJson() { Map<String, List<Catelog2Vo>> catalogJson = categoryService.getCatalogJson(); return catalogJson; } \",\"@Override public Map<String, List<Catelog2Vo>> getCatalogJson() { //查出所有1级分类 List<CategoryEntity> level1Categories = this.getLevel1Categories(); //封装数据 Map<String, List<Catelog2Vo>> parentCid = level1Categories.stream().collect(Collectors.toMap(k -> { return k.getCatId().toString(); }, v -> { //每一个1级分类，查到这个一级分类的二级分类 List<CategoryEntity> categoryEntities = this.baseMapper.selectList(new LambdaQueryWrapper<CategoryEntity>() .eq(CategoryEntity::getParentCid, v.getCatId())); //封装数据 List<Catelog2Vo> collect = null; if (categoryEntities != null) { collect = categoryEntities.stream().map(level2 -> { Catelog2Vo catelog2Vo = new Catelog2Vo(v.getCatId().toString(), null, level2.getCatId().toString(), level2.getName()); //找当前二级分类的三级分类封装成vo List<CategoryEntity> level3Catelog = baseMapper.selectList(new LambdaQueryWrapper<CategoryEntity>() .eq(CategoryEntity::getParentCid, level2.getCatId())); if (level3Catelog != null) { List<Catelog2Vo.Catalog3Vo> catalog3Vos = level3Catelog.stream().map(level3 -> { Catelog2Vo.Catalog3Vo catalog3Vo = new Catelog2Vo.Catalog3Vo(level2.getCatId().toString(), level3.getCatId().toString(), level3.getName()); return catalog3Vo; }).collect(Collectors.toList()); catelog2Vo.setCatalog3List(catalog3Vos); } return catelog2Vo; }).collect(Collectors.toList()); } return collect; })); return parentCid; } \"]},\"691\":{\"h\":\"nginx配置域名\",\"t\":[\"下次访问项目，可以直接用gulimall.com进行访问\",\"server { listen 80; server_name gulimall.com; #access_log /var/log/nginx/host.access.log main; location / { proxy_pass http://192.168.1.11:10001; } #error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html { root /usr/share/nginx/html; } # proxy the PHP scripts to Apache listening on 127.0.0.1:80 # #location ~ \\\\.php$ { # proxy_pass http://127.0.0.1; #} # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000 # #location ~ \\\\.php$ { # root html; # fastcgi_pass 127.0.0.1:9000; # fastcgi_index index.php; # fastcgi_param SCRIPT_FILENAME /scripts$fastcgi_script_name; # include fastcgi_params; #} # deny access to .htaccess files, if Apache's document root # concurs with nginx's one # #location ~ /\\\\.ht { # deny all; #} } \",\"配置nginx负载均衡\",\"在总配置nginx.conf中,http块下面：\",\" upstream gulimall { server 192.168.1.11:88; } \",\"在gulimall.conf中,server块下面：\",\"server { listen 80; server_name gulimall.com; #access_log /var/log/nginx/host.access.log main; location / { proxy_pass http://gulimall; } } \",\"此时访问gulimall.com代理不了，但是访问http://gulimall.com/api/product/attrattrgrouprelation/list却可以\",\"这是因为nginx在代理给网关的时候，会丢失请求的host信息\",\"修改配置：\",\" location / { proxy_set_header Host $host; proxy_pass http://gulimall; } \"]},\"692\":{\"h\":\"性能压测\",\"t\":[\"Jmeter官网：https://jmeter.apache.org/\",\"添加线程组：\",\"添加取样器：\",\"添加监听器，用来查看结果：\"]},\"693\":{\"h\":\"性能监控\"},\"694\":{\"h\":\"JVM内存模型\",\"t\":[\"Java虚拟机（JVM）内存模型是Java应用程序在运行时使用的内存组织方式。它主要分为两部分：堆内存和方法区。\",\"堆内存（Heap）： 用于存储对象实例。堆内存被所有线程共享，其中包含了新生代和老年代两部分。新生代主要存放新创建的对象，而老年代则存放经过多次垃圾回收后仍然存活的对象。\",\"方法区（Method Area）： 存储类的元数据信息，如类的结构、字段、方法、接口等。与堆内存一样，方法区也是被所有线程共享的。\",\"JVM内存模型中的其他重要概念包括：\",\"栈内存（Stack）： 为每个线程分配一个私有的栈，用于存储线程执行方法时的局部变量、操作数栈、动态链接、方法出口等信息。\",\"程序计数器（Program Counter）： 每个线程都有一个程序计数器，用于记录当前线程执行的字节码行号。在线程切换时，程序计数器的值被恢复，保证线程能够正确地执行。\",\"本地方法栈（Native Method Stack）： 与栈内存类似，但用于执行本地方法。在使用JNI（Java Native Interface）调用本地方法时，会使用本地方法栈。\",\"直接内存（Direct Memory）： 不是JVM内部的一部分，但与JVM密切相关。在使用NIO（New I/O）时，可以使用直接内存来提高I/O性能。直接内存不受JVM堆内存限制，但受操作系统的限制。\"]},\"695\":{\"h\":\"jconsole和jvisualvm\",\"t\":[\"控制台输入jconsole即可启动\",\"jvisualvm在高版本的java(Java8_361以上)需要下载\",\"https://visualvm.github.io/download.html\"]},\"696\":{\"h\":\"中间件性能测试\",\"t\":[\"请求的过程：\",\"nginx测试：\",\"使用docker stats 检测nginx性能\",\"初始状态：\",\"开启jmeter\",\"网关测试：\",\"中间件越多，性能损失越大，大多都损失在网络交互了：\",\"业务：\",\"db\",\"模版的渲染速度（缓存）\",\"静态资源\",\"压测统计（线程数50）：\",\"压测内容\",\"吞吐量/s\",\"90%响应时间\",\"99%响应时间\",\"简单服务\",\"6537\",\"11\",\"68\",\"首页一级菜单渲染\",\"336\",\"296\",\"501\",\"首页一级菜单渲染(开缓存)\",\"707\",\"152\",\"375\",\"首页一级菜单渲染(开缓存,sql优化，日志优化)\",\"832\",\"125\",\"280\",\"首页一级菜单渲染(开缓存,sql优化，日志优化)\",\" thymeleaf: cache: true logging: level: org.org.springframework.web: error com.cxk.gulimall: error \",\"统计sql用时\",\"@Override public List<CategoryEntity> getLevel1Categories() { long l = System.currentTimeMillis(); List<CategoryEntity> categoryEntities = this.baseMapper.selectList(new LambdaQueryWrapper<CategoryEntity>() .eq(CategoryEntity::getParentCid, 0)); System.out.println(\\\"消耗时间：\\\"+(System.currentTimeMillis() - l)); return categoryEntities; } \",\"给字段加索引：\"]},\"697\":{\"h\":\"nginx动静分离\",\"t\":[\"将前端页面放在自己挂载的nginx/static目录下面\",\"修改配置\",\" location /static/ { root /usr/share/nginx/html; } location / { proxy_set_header Host $host; proxy_pass http://gulimall; } \",\"重启docker\",\"优化代码，少于数据库做交互：\",\"@Override public Map<String, List<Catelog2Vo>> getCatalogJson() { List<CategoryEntity> selectedList = baseMapper.selectList(null); //查出所有1级分类 List<CategoryEntity> level1Categories = this.getLevel1Categories(); //封装数据 Map<String, List<Catelog2Vo>> parentCid = level1Categories.stream().collect(Collectors.toMap(k -> { return k.getCatId().toString(); }, v -> { //每一个1级分类，查到这个一级分类的二级分类 List<CategoryEntity> categoryEntities = getParentCid(selectedList,v.getCatId()); //封装数据 List<Catelog2Vo> collect = null; if (categoryEntities != null) { collect = categoryEntities.stream().map(level2 -> { Catelog2Vo catelog2Vo = new Catelog2Vo(v.getCatId().toString(), null, level2.getCatId().toString(), level2.getName()); //找当前二级分类的三级分类封装成vo List<CategoryEntity> level3Catelog = getParentCid(selectedList,level2.getCatId()); if (level3Catelog != null) { List<Catelog2Vo.Catalog3Vo> catalog3Vos = level3Catelog.stream().map(level3 -> { Catelog2Vo.Catalog3Vo catalog3Vo = new Catelog2Vo.Catalog3Vo(level2.getCatId().toString(), level3.getCatId().toString(), level3.getName()); return catalog3Vo; }).collect(Collectors.toList()); catelog2Vo.setCatalog3List(catalog3Vos); } return catelog2Vo; }).collect(Collectors.toList()); } return collect; })); return parentCid; } private List<CategoryEntity> getParentCid(List<CategoryEntity> selectList, Long v) { List<CategoryEntity> collect = selectList.stream().filter(item -> item.getParentCid().equals(v)).collect(Collectors.toList()); return collect; } \"]},\"698\":{\"h\":\"Redis缓存\",\"t\":[\"导入redis\",\"<!-- 引入redis --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-redis</artifactId> </dependency> \",\"配置：\",\"spring: redis: host: localhost port: 6379 \",\"测试：\",\"@Autowired StringRedisTemplate stringRedisTemplate; @Test public void testStringRedisTemplate(){ ValueOperations<String, String> ops = stringRedisTemplate.opsForValue(); ops.set(\\\"hello\\\", \\\"world\\\"+ UUID.randomUUID().toString()); String hello = ops.get(\\\"hello\\\"); System.out.println(\\\"redxis中保存的值是：\\\"+hello); } \",\"修改获取三级分类菜单，使用redis做缓存：\",\"@Override public Map<String, List<Catelog2Vo>> getCatalogJsonFromRedis() { //1.加入缓存 给缓存中放json字符串，方便以后使用 String catalogJson = stringRedisTemplate.opsForValue().get(\\\"catalogJson\\\"); if (StringUtils.isEmpty(catalogJson)) { //缓存中没有数据，查询数据库 Map<String, List<Catelog2Vo>> catalogJsonFromDb = getCatalogJsonFromDb(); //转为json放入缓存中 String jsonString = JSON.toJSONString(catalogJsonFromDb); stringRedisTemplate.opsForValue().set(\\\"catalogJson\\\", jsonString); return catalogJsonFromDb; } Map<String, List<Catelog2Vo>> result = JSON.parseObject( catalogJson, new TypeReference<Map<String, List<Catelog2Vo>>>() {}); return result; } \",\"一开始压力测试没问题，时间久了会报错：\",\"这是因为springboot2.0以后默认使用lettuce作为操作redis的客户端。它使用netty进行网络通信。 lettucel的bug导致nettyi堆外内存溢出-Xmx300m;netty如果没有指定堆外内存，默认使用-Xmx300m 可以通过-Dio.netty.maxDirectMemoryi进行设置 解决方案：不能使用-Dio.netty.maxDirectMemory只去调大堆外内存。\",\"升级lettuce客户端。\",\"或者切换使用jedis\",\"<!-- 引入redis --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-redis</artifactId> <exclusions> <exclusion> <groupId>io.lettuce</groupId> <artifactId>lettuce-core</artifactId> </exclusion> </exclusions> </dependency> <dependency> <groupId>redis.clients</groupId> <artifactId>jedis</artifactId> </dependency> \"]},\"699\":{\"h\":\"缓存穿透\",\"t\":[\"缓存穿透是指在缓存中找不到需要的数据，导致每次请求都要查询数据库或其他存储系统，从而影响性能。这通常发生在请求的键值对在存储系统中不存在，但被频繁地查询。\",\"为了解决缓存穿透问题，可以考虑以下方法：\",\"空值缓存： 当查询数据库或存储系统后，如果发现数据不存在，可以将这个空值也存入缓存，但设置一个较短的过期时间，防止频繁查询。\",\"布隆过滤器： 使用布隆过滤器来快速判断一个键值是否存在于缓存中。这样可以在缓存层面快速拦截掉那些明显不存在于存储系统中的请求。\",\"预热缓存： 在系统启动时或数据更新时，可以通过预热缓存来提前将热门数据加载到缓存中，减少冷启动时的缓存穿透问题。\",\"限制频繁查询： 对于频繁查询但不会经常变化的数据，可以考虑在缓存层面添加限制，例如采用缓存击穿的防护机制，防止大量请求同时穿透到存储系统。\"]},\"700\":{\"h\":\"缓存雪崩\",\"t\":[\"缓存雪崩是指缓存中大量的缓存数据在同一时间失效或过期，导致大量的请求直接访问底层存储系统，从而导致存储系统负载激增，影响系统性能。\",\"为了避免缓存雪崩，可以采取以下一些措施：\",\"过期时间随机化： 设置缓存数据的过期时间时，可以考虑添加一些随机因素，防止大量缓存在同一时刻过期，减缓对底层系统的冲击。\",\"持久化缓存： 对于一些重要的缓存数据，可以考虑使用永不过期或较长时间的过期时间，确保即使发生缓存失效，系统也能够继续提供服务。\",\"分布式锁： 在缓存失效时，可以使用分布式锁来保证只有一个线程或节点可以重新加载缓存，防止大量请求同时击穿。\",\"多级缓存： 使用多级缓存架构，将缓存数据分布在不同的缓存层级中，即使某一层缓存失效，其他层仍然可以提供部分数据，减轻雪崩效应。\",\"异步加载： 缓存的异步加载机制可以在缓存失效时，通过异步任务去加载缓存，而不是同步地直接访问底层存储系统，从而减少对底层系统的冲击。\"]},\"701\":{\"h\":\"缓存击穿\",\"t\":[\"缓存击穿是指某个缓存键对应的数据在缓存中不存在，但多个并发请求同时请求这个不存在的数据，导致请求穿透到底层存储系统，增加了系统负载。\",\"为了避免缓存击穿，可以采取以下措施：\",\"缓存预加载： 在系统启动时或数据更新时，可以通过预加载缓存来将热门数据加载到缓存中，避免在请求到来时才去加载。这样可以减少对底层系统的冲击。\",\"使用互斥锁： 在查询缓存时，可以使用互斥锁来保证只有一个线程或请求可以进行缓存的查询操作。这样可以防止多个请求同时穿透到底层存储系统。\",\"缓存穿透检测： 在缓存层面可以添加一些检测机制，判断某个键是否存在于缓存中，如果不存在，可以通过一定的策略（如设置一个临时的占位值）防止多个请求同时穿透。\",\"设置短暂的缓存过期时间： 对于一些不常变化的数据，可以设置一个较短的缓存过期时间，以保证缓存数据能够及时更新，降低缓存失效的概率。\",\"使用分布式锁： 在缓存失效时，可以使用分布式锁来保证只有一个线程或节点可以重新加载缓存，防止多个请求同时穿透。\"]},\"702\":{\"h\":\"使用本地锁\",\"t\":[\" public Map<String, List<Catelog2Vo>> getCatalogJsonFromDb() { //只要是同一把锁，就能锁住所有的线程 //synchronized (this):SpringBoot所有的组件在容器中都是单例的 //todo 本地锁 synchronized ,JUC锁 Lock ,在分布式情况下，使用分布式锁 zookeeper redis synchronized (this){ //得到锁以后，再去缓存中确定是否有数据 String catalogJson = stringRedisTemplate.opsForValue().get(\\\"catalogJson\\\"); if (!StringUtils.isEmpty(catalogJson)) { //缓存中有数据，直接返回 Map<String, List<Catelog2Vo>> result = JSON.parseObject( catalogJson, new TypeReference<Map<String, List<Catelog2Vo>>>() {}); return result; } //查出剩余结果。。。 String jsonString = JSON.toJSONString(parentCid); stringRedisTemplate.opsForValue().set(\\\"catalogJson\\\", jsonString,1, TimeUnit.HOURS); return parentCid; } } \",\"问题：\",\"本地锁只会锁住这台机器，但是分布式系统下面有多台机器，在高并发情况下吗，每台机器还是会都查询一次数据库\"]},\"703\":{\"h\":\"分布式锁\",\"t\":[\"set key value nx:NX -- Only set the key if it does not already exist.\",\"public Map<String, List<Catelog2Vo>> getCatalogJsonFromDbWithRedisLock() { //1.占分布式锁 Boolean lock = stringRedisTemplate.opsForValue().setIfAbsent(\\\"lock\\\", \\\"111\\\"); if (lock) { //加锁成功 Map<String, List<Catelog2Vo>> dataFromDb = getDataFromDb(); //删除锁 stringRedisTemplate.delete(\\\"lock\\\"); return dataFromDb; } else { //加锁失败，重试 自旋 return getCatalogJsonFromDbWithRedisLock(); } } \",\"这样写的问题是：在getDataFromDb中如果出现异常，则不会删除锁，导致出现死锁，解决办法，设置过期时间\",\"public Map<String, List<Catelog2Vo>> getCatalogJsonFromDbWithRedisLock() { //1.占分布式锁 Boolean lock = stringRedisTemplate.opsForValue().setIfAbsent(\\\"lock\\\", \\\"111\\\"); if (lock) { //加锁成功 //设置过期时间，防止死锁 stringRedisTemplate.expire(\\\"lock\\\", 30, TimeUnit.SECONDS); Map<String, List<Catelog2Vo>> dataFromDb = getDataFromDb(); //删除锁 stringRedisTemplate.delete(\\\"lock\\\"); return dataFromDb; } else { //加锁失败，重试 自旋 return getCatalogJsonFromDbWithRedisLock(); } } \",\"这样设置过期时间，问题是还没执行到设置过期时间的时候，出现问题，导致死锁，因此抢锁和设置过期时间应该是一个原子操作\",\" public Map<String, List<Catelog2Vo>> getCatalogJsonFromDbWithRedisLock() { //1.占分布式锁 Boolean lock = stringRedisTemplate.opsForValue().setIfAbsent(\\\"lock\\\", \\\"111\\\", 30, TimeUnit.SECONDS); if (lock) { //加锁成功 //设置过期时间，防止死锁 // stringRedisTemplate.expire(\\\"lock\\\", 30, TimeUnit.SECONDS); Map<String, List<Catelog2Vo>> dataFromDb = getDataFromDb(); //删除锁 stringRedisTemplate.delete(\\\"lock\\\"); return dataFromDb; } else { //加锁失败，重试 自旋 return getCatalogJsonFromDbWithRedisLock(); } } \",\"删除锁的时候问题，业务代码非常耗时，例如达到了50s，但是锁的过期时间只有30s，此时就会自动释放锁，导致其他线程进来，当第一个线程执行完的时候，他会去释放第二个线程的锁\",\"解决办法，使用UUID作为值，保证只能删除自己的锁\",\" public Map<String, List<Catelog2Vo>> getCatalogJsonFromDbWithRedisLock() { //1.占分布式锁 String uuid= UUID.randomUUID().toString(); Boolean lock = stringRedisTemplate.opsForValue().setIfAbsent(\\\"lock\\\", uuid, 30, TimeUnit.SECONDS); if (lock) { //加锁成功 //设置过期时间，防止死锁 // stringRedisTemplate.expire(\\\"lock\\\", 30, TimeUnit.SECONDS); Map<String, List<Catelog2Vo>> dataFromDb = getDataFromDb(); String lockValue = stringRedisTemplate.opsForValue().get(\\\"lock\\\"); //删除锁 if (uuid.equals(lockValue)){ stringRedisTemplate.delete(\\\"lock\\\"); } return dataFromDb; } else { //加锁失败，重试 自旋 return getCatalogJsonFromDbWithRedisLock(); } } \",\"问题：由于获取值+对比成功删除=原子操作，当对比值成功的时候，将要删除锁的时候，锁过期了，这时候别人进来了，又会删除别人的锁，\",\"解决办法，使用lua脚本\",\" public Map<String, List<Catelog2Vo>> getCatalogJsonFromDbWithRedisLock() { //1.占分布式锁 String uuid = UUID.randomUUID().toString(); Boolean lock = stringRedisTemplate.opsForValue().setIfAbsent(\\\"lock\\\", uuid, 30, TimeUnit.SECONDS); if (lock) { Map<String, List<Catelog2Vo>> dataFromDb; try { dataFromDb = getDataFromDb(); } finally { //使用lua脚本解锁 String script = \\\"if redis.call('get', KEYS[1]) == ARGV[1] then return redis.call('del',KEYS[1]) else return 0 end\\\"; stringRedisTemplate.execute(new DefaultRedisScript<Long>(script, Long.class), Arrays.asList(\\\"lock\\\"), uuid); } return dataFromDb; } else { //加锁失败，重试 自旋 try { Thread.sleep(1000); }catch (Exception e){ e.printStackTrace(); } return getCatalogJsonFromDbWithRedisLock(); } } \",\"至此，问题解决，接下来会使用别人封装好的工具（redisson）来操作\"]},\"704\":{\"h\":\"Redisson\",\"t\":[\"<!-- 以后使用Redisson作为所有分布式锁 --> <dependency> <groupId>org.redisson</groupId> <artifactId>redisson</artifactId> <version>3.12.0</version> </dependency> \",\"配置：https://github.com/redisson/redisson/wiki/2.-Configuration\",\"@Configuration public class MyRedissonConfig { @Bean(destroyMethod=\\\"shutdown\\\") public RedissonClient redisson() throws IOException { Config config = new Config(); config.useSingleServer().setAddress(\\\"localhost:6379\\\"); return Redisson.create(config); } } \",\"分布式锁：\",\"@GetMapping(\\\"/hello\\\") @ResponseBody public String hello() { RLock lock = redissonClient.getLock(\\\"my-lock\\\"); lock.lock(); //阻塞式等待，默认加的锁都是30s时间 //1.锁的自动续期，如果业务超长，运行期间自动给锁续上新的30s，不用担心业务时间长，锁自动过期被删掉 //2.加锁的业务只要运行完成，就不会给当前锁续期，即使不手动解锁，锁也会在30s后自动删除 try { System.out.println(\\\"加锁成功，执行业务...\\\" + Thread.currentThread().getId()); Thread.sleep(30000); } catch (Exception e) { throw new RuntimeException(e); } finally { lock.unlock(); } return \\\"hello\\\"; } \",\"Redisson有看门狗机制\",\"最佳实战，指定过期时间，不使用续期\",\"lock.lock(10, TimeUnit.SECONDS); \",\"如果指定了过期时间，自动解锁时间一定要大于业务执行时间，因为不会自动续期\",\"读写锁，保证可以读到最新数据：\",\"@GetMapping(\\\"/write\\\") @ResponseBody public String writeValue() { RReadWriteLock lock = redissonClient.getReadWriteLock(\\\"my-lock\\\"); String s=\\\"\\\"; RLock rLock = lock.writeLock(); try { rLock.lock(); s= UUID.randomUUID().toString(); System.out.println(\\\"写锁加锁成功，执行业务...\\\" + Thread.currentThread().getId()); Thread.sleep(30000); stringRedisTemplate.opsForValue().set(\\\"writeValue\\\",s); } catch (Exception e) { throw new RuntimeException(e); } finally { rLock.unlock(); } return s; } @GetMapping(\\\"/read\\\") @ResponseBody public String readValue() { RReadWriteLock lock = redissonClient.getReadWriteLock(\\\"my-lock\\\"); String s=\\\"\\\"; RLock rLock = lock.readLock(); try { rLock.lock(); s= stringRedisTemplate.opsForValue().get(\\\"writeValue\\\"); System.out.println(\\\"读锁加锁成功，执行业务...\\\" + Thread.currentThread().getId()); Thread.sleep(30000); } catch (Exception e) { throw new RuntimeException(e); } finally { rLock.unlock(); } return s; } \",\"闭锁，可以用于分布式限流：\",\"@GetMapping(\\\"/lockDoor\\\") @ResponseBody public String lockDoor() throws InterruptedException { RCountDownLatch door = redissonClient.getCountDownLatch(\\\"door\\\"); door.trySetCount(5); door.await(); return \\\"放假了...\\\"; } @GetMapping(\\\"/gogogo/{id}\\\") @ResponseBody public String gogogo(@RequestBody String id) { RCountDownLatch door = redissonClient.getCountDownLatch(\\\"door\\\"); door.countDown(); return id; } \",\"信号量,可以做限流\",\"@GetMapping(\\\"/park\\\") @ResponseBody public String park() throws Exception{ RSemaphore park = redissonClient.getSemaphore(\\\"park\\\"); park.acquire();;//获取一个信号，获取一个值-1 return \\\"ok\\\"; } @GetMapping(\\\"/go\\\") @ResponseBody public String go() throws Exception{ RSemaphore park = redissonClient.getSemaphore(\\\"park\\\"); park.release();;//归还一个信号，获取一个值+1 return \\\"ok\\\"; } \",\"使用redisson修改上面获取三级分类的业务代码：\",\"public Map<String, List<Catelog2Vo>> getCatalogJsonFromDbWithRedissonLock() { //1.锁的名字要有业务名字区分 RLock lock = redissonClient.getLock(\\\"catalogJson-lock\\\"); lock.lock(); Map<String, List<Catelog2Vo>> dataFromDb; try { dataFromDb = getDataFromDb(); } finally { lock.unlock(); } return dataFromDb; } \"]},\"705\":{\"h\":\"缓存数据一致性\",\"t\":[\"双写模式：\",\"失效模式：\",\"我们系统的一致性解决方案： 1、缓存的所有数据都有过期时间，数据过期下一次查询触发主动更新 2、读写数据的时候，加上分布式的读写锁。经常写，经常读\"]},\"706\":{\"h\":\"SpringCache\",\"t\":[\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-cache</artifactId> </dependency> \",\"配置：\",\"spring.cache.type=redis \",\"几个注解：\",\"Cacheable保存缓存\",\"CacheEvict删除\",\"CachePut更新\",\"Caching组合以上多个操作\",\"CacheConfig共享缓存\",\"开启缓存\",\"@EnableCaching @SpringBootApplication @MapperScan(\\\"com.cxk.gulimall.product.dao\\\") @EnableDiscoveryClient @EnableFeignClients(basePackages = \\\"com.cxk.gulimall.product.feign\\\") public class GulimallProductApplication { public static void main(String[] args) { SpringApplication.run(GulimallProductApplication.class, args); } } \",\"使用：\",\" //每一个需要缓存的数据我们都来指定要放到哪个名字的缓存中 @Cacheable({\\\"category\\\"})//代表当前方法的结果需要缓存，如果缓存中有，方法不用调用，如果缓存中没有，会调用方法，最后将方法的结果放入缓存 @Override public List<CategoryEntity> getLevel1Categories() { // long l = System.currentTimeMillis(); List<CategoryEntity> categoryEntities = this.baseMapper.selectList(new LambdaQueryWrapper<CategoryEntity>() .eq(CategoryEntity::getParentCid, 0)); // System.out.println(\\\"消耗时间：\\\"+(System.currentTimeMillis() - l)); return categoryEntities; } \",\"key默认自动生成，缓存名字：：SimpleKey\",\"默认的value值，默认使用jdk序列化机制，将序列化后存储redis\",\"默认时间-1\",\"自定义：\",\"指定生产的缓存使用key\",\"指定存活时间，配置文件中修改ttl spring.cache.redis.time-to-live=60000\",\"数据保存为json格式\",\"配置为json格式\",\"@Configuration @EnableConfigurationProperties(CacheProperties.class) public class MyCacheConfig { @Bean RedisCacheConfiguration redisCacheConfiguration(CacheProperties cacheProperties) { RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig(); config=config.serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(new StringRedisSerializer())); config=config.serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(new GenericJackson2JsonRedisSerializer())); //将配置文件中的所有配置都生效 CacheProperties.Redis redisProperties = cacheProperties.getRedis(); if (redisProperties.getTimeToLive() != null) { config=config.entryTtl(redisProperties.getTimeToLive()); } if (redisProperties.getKeyPrefix() != null) { config=config.prefixKeysWith(redisProperties.getKeyPrefix()); } if (!redisProperties.isCacheNullValues()) { config=config.disableCachingNullValues(); } if (!redisProperties.isUseKeyPrefix()) { config=config.disableKeyPrefix(); } return config; } } \",\"修改后删除缓存，CacheEvict：\",\"@CacheEvict(value = {\\\"category\\\"},key = \\\"'getLevel1Categories'\\\") @Override @Transactional public void updateCascade(CategoryEntity category) { this.updateById(category); if (!StringUtils.isEmpty(category.getName())) { categoryBrandRelationService.updateCategory(category.getCatId(), category.getName()); //TODO 同步更新其他关联表的数据 } } \",\"删除多个缓存：\",\"@Caching(evict = { @CacheEvict(value = {\\\"category\\\"},key = \\\"'getLevel1Categories'\\\"), @CacheEvict(value = {\\\"category\\\"},key = \\\"'getCatalogJson'\\\"), }) \",\"SpringCache的不足\",\"读模式： \",\"缓存穿透，查询null数据，解决：缓存空数据spring.cache.redis.cache-null-values=true\",\"缓存击穿，大量并发查一个数据，解决：加锁，默认是无加锁的\",\"缓存雪崩，大量的key同时过期，解决，加随机时间spring.cache.redis.time-to-live=60000\"]},\"707\":{\"c\":[\"项目实战\",\"谷粒商城\"]},\"708\":{\"c\":[\"项目实战\",\"谷粒商城\"]},\"709\":{\"h\":\"谷粒商城分布式高级篇2\"},\"710\":{\"h\":\"检索服务\",\"t\":[\"导入页面到search目录下面，编辑host文件加上最后一行\",\"nginx修改：\",\" server_name *.gulimall.com; \",\"配置网关：\",\" - id: gulimall_host_route # gulimall.com uri: lb://gulimall-product predicates: - Host=gulimall.com - id: gulimall_search_route # search.gulimall.com uri: lb://gulimall-search predicates: - Host=search.gulimall.com \",\"修改mapping映射\",\"//PUT gulimall_product { \\\"mappings\\\": { \\\"properties\\\": { \\\"skuId\\\": { \\\"type\\\": \\\"long\\\" }, \\\"spuId\\\": { \\\"type\\\": \\\"long\\\" }, \\\"skuTitle\\\": { \\\"type\\\": \\\"text\\\", \\\"analyzer\\\": \\\"ik_smart\\\" }, \\\"skuPrice\\\": { \\\"type\\\": \\\"keyword\\\" }, \\\"skuImg\\\": { \\\"type\\\": \\\"keyword\\\" }, \\\"saleCount\\\": { \\\"type\\\": \\\"long\\\" }, \\\"hosStock\\\": { \\\"type\\\": \\\"boolean\\\" }, \\\"hotScore\\\": { \\\"type\\\": \\\"long\\\" }, \\\"brandId\\\": { \\\"type\\\": \\\"long\\\" }, \\\"catelogId\\\": { \\\"type\\\": \\\"long\\\" }, \\\"brandName\\\": { \\\"type\\\": \\\"keyword\\\" }, \\\"brandImg\\\": { \\\"type\\\": \\\"keyword\\\" }, \\\"catalogName\\\": { \\\"type\\\": \\\"keyword\\\" }, \\\"attrs\\\": { \\\"type\\\": \\\"nested\\\", \\\"properties\\\": { \\\"attrId\\\": { \\\"type\\\": \\\"long\\\" }, \\\"attrName\\\": { \\\"type\\\": \\\"keyword\\\" }, \\\"attrValue\\\": { \\\"type\\\": \\\"keyword\\\" } } } } } } \",\"构建检索dsl语句：\",\"//GET gulimall_product/_search { \\\"query\\\": { \\\"bool\\\": { \\\"must\\\": [ { \\\"match\\\": { \\\"skuTitle\\\": \\\"华为\\\" } } ], \\\"filter\\\": [ { \\\"term\\\": { \\\"catalogId\\\": \\\"225\\\" } }, { \\\"terms\\\": { \\\"brandId\\\": [ \\\"1\\\", \\\"2\\\", \\\"9\\\" ] } }, { \\\"nested\\\": { \\\"path\\\": \\\"attrs\\\", \\\"query\\\": { \\\"bool\\\": { \\\"must\\\": [ { \\\"term\\\": { \\\"attrs.attrId\\\": { \\\"valu e\\\": \\\"9\\\" } } }, { \\\"terms\\\": { \\\"attrs.attrValue\\\": [ \\\"高通\\\", \\\"海思\\\" ] } } ] } } } }, { \\\"term\\\": { \\\"hasStock\\\": { \\\"value\\\": \\\"true\\\" } } }, { \\\"range\\\": { \\\"skuPrice\\\": { \\\"gte\\\": 0, \\\"lte\\\": 6500 } } } ] } }, \\\"sort\\\": [ { \\\"skuPrice\\\": { \\\"order\\\": \\\"desc\\\" } } ], \\\"from\\\": 0, \\\"size\\\": 5, \\\"highlight\\\": { \\\"fields\\\": { \\\"skuTitle\\\": {} }, \\\"pre_tags\\\": \\\"<b style='color:red'>\\\", \\\"post_tags\\\": \\\"</b>\\\" }, \\\"aggs\\\": { \\\"brand_agg\\\": { \\\"terms\\\": { \\\"field\\\": \\\"brandId\\\", \\\"size\\\": 10 }, \\\"aggs\\\": { \\\"brand_name_agg\\\": { \\\"terms\\\": { \\\"field\\\": \\\"brandName\\\", \\\"size\\\": 10 } }, \\\"brand_img_agg\\\": { \\\"terms\\\": { \\\"field\\\": \\\"brandImg\\\", \\\"size\\\": 10 } } } }, \\\"catalog_agg\\\": { \\\"terms\\\": { \\\"field\\\": \\\"catalogId\\\", \\\"size\\\": 10 }, \\\"aggs\\\": { \\\"catalog_name_agg\\\": { \\\"terms\\\": { \\\"field\\\": \\\"catalogName\\\", \\\"size\\\": 10 } } } }, \\\"attr_agg\\\": { \\\"nested\\\": { \\\"path\\\": \\\"attrs\\\" }, \\\"aggs\\\": { \\\"attr_id_agg\\\": { \\\"terms\\\": { \\\"field\\\": \\\"attrs.attrId\\\", \\\"size\\\": 100 }, \\\"aggs\\\": { \\\"attr_name_agg\\\": { \\\"terms\\\": { \\\"field\\\": \\\"attrs.attrName\\\", \\\"size\\\": 10 } }, \\\"attr_value_agg\\\": { \\\"terms\\\": { \\\"field\\\": \\\"attrs.attrValue\\\", \\\"size\\\": 10 } } } } } } } } \",\"查询条件： \",\"使用bool查询，包含must（必须匹配）和filter（过滤）子句。\",\"match子句匹配包含关键字\\\"华为\\\"的skuTitle字段。\",\"term子句过滤catalogId为\\\"225\\\"的商品。\",\"terms子句过滤brandId为\\\"1\\\"、\\\"2\\\"或\\\"9\\\"的商品。\",\"nested子句对attrs字段进行嵌套查询，要求attrs.attrId为\\\"9\\\"，并且attrs.attrValue为\\\"高通\\\"或\\\"海思\\\"。\",\"term子句过滤hasStock字段为\\\"true\\\"的商品。\",\"range子句过滤skuPrice在0到6500之间的商品。\",\"排序： \",\"结果按照skuPrice字段降序排列。\",\"分页： \",\"从搜索结果的第0条记录开始，获取5条记录。\",\"高亮显示： \",\"对匹配的skuTitle字段进行高亮显示，用红色标签。\",\"聚合（Aggregations）： \",\"brand_agg聚合按照brandId字段进行分组，同时计算每个分组内的品牌名称和品牌图片。\",\"catalog_agg聚合按照catalogId字段进行分组，同时计算每个分组内的目录名称。\",\"attr_agg聚合对attrs字段进行嵌套分组，计算每个属性（attrId）下的属性名称（attrName）和属性值（attrValue）。\",\"转化为Java 代码：\",\"@Service @Slf4j public class MallSearchServiceImpl implements MallSearchService { @Autowired private RestHighLevelClient restHighLevelClient; @Autowired private ProductFeignService productFeignService; @Override public SearchResult search(SearchParam param) { SearchRequest searchRequest = buildSearchRequest(param); SearchResult searchResult = null; try { SearchResponse response = restHighLevelClient.search(searchRequest, GulimallElasticSearchConfig.COMMON_OPTIONS); searchResult = buildSearchResult(response, param); } catch (IOException e) { throw new RuntimeException(e); } return searchResult; } private SearchResult buildSearchResult(SearchResponse response, SearchParam param) { SearchResult searchResult = new SearchResult(); //1.返回的所有查询到的商品 SearchHits hits = response.getHits(); List<SkuEsModel> esModels = new ArrayList<>(); if (hits.getHits() != null && hits.getHits().length > 0) { for (SearchHit hit : hits.getHits()) { String sourceAsString = hit.getSourceAsString(); SkuEsModel esModel = JSON.parseObject(sourceAsString, SkuEsModel.class); //判断是否按照关键字搜索，如果是，高亮显示 if (!StringUtils.isEmpty(param.getKeyword())) { String skuTitle = hit.getHighlightFields().get(\\\"skuTitle\\\").getFragments()[0].string(); esModel.setSkuTitle(skuTitle); } esModels.add(esModel); } } searchResult.setProducts(esModels); //2.当前所有商品涉及到的所有属性信息 List<SearchResult.AttrVo> attrVos = new ArrayList<>(); ParsedNested attrAgg = response.getAggregations().get(\\\"attr_agg\\\"); ParsedLongTerms attrIdAgg = attrAgg.getAggregations().get(\\\"attrId_agg\\\"); for (Terms.Bucket bucket : attrIdAgg.getBuckets()) { SearchResult.AttrVo attrVo = new SearchResult.AttrVo(); //属性id long attrId = bucket.getKeyAsNumber().longValue(); attrVo.setAttrId(attrId); //属性名 ParsedStringTerms attrNameAgg = bucket.getAggregations().get(\\\"attrName_agg\\\"); String attrName = attrNameAgg.getBuckets().get(0).getKeyAsString(); attrVo.setAttrName(attrName); //属性值 ParsedStringTerms attrValueAgg = bucket.getAggregations().get(\\\"attrValue_agg\\\"); List<String> attrValues = attrValueAgg.getBuckets().stream() .map(item -> item.getKeyAsString()).collect(Collectors.toList()); attrVo.setAttrValue(attrValues); attrVos.add(attrVo); } searchResult.setAttrs(attrVos); //3.当前所有商品涉及到的所有品牌信息 List<SearchResult.BrandVo> brandVos = new ArrayList<>(); //获取到品牌的聚合 ParsedLongTerms brandAgg = response.getAggregations().get(\\\"brand_agg\\\"); for (Terms.Bucket bucket : brandAgg.getBuckets()) { SearchResult.BrandVo brandVo = new SearchResult.BrandVo(); //1、得到品牌的id long brandId = bucket.getKeyAsNumber().longValue(); brandVo.setBrandId(brandId); //2、得到品牌的名字 ParsedStringTerms brandNameAgg = bucket.getAggregations().get(\\\"brandName_agg\\\"); String brandName = brandNameAgg.getBuckets().get(0).getKeyAsString(); brandVo.setBrandName(brandName); //3、得到品牌的图片 ParsedStringTerms brandImgAgg = bucket.getAggregations().get(\\\"brandImg_agg\\\"); String brandImg = brandImgAgg.getBuckets().get(0).getKeyAsString(); brandVo.setBrandImg(brandImg); brandVos.add(brandVo); } searchResult.setBrands(brandVos); //4.当前所有商品涉及到的所有分类信息 List<SearchResult.CatalogVo> catalogVos = new ArrayList<>(); ParsedLongTerms catalogAgg = response.getAggregations().get(\\\"catalog_agg\\\"); for (Terms.Bucket bucket : catalogAgg.getBuckets()) { SearchResult.CatalogVo catalogVo = new SearchResult.CatalogVo(); //1、得到分类的id long catalogId = bucket.getKeyAsNumber().longValue(); catalogVo.setCatalogId(catalogId); //2、得到分类的名字 ParsedStringTerms catalogNameAgg = bucket.getAggregations().get(\\\"catalogName_agg\\\"); String catalogName = catalogNameAgg.getBuckets().get(0).getKeyAsString(); catalogVo.setCatalogName(catalogName); catalogVos.add(catalogVo); } searchResult.setCatalogs(catalogVos); //5.分页信息 searchResult.setPageNum(param.getPageNum()); //5.1 当前页码 long value = hits.getTotalHits().value; searchResult.setTotal(value); //5.2 总记录数 int totalPage = (int) (value % EsConstant.PRODUCT_PAGESIZE == 0 ? (int) value / EsConstant.PRODUCT_PAGESIZE : (int) value / EsConstant.PRODUCT_PAGESIZE + 1); searchResult.setTotalPages(totalPage); //5.3 总页码 List<Integer> pageNavs = new ArrayList<>(); for (int i = 1; i <= totalPage; i++) { pageNavs.add(i); } searchResult.setPageNavs(pageNavs); //6、构建面包屑导航 if (param.getAttrs() != null && param.getAttrs().size() > 0) { List<SearchResult.NavVo> collect = param.getAttrs().stream().map(attr -> { //1、分析每一个attrs传过来的参数值 SearchResult.NavVo navVo = new SearchResult.NavVo(); String[] s = attr.split(\\\"_\\\"); navVo.setNavValue(s[1]); R r = productFeignService.attrInfo(Long.parseLong(s[0])); if (r.getCode() == 0) { AttrResponseVo data = r.getData(\\\"attr\\\", new TypeReference<AttrResponseVo>() { }); navVo.setNavName(data.getAttrName()); } else { navVo.setNavName(s[0]); } //2、取消了这个面包屑以后，我们要跳转到哪个地方，将请求的地址url里面的当前置空 //拿到所有的查询条件，去掉当前 String encode = null; try { encode = URLEncoder.encode(attr, \\\"UTF-8\\\"); encode.replace(\\\"+\\\", \\\"%20\\\"); //浏览器对空格的编码和Java不一样，差异化处理 } catch (UnsupportedEncodingException e) { e.printStackTrace(); } String replace = param.get_queryString().replace(\\\"&attrs=\\\" + attr, \\\"\\\"); navVo.setLink(\\\"http://search.gulimall.com/list.html?\\\" + replace); return navVo; }).collect(Collectors.toList()); searchResult.setNavs(collect); } return searchResult; } private SearchRequest buildSearchRequest(SearchParam param) { SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder(); /** * 模糊匹配，过滤（按照属性，分类，品牌，价格区间，库存） */ //1、构建检索请求 BoolQueryBuilder boolQueryBuilder = new BoolQueryBuilder(); //1.1、must-模糊匹配 if (!StringUtils.isEmpty(param.getKeyword())) { boolQueryBuilder.must(QueryBuilders.matchQuery(\\\"skuTitle\\\", param.getKeyword())); } //1.2 bool - filter - term if (param.getCatalog3Id() != null) { boolQueryBuilder.filter(QueryBuilders.termQuery(\\\"catalogId\\\", param.getCatalog3Id())); } //1.2.2 brandId if (param.getBrandId() != null) { boolQueryBuilder.filter(QueryBuilders.termQuery(\\\"brandId\\\", param.getBrandId())); } //1.2.3 attrs if (param.getAttrs() != null && !param.getAttrs().isEmpty()) { param.getAttrs().forEach(item -> { //attrs=1_5寸:8寸 & attrs=2_16G:8G BoolQueryBuilder boolQuery = QueryBuilders.boolQuery(); String[] split = item.split(\\\"_\\\"); String attrId = split[0]; String[] attrValues = split[1].split(\\\":\\\"); boolQuery.must(QueryBuilders.termQuery(\\\"attrs.attrId\\\", attrId)); boolQuery.must(QueryBuilders.termsQuery(\\\"attrs.attrValue\\\", attrValues)); NestedQueryBuilder nestedQuery = QueryBuilders.nestedQuery(\\\"attrs\\\", boolQuery, ScoreMode.None); boolQuery.filter(nestedQuery); }); } //1.2.4 hasStock if (param.getHasStock() != null) { boolQueryBuilder.filter(QueryBuilders.termQuery(\\\"hsStock\\\", param.getHasStock() == 1)); } //1.2.5 skuPrice if (!StringUtils.isEmpty(param.getSkuPrice())) { //skuPrice=1_500 skuPrice=500_ skuPrice=_500 RangeQueryBuilder rangeQuery = QueryBuilders.rangeQuery(\\\"skuPrice\\\"); String[] split = param.getSkuPrice().split(\\\"_\\\"); if (split.length == 2) { rangeQuery.gte(split[0]).lte(split[1]); } else if (split.length == 1) { if (param.getSkuPrice().startsWith(\\\"_\\\")) { rangeQuery.lte(split[0]); } else { rangeQuery.gte(split[0]); } } boolQueryBuilder.filter(rangeQuery); } //封装所有的查询条件 searchSourceBuilder.query(boolQueryBuilder); /** * 排序，分页，高亮 */ //排序 //形式为sort=hotScore_asc/desc if (!StringUtils.isEmpty(param.getSort())) { String[] sort = param.getSort().split(\\\"_\\\"); searchSourceBuilder.sort(sort[0], \\\"asc\\\".equals(sort[1]) ? SortOrder.ASC : SortOrder.DESC); } //分页 searchSourceBuilder.from((param.getPageNum() - 1) * EsConstant.PRODUCT_PAGESIZE); searchSourceBuilder.size(EsConstant.PRODUCT_PAGESIZE); //高亮 if (!StringUtils.isEmpty(param.getKeyword())) { HighlightBuilder highlightBuilder = new HighlightBuilder(); highlightBuilder.field(\\\"skuTitle\\\"); highlightBuilder.preTags(\\\"<b style='color:red'>\\\"); highlightBuilder.postTags(\\\"</b>\\\"); searchSourceBuilder.highlighter(highlightBuilder); } /** * 聚合分析 */ //品牌聚合 TermsAggregationBuilder brandAgg = AggregationBuilders.terms(\\\"brand_agg\\\"); brandAgg.field(\\\"brandId\\\").size(50); brandAgg.subAggregation(AggregationBuilders.terms(\\\"brandName_agg\\\").field(\\\"brandName\\\").size(1)); brandAgg.subAggregation(AggregationBuilders.terms(\\\"brandImg_agg\\\").field(\\\"brandImg\\\").size(1)); searchSourceBuilder.aggregation(brandAgg); //分类聚合 TermsAggregationBuilder catalogAgg = AggregationBuilders.terms(\\\"catalog_agg\\\"); catalogAgg.field(\\\"catalogId\\\").size(50); catalogAgg.subAggregation(AggregationBuilders.terms(\\\"catalogName_agg\\\").field(\\\"catalogName\\\").size(1)); searchSourceBuilder.aggregation(catalogAgg); //属性聚合 NestedAggregationBuilder nested = AggregationBuilders.nested(\\\"attr_agg\\\", \\\"attrs\\\"); //按照属性id聚合 TermsAggregationBuilder attrIdAgg = AggregationBuilders.terms(\\\"attrId_agg\\\").field(\\\"attrs.attrId\\\"); nested.subAggregation(attrIdAgg); //在每个attrId下按照attrValue聚合 attrIdAgg.subAggregation(AggregationBuilders.terms(\\\"attrValue_agg\\\").field(\\\"attrs.attrValue\\\").size(50)); //在每个attrId下再聚合attrName attrIdAgg.subAggregation(AggregationBuilders.terms(\\\"attrName_agg\\\").field(\\\"attrs.attrName\\\").size(1)); searchSourceBuilder.aggregation(nested); log.info(\\\"构建的DSL语句：{}\\\", searchSourceBuilder.toString()); SearchRequest searchRequest = new SearchRequest(new String[]{EsConstant.PRODUCT_INDEX}, searchSourceBuilder); return searchRequest; } } \",\"控制器：\",\"@GetMapping(\\\"/list.html\\\") private String listPage(SearchParam param, Model model, HttpServletRequest request) { param.set_queryString(request.getQueryString()); SearchResult result = mallSearchService.search(param); model.addAttribute(\\\"result\\\", result); return \\\"list\\\"; } \"]},\"711\":{\"h\":\"异步\"},\"712\":{\"h\":\"创建线程\",\"t\":[\"第一种方式：\",\"public class ThreadDemo { public static void main(String[] args) { System.out.println(\\\"main .... start ....\\\"); MyThread myThread = new MyThread(); myThread.start(); System.out.println(\\\"main .... end ....\\\"); } public static class MyThread extends Thread { @Override public void run() { System.out.println(\\\"当前线程:\\\" + Thread.currentThread().getId()); int i = 10 / 2; System.out.println(\\\"i = \\\" + i); } } } \",\"第二种方式：\",\"public static void main(String[] args) { System.out.println(\\\"main .... start ....\\\"); Runnable01 runnable01 = new Runnable01(); Thread thread = new Thread(runnable01); thread.start(); System.out.println(\\\"main .... end ....\\\"); } public static class Runnable01 implements Runnable { @Override public void run() { System.out.println(\\\"当前线程:\\\" + Thread.currentThread().getId()); int i = 10 / 2; System.out.println(\\\"i = \\\" + i); } } \",\"第三种方式：\",\"public static void main(String[] args) throws ExecutionException, InterruptedException { System.out.println(\\\"main .... start ....\\\"); FutureTask<Integer> task = new FutureTask<>(new Callable01()); new Thread(task, \\\"A\\\").start(); Integer i = task.get(); //get会阻塞，直到线程执行完毕 System.out.println(\\\"i = \\\" + i); System.out.println(\\\"main .... end ....\\\"); } public static class Callable01 implements Callable<Integer> { @Override public Integer call() throws Exception { System.out.println(\\\"当前线程:\\\" + Thread.currentThread().getId()); int i = 10 / 2; System.out.println(\\\"i = \\\" + i); return i; } } \",\"第四种方式：\",\"public static ExecutorService service = Executors.newFixedThreadPool(10); public static void main(String[] args) throws ExecutionException, InterruptedException { System.out.println(\\\"main .... start ....\\\"); service.execute(new Runnable01()); System.out.println(\\\"main .... end ....\\\"); } \"]},\"713\":{\"h\":\"线程池\",\"t\":[\"线程池构造器：\",\"public ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue<Runnable> workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler) \",\"corePoolSize（核心线程数）: \",\"描述：线程池中始终保持存活的线程数，即使它们处于空闲状态。\",\"maximumPoolSize（最大线程数）: \",\"描述：线程池中允许存在的最大线程数。\",\"keepAliveTime（线程空闲时间）: \",\"描述：当线程池中的线程数超过核心线程数时，多余的空闲线程在被终止之前等待新任务的最长时间。\",\"unit（时间单位）: \",\"描述：用于指定 keepAliveTime 的时间单位，可以是秒、毫秒等。\",\"workQueue（工作队列）: \",\"描述：用于保存等待执行的任务的阻塞队列。类型：BlockingQueue<Runnable>。\",\"threadFactory（线程工厂）: \",\"描述：用于创建新线程的工厂。类型：ThreadFactory 接口的实现。\",\"handler（拒绝策略）: \",\"描述：当工作队列已满，并且无法再接受新任务时，用于处理新任务的策略。类型：RejectedExecutionHandler 接口的实现。\",\"面试题：一个线程池 core 7； max 20 ，queue：50，100 并发进来怎么分配的；\",\"答案：先有 7 个能直接得到执行，接下来 50 个进入队列排队，在多开 13 个继续执行。现在70 个被安排上了。剩下 30 个默认拒绝策略。\",\"常见线程池：\",\"FixedThreadPool (固定大小线程池):\",\"FixedThreadPool 是一个具有固定线程数量的线程池。\",\"在执行任务时，如果线程池中的线程都在执行任务，新任务会被放入队列中等待。\",\"适用于并发任务数量可控的场景。\",\"CachedThreadPool (缓存线程池):\",\"CachedThreadPool 是一个可根据需要创建新线程的线程池，线程池的大小可动态调整。\",\"在执行任务时，如果线程池中的线程都在执行任务，会创建新的线程来处理新任务。\",\"适用于短生命周期的异步任务。\",\"SingleThreadExecutor (单线程线程池):\",\"SingleThreadExecutor 是一个仅包含一个线程的线程池。\",\"所有提交的任务都按顺序执行，保证不会有并发执行的情况。\",\"适用于需要保证任务按照顺序执行的场景。\",\"ScheduledThreadPool (定时任务线程池):\",\"ScheduledThreadPool 是一个支持定时以及周期性执行任务的线程池。\",\"可以用于执行定时任务，例如定时执行任务、周期性执行任务等。\",\"适用于需要按照一定规律执行任务的场景。\",\"这些线程池实现都是通过 Executors 工厂类创建的，提供了方便的线程池创建和管理方式。\"]},\"714\":{\"h\":\"CompletableFuture\"},\"715\":{\"h\":\"创建异步对象\",\"t\":[\"public static CompletableFuture<Void> runAsync(Runnable runnable) public static CompletableFuture<Void> runAsync(Runnable runnable,Executor executor) public static <U> CompletableFuture<U> supplyAsync(Supplier<U> supplier) public static <U> CompletableFuture<U> supplyAsync(Supplier<U> supplier,Executor executor) \",\"runAsync没有返回值，supply有返回值\",\"runAsync\",\"public static ExecutorService service = Executors.newFixedThreadPool(10); public static void main(String[] args) throws ExecutionException, InterruptedException { System.out.println(\\\"start ...\\\"); CompletableFuture<Void> future =CompletableFuture.runAsync(()->{ System.out.println(\\\"当前线程:\\\" + Thread.currentThread().getId()); int i = 10 / 2; System.out.println(\\\"i = \\\" + i); },service); System.out.println(\\\"end ...\\\"); } \",\"supplyAsync\",\"public static void main(String[] args) throws ExecutionException, InterruptedException { System.out.println(\\\"start ...\\\"); CompletableFuture<Integer> integerCompletableFuture = CompletableFuture.supplyAsync(() -> { System.out.println(\\\"当前线程:\\\" + Thread.currentThread().getId()); int i = 10 / 2; System.out.println(\\\"i = \\\" + i); return i; }, service); Integer i = integerCompletableFuture.get(); System.out.println(\\\"i = \\\" + i); System.out.println(\\\"end2 ...\\\"); } \"]},\"716\":{\"h\":\"完成时回调\",\"t\":[\"whenComplete回调\",\"public static ExecutorService service = Executors.newFixedThreadPool(10); public static void main(String[] args) throws ExecutionException, InterruptedException { System.out.println(\\\"start ...\\\"); CompletableFuture<Integer> future = CompletableFuture.supplyAsync(() -> { System.out.println(\\\"current thread: \\\" + Thread.currentThread().getName()); return 10 / 2; }, service).whenComplete((result, e) -> { System.out.println(\\\"current thread: \\\" + Thread.currentThread().getName()); if (e == null) { System.out.println(\\\"result: \\\" + result); } else { System.out.println(\\\"exception: \\\" + e); } }).exceptionally(e -> { System.out.println(\\\"exception: \\\" + e); return 0; }); Integer i = future.get(); System.out.println(\\\"result2: \\\" + i); System.out.println(\\\"end ...\\\"); } \",\"后续处理handle：\",\"public static ExecutorService service = Executors.newFixedThreadPool(10); public static void main(String[] args) throws ExecutionException, InterruptedException { System.out.println(\\\"start ...\\\"); CompletableFuture<Integer> future = CompletableFuture.supplyAsync(() -> { System.out.println(\\\"current thread: \\\" + Thread.currentThread().getName()); return 10 / 2; }, service).handle((res, thr) -> { System.out.println(\\\"current thread: \\\" + Thread.currentThread().getName()); return res * 2; }); Integer i = future.get(); System.out.println(\\\"result2: \\\" + i); System.out.println(\\\"end ...\\\"); } \",\"总结：\",\"public CompletableFuture<T> whenComplete( BiConsumer<? super T, ? super Throwable> action) { return uniWhenCompleteStage(null, action); } public CompletableFuture<T> whenCompleteAsync( BiConsumer<? super T, ? super Throwable> action) { return uniWhenCompleteStage(defaultExecutor(), action); } public CompletableFuture<T> whenCompleteAsync( BiConsumer<? super T, ? super Throwable> action, Executor executor) { return uniWhenCompleteStage(screenExecutor(executor), action); } public CompletableFuture<T> exceptionally( Function<Throwable, ? extends T> fn) { return uniExceptionallyStage(null, fn); } \",\"whenComplete 处理正常和异常的结果，exceptionally 处理异常情况。\",\"whenComplete：是执行当前任务的线程执行继续执行 whenComplete 的任务。\",\"whenCompleteAsync：是执行把 whenCompleteAsync 这个任务继续提交给线程池来进行执行\",\"handle:和 complete 一样，可对结果做最后的处理（可处理异常），可改变返回值。\"]},\"717\":{\"h\":\"线程串行化方法\",\"t\":[\" public <U> CompletableFuture<U> thenApply( Function<? super T,? extends U> fn) { return uniApplyStage(null, fn); } public <U> CompletableFuture<U> thenApplyAsync( Function<? super T,? extends U> fn) { return uniApplyStage(defaultExecutor(), fn); } public <U> CompletableFuture<U> thenApplyAsync( Function<? super T,? extends U> fn, Executor executor) { return uniApplyStage(screenExecutor(executor), fn); } \",\"thenApply: 这个方法表示当当前的CompletableFuture完成时，将执行提供的函数，并返回一个新的CompletableFuture，其结果是应用该函数的结果。\",\"thenApplyAsync: 这是异步版本的thenApply，它使用默认的Executor执行器执行提供的函数。\",\"thenApplyAsync（带有Executor参数）: 这是具有自定义Executor执行器的异步版本，允许你指定一个特定的执行器来执行提供的函数。\",\"public CompletableFuture<Void> thenAccept(Consumer<? super T> action) { return uniAcceptStage(null, action); } public CompletableFuture<Void> thenAcceptAsync(Consumer<? super T> action) { return uniAcceptStage(defaultExecutor(), action); } public CompletableFuture<Void> thenAcceptAsync(Consumer<? super T> action, Executor executor) { return uniAcceptStage(screenExecutor(executor), action); } \",\"thenAccept: 当当前的CompletableFuture完成时，将执行提供的Consumer函数，但不返回新的结果。相反，返回一个CompletableFuture<Void>，表示这个阶段的操作不产生结果。\",\"thenAcceptAsync: 这是异步版本的thenAccept，使用默认的Executor执行器执行提供的Consumer函数。\",\"thenAcceptAsync（带有Executor参数）: 这是具有自定义Executor执行器的异步版本，允许你指定一个特定的执行器来执行提供的Consumer函数。\",\"public CompletableFuture<Void> thenRun(Runnable action) { return uniRunStage(null, action); } public CompletableFuture<Void> thenRunAsync(Runnable action) { return uniRunStage(defaultExecutor(), action); } public CompletableFuture<Void> thenRunAsync(Runnable action, Executor executor) { return uniRunStage(screenExecutor(executor), action); } \",\"thenRun: 当前CompletableFuture完成后，将执行提供的Runnable操作，但不返回新的结果。相反，返回一个CompletableFuture<Void>，表示这个阶段的操作不产生结果。\",\"thenRunAsync: 这是thenRun的异步版本，使用默认的Executor执行器执行提供的Runnable操作。\",\"thenRunAsync（带有Executor参数）: 这是具有自定义Executor执行器的异步版本，允许你指定一个特定的执行器来执行提供的Runnable操作。\"]},\"718\":{\"h\":\"两任务组合\",\"t\":[\"public <U,V> CompletableFuture<V> thenCombine( CompletionStage<? extends U> other, BiFunction<? super T,? super U,? extends V> fn) { return biApplyStage(null, other, fn); } public <U,V> CompletableFuture<V> thenCombineAsync( CompletionStage<? extends U> other, BiFunction<? super T,? super U,? extends V> fn) { return biApplyStage(defaultExecutor(), other, fn); } public <U,V> CompletableFuture<V> thenCombineAsync( CompletionStage<? extends U> other, BiFunction<? super T,? super U,? extends V> fn, Executor executor) { return biApplyStage(screenExecutor(executor), other, fn); } public <U> CompletableFuture<Void> thenAcceptBoth( CompletionStage<? extends U> other, BiConsumer<? super T, ? super U> action) { return biAcceptStage(null, other, action); } public <U> CompletableFuture<Void> thenAcceptBothAsync( CompletionStage<? extends U> other, BiConsumer<? super T, ? super U> action) { return biAcceptStage(defaultExecutor(), other, action); } public <U> CompletableFuture<Void> thenAcceptBothAsync( CompletionStage<? extends U> other, BiConsumer<? super T, ? super U> action, Executor executor) { return biAcceptStage(screenExecutor(executor), other, action); } public CompletableFuture<Void> runAfterBoth(CompletionStage<?> other, Runnable action) { return biRunStage(null, other, action); } public CompletableFuture<Void> runAfterBothAsync(CompletionStage<?> other, Runnable action) { return biRunStage(defaultExecutor(), other, action); } public CompletableFuture<Void> runAfterBothAsync(CompletionStage<?> other, Runnable action, Executor executor) { return biRunStage(screenExecutor(executor), other, action); } \",\"thenCombine：组合两个 future，获取两个 future 的返回结果，并返回当前任务的返回值\",\"thenAcceptBoth：组合两个 future，获取两个 future 任务的返回结果，然后处理任务，没有返回值。\",\"runAfterBoth：组合两个 future，不需要获取 future 的结果，只需两个future 处理完任务后，处理该任务。\"]},\"719\":{\"h\":\"两任务组合完成一个\",\"t\":[\"把上面的both换成either，当两个任务中，任意一个 future 任务完成的时候，执行任务。\"]},\"720\":{\"h\":\"多任务组合\",\"t\":[\"public static CompletableFuture<Void> allOf(CompletableFuture<?>... cfs) public static CompletableFuture<Object> anyOf(CompletableFuture<?>... cfs) \",\"allOf：等待所有任务完成\",\"anyOf：只要有一个任务完成\"]},\"721\":{\"h\":\"商品详情\",\"t\":[\"配置网关\",\"- id: gulimall_host_route # gulimall.com uri: lb://gulimall-product predicates: - Host=gulimall.com,item.gulimall.com \",\"配置线程池：\",\"@ConfigurationProperties(prefix = \\\"gulimall.thread\\\") // @Component @Data public class ThreadPoolConfigProperties { private Integer coreSize; private Integer maxSize; private Integer keepAliveTime; } \",\"在配置文件中输入这些值：\",\"#config thread pool gulimall.thread.coreSize=20 gulimall.thread.maxSize=200 gulimall.thread.keepAliveTime=10 \",\"配置线程池容器：\",\"@EnableConfigurationProperties(ThreadPoolConfigProperties.class) @Configuration public class MyThreadConfig { @Bean public ThreadPoolExecutor threadPoolExecutor(ThreadPoolConfigProperties pool) { return new ThreadPoolExecutor( pool.getCoreSize(), pool.getMaxSize(), pool.getKeepAliveTime(), TimeUnit.SECONDS, new LinkedBlockingDeque<>(100000), Executors.defaultThreadFactory(), new ThreadPoolExecutor.AbortPolicy() ); } } \",\"使用：\",\"@Override public SkuItemVo item(Long skuId) throws ExecutionException, InterruptedException { SkuItemVo skuItemVo = new SkuItemVo(); CompletableFuture<SkuInfoEntity> infoFuture = CompletableFuture.supplyAsync(() -> { //1、sku基本信息的获取 pms_sku_info SkuInfoEntity info = this.getById(skuId); skuItemVo.setInfo(info); return info; }, executor); CompletableFuture<Void> saleAttrFuture = infoFuture.thenAcceptAsync((res) -> { //3、获取spu的销售属性组合 List<SkuItemSaleAttrVo> saleAttrVos = skuSaleAttrValueService.getSaleAttrBySpuId(res.getSpuId()); skuItemVo.setSaleAttr(saleAttrVos); }, executor); CompletableFuture<Void> descFuture = infoFuture.thenAcceptAsync((res) -> { //4、获取spu的介绍 pms_spu_info_desc SpuInfoDescEntity spuInfoDescEntity = spuInfoDescService.getById(res.getSpuId()); skuItemVo.setDesc(spuInfoDescEntity); }, executor); CompletableFuture<Void> baseAttrFuture = infoFuture.thenAcceptAsync((res) -> { //5、获取spu的规格参数信息 List<SpuItemAttrGroupVo> attrGroupVos = attrGroupService.getAttrGroupWithAttrsBySpuId(res.getSpuId(), res.getCatalogId()); skuItemVo.setGroupAttrs(attrGroupVos); }, executor); // Long spuId = info.getSpuId(); // Long catalogId = info.getCatalogId(); //2、sku的图片信息 pms_sku_images CompletableFuture<Void> imageFuture = CompletableFuture.runAsync(() -> { List<SkuImagesEntity> imagesEntities = skuImagesService.getImagesBySkuId(skuId); skuItemVo.setImages(imagesEntities); }, executor); //等到所有任务都完成 CompletableFuture.allOf(saleAttrFuture,descFuture,baseAttrFuture,imageFuture).get(); return skuItemVo; } \"]},\"722\":{\"c\":[\"项目实战\",\"谷粒商城\"]},\"723\":{\"c\":[\"项目实战\",\"谷粒商城\"]},\"724\":{\"h\":\"黑马头条1\"},\"725\":{\"h\":\"登录逻辑\",\"t\":[\" @Override public ResponseResult login(LoginDto loginDto) { //nomal login need phone and password if (!StringUtils.isAnyBlank(loginDto.getPhone(), loginDto.getPassword())) { ApUser apUser = this.lambdaQuery() .eq(ApUser::getPhone, loginDto.getPhone()) .one(); if (apUser == null) { return ResponseResult.errorResult(AppHttpCodeEnum.DATA_NOT_EXIST, \\\"用户不存在\\\"); } String salt = apUser.getSalt(); String password = loginDto.getPassword(); String encryptPassword = DigestUtils.md5DigestAsHex((password + salt).getBytes()); if (!encryptPassword.equals(apUser.getPassword())) { return ResponseResult.errorResult(AppHttpCodeEnum.LOGIN_PASSWORD_ERROR); } //正确，返回jwt信息 HashMap<String, Object> map = new HashMap<>(); String token = AppJwtUtil.getToken(apUser.getId().longValue()); map.put(\\\"token\\\", token); apUser.setPassword(\\\"\\\"); apUser.setSalt(\\\"\\\"); map.put(\\\"user\\\", apUser); return ResponseResult.okResult(map); } HashMap<String, Object> map = new HashMap<>(); String token = AppJwtUtil.getToken(0L); map.put(\\\"token\\\", token); return ResponseResult.okResult(map); } \"]},\"726\":{\"h\":\"整合Swagger\",\"t\":[\"在heima-leadnews-model和heima-leadnews-common模块中引入该依赖\",\"<dependency> <groupId>io.springfox</groupId> <artifactId>springfox-swagger2</artifactId> </dependency> <dependency> <groupId>io.springfox</groupId> <artifactId>springfox-swagger-ui</artifactId> </dependency> \",\"配置\",\"@Configuration @EnableSwagger2 public class SwaggerConfiguration { @Bean public Docket buildDocket() { return new Docket(DocumentationType.SWAGGER_2) .apiInfo(buildApiInfo()) .select() // 要扫描的API(Controller)基础包 .apis(RequestHandlerSelectors.basePackage(\\\"com.heima\\\")) .paths(PathSelectors.any()) .build(); } private ApiInfo buildApiInfo() { Contact contact = new Contact(\\\"黑马程序员\\\",\\\"\\\",\\\"\\\"); return new ApiInfoBuilder() .title(\\\"黑马头条-平台管理API文档\\\") .description(\\\"黑马头条后台api\\\") .contact(contact) .version(\\\"1.0.0\\\").build(); } } \",\"在heima-leadnews-common模块中的resources目录中新增以下目录和文件resources/META-INF/Spring.factories\",\"org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\\ com.heima.common.swagger.SwaggerConfiguration \",\"访问地址：http://localhost:51801/swagger-ui.html\"]},\"727\":{\"h\":\"整合knife4j\",\"t\":[\"<dependency> <groupId>com.github.xiaoymin</groupId> <artifactId>knife4j-spring-boot-starter</artifactId> </dependency> \",\"配置文件\",\"package com.heima.common.knife4j; import com.github.xiaoymin.knife4j.spring.annotations.EnableKnife4j; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.context.annotation.Import; import springfox.bean.validators.configuration.BeanValidatorPluginsConfiguration; import springfox.documentation.builders.ApiInfoBuilder; import springfox.documentation.builders.PathSelectors; import springfox.documentation.builders.RequestHandlerSelectors; import springfox.documentation.service.ApiInfo; import springfox.documentation.spi.DocumentationType; import springfox.documentation.spring.web.plugins.Docket; import springfox.documentation.swagger2.annotations.EnableSwagger2; @Configuration @EnableSwagger2 @EnableKnife4j @Import(BeanValidatorPluginsConfiguration.class) public class Swagger2Configuration { @Bean(value = \\\"defaultApi2\\\") public Docket defaultApi2() { Docket docket=new Docket(DocumentationType.SWAGGER_2) .apiInfo(apiInfo()) //分组名称 .groupName(\\\"1.0\\\") .select() //这里指定Controller扫描包路径 .apis(RequestHandlerSelectors.basePackage(\\\"com.heima\\\")) .paths(PathSelectors.any()) .build(); return docket; } private ApiInfo apiInfo() { return new ApiInfoBuilder() .title(\\\"黑马头条API文档\\\") .description(\\\"黑马头条API文档\\\") .version(\\\"1.0\\\") .build(); } } \",\"和swagger一样增加factory\",\" com.heima.common.swagger.SwaggerConfiguration \",\"接口地址：http://localhost:51801/doc.html#/home\"]},\"728\":{\"h\":\"网关\",\"t\":[\"在heima-leadnews-gateway导入以下依赖\",\"<dependencies> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-gateway</artifactId> </dependency> <dependency> <groupId>com.alibaba.cloud</groupId> <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId> </dependency> <dependency> <groupId>com.alibaba.cloud</groupId> <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId> </dependency> <dependency> <groupId>io.jsonwebtoken</groupId> <artifactId>jjwt</artifactId> </dependency> </dependencies> \",\"bootstrap.yml\",\"server: port: 51601 spring: application: name: leadnews-app-gateway cloud: nacos: discovery: server-addr: 192.168.200.130:8848 config: server-addr: 192.168.200.130:8848 file-extension: yml \",\"nacos中添加配置\",\"id:leadnews-app-gateway\",\"spring: cloud: gateway: globalcors: add-to-simple-url-handler-mapping: true corsConfigurations: '[/**]': allowedHeaders: \\\"*\\\" allowedOrigins: \\\"*\\\" allowedMethods: - GET - POST - DELETE - PUT - OPTION routes: # 平台管理 - id: user uri: lb://leadnews-user predicates: - Path=/user/** filters: - StripPrefix= 1 \",\"全局Jwt过滤器：\",\"@Component @Slf4j public class AuthorizeFilter implements Ordered, GlobalFilter { @Override public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) { //1. get request and response ServerHttpRequest request = exchange.getRequest(); ServerHttpResponse response = exchange.getResponse(); //check if user is login if (request.getURI().getPath().contains(\\\"/login\\\")) { //pass return chain.filter(exchange); } //get token String token = request.getHeaders().getFirst(\\\"token\\\"); //check token if (StringUtils.isBlank(token)) { response.setStatusCode(HttpStatus.UNAUTHORIZED); return response.setComplete(); } // check token is expired try { Claims claimsBody = AppJwtUtil.getClaimsBody(token); int result = AppJwtUtil.verifyToken(claimsBody); if (result == 1 || result == 2) { response.setStatusCode(HttpStatus.UNAUTHORIZED); return response.setComplete(); } } catch (Exception e) { response.setStatusCode(HttpStatus.UNAUTHORIZED); return response.setComplete(); } //pass return chain.filter(exchange); } /** * the lesser the order, the earlier the filter is invoked. * * @return */ @Override public int getOrder() { return 0; } } \"]},\"729\":{\"h\":\"文章列表 数据库拆分\",\"t\":[\"关于文章一共有三张表\",\"ap_article\",\"文章基本信息表\",\"ap_article_config\",\"文章配置表\",\"ap_article_content\",\"文章内容表\"]},\"730\":{\"h\":\"表的拆分-垂直分表\",\"t\":[\"垂直分表：将一个表的字段分散到多个表中，每个表存储其中一部分字段。 优势： 1.减少IO争抢，减少锁表的几率，查看文章概述与文章详情互不影响 2.充分发挥高频数据的操作效率，对文章概述数据操作的高效率不会被操作文章详情数据的低效率所拖累。\",\"拆分规则： 1.把不常用的字段单独放在一张表 2.把text,blob等大字段拆分出来单独放在一张表 3.经常组合查询的字段单独放在一张表中\"]},\"731\":{\"h\":\"文章列表查询\",\"t\":[\"# 按照发布时间倒序查询前10条数据 select * from ap_article aa order by aa.publish_time desc limit 10; # 频道筛选 select * from ap_article aa where aa.channel_id = 1 and aa.publish_time < '2063-04-10 11:00:00' order by aa.publish_time desc limit 10; # 加载更多 例如当前时间为 2020-04-10 11:00:00 select * from ap_article aa where aa.channel_id = 1 and aa.publish_time < '2020-04-10 11:00:00' order by aa.publish_time desc limit 10; # 加载最新 select * from ap_article aa left join ap_article_config aac on aa.id = aac.article_id where aac.is_down != 1 and aac.is_delete != 1 and aa.channel_id = 1 and aa.publish_time > '2020-04-10 11:00:00' order by aa.publish_time desc limit 10 \"]},\"732\":{\"h\":\"业务代码\",\"t\":[\" /** * 根据参数加载文章列表 * * @param type 1为加载更多 2为加载最新 * @param dto * @return */ @Override public ResponseResult load(ArticleHomeDto dto, Short type) { Integer size = dto.getSize(); if (size == null || size <= 0) { size = 10; } size = Math.min(size, MAX_PAGE_SIZE); if (!type.equals(ArticleConstants.LOADTYPE_LOAD_MORE) && !type.equals(ArticleConstants.LOADTYPE_LOAD_NEW)) { type = ArticleConstants.LOADTYPE_LOAD_MORE; } if (StringUtils.isBlank(dto.getTag())) { dto.setTag(ArticleConstants.DEFAULT_TAG); } if (dto.getMinBehotTime() == null) dto.setMinBehotTime(new Date()); if (dto.getMaxBehotTime() == null) dto.setMaxBehotTime(new Date()); List<ApArticle> apArticles = apArticleMapper.loadArticleList(dto, type); return ResponseResult.okResult(apArticles); } /** * 根据参数加载文章列表 * * @param type 1为加载更多 2为加载最新 * @param dto * @return */ @Override public ResponseResult load(ArticleHomeDto dto, Short type) { Integer size = dto.getSize(); if (size == null || size <= 0) { size = 10; } size = Math.min(size, MAX_PAGE_SIZE); if (!type.equals(ArticleConstants.LOADTYPE_LOAD_MORE) && !type.equals(ArticleConstants.LOADTYPE_LOAD_NEW)) { type = ArticleConstants.LOADTYPE_LOAD_MORE; } if (StringUtils.isBlank(dto.getTag())) { dto.setTag(ArticleConstants.DEFAULT_TAG); } if (dto.getMinBehotTime() == null) dto.setMinBehotTime(new Date()); if (dto.getMaxBehotTime() == null) dto.setMaxBehotTime(new Date()); List<ApArticle> apArticles = apArticleMapper.loadArticleList(dto, type); return ResponseResult.okResult(apArticles); } \"]},\"733\":{\"h\":\"Freemarker模版文件+Minio文件上传\",\"t\":[\"导入依赖：\",\" <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-freemarker</artifactId> </dependency> <dependency> <groupId>com.heima</groupId> <artifactId>heima-file-starter</artifactId> <version>1.0-SNAPSHOT</version> </dependency> </dependencies> \",\"添加配置，可以添加到nacos中\",\"minio: accessKey: minio secretKey: minio123 bucket: leadnews endpoint: http://localhost:9000 readPath: http://localhost:9000 \",\"手动上传css和js到服务器：\",\" public static void main(String[] args) throws Exception { FileInputStream fileInputStream = null; fileInputStream = new FileInputStream(\\\"/tmp/plugins/css/index.css\\\"); MinioClient minioClient = MinioClient.builder().credentials(\\\"minio\\\", \\\"minio123\\\") .endpoint(\\\"http://localhost:9000\\\").build(); PutObjectArgs putObjectArgs = PutObjectArgs.builder() .object(\\\"plugins/css/index.css\\\")//文件名 .contentType(\\\"text/css\\\")//文件类型 .bucket(\\\"leadnews\\\")//桶名词 与minio创建的名词一致 .stream(fileInputStream, fileInputStream.available(), -1) //文件流 .build(); minioClient.putObject(putObjectArgs); } public static void main(String[] args) throws Exception { FileInputStream fileInputStream = null; fileInputStream = new FileInputStream(\\\"/tmp/plugins/js/index.js\\\"); MinioClient minioClient = MinioClient.builder().credentials(\\\"minio\\\", \\\"minio123\\\") .endpoint(\\\"http://localhost:9000\\\").build(); PutObjectArgs putObjectArgs = PutObjectArgs.builder() .object(\\\"plugins/js/index.js\\\")//文件名 .contentType(\\\"text/js\\\")//文件类型 .bucket(\\\"leadnews\\\")//桶名词 与minio创建的名词一致 .stream(fileInputStream, fileInputStream.available(), -1) //文件流 .build(); minioClient.putObject(putObjectArgs); } \",\"上传文件：\",\"@SpringBootTest class ArticleApplicationTest { @Autowired private ApArticleContentMapper apArticleContentMapper; @Autowired private FileStorageService fileStorageService; @Autowired private Configuration configuration; @Autowired private ApArticleMapper apArticleMapper; @Test void test() throws Exception { ApArticleContent apArticleContent = apArticleContentMapper.selectOne( Wrappers.<ApArticleContent>lambdaQuery() .eq(ApArticleContent::getArticleId, 1390536764510310401L)); if (apArticleContent != null && StringUtils.isNotBlank(apArticleContent.getContent())) { StringWriter out = new StringWriter(); Template template = configuration.getTemplate(\\\"article-ftl\\\"); HashMap<String, Object> map = new HashMap<>(); map.put(\\\"content\\\", JSON.parseArray(apArticleContent.getContent())); template.process(map, out); InputStream is = new ByteArrayInputStream(out.toString().getBytes()); String path = fileStorageService.uploadHtmlFile(\\\"\\\", apArticleContent.getArticleId() + \\\".html\\\", is); System.out.println(path); ApArticle apArticle = new ApArticle(); apArticle.setId(apArticleContent.getArticleId()); apArticle.setStaticUrl(path); apArticleMapper.updateById(apArticle); } } } \"]},\"734\":{\"c\":[\"项目实战\",\"黑马头条\"]},\"735\":{\"c\":[\"项目实战\",\"黑马头条\"]},\"736\":{\"h\":\"黑马点评1\"},\"737\":{\"h\":\"短信登录\"},\"738\":{\"h\":\"基于Session实现登录流程\",\"t\":[\"发送验证码： 用户在提交手机号后，会校验手机号是否合法，如果不合法，则要求用户重新输入手机号 如果手机号合法，后台此时生成对应的验证码，同时将验证码进行保存，然后再通过短信的方式将验证码发送给用户短信验证码登录、注册： 用户将验证码和手机号进行输入，后台从session中拿到当前验证码，然后和用户输入的验证码进行校验，如果不一致，则无法通过校验，如果一致，则后台根据手机号查询用户，如果用户不存在，则为用户创建账号信息，保存到数据库，无论是否存在，都会将用户信息保存到session中，方便后续获得当前登录信息校验登录状态: 用户在请求时候，会从cookie中携带者JsessionId到后台，后台通过JsessionId从session中拿到用户信息，如果没有session信息，则进行拦截，如果有session信息，则将用户信息保存到threadLocal中，并且放行\",\"发送验证码\",\" @Override public Result sendCode(String phone, HttpSession session) { //校验 手机号 if (RegexUtils.isPhoneInvalid(phone)) { //不符合 return Result.fail(\\\"手机号格式不正确\\\"); } //生成验证码 String code = RandomUtil.randomNumbers(6); //保存到session session.setAttribute(\\\"code\\\", code); //发送验证码 log.debug(\\\"手机号：{}，验证码：{}\\\", phone, code); return Result.ok(); } \",\"用户登录\",\" @Override public Result login(LoginFormDTO loginForm, HttpSession session) { //校验手机号 String phone = loginForm.getPhone(); if (RegexUtils.isPhoneInvalid(phone)) { //不符合 return Result.fail(\\\"手机号格式不正确\\\"); } //校验验证码 Object hasSendCode = session.getAttribute(\\\"code\\\"); String code = loginForm.getCode(); if (hasSendCode == null || !hasSendCode.toString().equals(code)) { return Result.fail(\\\"验证码不正确\\\"); } //校验通过，查询用户 User user = this.query().eq(\\\"phone\\\", phone).one(); if (user == null) { user = createUserWithPhone(phone); } //保存用户信息到session session.setAttribute(\\\"user\\\", user); return Result.ok(); } private User createUserWithPhone(String phone) { User user = new User(); user.setPhone(phone); user.setNickName(USER_NICK_NAME_PREFIX + RandomUtil.randomString(10)); this.save(user); return user; } \",\"此时可以正常登录\",\"手机号格式：\",\"手机号以 \\\"1\\\" 开头。\",\"第二位是一个特定的数字，可以是 3、4、5、6、7、8、9 中的一个。\",\"接下来的 9 位数字可以是 0 到 9 的任意数字。\"]},\"739\":{\"h\":\"登录拦截\",\"t\":[\"添加拦截器设置\",\"public class LoginInterceptor implements HandlerInterceptor { @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception { //获取Session HttpSession session = request.getSession(); //获取用户信息 Object user = session.getAttribute(\\\"user\\\"); if (user == null) { //不存在，拦截，返回401状态码 response.setStatus(401); return false; } //存在，保存到ThreadLocal中 UserHolder.saveUser((User) user); return true; } } \",\"配置拦截器生效\",\"@Configuration public class MvcConfig implements WebMvcConfigurer { @Override public void addInterceptors(InterceptorRegistry registry) { registry.addInterceptor(new LoginInterceptor()) .excludePathPatterns(\\\"/shop/**\\\", \\\"/shop/**\\\", \\\"/voucher/**\\\", \\\"/shop-type/**\\\", \\\"/upload/**\\\", \\\"/blog/hot\\\", \\\"/user/code\\\", \\\"/user/login\\\" ); } } \"]},\"740\":{\"h\":\"用户信息脱敏\",\"t\":[\"登录的时候修改：\",\" //保存用户信息到session UserDTO userDTO = BeanUtil.copyProperties(user, UserDTO.class); session.setAttribute(\\\"user\\\", userDTO); return Result.ok(); \",\"拦截器修改：\",\" //存在，保存到ThreadLocal中 UserHolder.saveUser((UserDTO) user); \",\"UserHolder修改 ：\",\"public class UserHolder { private static final ThreadLocal<UserDTO> tl = new ThreadLocal<>(); public static void saveUser(UserDTO user){ tl.set(user); } public static UserDTO getUser(){ return tl.get(); } public static void removeUser(){ tl.remove(); } } \"]},\"741\":{\"h\":\"Session共享\",\"t\":[\"session会存入到tomcat服务器 中，但是后端如果有多个tomcat服务器，就不好 实现数据共享，早期的办法是将 session拷贝到不同 的tomcat服务器上面，现在有了redis，可以直接使用redis来解决session共享的问题，两种存储方式\",\"使用string存储\",\"使用哈希存储\",\" 这里选择使用哈希存储\",\"设计key的时候可以随机 生成一个token给 前端，让前端带着token来访问后端 整体流程如下：\",\"修改发送验证码逻辑，保存到redis\",\" @Override public Result sendCode(String phone, HttpSession session) { //校验 手机号 if (RegexUtils.isPhoneInvalid(phone)) { //不符合 return Result.fail(\\\"手机号格式不正确\\\"); } //生成验证码 String code = RandomUtil.randomNumbers(6); //保存到session stringRedisTemplate.opsForValue().set(LOGIN_CODE_KEY + phone, code, LOGIN_CODE_TTL, TimeUnit.MINUTES); //发送验证码 log.debug(\\\"手机号：{}，验证码：{}\\\", phone, code); return Result.ok(); } \",\"修改登录逻辑,从redis读数据：\",\" @Override public Result login(LoginFormDTO loginForm, HttpSession session) { //校验手机号 String phone = loginForm.getPhone(); if (RegexUtils.isPhoneInvalid(phone)) { //不符合 return Result.fail(\\\"手机号格式不正确\\\"); } //从redis中获取验证码 String hasSendCode = stringRedisTemplate.opsForValue().get(LOGIN_CODE_KEY + phone); String code = loginForm.getCode(); if (hasSendCode == null || !hasSendCode.toString().equals(code)) { return Result.fail(\\\"验证码不正确\\\"); } //校验通过，查询用户 User user = this.query().eq(\\\"phone\\\", phone).one(); if (user == null) { user = createUserWithPhone(phone); } //保存用户信息到redis中 //生成token String token = UUID.randomUUID().toString(); //将User对象转为HashMap存储 UserDTO userDTO = BeanUtil.copyProperties(user, UserDTO.class); Map<String, Object> userMap = BeanUtil.beanToMap(userDTO, new HashMap<>(), CopyOptions.create() .setIgnoreNullValue(true) .setFieldValueEditor((fieldName, fieldvalue) -> fieldvalue.toString()) ); //存储 String toKenKey = LOGIN_USER_KEY + token; stringRedisTemplate.opsForHash().putAll(toKenKey, userMap); //设置有效期 stringRedisTemplate.expire(toKenKey, LOGIN_USER_TTL, TimeUnit.MINUTES); return Result.ok(token); } \"]},\"742\":{\"h\":\"解决登录状态刷新问题\",\"t\":[\"目前的拦截机制：\",\"如果访问不需要拦截的路径，这个拦截器不会生效，此时不会刷新令牌\",\"优化方案： 再添加一个拦截器，拦截所有请求\",\"具体代码以及解释 如下 ：\",\"public class RefreshTokenInterceptor implements HandlerInterceptor { private StringRedisTemplate stringRedisTemplate; //这里的构造方法是为了注入StringRedisTemplate， // 因为 RefreshTokenInterceptor 是自己 new 出来的，不是 Spring 管理的 public RefreshTokenInterceptor(StringRedisTemplate stringRedisTemplate) { this.stringRedisTemplate = stringRedisTemplate; } @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception { //获取请求头中的token String token = request.getHeader(\\\"authorization\\\"); if (StrUtil.isBlank(token)) { return true; } //获取redis中的用户 String key = LOGIN_USER_KEY + token; Map<Object, Object> userMap = stringRedisTemplate.opsForHash().entries(key); if (userMap.isEmpty()) { //用户不存在 return true; } //将hash数据转为UserDTO UserDTO userDTO = BeanUtil.fillBeanWithMap(userMap, new UserDTO(), false); //保存到ThreadLocal中 UserHolder.saveUser(userDTO); //刷新token有效期 stringRedisTemplate.expire(key, LOGIN_USER_TTL, java.util.concurrent.TimeUnit.DAYS); return true; } @Override public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception { //清空ThreadLocal中的数据 防止内存泄漏 UserHolder.removeUser(); } } \",\"配置类里面注入StringRedisTemplate：\",\"@Configuration public class MvcConfig implements WebMvcConfigurer { @Resource private StringRedisTemplate stringRedisTemplate; @Override public void addInterceptors(InterceptorRegistry registry) { registry.addInterceptor(new RefreshTokenInterceptor(stringRedisTemplate)) .addPathPatterns(\\\"/**\\\"); registry.addInterceptor(new LoginInterceptor()) .excludePathPatterns( \\\"/shop/**\\\", \\\"/voucher/**\\\", \\\"/shop-type/**\\\", \\\"/upload/**\\\", \\\"/blog/hot\\\", \\\"/user/code\\\", \\\"/user/login\\\" ); } } \",\"登录拦截器修改如下 ：\",\"public class LoginInterceptor implements HandlerInterceptor { @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception { if (UserHolder.getUser() == null) { //不存在，拦截，返回401状态码 response.setStatus(401); return false; } //有用户 return true; } } \",\"至此，黑马点评的登录逻辑完成。\"]},\"743\":{\"c\":[\"项目实战\",\"黑马点评\"]},\"744\":{\"c\":[\"项目实战\",\"黑马点评\"]},\"745\":{\"h\":\"黑马点评2\"},\"746\":{\"h\":\"商品查询缓存\",\"t\":[\"为什么要使用缓存？ 缓存数据存储于代码中,而代码运行在内存中,内存的读写性能远高于磁盘,缓存可以大大降低用户访问并发量带来的服务器读写压力\"]},\"747\":{\"h\":\"添加商品缓存\",\"t\":[\"查询数据库之前先查询缓存，如果缓存数据存在，则直接从缓存中返回，如果缓存数据不存在，再查询数据库，然后将数据存入redis。\",\"控制器修改：\",\" /** * 根据id查询商铺信息 * @param id 商铺id * @return 商铺详情数据 */ @GetMapping(\\\"/{id}\\\") public Result queryShopById(@PathVariable(\\\"id\\\") Long id) { return shopService.queryById(id); } \",\"业务层逻辑：\",\" @Resource private StringRedisTemplate stringRedisTemplate; @Override public Result queryById(Long id) { String key = CACHE_SHOP_KEY + id; // 从缓存中获取数据 String shopJson = stringRedisTemplate.opsForValue().get(key); if (StrUtil.isNotBlank(shopJson)) { // 缓存中有数据 Shop shop = JSONUtil.toBean(shopJson, Shop.class); return Result.ok(shop); } // 缓存中没有数据，从数据库中获取 Shop shop = this.getById(id); if (shop == null) { // 数据库中没有数据 return Result.fail(\\\"商铺不存在\\\"); } // 将数据写入缓存 stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(shop)); return Result.ok(shop); } \",\"作业，修改商店种类缓存 ： 控制器ShopTypeController：\",\" @GetMapping(\\\"list\\\") public Result queryTypeList() { return typeService.queryList(); } \",\"业务逻辑：\",\" @Resource private StringRedisTemplate stringRedisTemplate; @Override public Result queryList() { String key = CACHE_TYPE_KEY ; // 从缓存中获取数据 String typeJson = stringRedisTemplate.opsForValue().get(key); if (StrUtil.isNotBlank(typeJson)) { // 缓存中有数据 List<ShopType> shopTypeList = JSONUtil.toList(typeJson, ShopType.class); return Result.ok(shopTypeList); } // 缓存中没有数据，从数据库中获取 List<ShopType> shopTypeList = this.query().orderByAsc(\\\"sort\\\").list(); if (shopTypeList == null) { // 数据库中没有数据 return Result.fail(\\\"商铺不存在\\\"); } // 将数据写入缓存 stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(shopTypeList)); return Result.ok(shopTypeList); } \"]},\"748\":{\"h\":\"缓存更新策略\"},\"749\":{\"h\":\"使用缓存原因\",\"t\":[\"缓存更新是redis为了节约内存，有以下三种方式：\",\"内存淘汰策略： Redis 使用 LRU（Least Recently Used，最近最少使用）算法作为默认的内存淘汰策略。当 Redis 的内存用完时，它会尝试从最近最少使用的键中选择一些进行淘汰以腾出内存空间。可以通过配置 maxmemory-policy 选项来指定其他内存淘汰策略，例如 LFU（Least Frequently Used，最不经常使用）或不淘汰等。\",\"超时剔除（TTL - Time To Live）： 在 Redis 中，可以为每个键设置一个过期时间，一旦过期时间到了，Redis 会自动将键删除。可以使用 EXPIRE 或 SETEX 命令来设置键的过期时间，或者在键的创建时通过 EXPIRE 参数来设置过期时间。\",\"主动更新： 主动更新通常是通过在访问键时重新设置过期时间来实现的。这可以防止键被过早删除，特别是在访问频繁的情况下。可以使用 EXPIRE 或 PEXPIRE 命令来更新键的过期时间，或者使用 PERSIST 命令来删除键的过期时间，使其永不过期。通常用来 解决 缓存 和数据库不一致的问题\"]},\"750\":{\"h\":\"缓存不一致解决方案\",\"t\":[\"原因：缓存的数据来自于数据库，数据库的数据是会发生变化的，当数据库发生了变化，但是缓存没有同步的时候，就会出现一致性问题 三种方案 ：\",\"Cache Aside Pattern 人工编码方式：缓存调用者在更新完数据库后再去更新缓存，也称之为双写方案\",\"Read/Write Through Pattern : 由系统本身完成，数据库与缓存的问题交由系统本身去处理\",\"Write Behind Caching Pattern ：调用者只操作缓存，其他线程去异步处理数据库，实现最终一致 综合考虑，使用方案一比较靠谱，但是还会有以下 几个问题需要考虑\",\"每次操作数据库，都操作缓存，但是没人查询，这个操作缓存的动作实际上只有最后一次是生效的，中间更新的意义不大。解决办法：删除缓存，等有人查询的时候，再添加进入缓存\",\"删除 缓存还是更新缓存： \",\"更新 缓存：每次更新数据库都更新缓存，无效写比较多\",\"删除缓存：更新数据库时候让缓存生效，查询数据库再更新缓存\",\"如何保证缓存与数据库的操作的同时成功和失败？ \",\"单体系统，将缓存与数据库放在一个事物里面\",\"分布式系统，利用TCC等分布式事务方案\",\"具体实施：先操作数据库，再删除缓存，因为如果顺序反了，在两个线程并发来访问时，假设线程1先来，他先把缓存删了，此时线程2过来，他查询缓存数据并不存在，此时他写入缓存，当他写入缓存后，线程1再执行更新动作时，实际上写入的就是旧的数据，新的数据被旧数据覆盖了。\"]},\"751\":{\"h\":\"具体实现\",\"t\":[\"修改ShopController中的业务逻辑，满足下面的需求：\",\"根据id查询店铺时，如果缓存未命中，则查询数据库，将数据库结果写入缓存，并设置超时时间\",\"根据id修改店铺时，先修改数据库，再删除缓存\",\"设置超时时间： queryById中：\",\" // 缓存中没有数据，从数据库中获取 Shop shop = this.getById(id); if (shop == null) { // 数据库中没有数据 return Result.fail(\\\"商铺不存在\\\"); } // 将数据写入缓存 stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(shop), RedisConstants.CACHE_SHOP_TTL, TimeUnit.MINUTES); return Result.ok(shop); \",\"先修改，再删除缓存： 控制器修改：\",\" /** * 更新商铺信息 * @param shop 商铺数据 * @return 无 */ @PutMapping public Result updateShop(@RequestBody Shop shop) { return shopService.update(shop); } \",\"实现类：\",\" @Override @Transactional public Result update(Shop shop) { Long id = shop.getId(); if (id == null) { return Result.fail(\\\"商铺id不能为空\\\"); } // 更新数据库 this.updateById(shop); // 删除缓存 stringRedisTemplate.delete(CACHE_SHOP_KEY + id); return Result.ok(); } \"]},\"752\":{\"h\":\"缓存穿透\",\"t\":[\"缓存穿透 ：缓存穿透是指客户端请求的数据在缓存中和数据库中都不存在，这样缓存永远不会生效，这些请求都会打到数据库。 常见的解决方案有两种：\",\"缓存空对象 \",\"优点：实现简单，维护方便\",\"缺点： \",\"额外的内存消耗\",\"可能造成短期的不一致\",\"布隆过滤 \",\"优点：内存占用较少，没有多余key\",\"缺点： \",\"实现复杂\",\"存在误判可能缓存空对象思路分析：当我们客户端访问不存在的数据时，先请求redis，但是此时redis中没有数据，此时会访问到数据库，但是数据库中也没有数据，这个数据穿透了缓存，直击数据库，我们都知道数据库能够承载的并发不如redis这么高，如果大量的请求同时过来访问这种不存在的数据，这些请求就都会访问到数据库，简单的解决方案就是哪怕这个数据在数据库中也不存在，我们也把这个数据存入到redis中去，这样，下次用户过来访问这个不存在的数据，那么在redis中也能找到这个数据就不会进入到缓存了布隆过滤：布隆过滤器其实采用的是哈希思想来解决这个问题，通过一个庞大的二进制数组，走哈希思想去判断当前这个要查询的这个数据是否存在，如果布隆过滤器判断存在，则放行，这个请求会去访问redis，哪怕此时redis中的数据过期了，但是数据库中一定存在这个数据，在数据库中查询出来这个数据后，再将其放入到redis中，假设布隆过滤器判断这个数据不存在，则直接返回。这种方式优点在于节约内存空间，存在误判，误判原因在于：布隆过滤器走的是哈希思想，只要哈希思想，就可能存在哈希冲突\",\"实现逻辑 ：\",\"如果这个数据不存在，还是会把这个数据写入到Redis中，并且将value设置为空。\",\"当再次发起查询时，我们如果发现命中之后，判断这个value是否是null，如果是null，则是之前写入的数据，证明是缓存穿透数据，如果不是，则直接返回数据。\",\"修改 代码 如下 ：\",\" @Override public Result queryById(Long id) { String key = CACHE_SHOP_KEY + id; // 从缓存中获取数据 String shopJson = stringRedisTemplate.opsForValue().get(key); if (StrUtil.isNotBlank(shopJson)) { // 缓存中有数据 Shop shop = JSONUtil.toBean(shopJson, Shop.class); return Result.ok(shop); } //判断命中的是否是 空值 if (\\\"\\\".equals(shopJson)) { return Result.fail(\\\"商铺不存在\\\"); } // 缓存中没有数据，从数据库中获取 Shop shop = this.getById(id); if (shop == null) { // 数据库中没有数据,将空数据写入缓存 stringRedisTemplate.opsForValue().set(key, \\\"\\\", RedisConstants.CACHE_NULL_TTL, TimeUnit.MINUTES); return Result.fail(\\\"商铺不存在\\\"); } // 将数据写入缓存 stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(shop), RedisConstants.CACHE_SHOP_TTL, TimeUnit.MINUTES); return Result.ok(shop); } \",\"总结解决办法：\",\"缓存null值\",\"布隆过滤\",\"增强id的复杂度，避免被猜测id规律\",\"做好数据的基础格式校验\",\"加强用户权限校验\",\"做好热点参数的限流\"]},\"753\":{\"h\":\"缓存雪崩\",\"t\":[\"缓存雪崩是指在同一时段大量的缓存key同时失效或者Redis服务宕机，导致大量请求到达数据库，带来巨大压力。 解决方案：\",\"给不同的Key的TTL添加随机值\",\"利用Redis集群提高服务的可用性\",\"给缓存业务添加降级限流策略\",\"给业务添加多级缓存\"]},\"754\":{\"h\":\"缓存击穿\",\"t\":[\"缓存击穿问题也叫热点Key问题，就是一个被高并发访问并且缓存重建业务较复杂的key突然失效了，无数的请求访问会在瞬间给数据库带来巨大的冲击。 常见的解决方案有两种：\",\"互斥锁\",\"逻辑过期 假设线程1在查询缓存之后，本来应该去查询数据库，然后把这个数据重新加载到缓存的，此时只要线程1走完这个逻辑，其他线程就都能从缓存中加载这些数据了，但是假设在线程1没有走完的时候，后续的线程2，线程3，线程4同时过来访问当前这个方法， 那么这些线程都不能从缓存中查询到数据，那么他们就会同一时刻来访问查询缓存，都没查到，接着同一时间去访问数据库，同时的去执行数据库代码，对数据库访问压力过大\"]},\"755\":{\"h\":\"使用锁解决\",\"t\":[\"因为锁能实现互斥性。假设线程过来，只能一个人一个人的来访问数据库，从而避免对于数据库访问压力过大，但这也会影响查询的性能，因为此时会让查询的性能从并行变成了串行，我们可以采用tryLock方法 + double check来解决这样的问题。 假设现在线程1过来访问，他查询缓存没有命中，但是此时他获得到了锁的资源，那么线程1就会一个人去执行逻辑，假设现在线程2过来，线程2在执行过程中，并没有获得到锁，那么线程2就可以进行到休眠，直到线程1把锁释放后，线程2获得到锁，然后再来执行逻辑，此时就能够从缓存中拿到数据了。\",\"核心思路：相较于原来从缓存中查询不到数据后直接查询数据库而言，现在的方案是 进行查询之后，如果从缓存没有查询到数据，则进行互斥锁的获取，获取互斥锁后，判断是否获得到了锁，如果没有获得到，则休眠，过一会再进行尝试，直到获取到锁为止，才能进行查询如果获取到了锁的线程，再去进行查询，查询后将数据写入redis，再释放锁，返回数据，利用互斥锁就能保证只有一个线程去执行操作数据库的逻辑，防止缓存击穿\",\"操作锁：\",\" private boolean tryLock(String key) { Boolean flag = stringRedisTemplate.opsForValue().setIfAbsent(key, \\\"1\\\", 10, TimeUnit.SECONDS); return BooleanUtil.isTrue(flag); } private void unlock(String key) { stringRedisTemplate.delete(key); } \",\"具体逻辑：\",\" /** * 通过互斥锁解决缓存击穿解决方案 * * @param id * @return */ public Shop queryWithMutex(Long id) { String key = CACHE_SHOP_KEY + id; // 从缓存中获取数据 String shopJson = stringRedisTemplate.opsForValue().get(key); if (StrUtil.isNotBlank(shopJson)) { // 缓存中有数据 Shop shop = JSONUtil.toBean(shopJson, Shop.class); return shop; } //判断命中的是否是 空值 if (\\\"\\\".equals(shopJson)) { return null; } //实现缓存重建 String lockKey = \\\"lock:shop:\\\" + id; Shop shop = null; try { boolean isLock = tryLock(lockKey); if (!isLock) { // 未获取到锁，休眠一段时间后重试 Thread.sleep(50); return queryWithMutex(id); } // 获取到锁，从数据库中获取数据 shop = this.getById(id); if (shop == null) { // 数据库中没有数据,将空数据写入缓存 stringRedisTemplate.opsForValue().set(key, \\\"\\\", RedisConstants.CACHE_NULL_TTL, TimeUnit.MINUTES); return null; } // 将数据写入缓存 stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(shop), RedisConstants.CACHE_SHOP_TTL, TimeUnit.MINUTES); } catch (InterruptedException e) { throw new RuntimeException(e); } finally { // 释放锁 unlock(lockKey); } return shop; } \",\"使用Jmeter进行并发测试：\"]},\"756\":{\"h\":\"逻辑过期\",\"t\":[\"我们之所以会出现这个缓存击穿问题，主要原因是在于我们对key设置了过期时间，假设我们不设置过期时间，其实就不会有缓存击穿的问题，但是不设置过期时间，这样数据不就一直占用我们内存了吗，我们可以采用逻辑过期方案。 我们把过期时间设置在 redis的value中，注意：这个过期时间并不会直接作用于redis，而是我们后续通过逻辑去处理。假设线程1去查询缓存，然后从value中判断出来当前的数据已经过期了，此时线程1去获得互斥锁，那么其他线程会进行阻塞，获得了锁的线程他会开启一个 线程去进行 以前的重构数据的逻辑，直到新开的线程完成这个逻辑后，才释放锁， 而线程1直接进行返回，假设现在线程3过来访问，由于线程线程2持有着锁，所以线程3无法获得锁，线程3也直接返回数据，只有等到新开的线程2把重建数据构建完后，其他线程才能走返回正确的数据。 这种方案巧妙在于，异步的构建缓存，缺点在于在构建完缓存之前，返回的都是脏数据。\",\"需求：修改根据id查询商铺的业务，基于逻辑过期方式来解决缓存击穿问题 思路分析：当用户开始查询redis时，判断是否命中，如果没有命中则直接返回空数据，不查询数据库，而一旦命中后，将value取出，判断value中的过期时间是否满足，如果没有过期，则直接返回redis中的数据，如果过期，则在开启独立线程后直接返回之前的数据，独立线程去重构数据，重构完成后释放互斥锁。\",\"新建实体类：\",\"@Data public class RedisData { private LocalDateTime expireTime; private Object data; } \",\"在业务层增加方法 ，对利用单元测试进行缓存预热\",\" public void saveShop2Redis(Long id, Long expireSeconds) { //1. 查询店铺数据 Shop shop = this.getById(id); //2. 封装过期时间 RedisData redisData = new RedisData(); redisData.setData(shop); redisData.setExpireTime(LocalDateTime.now().plusSeconds(expireSeconds)); //3. 写入 redis stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY + id, JSONUtil.toJsonStr(redisData)); } \",\"单元测试：\",\"@SpringBootTest class ShopServiceImplTest { @Resource private ShopServiceImpl shopService; @Test void testSaveShop() { shopService.saveShop2Redis(1L,10L); } } \",\"Redis中数据\",\"缓存 重建逻辑 ：\",\" /** * 线程池 重建缓存 */ private static final ExecutorService CACHE_REBUILD_EXECUTOR = Executors.newFixedThreadPool(10); public Shop queryWithLogicalExpire(Long id) { String key = CACHE_SHOP_KEY + id; // 从缓存中获取数据 String shopJson = stringRedisTemplate.opsForValue().get(key); if (StrUtil.isBlank(shopJson)) { //没有命中，直接返回 return null; } //命中，反序列化为对象 RedisData redisData = JSONUtil.toBean(shopJson, RedisData.class); Shop shop = JSONUtil.toBean((JSONObject) redisData.getData(), Shop.class); LocalDateTime expireTime = redisData.getExpireTime(); //判断是否过期 if (expireTime.isAfter(LocalDateTime.now())) { //未过期，直接返回 return shop; } //过期了,需要进行缓存重建 //获取互斥锁 String lockKey = LOCK_SHOP_KEY + id; boolean isLock = tryLock(lockKey); if (isLock) { //成功，开启异步线程进行缓存重建 CACHE_REBUILD_EXECUTOR.submit(()->{ try { this.saveShop2Redis(id, RedisConstants.CACHE_SHOP_TTL); } catch (Exception e) { throw new RuntimeException(e); } finally { //释放锁 unlock(lockKey); } }); } //返回旧数据 return shop; } \"]},\"757\":{\"h\":\"对比\",\"t\":[\"互斥锁方案：由于保证了互斥性，所以数据一致，且实现简单，因为仅仅只需要加一把锁而已，也没其他的事情需要操心，所以没有额外的内存消耗，缺点在于有锁就有死锁问题的发生，且只能串行执行性能肯定受到影响逻辑过期方案： 线程读取过程中不需要等待，性能好，有一个额外的线程持有锁去进行重构数据，但是在重构数据完成前，其他的线程只能返回之前的数据，且实现起来麻烦\"]},\"758\":{\"h\":\"缓存工具封装\",\"t\":[\"package com.hmdp.utils; import cn.hutool.core.util.BooleanUtil; import cn.hutool.core.util.StrUtil; import cn.hutool.json.JSONObject; import cn.hutool.json.JSONUtil; import com.hmdp.entity.Shop; import lombok.extern.slf4j.Slf4j; import org.springframework.data.redis.core.StringRedisTemplate; import org.springframework.stereotype.Component; import java.time.LocalDateTime; import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; import java.util.concurrent.TimeUnit; import java.util.function.Function; import static com.hmdp.utils.RedisConstants.*; @Slf4j @Component public class CacheClient { private final StringRedisTemplate stringRedisTemplate; public CacheClient(StringRedisTemplate stringRedisTemplate) { this.stringRedisTemplate = stringRedisTemplate; } public void set(String key, Object value, Long time, TimeUnit unit) { stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(value), time, unit); } public void setWithLogicalExpire(String key, Object value, Long time, TimeUnit unit) { //设置逻辑过期 RedisData redisData = new RedisData(); redisData.setData(value); redisData.setExpireTime(LocalDateTime.now().plusSeconds(unit.toSeconds(time))); //写入redis stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(redisData), time, unit); } public <R, ID> R queryWithPassThrough(String keyPrefix, ID id, Class<R> type, Function<ID, R> dbFallback, Long time, TimeUnit unit) { String key = keyPrefix + id; //从redis中查询数据 String json = stringRedisTemplate.opsForValue().get(key); //判断是否存在 if (StrUtil.isNotBlank(json)) { //存在，直接返回 return JSONUtil.toBean(json, type); } //判断命中是否为空 if (dbFallback == null) { return null; } //不存在，查询数据库 R r = dbFallback.apply(id); if (r == null) { //数据库中不存在，设置空值 stringRedisTemplate.opsForValue().set(key, \\\"\\\", CACHE_NULL_TTL, TimeUnit.MINUTES); return null; } this.set(key, r, time, unit); return r; } /** * 线程池 重建缓存 */ private static final ExecutorService CACHE_REBUILD_EXECUTOR = Executors.newFixedThreadPool(10); public <R, ID> R queryWithLogicalExpire(String keyPrefix, ID id, Class<R> type, Function<ID, R> dbFallback, Long time, TimeUnit unit) { String key = CACHE_SHOP_KEY + id; // 从缓存中获取数据 String shopJson = stringRedisTemplate.opsForValue().get(key); if (StrUtil.isBlank(shopJson)) { //没有命中，直接返回 return null; } //命中，反序列化为对象 RedisData redisData = JSONUtil.toBean(shopJson, RedisData.class); R r = JSONUtil.toBean((JSONObject) redisData.getData(), type); LocalDateTime expireTime = redisData.getExpireTime(); //判断是否过期 if (expireTime.isAfter(LocalDateTime.now())) { //未过期，直接返回 return r; } //过期了,需要进行缓存重建 //获取互斥锁 String lockKey = LOCK_SHOP_KEY + id; boolean isLock = tryLock(lockKey); if (isLock) { //成功，开启异步线程进行缓存重建 CACHE_REBUILD_EXECUTOR.submit(() -> { try { R r1 = dbFallback.apply(id); this.setWithLogicalExpire(key, r1, time, unit); } catch (Exception e) { throw new RuntimeException(e); } finally { //释放锁 unlock(lockKey); } }); } //返回旧数据 return r; } private boolean tryLock(String key) { Boolean flag = stringRedisTemplate.opsForValue().setIfAbsent(key, \\\"1\\\", 10, TimeUnit.SECONDS); return BooleanUtil.isTrue(flag); } private void unlock(String key) { stringRedisTemplate.delete(key); } } \",\"使用 ：\",\" @Override public Result queryById(Long id) { // 解决缓存 穿透 问题 // Shop shop = queryWithPassThrough(id); // 解决缓存 击穿 问题 // Shop shop = queryWithMutex(id); // 逻辑过期解决缓存 击穿问题 // Shop shop = queryWithLogicalExpire(id); // return Result.ok(shop); Shop shop = cacheClient.queryWithPassThrough(CACHE_SHOP_KEY, id, Shop.class, this::getById, RedisConstants.CACHE_SHOP_TTL, TimeUnit.MINUTES); Shop shop1 = cacheClient.queryWithLogicalExpire(CACHE_SHOP_KEY, id, Shop.class, this::getById, RedisConstants.CACHE_SHOP_TTL, TimeUnit.MINUTES); return Result.ok(shop); } @Override public Result queryById(Long id) { // 解决缓存 穿透 问题 // Shop shop = queryWithPassThrough(id); // 解决缓存 击穿 问题 // Shop shop = queryWithMutex(id); // 逻辑过期解决缓存 击穿问题 // Shop shop = queryWithLogicalExpire(id); // return Result.ok(shop); Shop shop = cacheClient.queryWithPassThrough(CACHE_SHOP_KEY, id, Shop.class, this::getById, RedisConstants.CACHE_SHOP_TTL, TimeUnit.MINUTES); Shop shop1 = cacheClient.queryWithLogicalExpire(CACHE_SHOP_KEY, id, Shop.class, this::getById, RedisConstants.CACHE_SHOP_TTL, TimeUnit.MINUTES); return Result.ok(shop); } \"]},\"759\":{\"c\":[\"项目实战\",\"黑马点评\"]},\"760\":{\"c\":[\"项目实战\",\"黑马点评\"]},\"761\":{\"h\":\"黑马点评3\"},\"762\":{\"h\":\"优惠卷秒杀\",\"t\":[\"自增的id存在一些问题：id规律太明显，受单表数据量限制，因此需要全局ID生成器\"]},\"763\":{\"h\":\"全局ID生成器\",\"t\":[\"符号位：0 时间戳：31bit，以秒为单位，可以使用69年 序列号：32bit，秒内的计数器，支持每秒产生2^32个不同ID\",\" 具体代码实现： 获取2022-1-1的时间戳为1640995200L\",\" public static void main(String[] args) { LocalDateTime time = LocalDateTime.of(2022, 1, 1, 0, 0, 0); long second = time.toEpochSecond(ZoneOffset.UTC); System.out.println(second); } \",\"获取全局ID\",\"@Component public class RedisIdWorker { /** * 开始时间戳 */ public static final long BEGIN_TIMESTAMP = 1640995200L; /** * 序列号的位数 */ public static final int COUNT_BITS = 32; private StringRedisTemplate stringRedisTemplate; public RedisIdWorker(StringRedisTemplate stringRedisTemplate) { this.stringRedisTemplate = stringRedisTemplate; } public long nextId(String keyPrefix) { // 获取当前时间戳 LocalDateTime now = LocalDateTime.now(); long nowSecond = now.toEpochSecond(ZoneOffset.UTC); long timestamp = nowSecond - BEGIN_TIMESTAMP; // 获取序列号 String date = now.format(DateTimeFormatter.ofPattern(\\\"yyyy:MM:dd\\\")); Long count = stringRedisTemplate.opsForValue().increment(\\\"icr:\\\" + keyPrefix + \\\":\\\" + date); return (timestamp << COUNT_BITS) | count; } } \",\"测试是否有效：\",\" @Resource private RedisIdWorker redisIdWorker; private ExecutorService es = Executors.newFixedThreadPool(500); @Test void testIdWorker() throws Exception { CountDownLatch countDownLatch = new CountDownLatch(300); Runnable task = () -> { for (int i = 0; i < 100; i++) { long id = redisIdWorker.nextId(\\\"order\\\"); System.out.println(\\\"id = \\\" + id); } countDownLatch.countDown(); }; long begin = System.currentTimeMillis(); for (int i = 0; i < 300; i++) { es.submit(task); } countDownLatch.await(); long end = System.currentTimeMillis(); System.out.println(\\\"(end-begin) = \\\" + (end - begin)); } \"]},\"764\":{\"h\":\"创建优惠卷\",\"t\":[\"表结构： tb_voucher 优惠卷的基本信息\",\"create table tb_voucher ( id bigint unsigned auto_increment comment '主键' primary key, shop_id bigint unsigned null comment '商铺id', title varchar(255) not null comment '代金券标题', sub_title varchar(255) null comment '副标题', rules varchar(1024) null comment '使用规则', pay_value bigint unsigned not null comment '支付金额，单位是分。例如200代表2元', actual_value bigint not null comment '抵扣金额，单位是分。例如200代表2元', type tinyint unsigned default '0' not null comment '0,普通券；1,秒杀券', status tinyint unsigned default '1' not null comment '1,上架; 2,下架; 3,过期', create_time timestamp default CURRENT_TIMESTAMP not null comment '创建时间', update_time timestamp default CURRENT_TIMESTAMP not null on update CURRENT_TIMESTAMP comment '更新时间' ) collate = utf8mb4_general_ci row_format = COMPACT; \",\"tb_voucher_order：\",\"create table tb_voucher_order ( id bigint not null comment '主键' primary key, user_id bigint unsigned not null comment '下单的用户id', voucher_id bigint unsigned not null comment '购买的代金券id', pay_type tinyint unsigned default '1' not null comment '支付方式 1：余额支付；2：支付宝；3：微信', status tinyint unsigned default '1' not null comment '订单状态，1：未支付；2：已支付；3：已核销；4：已取消；5：退款中；6：已退款', create_time timestamp default CURRENT_TIMESTAMP not null comment '下单时间', pay_time timestamp null comment '支付时间', use_time timestamp null comment '核销时间', refund_time timestamp null comment '退款时间', update_time timestamp default CURRENT_TIMESTAMP not null on update CURRENT_TIMESTAMP comment '更新时间' ) collate = utf8mb4_general_ci row_format = COMPACT; \",\"tb_seckill_voucher 秒杀卷\",\"create table tb_seckill_voucher ( voucher_id bigint unsigned not null comment '关联的优惠券的id' primary key, stock int not null comment '库存', create_time timestamp default CURRENT_TIMESTAMP not null comment '创建时间', begin_time timestamp default CURRENT_TIMESTAMP not null comment '生效时间', end_time timestamp default CURRENT_TIMESTAMP not null comment '失效时间', update_time timestamp default CURRENT_TIMESTAMP not null on update CURRENT_TIMESTAMP comment '更新时间' ) comment '秒杀优惠券表，与优惠券是一对一关系' collate = utf8mb4_general_ci row_format = COMPACT; \",\"控制器：\",\" /** * 新增秒杀券 * @param voucher 优惠券信息，包含秒杀信息 * @return 优惠券id */ @PostMapping(\\\"seckill\\\") public Result addSeckillVoucher(@RequestBody Voucher voucher) { voucherService.addSeckillVoucher(voucher); return Result.ok(voucher.getId()); } \",\"业务逻辑：\",\" @Override @Transactional public void addSeckillVoucher(Voucher voucher) { // 保存优惠券 save(voucher); // 保存秒杀信息 SeckillVoucher seckillVoucher = new SeckillVoucher(); seckillVoucher.setVoucherId(voucher.getId()); seckillVoucher.setStock(voucher.getStock()); seckillVoucher.setBeginTime(voucher.getBeginTime()); seckillVoucher.setEndTime(voucher.getEndTime()); seckillVoucherService.save(seckillVoucher); } \"]},\"765\":{\"h\":\"实现秒杀下单\",\"t\":[\"流程图如下：\",\"具体实现： 控制器：\",\" @Resource private IVoucherOrderService voucherOrderService; @PostMapping(\\\"seckill/{id}\\\") public Result seckillVoucher(@PathVariable(\\\"id\\\") Long voucherId) { return voucherOrderService.seckillVoucher(voucherId); } \",\"逻辑层：\",\" @Resource private ISeckillVoucherService seckillVoucherService; @Resource private RedisIdWorker redisIdWorker; @Override @Transactional public Result seckillVoucher(Long voucherId) { //1. 查询优惠卷 SeckillVoucher voucher = seckillVoucherService.getById(voucherId); //2. 判断秒杀是否开始 if (voucher.getBeginTime().isAfter(LocalDateTime.now())) { return Result.fail(\\\"秒杀还未开始\\\"); } //3. 判断是否已经结束 if (voucher.getEndTime().isBefore(LocalDateTime.now())) { return Result.fail(\\\"秒杀已经结束\\\"); } //4.判断是否还有库存 if (voucher.getStock()<1) { return Result.fail(\\\"库存不足\\\"); } //5.扣减库存 boolean update = seckillVoucherService.update().setSql(\\\"stock=stock-1\\\").eq(\\\"voucher_id\\\", voucherId).update(); if (!update){ return Result.fail(\\\"库存不足\\\"); } //6.生成订单 VoucherOrder voucherOrder = new VoucherOrder(); //订单id long orderId = redisIdWorker.nextId(\\\"order\\\"); //用户id Long userId = UserHolder.getUser().getId(); //优惠券id voucherOrder.setVoucherId(voucherId); voucherOrder.setUserId(userId); voucherOrder.setId(orderId); this.save(voucherOrder); //7.返回订单id return Result.ok(orderId); } \"]},\"766\":{\"h\":\"库存超卖问题\",\"t\":[\"多个线程相当于一起去扣减库存，此时就会出现库存的超卖问题。\",\"超卖问题是典型的多线程安全问题，针对这一问题的常见解决方案就是加锁： 悲观锁（Pessimistic Locking）、乐观锁（Optimistic Locking）、CAS（Compare-and-Swap）是并发控制机制，用于处理多个线程或进程同时访问共享资源的情况。它们的作用是确保数据的一致性和避免竞态条件（race conditions）。\"]},\"767\":{\"h\":\"悲观锁\",\"t\":[\"悲观锁的核心思想是在访问共享资源之前，先获取锁来阻止其他线程或进程的访问。\",\"当一个线程获取了悲观锁，其他线程必须等待，直到锁被释放。\",\"常见的实现方式包括数据库中的行级锁或表级锁，以及编程中的互斥锁（Mutex）。\",\"悲观锁通常会导致并发性能较差，因为它阻止了多个线程同时访问资源，可能会导致性能瓶颈。\"]},\"768\":{\"h\":\"乐观锁\",\"t\":[\"乐观锁的核心思想是假定在大多数情况下，共享资源的访问是不会发生冲突的。\",\"线程在读取数据时不会加锁，但在更新数据时会检查数据的版本号或标记。\",\"如果在更新时发现数据已经被其他线程修改，就会放弃本次更新，或者进行冲突解决操作。\",\"乐观锁通常用于减小锁的争用，提高并发性能。 乐观锁 版本号法：\"]},\"769\":{\"h\":\"CAS自旋锁\",\"t\":[\"CAS 是一种乐观锁的实现方式，它是一种原子操作，通常由硬件提供支持。\",\"CAS 操作包括三个参数：要更新的内存位置、预期值和新值。\",\"CAS 操作会比较内存位置的当前值和预期值，如果相符，则将新值写入内存位置；否则，操作失败。\",\"CAS 可用于实现乐观锁，通过原子比较和更新来确保在多线程环境下数据的一致性。 自旋锁实现： var5 是操作前读取的内存值，while中的var1+var2 是预估值，如果预估值 == 内存值，则代表中间没有被人修改过，此时就将新值去替换 内存值\",\"int var5; do { var5 = this.getIntVolatile(var1, var2); } while(!this.compareAndSwapInt(var1, var2, var5, var5 + var4)); return var5; \",\"用库存代替版本号，就实现了CAS自旋锁。 代码如下：\",\" //5.扣减库存 boolean update = seckillVoucherService.update() .setSql(\\\"stock=stock-1\\\") .eq(\\\"voucher_id\\\", voucherId).eq(\\\"stock\\\", voucher.getStock()) .update(); \",\"核心含义：只要我扣减库存时的库存和之前我查询到的库存是一样的，就意味着没有人在中间修改过库存，那么此时就是安全的，但是以上这种方式通过测试发现会有很多失败的情况，失败的原因在于：在使用乐观锁过程中假设100个线程同时都拿到了100的库存，然后大家一起去进行扣减，但是100个人中只有1个人能扣减成功，其他的人在处理时，他们在扣减时，库存已经被修改过了，所以此时其他线程都会失败 修改：\",\" boolean update = seckillVoucherService.update() .setSql(\\\"stock=stock-1\\\") .eq(\\\"voucher_id\\\", voucherId).gt(\\\"stock\\\", 0) .update(); \"]},\"770\":{\"h\":\"一人一单\",\"t\":[\"一个人只能抢购一个优惠卷\",\" // 一人一单 Long userId = UserHolder.getUser().getId(); int count = this.query().eq(\\\"user_id\\\", userId) .eq(\\\"voucher_id\\\", voucherId).count(); if (count > 0) { return Result.fail(\\\"您已经抢购过了\\\"); } \",\"但是这样还是会存在一个人买多个优惠券的情况 乐观锁适合用在更新数据的情况下面，这里是插入数据，考虑使用悲观锁\",\" @Transactional() public synchronized Result createVoucherOrder(Long voucherId) { // 一人一单 Long userId = UserHolder.getUser().getId(); int count = this.query().eq(\\\"user_id\\\", userId) .eq(\\\"voucher_id\\\", voucherId).count(); if (count > 0) { return Result.fail(\\\"您已经抢购过了\\\"); } //5.扣减库存 boolean update = seckillVoucherService.update() .setSql(\\\"stock=stock-1\\\") .eq(\\\"voucher_id\\\", voucherId).gt(\\\"stock\\\", 0) .update(); if (!update) { return Result.fail(\\\"库存不足\\\"); } //6.生成订单 VoucherOrder voucherOrder = new VoucherOrder(); //订单id long orderId = redisIdWorker.nextId(\\\"order\\\"); //优惠券id voucherOrder.setVoucherId(voucherId); voucherOrder.setUserId(userId); voucherOrder.setId(orderId); this.save(voucherOrder); //7.返回订单id return Result.ok(orderId); } \",\"但是如果按照上面 这种方式加锁，锁的力度太大了，因为如果锁的力度 太大，会导致每个线程进来都会锁住，所以我们需要去控制锁的力度，\",\"intern() 这个方法是从常量池中拿到数据，如果我们直接使用userId.toString() 他拿到的对象实际上是不同的对象，new 来的对象，我们使用锁必须保证锁必须是同一把，所以我们需要使用intern()方法\",\" @Transactional public Result createVoucherOrder(Long voucherId) { // 一人一单 Long userId = UserHolder.getUser().getId(); synchronized (userId.toString().intern()) { int count = this.query().eq(\\\"user_id\\\", userId) .eq(\\\"voucher_id\\\", voucherId).count(); if (count > 0) { return Result.fail(\\\"您已经抢购过了\\\"); } //5.扣减库存 boolean update = seckillVoucherService.update() .setSql(\\\"stock=stock-1\\\") .eq(\\\"voucher_id\\\", voucherId).gt(\\\"stock\\\", 0) .update(); if (!update) { return Result.fail(\\\"库存不足\\\"); } //6.生成订单 VoucherOrder voucherOrder = new VoucherOrder(); //订单id long orderId = redisIdWorker.nextId(\\\"order\\\"); //优惠券id voucherOrder.setVoucherId(voucherId); voucherOrder.setUserId(userId); voucherOrder.setId(orderId); this.save(voucherOrder); //7.返回订单id return Result.ok(orderId); } } \",\"以上代码还是存在问题，问题的原因在于当前方法被spring的事务控制，如果你在方法内部加锁，可能会导致当前方法事务还没有提交，但是锁已经释放也会导致问题，所以我们选择将当前方法整体包裹起来，确保事务不会出现问题：\",\" Long userId = UserHolder.getUser().getId(); synchronized (userId.toString().intern()) { return this.createVoucherOrder(voucherId); } \",\"但是以上做法依然有问题，因为你调用的方法，其实是this.的方式调用的，事务想要生效，还得利用代理来生效，所以这个地方，我们需要获得原始的事务对象， 来操作事务\",\"导入依赖：\",\" <dependency> <groupId>org.aspectj</groupId> <artifactId>aspectjweaver</artifactId> </dependency> \",\"开启：\",\"@MapperScan(\\\"com.hmdp.mapper\\\") @SpringBootApplication @EnableAspectJAutoProxy(exposeProxy = true) public class HmDianPingApplication { public static void main(String[] args) { SpringApplication.run(HmDianPingApplication.class, args); } } \",\"使用代理：\",\" Long userId = UserHolder.getUser().getId(); synchronized (userId.toString().intern()) { IVoucherOrderService proxy = (IVoucherOrderService) AopContext.currentProxy(); return proxy.createVoucherOrder(voucherId); } \"]},\"771\":{\"h\":\"集群并发\",\"t\":[\"复制一份配置 ，修改端口为8082: 修改VM参数\",\"-Dserver.port=8082 \",\"形成集群：\",\"修改 nginx配置如下 ：\",\"加载nginx配置\",\"nginx -s reload \",\"此时可以达到负载均衡的效果\",\"此时会发现在分布式情况下，依然会发生 并发问题，同一个人还是可以抢到两个优惠卷，因为synchronized是在两台不同的jvm里面，要解决这个问题，就需要用到分布式锁。\"]},\"772\":{\"c\":[\"项目实战\",\"黑马点评\"]},\"773\":{\"c\":[\"项目实战\",\"黑马点评\"]},\"774\":{\"h\":\"黑马点评4\"},\"775\":{\"h\":\"分布式锁\",\"t\":[\"分布式锁：满足分布式系统或集群模式下多进程可见并且互斥的锁。 分布式锁的核心思想就是让大家都使用同一把锁，只要大家使用的是同一把锁，那么我们就能锁住线程，不让线程进行，让程序串行执行，这就是分布式锁的核心思路 常见的分布式锁有三种 Mysql：mysql本身就带有锁机制，但是由于mysql性能本身一般，所以采用分布式锁的情况下，其实使用mysql作为分布式锁比较少 Redis：redis作为分布式锁是非常常见的一种使用方式，现在企业级开发中基本都使用redis或者zookeeper作为分布式锁，利用setnx这个方法，如果插入key成功，则表示获得到了锁，如果有人插入成功，其他人插入失败则表示无法获得到锁，利用这套逻辑来实现分布式锁 Zookeeper：zookeeper也是企业级开发中较好的一个实现分布式锁的方案。\"]},\"776\":{\"h\":\"实现思路\",\"t\":[\"获取锁： \",\"互斥：确保只能有一个线程获取锁\",\"非阻塞：尝试一次，成功返回true，失败返回false\",\"释放锁： \",\"手动释放\",\"超时释放：获取锁时添加一个超时时间\",\"setnx lock thread1 expire lock 5 \",\"有可能在执行完第一句话的时候，服务器挂了，过期时间就无法执行，造成死锁的情况，无法保证原子性，因此我们想要这两个操作同时执行\",\"可以使用 下面这种方式，过期时间ex 为10s:\",\"set lock thread ex 10 nx \"]},\"777\":{\"h\":\"实现分布式锁\",\"t\":[\"锁的基本接口：\",\"public interface ILock { /** * 尝试获取锁 * @param timeoutSec 超时时间，单位秒 过期自动释放锁 * @return true 获取成功，false 获取失败 */ boolean tryLock(long timeoutSec); /** * 释放锁 */ void unlock(); } \",\"实现类：\",\"public class SimpleRedisLock implements ILock { private String name; private StringRedisTemplate stringRedisTemplate; public SimpleRedisLock(String name, StringRedisTemplate stringRedisTemplate) { this.name = name; this.stringRedisTemplate = stringRedisTemplate; } public static final String KEY_PREFIX = \\\"lock:\\\"; @Override public boolean tryLock(long timeoutSec) { //获取当前线程的id long threadId = Thread.currentThread().getId(); Boolean success = stringRedisTemplate.opsForValue() .setIfAbsent(KEY_PREFIX + name, String.valueOf(threadId), timeoutSec, TimeUnit.SECONDS); return BooleanUtil.isTrue(success); } @Override public void unlock() { stringRedisTemplate.delete(KEY_PREFIX + name); } } \",\"修改业务代码： 原来有问题的代码：\",\" Long userId = UserHolder.getUser().getId(); synchronized (userId.toString().intern()) { IVoucherOrderService proxy = (IVoucherOrderService) AopContext.currentProxy(); return proxy.createVoucherOrder(voucherId); } \",\"修改如下 ：\",\" Long userId = UserHolder.getUser().getId(); SimpleRedisLock lock = new SimpleRedisLock(\\\"order:\\\" + userId, stringRedisTemplate); boolean isLock = lock.tryLock(5); if (!isLock) { //获取失败，返回错误或者 重试 return Result.fail(\\\"服务器繁忙\\\"); } try { IVoucherOrderService proxy = (IVoucherOrderService) AopContext.currentProxy(); return proxy.createVoucherOrder(voucherId); } finally { lock.unlock(); } \"]},\"778\":{\"h\":\"Redis分布式锁误删\",\"t\":[\"误删问题： 持有锁的线程在锁的内部出现了阻塞，导致他的锁自动释放，这时其他线程，线程2来尝试获得锁，就拿到了这把锁，然后线程2在持有锁执行过程中，线程1反应过来，继续执行，而线程1执行过程中，走到了删除锁逻辑，此时就会把本应该属于线程2的锁进行删除，这就是误删别人锁的情况说明 解决方案： 解决方案就是在每个线程释放锁的时候，去判断一下当前这把锁是否属于自己，如果属于自己，则不进行锁的删除，假设还是上边的情况，线程1卡顿，锁自动释放，线程2进入到锁的内部执行逻辑，此时线程1反应过来，然后删除锁，但是线程1，一看当前这把锁不是属于自己，于是不进行删除锁逻辑，当线程2走到删除锁逻辑时，如果没有卡过自动释放锁的时间点，则判断当前这把锁是属于自己的，于是删除这把锁。\",\"解决： 在获取锁时存入线程标示（可以用UUID表示） 在释放锁时先获取锁中的线程标示，判断是否与当前线程标示一致\",\"代码：\",\" public static final String KEY_PREFIX = \\\"lock:\\\"; public static final String ID_PREFIX = UUID.randomUUID().toString(true) + \\\"-\\\"; @Override public boolean tryLock(long timeoutSec) { //获取当前线程的id String threadId = ID_PREFIX + Thread.currentThread().getId(); Boolean success = stringRedisTemplate.opsForValue() .setIfAbsent(KEY_PREFIX + name, String.valueOf(threadId), timeoutSec, TimeUnit.SECONDS); return BooleanUtil.isTrue(success); } @Override public void unlock() { //获取当前线程的id String threadId = ID_PREFIX + Thread.currentThread().getId(); //获取锁的值 String id = stringRedisTemplate.opsForValue().get(KEY_PREFIX + name); if (threadId.equals(id)) { //一致，说明是当前线程的锁，删除 stringRedisTemplate.delete(KEY_PREFIX + name); } } \"]},\"779\":{\"h\":\"分布式锁原子性问题\",\"t\":[\"线程1现在持有锁之后，在执行业务逻辑过程中，他正准备删除锁，而且已经走到了条件判断的过程中，比如他已经拿到了当前这把锁确实是属于他自己的，正准备删除锁，但是此时他的锁到期了，那么此时线程2进来，但是线程1他会接着往后执行，当他卡顿结束后，他直接就会执行删除锁那行代码，相当于条件判断并没有起到作用，这就是删锁时的原子性问题，之所以有这个问题，是因为线程1的拿锁，比锁，删锁，实际上并不是原子性的，我们要防止刚才的情况发生，\"]},\"780\":{\"h\":\"Lua脚本解决多条命令原子性问题\",\"t\":[\"lua脚本可以编写多条redis命令，确保多条命令执行时的原子性. 调用函数\",\"redis.call(\\\"命令名称 \\\",\\\"key\\\",\\\"其他参数 \\\") \",\"例如：\",\"-- 执行set name jack redis.call(\\\"set\\\",\\\"name\\\",\\\"jack\\\") \",\"先执行set name Rose，再执行get name，则脚本如下：\",\"--先执行set name Rose，再执行get name，则脚本如下： redis.call(\\\"set\\\",\\\"name\\\",\\\"Rose\\\") local name = redis.call(\\\"get\\\", \\\"name\\\") return name \",\"释放锁的业务流程: 1、获取锁中的线程标示 2、判断是否与指定的标示（当前线程标示）一致 3、如果一致则释放锁（删除） 4、如果不一致则什么都不做\",\"Lua脚本如下：\",\"if (redis.call('GET', KEYS[1]) == ARGV[1]) then -- 一致，则删除锁 return redis.call('DEL', KEYS[1]) end -- 不一致，则直接返回 return 0 \",\"代码：\",\" private static final DefaultRedisScript<Long> UNLOCK_SCRIPT; static { UNLOCK_SCRIPT = new DefaultRedisScript<>(); UNLOCK_SCRIPT.setLocation(new ClassPathResource(\\\"unlock.lua\\\")); UNLOCK_SCRIPT.setResultType(Long.class); } @Override public void unlock() { //调用lua脚本 stringRedisTemplate.execute( UNLOCK_SCRIPT, Collections.singletonList(KEY_PREFIX + name), ID_PREFIX + Thread.currentThread().getId()); } \"]},\"781\":{\"h\":\"分布式锁Redission\",\"t\":[\"Redisson是一个在Redis的基础上实现的Java驻内存数据网格。它不仅提供了一系列的分布式的Java常用对象，还提供了许多分布式服务，其中就包含了各种分布式锁的实现。\",\"添加依赖：\",\" <dependency> <groupId>org.redisson</groupId> <artifactId>redisson</artifactId> <version>3.24.2</version> </dependency> \",\"配置客户端：\",\"@Configuration public class RedissonConfig { @Bean public RedissonClient redissonClient() { Config config = new Config(); config.useSingleServer() .setAddress(\\\"redis://localhost:6379\\\") .setPassword(\\\"123456\\\"); return Redisson.create(config); } } \",\"一般的使用步骤：\",\"@Resource private RedissionClient redissonClient; @Test void testRedisson() throws Exception{ //获取锁(可重入)，指定锁的名称 RLock lock = redissonClient.getLock(\\\"anyLock\\\"); //尝试获取锁，参数分别是：获取锁的最大等待时间(期间会重试)，锁自动释放时间，时间单位 boolean isLock = lock.tryLock(1,10,TimeUnit.SECONDS); //判断获取锁成功 if(isLock){ try{ System.out.println(\\\"执行业务\\\"); }finally{ //释放锁 lock.unlock(); } } } \",\"修改原来的代码：\",\"// SimpleRedisLock lock = new SimpleRedisLock(\\\"order:\\\" + userId, stringRedisTemplate); RLock lock = redissonClient.getLock(\\\"lock:order:\\\" + userId); boolean isLock = lock.tryLock(); \"]},\"782\":{\"h\":\"分布式锁-redission可重入锁原理\",\"t\":[\"在Lock锁中，他是借助于底层的一个voaltile的一个state变量来记录重入的状态的，比如当前没有人持有这把锁，那么state=0，假如有人持有这把锁，那么state=1，如果持有这把锁的人再次持有这把锁，那么state就会+1 ，在Java的内建锁（synchronized）中，重入锁的状态通常由一个count变量来表示，每次锁被获得时，count会增加1，每次锁被释放时，count会减少1。当count减少到0时，表示没有线程持有锁。这样，同一个线程可以多次获得锁，而不会导致死锁。\",\"在Redisson中，可重入锁是通过在Redis上使用特定的数据结构和Lua脚本来实现的。\",\"local lockExists = redis.call(\\\"exists\\\", KEYS[1]) -- 检查锁是否存在 if lockExists == 0 then redis.call(\\\"hset\\\", KEYS[1], ARGV[1], 1) -- 锁不存在，创建锁，并将拥有者设置为1 redis.call(\\\"pexpire\\\", KEYS[1], ARGV[2]) -- 设置锁的过期时间 return 1 -- 返回1表示成功获取锁 end local lockOwner = redis.call(\\\"hget\\\", KEYS[1], ARGV[1]) -- 获取锁的拥有者 if lockOwner == false then redis.call(\\\"hset\\\", KEYS[1], ARGV[1], 1) -- 拥有者不存在，创建锁，并将拥有者设置为1 redis.call(\\\"pexpire\\\", KEYS[1], ARGV[2]) -- 设置锁的过期时间 return 1 -- 返回1表示成功获取锁 end if lockOwner == ARGV[1] then local counter = redis.call(\\\"hincrby\\\", KEYS[1], ARGV[1], 1) -- 拥有者是当前线程，增加拥有次数 redis.call(\\\"pexpire\\\", KEYS[1], ARGV[2]) -- 更新锁的过期时间 return counter -- 返回拥有次数 end return 0 -- 返回0表示获取锁失败 \",\"这个Lua脚本的作用是：\",\"首先检查大键表示的锁是否存在。如果锁不存在，则创建锁，并将小键表示的拥有者设置为1，并为锁设置过期时间。返回1表示成功获取锁。\",\"如果锁存在，再检查小键表示的锁的拥有者是不是当前线程（线程标识通过ARGV[1]传递）。如果是当前线程，增加拥有次数，并更新锁的过期时间。返回拥有次数。\",\"如果锁已经被其他线程拥有，返回0表示获取锁失败。\",\"Redission锁重试机制 Redisson提供了重试机制来处理获取分布式锁时的竞争条件。这个机制可以用于在获取锁失败时，尝试多次获取锁，以减少竞争。 Redission的锁重试机制是通过org.redisson.RedissonRedLock类中的tryLockInner方法实现的。这个方法是RedLock分布式锁的内部实现，它通过Lua脚本与Redis服务器交互以获取锁。\",\"查找tryLockInner方法：在Redission的源码中，可以找到RedissonRedLock类，然后查找tryLockInner方法。这个方法是用来尝试获取锁的核心逻辑。\",\"Lua脚本：在tryLockInner方法中，使用Lua脚本来与Redis服务器进行交互。这个Lua脚本实现了锁的获取逻辑，包括了锁的存在检查、锁的创建、锁的续约等等。\",\"重试机制：在获取锁的过程中，看到有关重试的逻辑。这包括了重试次数和重试间隔的控制，通常使用retryAttempts和retryInterval参数来配置。\",\"锁的状态：在锁的重试机制中，可能需要跟踪锁的状态，以确定是否已经成功获取锁。你会看到一些变量或标志来表示锁的状态。\",\"超时处理：还会有关于等待锁的超时时间处理，如果等待超过一定时间仍然无法获取锁，会抛出异常。\",\"与Redis交互：Redission通过Redisson客户端与Redis服务器进行交互，一些Redis命令的调用，如set、eval等，用来实现锁的获取和续约。\",\"看门狗机制： 在分布式系统和分布式锁中，\\\"看门狗\\\"（也称为\\\"锁的续租\\\"或\\\"锁的续约\\\"机制）是一种用于确保锁的有效性和持续性的机制。这个机制的目的是防止因为锁持有者在持有锁期间发生故障或长时间处理任务而导致锁无法释放的情况。 看门狗机制的基本工作方式如下：\",\"当一个线程成功获取锁时，它会同时启动一个定时器或计时器，设置一个锁的持续时间。这个持续时间通常是一个较短的时间段，比如锁的过期时间的一半。\",\"在锁的持续时间内，锁的拥有者需要周期性地“喂狗”，也就是不断重置或续租锁的持续时间。这通常是通过向锁存储中更新锁的时间戳或其他信息来实现的。\",\"如果锁的拥有者在持续时间内没有续租锁，比如因为线程崩溃或异常退出，那么锁将自动过期，其他线程将有机会尝试获取锁。 看门狗机制的好处在于它能够防止锁被永久地占用。即使锁的拥有者在某些情况下无法释放锁，也会在锁的持续时间过期后，使其他线程有机会获取锁，避免了死锁或长时间阻塞的情况。 Redisson等一些分布式锁实现库使用了看门狗机制来支持锁的续租。通过定期续租锁，可以确保锁不会因为拥有者的故障而永久丧失。如果锁的拥有者能够定期执行续租操作，锁可以一直保持有效。如果锁的拥有者无法续租，锁将在过期时间后自动释放，从而确保其他线程有机会获取锁。 原理图如下：\"]},\"783\":{\"h\":\"redission锁的MutiLock原理\",\"t\":[\"为了提高redis的可用性，我们会搭建集群或者主从，现在以主从为例 此时我们去写命令，写在主机上， 主机会将数据同步给从机，但是假设在主机还没有来得及把数据写入到从机去的时候，此时主机宕机，哨兵会发现主机宕机，并且选举一个slave变成master，而此时新的master中实际上并没有锁信息，此时锁信息就已经丢掉了。\",\"为了解决这个问题，redission提出来了MutiLock锁，使用这把锁咱们就不使用主从了，每个节点的地位都是一样的， 这把锁加锁的逻辑需要写入到每一个主丛节点上，只有所有的服务器都写入成功，此时才是加锁成功，假设现在某个节点挂了，那么他去获得锁的时候，只要有一个节点拿不到，都不能算是加锁成功，就保证了加锁的可靠性。\"]},\"784\":{\"c\":[\"项目实战\",\"黑马点评\"]},\"785\":{\"c\":[\"项目实战\",\"黑马点评\"]},\"786\":{\"h\":\"黑马点评5\"},\"787\":{\"h\":\"秒杀优化\"},\"788\":{\"h\":\"用户模拟\",\"t\":[\"模拟1000个用户同时发送请求，也就是需要使用jmeter进行压力测试，需要编写代码获取1000个用户的token\",\"生成1000个登录用户并生成token\",\" @SpringBootTest class HmDianPingApplicationTests { @Resource private StringRedisTemplate stringRedisTemplate; @Resource private IUserService userService; @Test @Transactional public void insertUser() { final String filePath = \\\"src/main/resources/user.txt\\\"; final int count = 1000; BufferedWriter writer; try { writer = new BufferedWriter(new FileWriter(filePath)); for (int i = 0; i < count; i++) { String phone = \\\"13\\\" + RandomUtil.randomNumbers(9); String token = this.login(phone); writer.write(token); writer.newLine(); } writer.close(); } catch (IOException e) { throw new RuntimeException(e); } finally { System.out.println(\\\"生成用户token完毕\\\"); } } public String login(String phone) { User user = new User(); user.setPhone(phone); user.setNickName(USER_NICK_NAME_PREFIX + RandomUtil.randomString(10)); userService.save(user); //生成token String token = UUID.randomUUID().toString(); //将User对象转为HashMap存储 UserDTO userDTO = BeanUtil.copyProperties(user, UserDTO.class); Map<String, Object> userMap = BeanUtil.beanToMap(userDTO, new HashMap<>(), CopyOptions.create() .setIgnoreNullValue(true) .setFieldValueEditor((fieldName, fieldvalue) -> fieldvalue.toString()) ); //存储 String tokenKey = LOGIN_USER_KEY + token; stringRedisTemplate.opsForHash().putAll(tokenKey, userMap); //设置有效期 stringRedisTemplate.expire(tokenKey, LOGIN_USER_TTL, TimeUnit.MINUTES); return token; } } \",\"jmeter设置：\",\"设置请求：\",\"设置token\",\"这里指定刚才生成token的位置 测试得到结果：\"]},\"789\":{\"h\":\"Redis优化秒杀\",\"t\":[\"我们将耗时比较短的逻辑判断放入到redis中，比如是否库存足够，比如是否一人一单，这样的操作，只要这种逻辑可以完成，就意味着我们是一定可以下单完成的，我们只需要进行快速的逻辑判断，根本就不用等下单逻辑走完，我们直接给用户返回成功， 再在后台开一个线程，后台线程慢慢的去执行queue里边的消息。\",\"当用户下单之后，判断库存是否充足只需要导redis中去根据key找对应的value是否大于0即可，如果不充足，则直接结束，如果充足，继续在redis中判断用户是否可以下单，如果set集合中没有这条数据，说明他可以下单，如果set集合中没有这条记录，则将userId和优惠卷存入到redis中，并且返回0，整个过程需要保证是原子性的，我们可以使用lua来操作 当以上判断逻辑走完之后，我们可以判断当前redis中返回的结果是否是0 ，如果是0，则表示可以下单，则将之前说的信息存入到到queue中去，然后返回，然后再来个线程异步的下单，前端可以通过返回的订单id来判断是否下单成功。\",\"需求：\",\"新增秒杀优惠券的同时，将优惠券信息保存到Redis中\",\"基于Lua脚本，判断秒杀库存、一人一单，决定用户是否抢购成功\",\"如果抢购成功，将优惠券id和用户id封装后存入阻塞队列\",\"开启线程任务，不断从阻塞队列中获取信息，实现异步下单功能\",\"新增秒杀券的时候保存到redis中\",\" @Override @Transactional public void addSeckillVoucher(Voucher voucher) { // 保存优惠券 save(voucher); // 保存秒杀信息 SeckillVoucher seckillVoucher = new SeckillVoucher(); seckillVoucher.setVoucherId(voucher.getId()); seckillVoucher.setStock(voucher.getStock()); seckillVoucher.setBeginTime(voucher.getBeginTime()); seckillVoucher.setEndTime(voucher.getEndTime()); seckillVoucherService.save(seckillVoucher); //保存秒杀到redis stringRedisTemplate.opsForValue().set(SECKILL_STOCK_KEY + voucher.getId(), voucher.getStock().toString()); } \",\"创建lua脚本\",\"--1.参数列表 --优惠卷id local voucherId = ARGV[1] --用户id local userId = ARGV[2] --数据库key --库存key local stockKey = \\\"seckill:stock:\\\" .. voucherId --订单key local orderKey = \\\"seckill:order:\\\" .. voucherId --业务脚本 --判断库存是否充足 if tonumber(redis.call('get', stockKey)) <= 0 then --库存 不足 return 1 end --判断用户是否下单 if (redis.call(\\\"sismember\\\", orderKey, userId) == 1) then --存在，说明是重复下单 return 2 end --扣库存 redis.call('incrby', stockKey, -1) --下单，保存用户 redis.call('sadd', orderKey, userId) return 0 \",\"初步修改抢优惠券 逻辑：\",\" private static final DefaultRedisScript<Long> SECKILL_SCRIPT; static { SECKILL_SCRIPT = new DefaultRedisScript<>(); SECKILL_SCRIPT.setLocation(new ClassPathResource(\\\"seckill.lua\\\")); SECKILL_SCRIPT.setResultType(Long.class); } @Override public Result seckillVoucher(Long voucherId) { //执行lua脚本,得到购买资格 Long userId = UserHolder.getUser().getId(); Long result = stringRedisTemplate.execute(SECKILL_SCRIPT, Collections.emptyList(), voucherId.toString(), userId.toString()); //判断结果是否为0 int r = result.intValue(); //0，没有购买资格 if (r != 0) { return Result.fail((r == 1) ? \\\"库存不足 \\\" : \\\"不能重复下单\\\"); } //1，有购买资格，生成订单，保存到阻塞队列 long orderId = redisIdWorker.nextId(\\\"order\\\"); //返回订单id return Result.ok(orderId); } \"]},\"790\":{\"h\":\"使用阻塞队列优化秒杀\",\"t\":[\" private BlockingQueue<VoucherOrder> orderTasks = new ArrayBlockingQueue<>(1024 * 1024); private static final ExecutorService SECKILL_ORDER_EXECUTOR = Executors.newSingleThreadExecutor(); @PostConstruct private void init() { SECKILL_ORDER_EXECUTOR.submit(new VoucherOrderHandler()); } private class VoucherOrderHandler implements Runnable { @Override public void run() { while (true) { try { VoucherOrder voucherOrder = orderTasks.take(); //6.生成订单 handleVoucherOrder(voucherOrder); } catch (Exception e) { e.printStackTrace(); } } } } IVoucherOrderService proxy; private void handleVoucherOrder(VoucherOrder voucherOrder) { // SimpleRedisLock lock = new SimpleRedisLock(\\\"order:\\\" + userId, stringRedisTemplate); Long userId = voucherOrder.getUserId(); RLock lock = redissonClient.getLock(\\\"lock:order:\\\" + userId); boolean isLock = lock.tryLock(); if (!isLock) { //获取失败，返回错误或者 重试 log.error(\\\"获取锁失败，用户id：{}\\\", userId); return; } try { proxy.createVoucherOrder(voucherOrder); } finally { lock.unlock(); } } \",\"创建订单：\",\" @Override @Transactional public void createVoucherOrder(VoucherOrder voucherOrder) { // 一人一单 Long userId = voucherOrder.getUserId(); int count = this.query().eq(\\\"user_id\\\", userId) .eq(\\\"voucher_id\\\", voucherOrder.getVoucherId()).count(); if (count > 0) { log.error(\\\"用户已经抢购过了，用户id：{}\\\", userId); return; } //5.扣减库存 boolean update = seckillVoucherService.update() .setSql(\\\"stock=stock-1\\\") .eq(\\\"voucher_id\\\", voucherOrder.getVoucherId()) .gt(\\\"stock\\\", 0) .update(); if (!update) { //扣减失败 log.error(\\\"扣减库存失败，用户id：{}\\\", userId); return; } //创建订单 this.save(voucherOrder); } \",\" @Override public Result seckillVoucher(Long voucherId) { //执行lua脚本,得到购买资格 Long userId = UserHolder.getUser().getId(); Long result = stringRedisTemplate.execute(SECKILL_SCRIPT, Collections.emptyList(), voucherId.toString(), userId.toString()); //判断结果是否为0 int r = result.intValue(); //0，没有购买资格 if (r != 0) { return Result.fail((r == 1) ? \\\"库存不足 \\\" : \\\"不能重复下单\\\"); } //1，有购买资格，生成订单，保存到阻塞队列 long orderId = redisIdWorker.nextId(\\\"order\\\"); VoucherOrder voucherOrder = new VoucherOrder(); voucherOrder.setId(orderId); voucherOrder.setUserId(userId); voucherOrder.setVoucherId(voucherId); //放到阻塞队列中 orderTasks.add(voucherOrder); proxy = (IVoucherOrderService) AopContext.currentProxy(); //返回订单id return Result.ok(orderId); } \"]},\"791\":{\"h\":\"使用Redis消息队列\",\"t\":[\"什么是消息队列：字面意思就是存放消息的队列。最简单的消息队列模型包括3个角色：\",\"消息队列：存储和管理消息，也被称为消息代理（Message Broker）\",\"生产者：发送消息到消息队列\",\"消费者：从消息队列获取消息并处理消息\",\"也可以使用kafka，rabbitmq等等\"]},\"792\":{\"h\":\"基于List实现消息队列\",\"t\":[\"Redis的list数据结构是一个双向链表，很容易模拟出队列效果。 两种用法：\",\"LPUSH 结合 RPOP\",\"RPUSH 结合 LPOP来实现。 要注意的是，当队列中没有消息时RPOP或LPOP操作会返回null，并不像JVM的阻塞队列那样会阻塞并等待消息。因此这里应该使用BRPOP或者BLPOP来实现阻塞效果。 优点：\",\"利用Redis存储，不受限于JVM内存上限\",\"基于Redis的持久化机制，数据安全性有保证\",\"可以满足消息有序性 缺点：\",\"无法避免消息丢失\",\"只支持单消费者\"]},\"793\":{\"h\":\"基于PubSub顶消息队列\",\"t\":[\"PubSub（发布订阅）是Redis2.0版本引入的消息传递模型。顾名思义，消费者可以订阅一个或多个channel，生产者向对应channel发送消息后，所有订阅者都能收到相关消息。\",\"SUBSCRIBE channel [channel] ：订阅一个或多个频道 PUBLISH channel msg ：向一个频道发送消息PSUBSCRIBE pattern[pattern]：订阅与pattern格式匹配的所有频道\",\"优点：\",\"采用发布订阅模型，支持多生产、多消费 缺点：\",\"不支持数据持久化\",\"无法避免消息丢失\",\"消息堆积有上限，超出时数据丢失\"]},\"794\":{\"h\":\"基于Stream的消息队列\",\"t\":[\"发送消息： 创建消息队列users，发送消息name=jack,age=18,redis会自动生成ID\",\"xadd users * name jack age 18 \",\"读消息： 读第一个消息\",\"xread count 1 streams users 0 \",\"XREAD阻塞方式，读取最新的消息：\",\"xread count 1 block 1000 streams users $ \",\"STREAM类型消息队列的XREAD命令特点：\",\"消息可回溯\",\"一个消息可以被多个消费者读取\",\"可以阻塞读取\",\"有消息漏读的风险\"]},\"795\":{\"h\":\"基于Stream的消息队列-消费者组\",\"t\":[\"消费者组（Consumer Group）：将多个消费者划分到一个组中，监听同一个队列。具备下列特点：删除指定的消费者组XGROUP DESTORY key groupName给指定的消费者组添加消费者 XGROUP CREATECONSUMER key groupname consumername删除消费者组中的指定消费者 XGROUP DELCONSUMER key groupname consumername从消费者组读取消息： XREADGROUP GROUP group consumer [COUNT count] [BLOCK milliseconds] [NOACK] STREAMS key [key ...] ID [ID ...]\",\"group：消费组名称\",\"consumer：消费者名称，如果消费者不存在，会自动创建一个消费者\",\"count：本次查询的最大数量\",\"BLOCK milliseconds：当没有消息时最长等待时间\",\"NOACK：无需手动ACK，获取到消息后自动确认\",\"STREAMS key：指定队列名称\",\"ID：获取消息的起始ID： 对比：\"]},\"796\":{\"h\":\"使用Stream\",\"t\":[\"需求\",\"创建一个Stream类型的消息队列，名为stream.orders\",\"修改之前的秒杀下单Lua脚本，在认定有抢购资格后，直接向stream.orders中添加消息，内容包含voucherId、userId、orderId\",\"项目启动时，开启一个线程任务，尝试获取stream.orders中的消息，完成下单\",\"修改lua脚本：\",\"--1.参数列表 --优惠卷id local voucherId = ARGV[1] --用户id local userId = ARGV[2] --订单id local orderId = ARGV[3] --数据库key --库存key local stockKey = \\\"seckill:stock:\\\" .. voucherId --订单key local orderKey = \\\"seckill:order:\\\" .. voucherId --业务脚本 --判断库存是否充足 if tonumber(redis.call('get', stockKey)) <= 0 then --库存 不足 return 1 end --判断用户是否下单 if (redis.call(\\\"sismember\\\", orderKey, userId) == 1) then --存在，说明是重复下单 return 2 end --扣库存 redis.call('incrby', stockKey, -1) --下单，保存用户 redis.call('sadd', orderKey, userId) --发送消息到队列中 xadd stream.orders * k1 v1 k2 v2 redis.call('xadd', 'stream.orders', '*', 'userId', userId, 'voucherId', voucherId, 'id', orderId) return 0 \",\"发送消息\",\" @Override public Result seckillVoucher(Long voucherId) { //执行lua脚本,得到购买资格 Long userId = UserHolder.getUser().getId(); long orderId = redisIdWorker.nextId(\\\"order\\\"); Long result = stringRedisTemplate.execute(SECKILL_SCRIPT, Collections.emptyList(), voucherId.toString(), userId.toString(), String.valueOf(orderId)); //判断结果是否为0 int r = result.intValue(); //0，没有购买资格 if (r != 0) { return Result.fail((r == 1) ? \\\"库存不足 \\\" : \\\"不能重复下单\\\"); } //1，有购买资格，生成订单，保存到阻塞队列 VoucherOrder voucherOrder = new VoucherOrder(); voucherOrder.setId(orderId); voucherOrder.setUserId(userId); voucherOrder.setVoucherId(voucherId); //放到阻塞队列中 orderTasks.add(voucherOrder); proxy = (IVoucherOrderService) AopContext.currentProxy(); //返回订单id return Result.ok(orderId); } \",\"修改后业务：\",\"private class VoucherOrderHandler implements Runnable { final String queueName = \\\"stream.orders\\\"; @Override public void run() { while (true) { try { //获取 消息队列中的订单信息 xreadgroup group g1 c1 count 1 block 2000 streams streams.order > List<MapRecord<String, Object, Object>> list = stringRedisTemplate.opsForStream().read( Consumer.from(\\\"g1\\\", \\\"c1\\\"), StreamReadOptions.empty().count(1).block(Duration.ofSeconds(2)), StreamOffset.create(queueName, ReadOffset.lastConsumed()) ); //判断是否获取成功 if (list == null || list.isEmpty()) { //失败，重试 continue; } //解析消息 MapRecord<String, Object, Object> record = list.get(0); Map<Object, Object> value = record.getValue(); VoucherOrder voucherOrder = BeanUtil.fillBeanWithMap(value, new VoucherOrder(), true); //成功，生成订单 handleVoucherOrder(voucherOrder); //ACK确认 sack stream.orders g1 id stringRedisTemplate.opsForStream().acknowledge(queueName, \\\"g1\\\", record.getId()); } catch (Exception e) { log.error(\\\"处理订单失败\\\", e); handlePendingList(); } } } private void handlePendingList() { while (true) { try { //获取 消息队列中的订单信息 xreadgroup group g1 c1 count 1 block 2000 streams streams.order > List<MapRecord<String, Object, Object>> list = stringRedisTemplate.opsForStream().read( Consumer.from(\\\"g1\\\", \\\"c1\\\"), StreamReadOptions.empty().count(1), StreamOffset.create(queueName, ReadOffset.from(\\\"0\\\")) ); //判断是否获取成功 if (list == null || list.isEmpty()) { //失败，结束 break; } //解析消息 MapRecord<String, Object, Object> record = list.get(0); Map<Object, Object> value = record.getValue(); VoucherOrder voucherOrder = BeanUtil.fillBeanWithMap(value, new VoucherOrder(), true); //成功，生成订单 handleVoucherOrder(voucherOrder); //ACK确认 sack stream.orders g1 id stringRedisTemplate.opsForStream().acknowledge(queueName, \\\"g1\\\", record.getId()); } catch (Exception e) { log.error(\\\"处理pendinglist异常\\\", e); } } } } \"]},\"797\":{\"c\":[\"项目实战\",\"黑马点评\"]},\"798\":{\"c\":[\"项目实战\",\"黑马点评\"]},\"799\":{\"h\":\"黑马点评6\"},\"800\":{\"h\":\"达人探店\"},\"801\":{\"h\":\"发布探店笔记\",\"t\":[\"tb_blog表 ：\",\"create table tb_blog ( id bigint unsigned auto_increment comment '主键' primary key, shop_id bigint not null comment '商户id', user_id bigint unsigned not null comment '用户id', title varchar(255) collate utf8mb4_unicode_ci not null comment '标题', images varchar(2048) not null comment '探店的照片，最多9张，多张以\\\",\\\"隔开', content varchar(2048) collate utf8mb4_unicode_ci not null comment '探店的文字描述', liked int unsigned default '0' null comment '点赞数量', comments int unsigned null comment '评论数量', create_time timestamp default CURRENT_TIMESTAMP not null comment '创建时间', update_time timestamp default CURRENT_TIMESTAMP not null on update CURRENT_TIMESTAMP comment '更新时间' ) collate = utf8mb4_general_ci row_format = COMPACT; \",\"tb_blog_comments表：\",\"create table tb_blog_comments ( id bigint unsigned auto_increment comment '主键' primary key, user_id bigint unsigned not null comment '用户id', blog_id bigint unsigned not null comment '探店id', parent_id bigint unsigned not null comment '关联的1级评论id，如果是一级评论，则值为0', answer_id bigint unsigned not null comment '回复的评论id', content varchar(255) not null comment '回复的内容', liked int unsigned null comment '点赞数', status tinyint unsigned null comment '状态，0：正常，1：被举报，2：禁止查看', create_time timestamp default CURRENT_TIMESTAMP not null comment '创建时间', update_time timestamp default CURRENT_TIMESTAMP not null on update CURRENT_TIMESTAMP comment '更新时间' ) collate = utf8mb4_general_ci row_format = COMPACT; \",\"上传文件接口：\",\" @PostMapping(\\\"blog\\\") public Result uploadImage(@RequestParam(\\\"file\\\") MultipartFile image) { try { // 获取原始文件名称 String originalFilename = image.getOriginalFilename(); // 生成新文件名 String fileName = createNewFileName(originalFilename); // 保存文件 image.transferTo(new File(SystemConstants.IMAGE_UPLOAD_DIR, fileName)); // 返回结果 log.debug(\\\"文件上传成功，{}\\\", fileName); return Result.ok(fileName); } catch (IOException e) { throw new RuntimeException(\\\"文件上传失败\\\", e); } } \",\"修改路径为 自己的nginx前端里面的img目录：\",\"public static final String IMAGE_UPLOAD_DIR = \\\"/opt/homebrew/var/www/hmdp/imgs/\\\"; \",\"发布博客 ：\",\" @PostMapping public Result saveBlog(@RequestBody Blog blog) { // 获取登录用户 UserDTO user = UserHolder.getUser(); blog.setUserId(user.getId()); // 保存探店博文 blogService.save(blog); // 返回id return Result.ok(blog.getId()); } \"]},\"802\":{\"h\":\"查看探店笔记\",\"t\":[\"控制器 ：\",\" @GetMapping(\\\"/{id}\\\") public Result queryBlogById(@PathVariable(\\\"id\\\") Long id) { return blogService.queryBlogById(id); } \",\"实现类 ：\",\" @Override public Result queryBlogById(Long id) { // 根据id查询 Blog blog = this.getById(id); if (blog == null) { return Result.fail(\\\"博文不存在\\\"); } // 查询用户 queryBlogUser(blog); return Result.ok(blog); } private void queryBlogUser(Blog blog) { Long userId = blog.getUserId(); User user = userService.getById(userId); blog.setName(user.getNickName()); blog.setIcon(user.getIcon()); } \"]},\"803\":{\"h\":\"点赞功能\",\"t\":[\"需求：\",\"同一个用户只能点赞一次，再次点击则取消点赞\",\"如果当前用户已经点赞，则点赞按钮高亮显示（前端已实现，判断字段Blog类的isLike属性） 实现步骤：\",\"给Blog类中添加一个isLike字段，标示是否被当前用户点赞\",\"修改点赞功能，利用Redis的set集合判断是否点赞过，未点赞过则点赞数+1，已点赞过则点赞数-1\",\"修改根据id查询Blog的业务，判断当前登录用户是否点赞过，赋值给isLike字段\",\"修改分页查询Blog业务，判断当前登录用户是否点赞过，赋值给isLike字段\",\"给Blog添加字段：\",\" /** * 是否点赞过了 */ @TableField(exist = false) private Boolean isLike; \",\"修改业务代码：\",\" @Override public Result likeBlog(Long id) { //判断当前用户 是否已经点赞 Long userId = UserHolder.getUser().getId(); String key = BLOG_LIKED_KEY + id; Boolean isMember = stringRedisTemplate.opsForSet().isMember(key, userId.toString()); if (BooleanUtil.isFalse(isMember)) { //没有点赞 ，点赞数+1 ，保存到redis boolean isSuccess = this.update().setSql(\\\"like=like+1\\\").eq(\\\"id\\\", id).update(); if (isSuccess) { stringRedisTemplate.opsForSet().add(key, userId.toString()); } } else { //已经点赞，点赞数-1 ，从redis删除 boolean isSuccess = this.update().setSql(\\\"like=like-1\\\").eq(\\\"id\\\", id).update(); if (isSuccess) { stringRedisTemplate.opsForSet().remove(key, userId.toString()); } } return Result.ok(); } \",\"修改关于博客是否被当前用户点赞：\",\" @Override public Result queryBlogById(Long id) { // 根据id查询 Blog blog = this.getById(id); if (blog == null) { return Result.fail(\\\"博文不存在\\\"); } // 查询用户 queryBlogUser(blog); isBlogLiked(blog); return Result.ok(blog); } private void isBlogLiked(Blog blog) { Long userId = UserHolder.getUser().getId(); String key = BLOG_LIKED_KEY + blog.getId(); Boolean isMember = stringRedisTemplate.opsForSet().isMember(key, userId.toString()); blog.setIsLike(BooleanUtil.isTrue(isMember)); } @Override public Result queryHotBlog(Integer current) { // 根据用户查询 Page<Blog> page = this.query() .orderByDesc(\\\"liked\\\") .page(new Page<>(current, SystemConstants.MAX_PAGE_SIZE)); // 获取当前页数据 List<Blog> records = page.getRecords(); // 查询用户 records.forEach(blog -> { this.isBlogLiked(blog); this.queryBlogUser(blog); }); return Result.ok(records); } \"]},\"804\":{\"h\":\"点赞排行榜\",\"t\":[\"在探店笔记的详情页面，应该把给该笔记点赞的人显示出来，比如最早点赞的TOP5，形成点赞排行榜： 之前的点赞是放到set集合，但是set集合是不能排序的，所以这个时候，咱们可以采用一个可以排序的set集合，就是咱们的sortedSet ⚠️upload failed, check dev console\",\"修改likeblogs\",\" @Override public Result likeBlog(Long id) { //判断当前用户 是否已经点赞 Long userId = UserHolder.getUser().getId(); String key = BLOG_LIKED_KEY + id; Double isMember = stringRedisTemplate.opsForZSet().score(key, userId.toString()); if (isMember == null) { //没有点赞 ，点赞数+1 ，保存到redis boolean isSuccess = this.update().setSql(\\\"liked=liked+1\\\").eq(\\\"id\\\", id).update(); //zadd key value score if (isSuccess) { stringRedisTemplate.opsForZSet().add(key, userId.toString(), System.currentTimeMillis()); } } else { //已经点赞，点赞数-1 ，从redis删除 boolean isSuccess = this.update().setSql(\\\"liked=liked-1\\\").eq(\\\"id\\\", id).update(); if (isSuccess) { stringRedisTemplate.opsForZSet().remove(key, userId.toString()); } } return Result.ok(); } private void isBlogLiked(Blog blog) { Long userId = UserHolder.getUser().getId(); String key = BLOG_LIKED_KEY + blog.getId(); Double isMember = stringRedisTemplate.opsForZSet().score(key, userId.toString()); blog.setIsLike(isMember != null); } \"]},\"805\":{\"h\":\"点赞查询列表\",\"t\":[\"控制器：\",\" @GetMapping(\\\"/likes/{id}\\\") public Result queryBlogLikes(@PathVariable(\\\"id\\\") Long id) { return blogService.queryBlogLikes(id); } \",\"业务层：\",\" @Override public Result queryBlogLikes(Long id) { //查询top5点赞用户 String key = BLOG_LIKED_KEY + id; Set<String> top5 = stringRedisTemplate.opsForZSet().range(key, 0, 4); if (top5 == null || top5.isEmpty()) { return Result.ok(Collections.emptyList()); } //解析出用户 的id List<Long> ids = top5.stream().map(Long::valueOf).collect(Collectors.toList()); //根据用户id查询用户信息 List<UserDTO> userDTOS = userService.listByIds(ids).stream() .map(user -> { return BeanUtil.copyProperties(user, UserDTO.class); }) .collect(Collectors.toList()); return Result.ok(userDTOS); } \",\"此时会发现 点赞列表的顺序和时间戳不对应，因为 查数据库 的时候默认是按照id顺序，需要进行修改，按照我们穿进去的id的顺序进行排序\",\" //解析出用户 的id List<Long> ids = top5.stream().map(Long::valueOf).collect(Collectors.toList()); //根据用户id查询用户信息 List<UserDTO> userDTOS = userService.query().in(\\\"id\\\", ids) .last(\\\"ORDER BY FIELD(id,\\\" + StringUtil.join(ids, \\\",\\\") + \\\")\\\") .list() .stream() .map(user -> { return BeanUtil.copyProperties(user, UserDTO.class); }) .collect(Collectors.toList()); return Result.ok(userDTOS); \"]},\"806\":{\"h\":\"好友关注\",\"t\":[\"一个用户可以关注多个用户，一个用户也可以被多个用户关注，是多对多的关系： 需要建立一张关系表\",\"create table tb_follow ( id bigint auto_increment comment '主键' primary key, user_id bigint unsigned not null comment '用户id', follow_user_id bigint unsigned not null comment '关联的用户id', create_time timestamp default CURRENT_TIMESTAMP not null comment '创建时间' ) collate = utf8mb4_general_ci row_format = COMPACT; \",\"控制器：\",\"@RestController @RequestMapping(\\\"/follow\\\") public class FollowController { @Resource private IFollowService followService; @PutMapping(\\\"/{id}/{isFollow}\\\") public Result follow(@PathVariable(\\\"id\\\") Long followUserId, @PathVariable(\\\"isFollow\\\") Boolean isFollow) { return followService.follow(followUserId, isFollow); } @PutMapping(\\\"/or/not/{id}\\\") public Result isFollow(@PathVariable(\\\"id\\\") Long followUserId) { return followService.isFollow(followUserId); } } \",\"业务逻辑\",\" @Override public Result follow(Long followUserId, Boolean isFollow) { Long userId = UserHolder.getUser().getId(); //判断是 关注 还是 取关 if (isFollow) { //关注，添加关注记录 Follow follow = new Follow(); follow.setUserId(userId); follow.setFollowUserId(followUserId); this.save(follow); } else { //取关，删除关注记录 QueryWrapper<Follow> followQueryWrapper = new QueryWrapper<>(); followQueryWrapper.eq(\\\"user_id\\\", userId).eq(\\\"follow_user_id\\\", followUserId); this.remove(followQueryWrapper); } return Result.ok(); } @Override public Result isFollow(Long followUserId) { //1.查询是否关注 Long userId = UserHolder.getUser().getId(); Integer count = this.query().eq(\\\"user_id\\\", userId).eq(\\\"follow_user_id\\\", followUserId).count(); return Result.ok(count > 0); } \"]},\"807\":{\"h\":\"共同关注\",\"t\":[\"需求：利用Redis中恰当的数据结构，实现共同关注功能。在博主个人页面展示出当前用户与博主的共同关注呢。 当然是使用我们之前学习过的set集合咯，在set集合中，有交集并集补集的api，我们可以把两人的关注的人分别放入到一个set集合中，然后再通过api去查看这两个set集合中的交集数据。\",\"改造当前关注用户的逻辑：\",\" public Result follow(Long followUserId, Boolean isFollow) { Long userId = UserHolder.getUser().getId(); //判断是 关注 还是 取关 String key = \\\"follow:\\\" + userId; if (isFollow) { //关注，添加关注记录 Follow follow = new Follow(); follow.setUserId(userId); follow.setFollowUserId(followUserId); boolean result = this.save(follow); if (result) { //放入redis stringRedisTemplate.opsForSet().add(key, followUserId.toString()); } } else { //取关，删除关注记录 QueryWrapper<Follow> followQueryWrapper = new QueryWrapper<>(); followQueryWrapper.eq(\\\"user_id\\\", userId).eq(\\\"follow_user_id\\\", followUserId); boolean result = this.remove(followQueryWrapper); if (result) { stringRedisTemplate.opsForSet().remove(key, followUserId.toString()); } } return Result.ok(); } \",\"控制器：\",\" @GetMapping(\\\"/common/{id}\\\") public Result followCommons(@PathVariable(\\\"id\\\") Long id) { return followService.followCommons(id); } \",\"业务逻辑：\",\" @Override public Result followCommons(Long id) { Long userId = UserHolder.getUser().getId(); String key = \\\"follow:\\\" + userId; String key2 = \\\"follow:\\\" + id; Set<String> intersect = stringRedisTemplate.opsForSet().intersect(key, key2); if (intersect == null || intersect.isEmpty()) { return Result.ok(Collections.emptyList()); } List<Long> ids = intersect.stream().map(Long::valueOf).collect(Collectors.toList()); List<UserDTO> users = userService.listByIds(ids) .stream() .map(user -> { return BeanUtil.copyProperties(user, UserDTO.class); }) .collect(Collectors.toList()); return Result.ok(users); } \"]},\"808\":{\"h\":\"Feed流\",\"t\":[\"当我们关注了用户后，这个用户发了动态，那么我们应该把这些数据推送给用户，这个需求，其实我们又把他叫做Feed流，关注推送也叫做Feed流，直译为投喂。为用户持续的提供“沉浸式”的体验，通过无限下拉刷新获取新的信息。\",\"Feed流产品有两种常见模式： Timeline：不做内容筛选，简单的按照内容发布时间排序，常用于好友或关注。例如朋友圈\",\"优点：信息全面，不会有缺失。并且实现也相对简单\",\"缺点：信息噪音较多，用户不一定感兴趣，内容获取效率低 智能排序：利用智能算法屏蔽掉违规的、用户不感兴趣的内容。推送用户感兴趣信息来吸引用户\",\"优点：投喂用户感兴趣信息，用户粘度很高，容易沉迷\",\"缺点：如果算法不精准，可能起到反作用\",\"采用Timeline的模式。该模式的实现方案有三种： 我们本次针对好友的操作，采用的就是Timeline的方式，只需要拿到我们关注用户的信息，然后按照时间排序即可，因此采用Timeline的模式。该模式的实现方案有三种：\",\"拉模式 优点：比较节约空间，因为赵六在读信息时，并没有重复读取，而且读取完之后可以把他的收件箱进行清楚。 缺点：比较延迟，当用户读取数据时才去关注的人里边去读取数据，假设用户关注了大量的用户，那么此时就会拉取海量的内容，对服务器压力巨大。\",\"推模式 优点：时效快，不用临时拉取 缺点：内存压力大，假设一个大V写信息，很多人关注他， 就会写很多分数据到粉丝那边去\",\"推拉结合\"]},\"809\":{\"h\":\"推送粉丝收件箱\",\"t\":[\"需求：\",\"修改新增探店笔记的业务，在保存blog到数据库的同时，推送到粉丝的收件箱\",\"收件箱满足可以根据时间戳排序，必须用Redis的数据结构实现\",\"查询收件箱数据时，可以实现分页查询 Feed流中的数据会不断更新，所以数据的角标也在变化，因此不能采用传统的分页模式。 Feed流的滚动分页 我们需要记录每次操作的最后一条，然后从这个位置开始去读取数据 举个例子：我们从t1时刻开始，拿第一页数据，拿到了10~6，然后记录下当前最后一次拿取的记录，就是6，t2时刻发布了新的记录，此时这个11放到最顶上，但是不会影响我们之前记录的6，此时t3时刻来拿第二页，第二页这个时候拿数据，还是从6后一点的5去拿，就拿到了5-1的记录。我们这个地方可以采用sortedSet来做，可以进行范围查询，并且还可以记录当前获取数据时间戳最小值，就可以实现滚动分页了\",\"发布博客时进行推送，业务逻辑：\",\" @Override public Result saveBlog(Blog blog) { // 获取登录用户 UserDTO user = UserHolder.getUser(); blog.setUserId(user.getId()); // 保存探店博文 boolean result = this.save(blog); if (!result) { return Result.fail(\\\"新增博客失败\\\"); } //查询所有粉丝 select * from tb_follow where follow_user_id=? List<Follow> follows = followService.query().eq(\\\"follow_user_id\\\", user.getId()).list(); for (Follow follow : follows) { //粉丝id Long userId = follow.getUserId(); String key = \\\"feed:\\\" + userId; stringRedisTemplate.opsForZSet().add(key, blog.getId().toString(), System.currentTimeMillis()); } // 返回id return Result.ok(blog.getId()); } \"]},\"810\":{\"h\":\"分页查询收邮箱\",\"t\":[\"需求：在个人主页的“关注”卡片中，查询并展示推送的Blog信息： 具体操作如下： 1、每次查询完成后，我们要分析出查询出数据的最小时间戳，这个值会作为下一次查询的条件 2、我们需要找到与上一次查询相同的查询个数作为偏移量，下次查询时，跳过这些查询过的数据，拿到我们需要的数据 综上：我们的请求参数中就需要携带 lastId：上一次查询的最小时间戳 和偏移量这两个参数。 这两个参数第一次会由前端来指定，以后的查询就根据后台结果作为条件，再次传递到后台。\",\"定义滚动返回值实体类\",\"@Data public class ScrollResult { private List<?> list; private Long minTime; private Integer offset; } \",\"控制器：\",\" @GetMapping(\\\"/of/follow\\\") public Result queryBlogOfFollow( @RequestParam(\\\"lastId\\\") Long max, @RequestParam(value = \\\"offset\\\", defaultValue = \\\"0\\\") Integer offset) { return blogService.queryBlogOfFollow(max, offset); } \",\"业务逻辑：\",\" @Override public Result queryBlogOfFollow(Long max, Integer offset) { Long userId = UserHolder.getUser().getId(); //查询收件箱 zrevrangebyscore key max min limit offset count String key = FEED_KEY + userId; Set<ZSetOperations.TypedTuple<String>> typedTuples = stringRedisTemplate.opsForZSet() .reverseRangeByScoreWithScores(key, 0, max, offset, 2); if (typedTuples == null || typedTuples.isEmpty()) { return Result.ok(); } //解析数据：blogId minTime offset List<Long> ids = new ArrayList<>(typedTuples.size()); long minTime = 0; int os = 1; for (ZSetOperations.TypedTuple<String> tuple : typedTuples) { //获取id ids.add(Long.valueOf(tuple.getValue())); //获取时间 long time = tuple.getScore().longValue(); if (time == minTime) { os++; } else { minTime = time; os = 1; } } os = minTime == max ? os : os + offset; //根据id查询博文 List<Blog> blogs = this.query().in(\\\"id\\\", ids) .last(\\\"ORDER BY FIELD(id,\\\" + StringUtil.join(ids, \\\",\\\") + \\\")\\\") .list(); for (Blog blog : blogs) { this.queryBlogUser(blog); this.isBlogLiked(blog); } //封装返回数据 ScrollResult scrollResult = new ScrollResult(); scrollResult.setOffset(os); scrollResult.setList(blogs); scrollResult.setMinTime(minTime); return Result.ok(scrollResult); } \"]},\"811\":{\"c\":[\"项目实战\",\"黑马点评\"]},\"812\":{\"c\":[\"项目实战\",\"黑马点评\"]},\"813\":{\"h\":\"黑马点评7\"},\"814\":{\"h\":\"附近商户\"},\"815\":{\"h\":\"GEO数据结构\",\"t\":[\"GEO就是Geolocation的简写形式，代表地理坐标。Redis在3.2版本中加入了对GEO的支持，允许存储地理坐标信息，帮助我们根据经纬度来检索数据。常见的命令有：\",\"GEOADD：添加一个地理空间信息，包含：经度（longitude）、纬度（latitude）、值（member）\",\"GEODIST：计算指定的两个点之间的距离并返回\",\"GEOHASH：将指定member的坐标转为hash字符串形式并返回\",\"GEOPOS：返回指定member的坐标\",\"GEORADIUS：指定圆心、半径，找到该圆内包含的所有member，并按照与圆心之间的距离排序后返回。6.以后已废弃\",\"GEOSEARCH：在指定范围内搜索member，并按照与指定点之间的距离排序后返回。范围可以是圆形或矩形。6.2.新功能\",\"GEOSEARCHSTORE：与GEOSEARCH功能一致，不过可以把结果存储到一个指定的key。 6.2.新功能\",\"练习：\",\"添加数据 \",\"北京南站 116.378248 39.865275\",\"北京站116.42803 39.903738\",\"北京西站 116.322287 39.893729\",\"计算北京西站到北京站到距离\",\"搜索天安门 116.397904 39.909005 附近10km内到所有火车站，并按照距离升序排序\",\"GEOADD g1 116.378248 39.865275 bjn 116.42803 39.903738 bj 116.322287 39.893729 bjx GEODIST g1 bjn bjx km GEOSEARCH g1 FROMLONLAT 116.397904 39.909005 BYRADIUS 10 km WITHDIST \"]},\"816\":{\"h\":\"导入店铺数据到GEO\",\"t\":[\"将数据库表中的数据导入到redis中去，redis中的GEO，GEO在redis中就一个menber和一个经纬度，我们把x和y轴传入到redis做的经纬度位置去，但我们不能把所有的数据都放入到menber中去，毕竟作为redis是一个内存级数据库，如果存海量数据，redis还是力不从心，所以我们在这个地方存储他的id即可。\",\"但是这个时候还有一个问题，就是在redis中并没有存储type，所以我们无法根据type来对数据进行筛选，所以我们可以按照商户类型做分组，类型相同的商户作为同一组，以typeId为key存入同一个GEO集合中即可 测试类：\",\" @Test void loadShopData() { //查询店铺信息 List<Shop> list = shopService.list(); //把店铺分组，按照typeId分组，id一致的放到一个集合 Map<Long, List<Shop>> map = list.stream().collect(Collectors.groupingBy(Shop::getTypeId)); for (Map.Entry<Long, List<Shop>> entry : map.entrySet()) { Long typeId = entry.getKey(); List<Shop> shops = entry.getValue(); String key = \\\"shop:geo:\\\" + typeId; //写入redis geoadd key longitude latitude member // for (Shop shop : shops) { // stringRedisTemplate.opsForGeo() // .add(key, new Point(shop.getX(), shop.getY()), shop.getId().toString()); // } List<RedisGeoCommands.GeoLocation<String>> location = new ArrayList<>(shops.size()); for (Shop shop : shops) { location.add(new RedisGeoCommands.GeoLocation<>( shop.getId().toString(), new Point(shop.getX(), shop.getY())) ); } stringRedisTemplate.opsForGeo() .add(key, location); } } \"]},\"817\":{\"h\":\"实现附近商户功能\",\"t\":[\"更换redis版本\",\"更换依赖版本：\",\" <dependency> <groupId>org.springframework.data</groupId> <artifactId>spring-data-redis</artifactId> <version>2.6.2</version> </dependency> <dependency> <groupId>io.lettuce</groupId> <artifactId>lettuce-core</artifactId> <version>6.1.6.RELEASE</version> </dependency> \",\"控制器：\",\" /** * 根据商铺类型分页查询商铺信息 * @param typeId 商铺类型 * @param current 页码 * @return 商铺列表 */ @GetMapping(\\\"/of/type\\\") public Result queryShopByType( @RequestParam(\\\"typeId\\\") Integer typeId, @RequestParam(value = \\\"current\\\", defaultValue = \\\"1\\\") Integer current, @RequestParam(value = \\\"x\\\" ,required = false) Double x, @RequestParam(value = \\\"y\\\" ,required = false) Double y ) { return shopService.queryShopByType(typeId,current,x,y); } \",\"业务逻辑\",\" @Override public Result queryShopByType(Integer typeId, Integer current, Double x, Double y) { //是否需要根据坐标查询 if (x == null || y == null) { //不需要坐标查询，按照 数据库 查询 Page<Shop> page = this.query() .eq(\\\"type_id\\\", typeId) .page(new Page<>(current, SystemConstants.DEFAULT_PAGE_SIZE)); return Result.ok(page.getRecords()); } //计算分页参数 int from = (current - 1) * SystemConstants.DEFAULT_PAGE_SIZE; int end = current * SystemConstants.DEFAULT_PAGE_SIZE; //查询redis，按照距离排序，分页 结果：shopId，distance String key = RedisConstants.SHOP_GEO_KEY + typeId; GeoResults<RedisGeoCommands.GeoLocation<String>> result = stringRedisTemplate.opsForGeo() .search(key, GeoReference.fromCoordinate(x, y), new Distance(5000), RedisGeoCommands.GeoSearchCommandArgs.newGeoSearchArgs().includeDistance().limit(end) ); // 解析出id if (result == null) { return Result.ok(); } List<GeoResult<RedisGeoCommands.GeoLocation<String>>> list = result.getContent(); // 截取 from 到 end if (list.size() <= from) { return Result.ok(); } ArrayList<Long> ids = new ArrayList<>(list.size()); Map<String, Distance> distanceMap = new HashMap<>(list.size()); list.stream().skip(from).forEach(res -> { //获取店铺id String shopIdStr = res.getContent().getName(); ids.add(Long.valueOf(shopIdStr)); //获取距离 Distance distance = res.getDistance(); distanceMap.put(shopIdStr, distance); }); //根据id查询shop String idStr = StrUtil.join(\\\",\\\", ids); List<Shop> shops = this.query().in(\\\"id\\\", ids) .last(\\\"ORDER BY FIELD(id,\\\" + idStr + \\\")\\\").list(); for (Shop shop : shops) { shop.setDistance(distanceMap.get(shop.getId().toString()).getValue()); } return Result.ok(shops); } \"]},\"818\":{\"h\":\"用户签到\"},\"819\":{\"h\":\"BitMap用户签到\",\"t\":[\"我们按月来统计用户签到信息，签到记录为1，未签到则记录为0. 把每一个bit位对应当月的每一天，形成了映射关系。用0和1标示业务状态，这种思路就称为位图（BitMap）。这样我们就用极小的空间，来实现了大量数据的表示 Redis中是利用string类型数据结构实现BitMap，因此最大上限是512M，转换为bit则是 2^32个bit位。\",\"BitMap的操作命令有：\",\"SETBIT：向指定位置（offset）存入一个0或1\",\"GETBIT ：获取指定位置（offset）的bit值\",\"BITCOUNT ：统计BitMap中值为1的bit位的数量\",\"BITFIELD ：操作（查询、修改、自增）BitMap中bit数组中的指定位置（offset）的值\",\"BITFIELD_RO ：获取BitMap中bit数组，并以十进制形式返回\",\"BITOP ：将多个BitMap的结果做位运算（与 、或、异或）\",\"BITPOS ：查找bit数组中指定范围内第一个0或1出现的位置\",\"实现签到功能：\",\"控制器：\",\" @PostMapping(\\\"/sign\\\") public Result sign() { return userService.sign(); } \",\"业务逻辑：\",\" @Override public Result sign() { Long userId = UserHolder.getUser().getId(); String keySuffix = LocalDateTime.now().format(DateTimeFormatter.ofPattern(\\\":yyyyMM\\\")); String key = USER_SIGN_KEY + userId + keySuffix; //获取今天是第几天 int dayOfMonth = LocalDateTime.now().getDayOfMonth(); stringRedisTemplate.opsForValue() .setBit(key,dayOfMonth-1,true); return Result.ok(); } \"]},\"820\":{\"h\":\"签到统计\",\"t\":[\"从最后一次签到开始向前统计，直到遇到第一次未签到为止，计算总的签到次数，就是连续签到天数 如何得到本月到今天为止的所有签到数据？BITFIELD key GET u[dayOfMonth] 0\",\"控制器\",\" @GetMapping(\\\"/sign/count\\\") public Result signCount() { return userService.signCount(); } \",\"业务逻辑：\",\" @Override public Result signCount() { Long userId = UserHolder.getUser().getId(); LocalDateTime now = LocalDateTime.now(); String keySuffix = now.format(DateTimeFormatter.ofPattern(\\\":yyyyMM\\\")); String key = USER_SIGN_KEY + userId + keySuffix; int dayOfMonth = now.getDayOfMonth(); List<Long> result = stringRedisTemplate.opsForValue().bitField( key, BitFieldSubCommands.create() .get(BitFieldSubCommands.BitFieldType.unsigned(dayOfMonth)).valueAt(0) ); if (result == null || result.isEmpty()) { return Result.ok(0); } Long num = result.get(0); if (num == null || num == 0) { return Result.ok(0); } int count = 0; while (true) { if ((num & 1) == 0) { break; } else { count++; } num >>>= 1; } return Result.ok(count); } \"]},\"821\":{\"h\":\"UV统计\",\"t\":[\"UV：全称Unique Visitor，也叫独立访客量，是指通过互联网访问、浏览这个网页的自然人。1天内同一个用户多次访问该网站，只记录1次。\",\"PV：全称Page View，也叫页面访问量或点击量，用户每访问网站的一个页面，记录1次PV，用户多次打开页面，则记录多次PV。往往用来衡量网站的流量。\",\"Hyperloglog(HLL)是从Loglog算法派生的概率算法，用于确定非常大的集合的基数，而不需要存储其所有值。https://juejin.cn/post/6844903785744056333#heading-0\\nRedis中的HLL是基于string结构实现的，单个HLL的内存永远小于16kb，其测量结果是概率性的，有小于0.81％的误差。\"]},\"822\":{\"c\":[\"项目实战\",\"黑马点评\"]},\"823\":{\"c\":[\"项目实战\",\"黑马点评\"]},\"824\":{\"h\":\"书籍资源\",\"t\":[\"资源名称\",\"分享链接\",\"《Labuladong的算法小抄》\",\"https://www.aliyundrive.com/s/8ouAjxFVgUX\",\"《小傅哥的IDEA插件开发手册》\",\"https://www.aliyundrive.com/s/Pq7xVp9bXdR\",\"《疯狂Java讲义第四版》\",\"https://www.aliyundrive.com/s/Yd2L8XtGWUa\",\"《Java核心技术-卷1-基础知识》\",\"https://www.aliyundrive.com/s/EvpXjq55LXn\",\"《Java核心技术-卷2-高级特性》\",\"https://www.aliyundrive.com/s/hT5RQDe6q1k\",\"《Linux命令速查手册》\",\"https://www.aliyundrive.com/s/ophXiMFVPrB\",\"《鸟哥的Linux私房菜-高清》\",\"https://www.aliyundrive.com/s/bd9PeqCf82N\",\"《鸟哥的Linux私房菜-非高清》\",\"https://www.aliyundrive.com/s/e9ag9zBwTCS\",\"《数学建模算法与应用-第二版-司守奎》\",\"https://www.aliyundrive.com/s/uDtSpLzFqz2\",\"《统计学习方法-李航》\",\"https://www.aliyundrive.com/s/Gae5A3tJaZn\",\"《Matlab神经网络30个案例分析》\",\"https://www.aliyundrive.com/s/EVibkTrcFex\",\"《具有AI功能加持的终端工具warp使用总结》\",\"https://www.aliyundrive.com/s/kXKqP4RqyUD\"]},\"825\":{\"c\":[\"书籍\"]},\"826\":{\"c\":[\"书籍\"]},\"827\":{\"h\":\"学习实用工具\"},\"828\":{\"c\":[\"学习工具\",\"效率\"]},\"829\":{\"c\":[\"工具\",\"学习工具\"]},\"830\":{\"h\":\"\",\"t\":[\"404 Not Found\"]},\"831\":{\"h\":\"Project\"},\"832\":{\"h\":\"目录1\"},\"833\":{\"h\":\"学习记录\"},\"834\":{\"h\":\"Eveyday\"},\"835\":{\"h\":\"1 面试\"},\"836\":{\"h\":\"Interview\"},\"837\":{\"h\":\"1 Java基础\"},\"838\":{\"h\":\"Java\"},\"839\":{\"h\":\"2 Java高级\"},\"840\":{\"h\":\"3 Java Web\"},\"841\":{\"h\":\"4 Spring\"},\"842\":{\"h\":\"5 中间件\"},\"843\":{\"h\":\"6 其他\"},\"844\":{\"h\":\"7 面试\"},\"845\":{\"h\":\"8 代码优化\"},\"846\":{\"h\":\"IDEA插件开发\"},\"847\":{\"h\":\"Ikun伙伴匹配系统\"},\"848\":{\"h\":\"用户中心\"},\"849\":{\"h\":\"谷粒商城\"},\"850\":{\"h\":\"黑马头条\"},\"851\":{\"h\":\"黑马点评\"}},\"dirtCount\":0,\"index\":[[\"书籍\",{\"2\":{\"825\":1,\"826\":1}}],[\"书籍资源\",{\"0\":{\"824\":1}}],[\"李航\",{\"1\":{\"824\":1}}],[\"司守奎\",{\"1\":{\"824\":1}}],[\"鸟哥的linux私房菜\",{\"1\":{\"824\":2}}],[\"卷2\",{\"1\":{\"824\":1}}],[\"卷1\",{\"1\":{\"824\":1}}],[\"疯狂java讲义第四版\",{\"1\":{\"824\":1}}],[\"截取\",{\"1\":{\"817\":1}}],[\"毕竟作为redis是一个内存级数据库\",{\"1\":{\"816\":1}}],[\"练习\",{\"1\":{\"815\":1}}],[\"半径\",{\"1\":{\"815\":1}}],[\"纬度\",{\"1\":{\"815\":1}}],[\"附近10km内到所有火车站\",{\"1\":{\"815\":1}}],[\"附近商户\",{\"0\":{\"814\":1}}],[\"附加额外参数\",{\"1\":{\"642\":1}}],[\"附加参数\",{\"1\":{\"531\":1}}],[\"卡片中\",{\"1\":{\"810\":1}}],[\"粉丝id\",{\"1\":{\"809\":1}}],[\"拿第一页数据\",{\"1\":{\"809\":1}}],[\"拿到我们需要的数据\",{\"1\":{\"810\":1}}],[\"拿到了10~6\",{\"1\":{\"809\":1}}],[\"拿到所有的查询条件\",{\"1\":{\"710\":1}}],[\"拿到结果\",{\"1\":{\"457\":1}}],[\"拿到响应码\",{\"1\":{\"27\":1}}],[\"拉模式\",{\"1\":{\"808\":1}}],[\"拉取镜像image\",{\"1\":{\"651\":1,\"652\":1}}],[\"拉取镜像\",{\"1\":{\"317\":1,\"328\":1,\"426\":1}}],[\"投喂用户感兴趣信息\",{\"1\":{\"808\":1}}],[\"推送到粉丝的收件箱\",{\"1\":{\"809\":1}}],[\"推送粉丝收件箱\",{\"0\":{\"809\":1}}],[\"推送用户感兴趣信息来吸引用户\",{\"1\":{\"808\":1}}],[\"推拉结合\",{\"1\":{\"808\":1}}],[\"推模式\",{\"1\":{\"808\":1}}],[\"推荐信息流\",{\"1\":{\"505\":1}}],[\"推荐页\",{\"1\":{\"505\":1}}],[\"推荐\",{\"1\":{\"309\":1,\"500\":1}}],[\"推荐使用范型t\",{\"0\":{\"227\":1}}],[\"智能排序\",{\"1\":{\"808\":1}}],[\"沉浸式\",{\"1\":{\"808\":1}}],[\"好友关注\",{\"0\":{\"806\":1}}],[\"好像出现了\",{\"1\":{\"473\":1}}],[\"⚠️upload\",{\"1\":{\"804\":1}}],[\"咱们可以采用一个可以排序的set集合\",{\"1\":{\"804\":1}}],[\"博文不存在\",{\"1\":{\"802\":1,\"803\":1}}],[\"博客搭建\",{\"0\":{\"43\":1}}],[\"探店id\",{\"1\":{\"801\":1}}],[\"探店的文字描述\",{\"1\":{\"801\":1}}],[\"探店的照片\",{\"1\":{\"801\":1}}],[\"隔开\",{\"1\":{\"801\":1}}],[\"隔离级别\",{\"1\":{\"474\":1}}],[\"隔离性\",{\"1\":{\"472\":1}}],[\"隔离性和持久性\",{\"1\":{\"377\":1}}],[\"达人探店\",{\"0\":{\"800\":1}}],[\"达到了什么样的量级\",{\"1\":{\"478\":1}}],[\"达到隔离效果\",{\"1\":{\"330\":1}}],[\"顾名思义\",{\"1\":{\"793\":1}}],[\"很多人关注他\",{\"1\":{\"808\":1}}],[\"很容易模拟出队列效果\",{\"1\":{\"792\":1}}],[\"很影响扩展性\",{\"1\":{\"510\":1}}],[\"决定用户是否抢购成功\",{\"1\":{\"789\":1}}],[\"哨兵会发现主机宕机\",{\"1\":{\"783\":1}}],[\"喂狗\",{\"1\":{\"782\":1}}],[\"机制\",{\"1\":{\"782\":1}}],[\"机身颜色就是attr\",{\"1\":{\"670\":1}}],[\"拥有者是当前线程\",{\"1\":{\"782\":1}}],[\"拥有者不存在\",{\"1\":{\"782\":1}}],[\"期间会重试\",{\"1\":{\"781\":1}}],[\"期间服务器不能处理其他请求\",{\"1\":{\"369\":1}}],[\"误删问题\",{\"1\":{\"778\":1}}],[\"误判原因在于\",{\"1\":{\"752\":1}}],[\"太大\",{\"1\":{\"770\":1}}],[\"核销时间\",{\"1\":{\"764\":1}}],[\"核心含义\",{\"1\":{\"769\":1}}],[\"核心思路\",{\"1\":{\"755\":1}}],[\"核心思想是\",{\"1\":{\"547\":1}}],[\"核心容器applicationcontext\",{\"0\":{\"296\":1}}],[\"核心功能\",{\"0\":{\"202\":1}}],[\"核心线程数\",{\"1\":{\"115\":1,\"713\":1}}],[\"余额支付\",{\"1\":{\"764\":1}}],[\"余额最大值\",{\"1\":{\"220\":1}}],[\"余额最小值\",{\"1\":{\"220\":1}}],[\"购买的代金券id\",{\"1\":{\"764\":1}}],[\"抵扣金额\",{\"1\":{\"764\":1}}],[\"序列号的位数\",{\"1\":{\"763\":1}}],[\"序列号\",{\"1\":{\"763\":1}}],[\"序列化器来解决数据乱码\",{\"1\":{\"572\":1}}],[\"序列化\",{\"1\":{\"47\":1,\"512\":1}}],[\"符号位\",{\"1\":{\"763\":1}}],[\"符合会加分\",{\"1\":{\"685\":1}}],[\"受单表数据量限制\",{\"1\":{\"762\":1}}],[\"受限于磁盘o\",{\"1\":{\"362\":1}}],[\"击穿问题\",{\"1\":{\"758\":2}}],[\"击穿\",{\"1\":{\"758\":2}}],[\"穿透\",{\"1\":{\"758\":2}}],[\"思路分析\",{\"1\":{\"756\":1}}],[\"思想很简单\",{\"1\":{\"352\":1}}],[\"休眠一段时间后重试\",{\"1\":{\"755\":1}}],[\"互斥\",{\"1\":{\"776\":1}}],[\"互斥锁方案\",{\"1\":{\"757\":1}}],[\"互斥锁\",{\"1\":{\"754\":1}}],[\"互斥条件\",{\"1\":{\"104\":1}}],[\"走到了删除锁逻辑\",{\"1\":{\"778\":1}}],[\"走哈希思想去判断当前这个要查询的这个数据是否存在\",{\"1\":{\"752\":1}}],[\"走红黑树的添加\",{\"1\":{\"71\":1}}],[\"额外的内存消耗\",{\"1\":{\"752\":1}}],[\"额外消耗了mq的资源\",{\"1\":{\"355\":1}}],[\"综合考虑\",{\"1\":{\"750\":1}}],[\"综上\",{\"1\":{\"341\":1,\"810\":1}}],[\"人工编码方式\",{\"1\":{\"750\":1}}],[\"刷新token有效期\",{\"1\":{\"742\":1}}],[\"刷新页面\",{\"1\":{\"615\":1}}],[\"早期的办法是将\",{\"1\":{\"741\":1}}],[\"频道筛选\",{\"1\":{\"731\":1}}],[\"频率\",{\"1\":{\"371\":1}}],[\"拆分规则\",{\"1\":{\"730\":1}}],[\"拆分差值不能超过10\",{\"1\":{\"117\":1}}],[\"充分发挥高频数据的操作效率\",{\"1\":{\"730\":1}}],[\"海思\",{\"1\":{\"710\":2}}],[\"海淀区\",{\"1\":{\"444\":1}}],[\"失效时间\",{\"1\":{\"764\":1}}],[\"失效模式\",{\"1\":{\"705\":1}}],[\"失败\",{\"1\":{\"796\":2}}],[\"失败返回false\",{\"1\":{\"776\":1}}],[\"失败的原因在于\",{\"1\":{\"769\":1}}],[\"失败的等待时长倍数\",{\"1\":{\"350\":1}}],[\"失败处理策略\",{\"0\":{\"351\":1}}],[\"失败重试机制\",{\"0\":{\"350\":1}}],[\"失败后将消息投递到一个指定的\",{\"1\":{\"351\":1}}],[\"失败后下次的等待时长倍数\",{\"1\":{\"342\":1}}],[\"失败后的初始等待时间\",{\"1\":{\"342\":1}}],[\"双写模式\",{\"1\":{\"705\":1}}],[\"双向数据传输\",{\"1\":{\"403\":1}}],[\"闭锁\",{\"1\":{\"704\":1}}],[\"至此\",{\"1\":{\"703\":1,\"742\":1}}],[\"至少有一个资源必须处于非共享模式\",{\"1\":{\"104\":1}}],[\"他是借助于底层的一个voaltile的一个state变量来记录重入的状态的\",{\"1\":{\"782\":1}}],[\"他直接就会执行删除锁那行代码\",{\"1\":{\"779\":1}}],[\"他正准备删除锁\",{\"1\":{\"779\":1}}],[\"他拿到的对象实际上是不同的对象\",{\"1\":{\"770\":1}}],[\"他们在扣减时\",{\"1\":{\"769\":1}}],[\"他查询缓存没有命中\",{\"1\":{\"755\":1}}],[\"他查询缓存数据并不存在\",{\"1\":{\"750\":1}}],[\"他先把缓存删了\",{\"1\":{\"750\":1}}],[\"他会去释放第二个线程的锁\",{\"1\":{\"703\":1}}],[\"他设置的值都可以被7002和7003读取到\",{\"1\":{\"373\":1}}],[\"减轻雪崩效应\",{\"1\":{\"700\":1}}],[\"减缓对底层系统的冲击\",{\"1\":{\"700\":1}}],[\"减少锁表的几率\",{\"1\":{\"730\":1}}],[\"减少io争抢\",{\"1\":{\"730\":1}}],[\"减少冷启动时的缓存穿透问题\",{\"1\":{\"699\":1}}],[\"减少单列索引\",{\"1\":{\"469\":1}}],[\"减少了循环依赖的风险\",{\"1\":{\"214\":1}}],[\"减少了很多额沟通成本\",{\"1\":{\"28\":1}}],[\"减少创建和销毁线程的开销\",{\"1\":{\"114\":1}}],[\"减少计数countdownlatch\",{\"0\":{\"107\":1}}],[\"减少hash冲突\",{\"1\":{\"72\":1}}],[\"减少对后端服务的请求\",{\"1\":{\"27\":1}}],[\"布隆过滤\",{\"1\":{\"752\":2}}],[\"布隆过滤器走的是哈希思想\",{\"1\":{\"752\":1}}],[\"布隆过滤器其实采用的是哈希思想来解决这个问题\",{\"1\":{\"752\":1}}],[\"布隆过滤器\",{\"1\":{\"699\":1}}],[\"布尔值\",{\"1\":{\"452\":1}}],[\"升级lettuce客户端\",{\"1\":{\"698\":1}}],[\"少于数据库做交互\",{\"1\":{\"697\":1}}],[\"吞吐量\",{\"1\":{\"696\":1}}],[\"压测内容\",{\"1\":{\"696\":1}}],[\"压测统计\",{\"1\":{\"696\":1}}],[\"拷贝页面\",{\"1\":{\"690\":1}}],[\"拷贝属性\",{\"1\":{\"220\":1}}],[\"商户id\",{\"1\":{\"801\":1}}],[\"商铺列表\",{\"1\":{\"817\":1}}],[\"商铺类型\",{\"1\":{\"817\":1}}],[\"商铺数据\",{\"1\":{\"751\":1}}],[\"商铺不存在\",{\"1\":{\"747\":2,\"751\":1,\"752\":2}}],[\"商铺详情数据\",{\"1\":{\"747\":1}}],[\"商铺id不能为空\",{\"1\":{\"751\":1}}],[\"商铺id\",{\"1\":{\"747\":1,\"764\":1}}],[\"商城业务\",{\"0\":{\"689\":1}}],[\"商品查询缓存\",{\"0\":{\"746\":1}}],[\"商品详情\",{\"0\":{\"721\":1}}],[\"商品上架错误\",{\"1\":{\"688\":1}}],[\"商品上架\",{\"0\":{\"688\":1}}],[\"商品管理\",{\"1\":{\"675\":1}}],[\"商品描述\",{\"1\":{\"670\":1}}],[\"商品名称\",{\"1\":{\"670\":1}}],[\"商品信息表\",{\"1\":{\"670\":1}}],[\"商品真正的信息\",{\"1\":{\"670\":1}}],[\"商品id\",{\"1\":{\"670\":2}}],[\"商品属性值表\",{\"1\":{\"670\":1}}],[\"商品属性表\",{\"1\":{\"670\":1}}],[\"商品属性\",{\"0\":{\"669\":1,\"673\":1},\"1\":{\"670\":1}}],[\"商品服务\",{\"0\":{\"662\":1}}],[\"热度评分\",{\"1\":{\"688\":1}}],[\"热更新nginx\",{\"1\":{\"646\":1}}],[\"库存key\",{\"1\":{\"789\":1,\"796\":1}}],[\"库存已经被修改过了\",{\"1\":{\"769\":1}}],[\"库存超卖问题\",{\"0\":{\"766\":1}}],[\"库存不足\",{\"1\":{\"765\":2,\"770\":2,\"789\":1,\"790\":1,\"796\":1}}],[\"库存\",{\"1\":{\"710\":1,\"764\":1,\"789\":1,\"796\":1}}],[\"库存服务查询异常\",{\"1\":{\"688\":1}}],[\"库存量单位\",{\"1\":{\"669\":1}}],[\"匹配查询\",{\"1\":{\"687\":1}}],[\"匹配某个属性的值\",{\"1\":{\"685\":1}}],[\"匹配\",{\"1\":{\"685\":1}}],[\"匹配时才移除\",{\"1\":{\"67\":1}}],[\"希望按照balance字段降序排序\",{\"1\":{\"685\":1}}],[\"希望修改值之后可以实时看到结果\",{\"1\":{\"660\":1}}],[\"真正的内容\",{\"1\":{\"682\":1}}],[\"真实案例\",{\"1\":{\"143\":1}}],[\"倒排索引\",{\"1\":{\"680\":1,\"685\":1}}],[\"名为stream\",{\"1\":{\"796\":1}}],[\"名词\",{\"1\":{\"680\":1}}],[\"名称\",{\"1\":{\"9\":1}}],[\"谷粒商城分布式高级篇2\",{\"0\":{\"709\":1}}],[\"谷粒商城分布式高级篇\",{\"0\":{\"678\":1}}],[\"谷粒商城分布式基础篇\",{\"0\":{\"649\":1}}],[\"谷粒商城\",{\"0\":{\"849\":1},\"2\":{\"676\":1,\"677\":1,\"707\":1,\"708\":1,\"722\":1,\"723\":1}}],[\"满足分布式系统或集群模式下多进程可见并且互斥的锁\",{\"1\":{\"775\":1}}],[\"满足下面的需求\",{\"1\":{\"751\":1}}],[\"满减\",{\"1\":{\"675\":1}}],[\"满减等信息\",{\"1\":{\"675\":1}}],[\"满100减10\",{\"1\":{\"659\":1}}],[\"远程调用失败\",{\"1\":{\"688\":1}}],[\"远程调用成功\",{\"1\":{\"688\":1}}],[\"远程保存sku优惠信息失败\",{\"1\":{\"675\":1}}],[\"远程保存spu积分信息失败\",{\"1\":{\"675\":1}}],[\"远程开发\",{\"1\":{\"634\":1}}],[\"绑定这个事件\",{\"1\":{\"670\":1}}],[\"绑定队列和交换机\",{\"1\":{\"338\":1}}],[\"颜色\",{\"1\":{\"670\":1}}],[\"销量\",{\"1\":{\"670\":1}}],[\"销售属性值\",{\"1\":{\"670\":1}}],[\"销售属性名\",{\"1\":{\"670\":1}}],[\"销售属性\",{\"1\":{\"670\":1}}],[\"价格区间\",{\"1\":{\"710\":1}}],[\"价格\",{\"1\":{\"670\":1}}],[\"副标题等信息\",{\"1\":{\"670\":1}}],[\"副标题\",{\"1\":{\"670\":1,\"764\":1}}],[\"顺序\",{\"1\":{\"670\":2}}],[\"启用\",{\"1\":{\"670\":1}}],[\"启用状态\",{\"1\":{\"670\":1}}],[\"启动后\",{\"1\":{\"658\":1}}],[\"启动类添加enablefeignclients注解\",{\"1\":{\"659\":1}}],[\"启动类加mapperscan\",{\"1\":{\"655\":1}}],[\"启动类上面加注解扫描mapper包\",{\"1\":{\"595\":1}}],[\"启动\",{\"1\":{\"643\":2}}],[\"启动方式\",{\"1\":{\"635\":1}}],[\"启动报错\",{\"1\":{\"496\":1}}],[\"启动nginx\",{\"1\":{\"426\":1,\"639\":1}}],[\"启动问题\",{\"0\":{\"380\":1}}],[\"启动子线程开始执行任务后\",{\"1\":{\"141\":1}}],[\"启动线程调用start方法\",{\"1\":{\"83\":1}}],[\"值\",{\"1\":{\"670\":1,\"815\":1}}],[\"值类型\",{\"1\":{\"670\":1}}],[\"值为超时时间\",{\"1\":{\"361\":1}}],[\"置空后\",{\"1\":{\"665\":1}}],[\"格式为https\",{\"1\":{\"665\":1}}],[\"品牌聚合\",{\"1\":{\"710\":1}}],[\"品牌\",{\"1\":{\"710\":1}}],[\"品牌的名字\",{\"1\":{\"688\":1}}],[\"品牌和分类是多对多的问题\",{\"1\":{\"672\":1}}],[\"品牌分类关联\",{\"0\":{\"672\":1},\"1\":{\"672\":1}}],[\"品牌logo地址\",{\"1\":{\"666\":1,\"667\":1}}],[\"品牌名不能为空\",{\"1\":{\"666\":1,\"667\":1}}],[\"品牌名\",{\"1\":{\"666\":1,\"667\":1}}],[\"品牌名称\",{\"1\":{\"186\":1}}],[\"品牌id必须提交\",{\"1\":{\"667\":1}}],[\"品牌id\",{\"1\":{\"666\":1,\"667\":1,\"670\":2,\"672\":1}}],[\"品牌管理\",{\"0\":{\"664\":1}}],[\"拖拽节点\",{\"1\":{\"663\":1}}],[\"命中\",{\"1\":{\"756\":1,\"758\":1}}],[\"命令名称\",{\"1\":{\"780\":1}}],[\"命令来删除键的过期时间\",{\"1\":{\"749\":1}}],[\"命令来更新键的过期时间\",{\"1\":{\"749\":1}}],[\"命令来设置键的过期时间\",{\"1\":{\"749\":1}}],[\"命令可以得到api生成的接口代码\",{\"1\":{\"14\":1}}],[\"命名空间id\",{\"1\":{\"660\":1}}],[\"命名空间\",{\"1\":{\"660\":1}}],[\"暂时用不到requirespermissions\",{\"1\":{\"655\":1}}],[\"暂时关闭或降级服务\",{\"1\":{\"27\":1}}],[\"勾选所有表\",{\"1\":{\"655\":1}}],[\"父组件感知\",{\"1\":{\"670\":1}}],[\"父级maven加入renrnefast依赖\",{\"1\":{\"655\":1}}],[\"父级maven用于聚合\",{\"1\":{\"653\":1}}],[\"父标签id\",{\"1\":{\"509\":2}}],[\"杀死容器\",{\"1\":{\"643\":1}}],[\"宝塔部署\",{\"0\":{\"641\":1}}],[\"输入以下配置内容\",{\"1\":{\"651\":1}}],[\"输入jobs查看状态\",{\"1\":{\"640\":1}}],[\"输出流\",{\"1\":{\"423\":1}}],[\"输出stu2的学生信息\",{\"1\":{\"418\":1}}],[\"输出stu1的学生信息\",{\"1\":{\"418\":1}}],[\"输出返回\",{\"1\":{\"143\":1}}],[\"情况\",{\"1\":{\"639\":1}}],[\"沙箱环境\",{\"1\":{\"634\":1}}],[\"独立线程去重构数据\",{\"1\":{\"756\":1}}],[\"独立的服务器\",{\"1\":{\"634\":1}}],[\"独立的数据库\",{\"1\":{\"634\":1}}],[\"独立于spring存在的定时任务框架\",{\"1\":{\"544\":1}}],[\"独立于接口\",{\"1\":{\"26\":1}}],[\"产品\",{\"1\":{\"634\":1}}],[\"产生原因\",{\"1\":{\"153\":1}}],[\"集群并发\",{\"0\":{\"771\":1}}],[\"集中处理\",{\"1\":{\"626\":1}}],[\"集合大小\",{\"1\":{\"422\":2}}],[\"集合list和map\",{\"0\":{\"418\":1}}],[\"集合注入\",{\"0\":{\"288\":1}}],[\"集合转json数据\",{\"1\":{\"261\":1}}],[\"集合参数传递\",{\"1\":{\"254\":2}}],[\"集合参数\",{\"1\":{\"254\":2}}],[\"集合类型参数\",{\"0\":{\"254\":1}}],[\"集合项迭代之间的分隔符\",{\"1\":{\"190\":1}}],[\"集合\",{\"0\":{\"389\":1},\"1\":{\"190\":1,\"220\":1}}],[\"集合的线程安全\",{\"0\":{\"94\":1}}],[\"集合和数组的区别\",{\"1\":{\"47\":1}}],[\"集合必考+hashmap底层原理\",{\"1\":{\"47\":1}}],[\"捕获代码中所有的异常\",{\"1\":{\"626\":1}}],[\"捕获到异常\",{\"1\":{\"229\":2}}],[\"退出登录接口\",{\"1\":{\"620\":1}}],[\"退款时间\",{\"1\":{\"764\":1}}],[\"退款中\",{\"1\":{\"764\":1}}],[\"退款\",{\"1\":{\"352\":1}}],[\"角色\",{\"1\":{\"616\":1}}],[\"角各偏移10像素和25像素\",{\"1\":{\"439\":1}}],[\"替服务器接受请求\",{\"1\":{\"611\":1}}],[\"替客户端向服务器发送请求\",{\"1\":{\"611\":1}}],[\"替换\",{\"1\":{\"303\":2}}],[\"替换<context\",{\"1\":{\"301\":1}}],[\"替换applicationcontext\",{\"1\":{\"301\":1}}],[\"替换掉mybatis\",{\"1\":{\"196\":1}}],[\"追踪request源码\",{\"1\":{\"610\":1}}],[\"脱敏后的用户信息\",{\"1\":{\"605\":1}}],[\"脱敏\",{\"1\":{\"603\":1,\"604\":1}}],[\"账户不能包含字符\",{\"1\":{\"599\":1,\"605\":1}}],[\"账户不能包含特殊字符\",{\"1\":{\"599\":2,\"605\":1}}],[\"账户不能重复\",{\"1\":{\"599\":2,\"604\":1}}],[\"账户不包含特殊字符\",{\"1\":{\"599\":1,\"604\":1}}],[\"账户不少于四位\",{\"1\":{\"599\":1,\"604\":1}}],[\"账号\",{\"1\":{\"9\":1,\"422\":1,\"519\":1,\"596\":1}}],[\"昵称\",{\"1\":{\"596\":1}}],[\"平均薪资\",{\"1\":{\"687\":1}}],[\"平台管理\",{\"1\":{\"728\":1}}],[\"平台管理api文档\",{\"1\":{\"726\":1}}],[\"平台\",{\"1\":{\"582\":1}}],[\"平时启动服务以后创建一个实体\",{\"1\":{\"47\":1}}],[\"平时写sql的时候有建索引吗\",{\"1\":{\"47\":1}}],[\"平时写sql用过having关键字吗\",{\"1\":{\"47\":1}}],[\"现成的管理系统\",{\"1\":{\"582\":1}}],[\"现在以主从为例\",{\"1\":{\"783\":1}}],[\"现在企业级开发中基本都使用redis或者zookeeper作为分布式锁\",{\"1\":{\"775\":1}}],[\"现在的方案是\",{\"1\":{\"755\":1}}],[\"现在有了redis\",{\"1\":{\"741\":1}}],[\"现在有新的需求\",{\"1\":{\"660\":1}}],[\"现在有一个coding函数\",{\"1\":{\"491\":1}}],[\"现在时间\",{\"1\":{\"422\":1}}],[\"现在70\",{\"1\":{\"115\":1,\"713\":1}}],[\"部署上面的优化\",{\"1\":{\"646\":1}}],[\"部署\",{\"0\":{\"633\":1,\"637\":1},\"1\":{\"582\":1,\"639\":1}}],[\"部署发布\",{\"1\":{\"580\":1}}],[\"部分表示在minio容器内运行minio服务器\",{\"1\":{\"317\":1}}],[\"概要设计\",{\"1\":{\"580\":1}}],[\"算法作为默认的内存淘汰策略\",{\"1\":{\"749\":1}}],[\"算法生成签名\",{\"1\":{\"17\":1}}],[\"算过程中的内存占⽤\",{\"1\":{\"575\":1}}],[\"斥\",{\"1\":{\"574\":1}}],[\"⼊队⼈数超限的问题\",{\"1\":{\"574\":1}}],[\"⾃⼰实际测试对⽐数据\",{\"1\":{\"571\":1}}],[\"节省项目体积\",{\"1\":{\"634\":1}}],[\"节省内存的原因是不⽤保存序列化对象信息或者\",{\"1\":{\"571\":1}}],[\"节省存储空间\",{\"1\":{\"469\":1}}],[\"节约了\",{\"1\":{\"571\":1}}],[\"⽤户登录\",{\"1\":{\"571\":1}}],[\"精确匹配\",{\"1\":{\"685\":1}}],[\"精简依赖\",{\"1\":{\"634\":1}}],[\"精细排序\",{\"1\":{\"567\":1}}],[\"精排\",{\"1\":{\"567\":2}}],[\"粗略排序\",{\"1\":{\"567\":1}}],[\"粗排\",{\"1\":{\"567\":2}}],[\"召回\",{\"1\":{\"567\":2}}],[\"召唤神龙\",{\"1\":{\"108\":1}}],[\"难道要对所有的数据计算一遍相似度\",{\"1\":{\"567\":1}}],[\"难道要查出来所有的商品\",{\"1\":{\"567\":1}}],[\"针对这一问题的常见解决方案就是加锁\",{\"1\":{\"766\":1}}],[\"针对一些重点用户\",{\"1\":{\"567\":1}}],[\"针对于常作为查询条件\",{\"1\":{\"469\":1}}],[\"针对于数据量较大\",{\"1\":{\"469\":1}}],[\"√\",{\"1\":{\"567\":3}}],[\"剔除自己\",{\"1\":{\"567\":1}}],[\"细节\",{\"1\":{\"567\":1}}],[\"切忌不要在数据量大的时候循环输出日志\",{\"1\":{\"567\":1}}],[\"秒杀优化\",{\"0\":{\"787\":1}}],[\"秒杀优惠券表\",{\"1\":{\"764\":1}}],[\"秒杀已经结束\",{\"1\":{\"765\":1}}],[\"秒杀还未开始\",{\"1\":{\"765\":1}}],[\"秒杀卷\",{\"1\":{\"764\":1}}],[\"秒杀券\",{\"1\":{\"764\":1}}],[\"秒内的计数器\",{\"1\":{\"763\":1}}],[\"秒缩短⾄\",{\"1\":{\"571\":1}}],[\"秒\",{\"1\":{\"567\":2,\"571\":1}}],[\"依然会发生\",{\"1\":{\"771\":1}}],[\"依次和当前用户计算分数\",{\"1\":{\"567\":1}}],[\"依赖的基础镜像\",{\"1\":{\"642\":1}}],[\"依赖注入\",{\"1\":{\"268\":1}}],[\"依赖\",{\"1\":{\"28\":1,\"175\":1,\"313\":1,\"318\":1,\"332\":1,\"429\":1,\"611\":1}}],[\"越排在前面\",{\"1\":{\"566\":1}}],[\"移除一些不需要的东西\",{\"1\":{\"585\":1}}],[\"移除所有加入队伍的关联信息\",{\"1\":{\"563\":1}}],[\"移除并获取列表最后一个元素\",{\"1\":{\"388\":1}}],[\"幂等性\",{\"1\":{\"561\":1}}],[\"幂等方案\",{\"1\":{\"360\":1}}],[\"私有\",{\"1\":{\"557\":2}}],[\"邀请其他用户加入队伍\",{\"1\":{\"556\":1}}],[\"邀请其他人\",{\"1\":{\"500\":1}}],[\"权限转移给第二早加入的用户\",{\"1\":{\"562\":1}}],[\"权限转给第二个进入的用户\",{\"1\":{\"556\":1}}],[\"权重\",{\"1\":{\"27\":1}}],[\"聊天\",{\"1\":{\"556\":1}}],[\"做好热点参数的限流\",{\"1\":{\"752\":1}}],[\"做好数据的基础格式校验\",{\"1\":{\"752\":1}}],[\"做项目\",{\"1\":{\"556\":1}}],[\"做一个提供api接口调用的平台\",{\"1\":{\"5\":1}}],[\"看门狗\",{\"1\":{\"782\":1}}],[\"看门狗机制的好处在于它能够防止锁被永久地占用\",{\"1\":{\"782\":1}}],[\"看门狗机制的基本工作方式如下\",{\"1\":{\"782\":1}}],[\"看门狗机制\",{\"1\":{\"551\":1,\"782\":1}}],[\"看到有关重试的逻辑\",{\"1\":{\"782\":1}}],[\"看到下面界面成功\",{\"1\":{\"681\":1}}],[\"看是否已经有键值对存储在这里\",{\"1\":{\"69\":1}}],[\"续期\",{\"1\":{\"549\":2}}],[\"行级锁\",{\"1\":{\"548\":1}}],[\"行锁也可能导致死锁等问题\",{\"1\":{\"110\":1}}],[\"行锁的粒度较小\",{\"1\":{\"110\":1}}],[\"行锁是在数据库表的行级别上加锁\",{\"1\":{\"110\":1}}],[\"行锁\",{\"1\":{\"110\":1}}],[\"抢不到就放弃\",{\"1\":{\"551\":1}}],[\"抢锁机制\",{\"0\":{\"547\":1}}],[\"抢占资源\",{\"1\":{\"153\":1}}],[\"抢占\",{\"1\":{\"109\":1}}],[\"脏数据\",{\"1\":{\"545\":1}}],[\"脏读\",{\"1\":{\"158\":1,\"473\":1,\"474\":1}}],[\"脏读幻读不可重复读\",{\"1\":{\"47\":1}}],[\"浪费资源\",{\"1\":{\"545\":1}}],[\"利于存在内存里\",{\"1\":{\"543\":1}}],[\"利用智能算法屏蔽掉违规的\",{\"1\":{\"808\":1}}],[\"利用redis中恰当的数据结构\",{\"1\":{\"807\":1}}],[\"利用redis的set集合判断是否点赞过\",{\"1\":{\"803\":1}}],[\"利用redis存储\",{\"1\":{\"792\":1}}],[\"利用redis集群提高服务的可用性\",{\"1\":{\"753\":1}}],[\"利用这套逻辑来实现分布式锁\",{\"1\":{\"775\":1}}],[\"利用setnx这个方法\",{\"1\":{\"775\":1}}],[\"利用互斥锁就能保证只有一个线程去执行操作数据库的逻辑\",{\"1\":{\"755\":1}}],[\"利用tcc等分布式事务方案\",{\"1\":{\"750\":1}}],[\"利用消息后置处理器添加消息头\",{\"1\":{\"355\":1}}],[\"利用自定义sql可以构造一些复杂的where条件\",{\"1\":{\"207\":1}}],[\"利用反射保存对象信息\",{\"0\":{\"171\":1}}],[\"十万条为\",{\"1\":{\"539\":1}}],[\"种session的时候注意范围\",{\"1\":{\"533\":1}}],[\"种形式\",{\"1\":{\"101\":1}}],[\"监听同一个队列\",{\"1\":{\"795\":1}}],[\"监听当前线程\",{\"1\":{\"551\":1}}],[\"监听器\",{\"1\":{\"526\":1}}],[\"监听窗口关闭事件\",{\"1\":{\"406\":1}}],[\"资料\",{\"1\":{\"525\":1}}],[\"资源名称\",{\"1\":{\"824\":1}}],[\"资源分配\",{\"1\":{\"153\":1}}],[\"资源竞争\",{\"1\":{\"153\":1}}],[\"资源目录页\",{\"0\":{\"34\":1}}],[\"爬虫\",{\"0\":{\"523\":1}}],[\"作业\",{\"1\":{\"747\":1}}],[\"作为工具\",{\"1\":{\"521\":1}}],[\"作用包含两个\",{\"1\":{\"475\":1}}],[\"作用于静态方法\",{\"1\":{\"146\":1}}],[\"作用于代码块\",{\"1\":{\"146\":1}}],[\"作用于实例方法\",{\"1\":{\"146\":1}}],[\"作用\",{\"1\":{\"28\":1,\"165\":1}}],[\"作用是将请求转发到不同的业务\",{\"1\":{\"27\":1}}],[\"作用是负载均衡\",{\"1\":{\"27\":1}}],[\"便于前端和后端对接\",{\"1\":{\"521\":1}}],[\"便于沉淀和维护\",{\"1\":{\"521\":1}}],[\"便没有在更新\",{\"1\":{\"415\":1}}],[\"错误码\",{\"1\":{\"521\":1,\"625\":1}}],[\"错误链接\",{\"1\":{\"450\":1}}],[\"邮箱\",{\"1\":{\"519\":2,\"596\":2}}],[\"邮件\",{\"1\":{\"359\":1,\"616\":1}}],[\"电话\",{\"1\":{\"519\":2,\"596\":1,\"616\":1}}],[\"电子邮件\",{\"1\":{\"415\":1}}],[\"清空threadlocal中的数据\",{\"1\":{\"742\":1}}],[\"清空搜索框\",{\"1\":{\"518\":1}}],[\"清理本地仓库并重新构建\",{\"1\":{\"655\":1}}],[\"清洗数据\",{\"1\":{\"523\":1}}],[\"清除线程的中断状态\",{\"1\":{\"155\":1}}],[\"流程图如下\",{\"1\":{\"765\":1}}],[\"流失处理\",{\"1\":{\"512\":1}}],[\"流量染色\",{\"1\":{\"27\":1}}],[\"流量保护\",{\"1\":{\"5\":1}}],[\"废弃\",{\"1\":{\"512\":1}}],[\"漏洞太多\",{\"1\":{\"512\":1}}],[\"漏桶算法\",{\"1\":{\"27\":1}}],[\"灵活\",{\"1\":{\"512\":1}}],[\"灵活性\",{\"1\":{\"91\":1}}],[\"企业做项目流程\",{\"0\":{\"580\":1}}],[\"企业中很少用\",{\"1\":{\"548\":1}}],[\"企业大项目开发中尽量减少关联查询\",{\"1\":{\"510\":1}}],[\"企业名称\",{\"1\":{\"186\":1}}],[\"哪怕此时redis中的数据过期了\",{\"1\":{\"752\":1}}],[\"哪怕性能低\",{\"1\":{\"510\":1}}],[\"哪一个操作系统是多对多\",{\"1\":{\"47\":1}}],[\"唯一\",{\"1\":{\"509\":1}}],[\"唯一消息id\",{\"1\":{\"352\":2}}],[\"备战秋招\",{\"1\":{\"525\":1}}],[\"备注\",{\"1\":{\"509\":1,\"521\":1,\"596\":1}}],[\"备份的其他节点叫该队列的镜像节点\",{\"1\":{\"363\":1}}],[\"已经点赞\",{\"1\":{\"803\":1,\"804\":1}}],[\"已经剔除的服务\",{\"1\":{\"412\":1}}],[\"已点赞过则点赞数\",{\"1\":{\"803\":1}}],[\"已退款\",{\"1\":{\"764\":1}}],[\"已取消\",{\"1\":{\"764\":1}}],[\"已核销\",{\"1\":{\"764\":1}}],[\"已支付\",{\"1\":{\"764\":1}}],[\"已加入队伍的人数\",{\"1\":{\"561\":1,\"574\":1}}],[\"已选中标签\",{\"1\":{\"518\":1}}],[\"已婚\",{\"1\":{\"508\":1}}],[\"乐观\",{\"1\":{\"508\":1}}],[\"乐观锁适合用在更新数据的情况下面\",{\"1\":{\"770\":1}}],[\"乐观锁通常用于减小锁的争用\",{\"1\":{\"768\":1}}],[\"乐观锁的核心思想是假定在大多数情况下\",{\"1\":{\"768\":1}}],[\"乐观锁的实现方式是检查用户的余额是否与初始查询时的余额相同\",{\"1\":{\"210\":1}}],[\"乐观锁是一种并发控制机制\",{\"1\":{\"210\":1}}],[\"乐观锁是一种基于数据版本控制的锁机制\",{\"1\":{\"110\":1}}],[\"乐观锁则直接去操作同步资源\",{\"1\":{\"145\":1}}],[\"乐观锁和悲观锁\",{\"0\":{\"145\":1}}],[\"乐观锁\",{\"0\":{\"768\":1},\"1\":{\"110\":1,\"145\":1,\"210\":2,\"218\":1,\"360\":1,\"548\":1,\"766\":1,\"768\":1}}],[\"研三\",{\"1\":{\"508\":1}}],[\"研二\",{\"1\":{\"508\":1}}],[\"研一\",{\"1\":{\"508\":1}}],[\"待业\",{\"1\":{\"508\":1}}],[\"身份\",{\"1\":{\"508\":1}}],[\"王者\",{\"1\":{\"508\":1}}],[\"段位\",{\"1\":{\"508\":1}}],[\"竞赛\",{\"1\":{\"508\":1}}],[\"考虑使用悲观锁\",{\"1\":{\"770\":1}}],[\"考虑使用数据卷挂载的方式来启动docker\",{\"1\":{\"646\":1}}],[\"考公\",{\"1\":{\"508\":1}}],[\"考研\",{\"1\":{\"508\":1}}],[\"秋招\",{\"1\":{\"508\":1}}],[\"春招\",{\"1\":{\"508\":1}}],[\"男\",{\"1\":{\"508\":1,\"510\":1,\"518\":2,\"519\":1,\"687\":2}}],[\"性别\",{\"1\":{\"508\":1,\"518\":1,\"519\":2,\"596\":2,\"616\":1}}],[\"性能好\",{\"1\":{\"757\":1}}],[\"性能损失越大\",{\"1\":{\"696\":1}}],[\"性能监控\",{\"0\":{\"693\":1}}],[\"性能压测\",{\"0\":{\"692\":1}}],[\"性能测试\",{\"1\":{\"634\":1}}],[\"性能由好到差为null\",{\"1\":{\"486\":1}}],[\"性能和可用性\",{\"1\":{\"478\":1}}],[\"性能比较稳定\",{\"1\":{\"362\":1}}],[\"性能下降\",{\"1\":{\"327\":1}}],[\"性能规范\",{\"1\":{\"218\":1}}],[\"性能更好\",{\"1\":{\"72\":1,\"102\":1}}],[\"性能高\",{\"1\":{\"27\":1,\"467\":1,\"543\":1}}],[\"队长id\",{\"1\":{\"557\":1}}],[\"队长可以解散队伍\",{\"0\":{\"563\":1},\"1\":{\"556\":1}}],[\"队长\",{\"1\":{\"556\":1}}],[\"队伍异常\",{\"1\":{\"562\":1}}],[\"队伍解散\",{\"1\":{\"562\":1}}],[\"队伍已满\",{\"1\":{\"561\":1,\"574\":1}}],[\"队伍已过期\",{\"1\":{\"561\":1,\"574\":1}}],[\"队伍必须存在\",{\"1\":{\"561\":1}}],[\"队伍状态不满足要求\",{\"1\":{\"558\":1}}],[\"队伍人数不满足要求\",{\"1\":{\"558\":1}}],[\"队伍标题不满足要求\",{\"1\":{\"558\":1}}],[\"队伍标题\",{\"1\":{\"558\":2}}],[\"队伍>1\",{\"1\":{\"558\":2}}],[\"队伍id\",{\"1\":{\"557\":2}}],[\"队伍有哪些用户\",{\"1\":{\"557\":1}}],[\"队伍\",{\"1\":{\"557\":1,\"562\":1,\"563\":1}}],[\"队伍描述过长\",{\"1\":{\"558\":1}}],[\"队伍描述\",{\"1\":{\"557\":1}}],[\"队伍表\",{\"1\":{\"557\":4}}],[\"队伍表team\",{\"1\":{\"557\":1}}],[\"队伍名称\",{\"1\":{\"556\":1,\"557\":2}}],[\"队伍页\",{\"1\":{\"505\":1}}],[\"队列始终保持最小距离的用户\",{\"1\":{\"575\":1}}],[\"队列满了\",{\"1\":{\"361\":1}}],[\"队列\",{\"1\":{\"359\":1,\"363\":1}}],[\"队列中的消息会在各个mq的镜像节点之间同步备份\",{\"1\":{\"363\":1}}],[\"队列中的消息就会丢失\",{\"1\":{\"363\":1}}],[\"队列中的第一个延迟时间\",{\"1\":{\"355\":1}}],[\"队列中丢失消息\",{\"1\":{\"359\":1}}],[\"队列持久化\",{\"1\":{\"346\":1,\"359\":1}}],[\"队列名称\",{\"1\":{\"333\":1}}],[\"搜索天安门\",{\"1\":{\"815\":1}}],[\"搜索用户\",{\"1\":{\"616\":1}}],[\"搜索结果页面获取参数\",{\"1\":{\"531\":1}}],[\"搜索页传递参数\",{\"1\":{\"531\":1}}],[\"搜索页面\",{\"0\":{\"518\":1}}],[\"搜索\",{\"1\":{\"518\":1}}],[\"搜索标签\",{\"1\":{\"512\":1}}],[\"搜索框文字\",{\"1\":{\"518\":1}}],[\"搜索框\",{\"1\":{\"505\":1}}],[\"搜索镜像\",{\"1\":{\"317\":1}}],[\"技术搭配方案\",{\"1\":{\"657\":1}}],[\"技术栈\",{\"0\":{\"501\":1}}],[\"技术选型\",{\"0\":{\"7\":1,\"582\":1},\"1\":{\"580\":1}}],[\"组图标\",{\"1\":{\"670\":1}}],[\"组名\",{\"1\":{\"670\":1}}],[\"组装成父子的树形结构\",{\"1\":{\"663\":1}}],[\"组件化思想\",{\"1\":{\"507\":1}}],[\"组队功能\",{\"0\":{\"555\":1}}],[\"组队\",{\"1\":{\"500\":1}}],[\"组合两个\",{\"1\":{\"122\":3,\"718\":3}}],[\"大量的key同时过期\",{\"1\":{\"706\":1}}],[\"大量并发查一个数据\",{\"1\":{\"706\":1}}],[\"大多都损失在网络交互了\",{\"1\":{\"696\":1}}],[\"大概有如下几个\",{\"1\":{\"655\":1}}],[\"大数据推荐\",{\"1\":{\"567\":1}}],[\"大四\",{\"1\":{\"508\":1}}],[\"大三\",{\"1\":{\"508\":1}}],[\"大二\",{\"1\":{\"508\":1,\"518\":2}}],[\"大一\",{\"1\":{\"508\":1,\"518\":2}}],[\"大学\",{\"1\":{\"500\":1}}],[\"大于1则是已支付或已关闭\",{\"1\":{\"355\":1}}],[\"大于0说明数组已经初始化\",{\"1\":{\"71\":1}}],[\"帮助我们根据经纬度来检索数据\",{\"1\":{\"815\":1}}],[\"帮助大家找到志同道合的ikun\",{\"1\":{\"499\":1}}],[\"帮助你理解查询执行的情况\",{\"1\":{\"486\":1}}],[\"策略枚举\",{\"0\":{\"493\":1}}],[\"策略模式+工厂模式+模版方法\",{\"0\":{\"492\":1}}],[\"策略模式\",{\"0\":{\"491\":1},\"2\":{\"495\":1}}],[\"策略是由messagerecovery接口来定义的\",{\"1\":{\"351\":1}}],[\"影响系统性能\",{\"1\":{\"700\":1}}],[\"影响了下面的对比\",{\"1\":{\"575\":1}}],[\"影响了查询的效率\",{\"1\":{\"487\":1}}],[\"影响整体性能\",{\"1\":{\"142\":1}}],[\"⑤join优化能用innerjoin就不用left\",{\"1\":{\"487\":1}}],[\"④避免在where子句中对字段进行表达式操作\",{\"1\":{\"487\":1}}],[\"③尽量用union\",{\"1\":{\"487\":1}}],[\"③从库重做中继日志中的事件\",{\"1\":{\"477\":1}}],[\"嵩山版\",{\"1\":{\"487\":1}}],[\"范围可以是圆形或矩形\",{\"1\":{\"815\":1}}],[\"范围查询\",{\"1\":{\"486\":1}}],[\"范围查询右边的列\",{\"1\":{\"470\":2}}],[\"范围扫描\",{\"1\":{\"486\":1}}],[\"联合查询\",{\"1\":{\"486\":1}}],[\"联合索引很多时候可以覆盖索引\",{\"1\":{\"469\":1}}],[\"派生表查询\",{\"1\":{\"486\":1}}],[\"调试工具\",{\"1\":{\"485\":1}}],[\"调用lua脚本\",{\"1\":{\"780\":1}}],[\"调用函数\",{\"1\":{\"780\":1}}],[\"调用者只操作缓存\",{\"1\":{\"750\":1}}],[\"调用本地方法时\",{\"1\":{\"694\":1}}],[\"调用链监控\",{\"1\":{\"657\":1}}],[\"调用远程服务\",{\"1\":{\"657\":1,\"675\":1}}],[\"调用api发送ack\",{\"1\":{\"359\":1}}],[\"调用方法\",{\"1\":{\"269\":1}}],[\"调用方使用http请求\",{\"1\":{\"28\":1}}],[\"调用阿里云oss工具类进行文件上传\",{\"1\":{\"241\":1}}],[\"调用自定义的sql方法\",{\"1\":{\"207\":1}}],[\"调用thenrunasync执行第二个任务时\",{\"1\":{\"143\":1}}],[\"调用thenrun方法执行第二个任务时\",{\"1\":{\"143\":1}}],[\"调用资源类的操作方法\",{\"1\":{\"92\":1}}],[\"调用接口统计\",{\"1\":{\"29\":1}}],[\"调用这3个方法\",{\"1\":{\"29\":1}}],[\"调用失败\",{\"1\":{\"27\":2}}],[\"调用成功\",{\"1\":{\"27\":2,\"29\":1}}],[\"调用模拟接口\",{\"1\":{\"27\":1}}],[\"调用用户id\",{\"1\":{\"25\":1}}],[\"调用\",{\"1\":{\"22\":1,\"23\":1,\"182\":1}}],[\"调用的标识\",{\"1\":{\"17\":1}}],[\"触发器\",{\"0\":{\"482\":1}}],[\"冷热数据分离\",{\"1\":{\"478\":1}}],[\"垂直分表\",{\"0\":{\"730\":1},\"1\":{\"478\":1,\"730\":1}}],[\"垂直分库\",{\"1\":{\"478\":1}}],[\"想一个数据量较大业务\",{\"1\":{\"478\":1}}],[\"想要获取锁b\",{\"1\":{\"104\":1}}],[\"想要获取锁a\",{\"1\":{\"104\":1}}],[\"水平分表\",{\"1\":{\"478\":2}}],[\"水平分库\",{\"1\":{\"478\":2}}],[\"②sql语句要避免造成索引失效的写法\",{\"1\":{\"487\":1}}],[\"②比如设置合适的字符串类型\",{\"1\":{\"487\":1}}],[\"②从库读取主库的二进制日志文件binlog\",{\"1\":{\"477\":1}}],[\"②版本链\",{\"1\":{\"476\":1}}],[\"②roll\",{\"1\":{\"476\":1}}],[\"①select语句务必指明字段名称\",{\"1\":{\"487\":1}}],[\"①比如设置合适的数值\",{\"1\":{\"487\":1}}],[\"①主库在事务提交时\",{\"1\":{\"477\":1}}],[\"①回滚日志\",{\"1\":{\"476\":1}}],[\"①trx\",{\"1\":{\"476\":1}}],[\"隐藏字段\",{\"1\":{\"476\":1}}],[\"隐式锁\",{\"1\":{\"152\":1}}],[\"务提交之后会把所有修改信息都存到该日志文件中\",{\"1\":{\"475\":1}}],[\"串行化\",{\"1\":{\"474\":1}}],[\"幻影\",{\"1\":{\"473\":1}}],[\"幻读\",{\"1\":{\"473\":1,\"474\":1}}],[\"称之为不可重复读\",{\"1\":{\"473\":1}}],[\"称为依赖注入\",{\"1\":{\"268\":1}}],[\"违反最左前缀法则\",{\"1\":{\"470\":1}}],[\"造成死锁的情况\",{\"1\":{\"776\":1}}],[\"造成索引失效\",{\"1\":{\"470\":2}}],[\"造成系统假死\",{\"1\":{\"47\":1}}],[\"维护方便\",{\"1\":{\"752\":1}}],[\"维护一个固定长度的有序集合\",{\"1\":{\"567\":1}}],[\"维护索引结构的代价也就越大\",{\"1\":{\"469\":1}}],[\"维护了一定数量的许可证\",{\"1\":{\"109\":2}}],[\"效率\",{\"2\":{\"828\":1}}],[\"效率稍低\",{\"1\":{\"487\":1}}],[\"效率低\",{\"1\":{\"468\":1,\"487\":1}}],[\"效果如下\",{\"1\":{\"439\":1,\"455\":1,\"507\":1,\"518\":1,\"519\":1,\"520\":1,\"534\":1,\"616\":1}}],[\"效果\",{\"1\":{\"23\":1,\"663\":1}}],[\"知道什么叫覆盖索引嘛\",{\"1\":{\"467\":1}}],[\"知道什么是回表查询嘛\",{\"1\":{\"466\":1}}],[\"覆盖索引+子查询\",{\"1\":{\"468\":1}}],[\"覆盖索引是指查询使用了索引\",{\"1\":{\"467\":1}}],[\"覆盖索引可以避免回表查询\",{\"1\":{\"467\":1}}],[\"覆盖索引\",{\"0\":{\"467\":1},\"1\":{\"467\":1}}],[\"二次密码是否符合要求\",{\"1\":{\"599\":1}}],[\"二进制日志\",{\"1\":{\"477\":1}}],[\"二级索\",{\"1\":{\"466\":1}}],[\"二级索引\",{\"1\":{\"466\":1}}],[\"二面问的比较灵活\",{\"1\":{\"47\":1}}],[\"聚合分析\",{\"1\":{\"710\":1}}],[\"聚合\",{\"1\":{\"710\":1}}],[\"聚合查询\",{\"1\":{\"687\":2}}],[\"聚集索引\",{\"1\":{\"466\":1}}],[\"聚集泰l\",{\"1\":{\"466\":1}}],[\"聚簇索引的选取规则\",{\"1\":{\"466\":1}}],[\"聚簇索引\",{\"0\":{\"466\":1},\"1\":{\"466\":2}}],[\"叶子节点是一个双向链表\",{\"1\":{\"465\":1}}],[\"叶子阶段存储数据\",{\"1\":{\"465\":1}}],[\"磁盘读写代价b+树更低\",{\"1\":{\"465\":1}}],[\"路径需要和菜单路径匹配\",{\"1\":{\"663\":1}}],[\"路径更短\",{\"1\":{\"465\":1}}],[\"路由key\",{\"1\":{\"334\":1}}],[\"路由\",{\"1\":{\"27\":2}}],[\"阶数更多\",{\"1\":{\"465\":1}}],[\"了解过索引吗\",{\"0\":{\"465\":1},\"1\":{\"465\":1}}],[\"了解即可\",{\"1\":{\"245\":1}}],[\"预期值和新值\",{\"1\":{\"769\":1}}],[\"预检请求通过\",{\"1\":{\"663\":1}}],[\"预发布环境\",{\"1\":{\"634\":1}}],[\"预热缓存\",{\"1\":{\"699\":1}}],[\"预热\",{\"1\":{\"573\":1}}],[\"预加载缓存\",{\"1\":{\"540\":1}}],[\"预先把数据\",{\"1\":{\"540\":1}}],[\"预处理阶段\",{\"1\":{\"463\":1}}],[\"预防\",{\"1\":{\"153\":1}}],[\"涉及tcp\",{\"1\":{\"463\":1}}],[\"报错\",{\"1\":{\"457\":1,\"653\":1}}],[\"详细\",{\"1\":{\"669\":1}}],[\"详细设计\",{\"1\":{\"580\":1}}],[\"详细的java开发教程\",{\"1\":{\"455\":1}}],[\"详细介绍java异常\",{\"1\":{\"47\":1}}],[\"跟着ikun学java\",{\"1\":{\"455\":1}}],[\"跟原来的元素没关系了\",{\"1\":{\"58\":1}}],[\"欢迎关注本公众号\",{\"1\":{\"453\":1}}],[\"随便发送消息\",{\"1\":{\"453\":1}}],[\"随机推荐几个\",{\"1\":{\"566\":1}}],[\"随机匹配\",{\"0\":{\"566\":1}}],[\"随机字符串\",{\"1\":{\"451\":1,\"452\":1}}],[\"随机数\",{\"1\":{\"451\":1,\"452\":2}}],[\"随机访问$o\",{\"1\":{\"51\":1}}],[\"京奥嘉园支行\",{\"1\":{\"444\":1}}],[\"招商银行24小时自助银行\",{\"1\":{\"444\":1}}],[\"招商银行24小时自助银行服务\",{\"1\":{\"444\":1}}],[\"广发银行24小时自助银行服务\",{\"1\":{\"444\":1}}],[\"广播\",{\"1\":{\"334\":1}}],[\"昌平沙河支行\",{\"1\":{\"444\":1}}],[\"昌平区\",{\"1\":{\"444\":5}}],[\"朝阳区\",{\"1\":{\"444\":4}}],[\"望京融科支行\",{\"1\":{\"444\":1}}],[\"北京西站\",{\"1\":{\"815\":1}}],[\"北京站116\",{\"1\":{\"815\":1}}],[\"北京南站\",{\"1\":{\"815\":1}}],[\"北京航天城支行\",{\"1\":{\"444\":1}}],[\"北京银行24小时自助银行服务\",{\"1\":{\"444\":1}}],[\"北京府学路支行\",{\"1\":{\"444\":1}}],[\"北京广顺北大街支行\",{\"1\":{\"444\":1}}],[\"北京市海淀区友谊路193号\",{\"1\":{\"444\":1}}],[\"北京市朝阳区东坝乡京奥家园186幢一楼西侧\",{\"1\":{\"444\":1}}],[\"北京市朝阳区航管南路北京首都国际机场t2航站楼p2停车场f1\",{\"1\":{\"444\":1}}],[\"北京市朝阳区望京西园二区211号\",{\"1\":{\"444\":1}}],[\"北京市朝阳区望京东园523号融科望京中心a座101号\",{\"1\":{\"444\":1}}],[\"北京市昌平区龙冠商务中心1层\",{\"1\":{\"444\":1}}],[\"北京市昌平区京藏高速碧水庄园\",{\"1\":{\"444\":1}}],[\"北京市昌平区回龙观西大街19号北店时代广场e座\",{\"1\":{\"444\":1}}],[\"北京市昌平区回龙观镇天龙苑25号楼1单元102室\",{\"1\":{\"444\":1}}],[\"北京市昌平区府学路福地家园7号楼07号1\",{\"1\":{\"444\":1}}],[\"北京市\",{\"1\":{\"444\":20}}],[\"北京回龙观支行\",{\"1\":{\"444\":1}}],[\"北京科蓝\",{\"1\":{\"47\":1}}],[\"坐标转换\",{\"0\":{\"442\":1}}],[\"景点\",{\"1\":{\"440\":1}}],[\"地图api\",{\"2\":{\"446\":1,\"447\":1}}],[\"地图导航\",{\"0\":{\"445\":1}}],[\"地点检索联想\",{\"0\":{\"444\":1}}],[\"地球模式\",{\"1\":{\"439\":1}}],[\"地址\",{\"1\":{\"355\":1}}],[\"地址参数名与形参变量名相同\",{\"1\":{\"250\":1}}],[\"点赞列表的顺序和时间戳不对应\",{\"1\":{\"805\":1}}],[\"点赞查询列表\",{\"0\":{\"805\":1}}],[\"点赞排行榜\",{\"0\":{\"804\":1}}],[\"点赞功能\",{\"0\":{\"803\":1}}],[\"点赞数+1\",{\"1\":{\"803\":1,\"804\":1}}],[\"点赞数\",{\"1\":{\"801\":1,\"803\":1,\"804\":1}}],[\"点赞数量\",{\"1\":{\"801\":1}}],[\"点话\",{\"1\":{\"596\":1}}],[\"点的墨卡托坐标\",{\"1\":{\"439\":1}}],[\"点击链接\",{\"1\":{\"455\":1}}],[\"点击的经纬度\",{\"1\":{\"439\":1}}],[\"点击右上角accesskey管理\",{\"1\":{\"240\":1}}],[\"您已经抢购过了\",{\"1\":{\"770\":3}}],[\"您\",{\"1\":{\"439\":1}}],[\"您可以看到在本例中该位置即是\",{\"1\":{\"439\":1}}],[\"白名单设置为\",{\"1\":{\"441\":1}}],[\"白名单设计为所有\",{\"1\":{\"436\":1}}],[\"白名单里面\",{\"1\":{\"14\":1}}],[\"百度地图api\",{\"1\":{\"436\":1}}],[\"百万数据写入\",{\"0\":{\"431\":1}}],[\"省内存\",{\"1\":{\"432\":1}}],[\"省略\",{\"1\":{\"226\":1}}],[\"填充\",{\"1\":{\"432\":1}}],[\"填写host名称\",{\"1\":{\"665\":1}}],[\"填写本地文件的完整路径\",{\"1\":{\"241\":1,\"665\":1}}],[\"填写object完整路径\",{\"1\":{\"241\":1,\"665\":1}}],[\"填写bucket名称\",{\"1\":{\"241\":1,\"665\":1}}],[\"忽略这个字段\",{\"1\":{\"430\":1}}],[\"忽略其它不更新的列\",{\"1\":{\"191\":1}}],[\"合成\",{\"1\":{\"423\":1}}],[\"合理分配资源\",{\"1\":{\"153\":1}}],[\"缺少代码\",{\"1\":{\"655\":1}}],[\"缺失变量默认值使用\",{\"1\":{\"421\":1}}],[\"缺点在于有锁就有死锁问题的发生\",{\"1\":{\"757\":1}}],[\"缺点在于在构建完缓存之前\",{\"1\":{\"756\":1}}],[\"缺点\",{\"1\":{\"398\":1,\"510\":2,\"752\":2,\"792\":1,\"793\":1,\"808\":4}}],[\"向指定位置\",{\"1\":{\"819\":1}}],[\"向一个频道发送消息psubscribe\",{\"1\":{\"793\":1}}],[\"向父附件发送事件\",{\"1\":{\"670\":1}}],[\"向数据库插入用户数据\",{\"1\":{\"599\":1}}],[\"向地图中添加标注\",{\"1\":{\"439\":1}}],[\"向map中存放map数据\",{\"1\":{\"423\":1}}],[\"向map中存放list集合数据\",{\"1\":{\"423\":1}}],[\"向model中存放list集合数据\",{\"1\":{\"418\":1}}],[\"向model中存放map数据\",{\"1\":{\"418\":1}}],[\"向有序集合添加一个成员zrange\",{\"1\":{\"392\":1}}],[\"根本就不用等下单逻辑走完\",{\"1\":{\"789\":1}}],[\"根html标签类似\",{\"1\":{\"417\":1}}],[\"根据商铺类型分页查询商铺信息\",{\"1\":{\"817\":1}}],[\"根据用户id查询用户信息\",{\"1\":{\"805\":2}}],[\"根据用户查询\",{\"1\":{\"803\":1}}],[\"根据用户的参数去选择查询方式\",{\"1\":{\"512\":1}}],[\"根据参数加载文章列表\",{\"1\":{\"732\":2}}],[\"根据品牌id查询所有关联关系\",{\"1\":{\"672\":1}}],[\"根据categoryid查询组\",{\"1\":{\"670\":1}}],[\"根据开发文档\",{\"1\":{\"665\":1}}],[\"根据spring\",{\"1\":{\"657\":1}}],[\"根据部分标签取用户\",{\"1\":{\"567\":1}}],[\"根据过期时间筛选\",{\"1\":{\"559\":1}}],[\"根据名称\",{\"1\":{\"559\":1}}],[\"根据标签tag匹配\",{\"1\":{\"566\":1}}],[\"根据标签搜索用户\",{\"1\":{\"512\":1}}],[\"根据标签查询队伍\",{\"1\":{\"500\":1}}],[\"根据父标签查询子标签\",{\"1\":{\"509\":1}}],[\"根据父标签id查询\",{\"1\":{\"509\":1}}],[\"根据不同的套餐\",{\"1\":{\"490\":1}}],[\"根据主键查询\",{\"1\":{\"486\":1}}],[\"根据业务进行拆分\",{\"1\":{\"478\":1}}],[\"根据自己简历上的项目\",{\"1\":{\"478\":1}}],[\"根据自身的逻辑来获取和释放同步状态\",{\"1\":{\"136\":1}}],[\"根据readview的匹配规则和当前的一些事务id判断该访问那个版本的数据\",{\"1\":{\"476\":1}}],[\"根据消息进行封装\",{\"1\":{\"453\":1}}],[\"根据消息的routing\",{\"1\":{\"336\":1}}],[\"根据模版生成html页面\",{\"0\":{\"423\":1}}],[\"根据异常判断返回不同结果\",{\"1\":{\"349\":1}}],[\"根据id修改店铺时\",{\"1\":{\"751\":1}}],[\"根据id查询shop\",{\"1\":{\"817\":1}}],[\"根据id查询博文\",{\"1\":{\"810\":1}}],[\"根据id查询店铺时\",{\"1\":{\"751\":1}}],[\"根据id查询商铺信息\",{\"1\":{\"747\":1}}],[\"根据id查询\",{\"1\":{\"509\":1,\"802\":1,\"803\":1}}],[\"根据id查询用户\",{\"1\":{\"208\":1,\"214\":1}}],[\"根据id批量查询用户\",{\"1\":{\"214\":1}}],[\"根据id集合查询用户\",{\"1\":{\"208\":1,\"209\":2,\"214\":1}}],[\"根据上边计算得出的容量\",{\"1\":{\"71\":1}}],[\"根据节点的位置\",{\"1\":{\"67\":1}}],[\"根据\",{\"1\":{\"67\":1,\"643\":1}}],[\"根据需要触发哈希表的扩容\",{\"1\":{\"66\":1}}],[\"根据键的哈希值找到存储位置\",{\"1\":{\"66\":1}}],[\"根据传入的参数类型和个数来确定调用哪个方法\",{\"1\":{\"47\":1}}],[\"根据断言\",{\"1\":{\"27\":1}}],[\"根据什么条件\",{\"1\":{\"27\":1}}],[\"小傅哥的idea插件开发手册\",{\"1\":{\"824\":1}}],[\"小黑子\",{\"1\":{\"453\":1}}],[\"小红\",{\"1\":{\"418\":1,\"419\":1,\"423\":1}}],[\"小红对象模型数据\",{\"1\":{\"418\":1,\"423\":1}}],[\"小强对象模型数据\",{\"1\":{\"423\":1}}],[\"小强\",{\"1\":{\"418\":1,\"423\":1}}],[\"小明\",{\"1\":{\"416\":1}}],[\"小a\",{\"1\":{\"171\":1}}],[\"纯文本形式的参数\",{\"1\":{\"416\":1}}],[\"纯注解开发\",{\"0\":{\"300\":1}}],[\"钱包\",{\"1\":{\"416\":1}}],[\"展示当前页面名称\",{\"1\":{\"505\":1}}],[\"展示地图\",{\"1\":{\"438\":1}}],[\"展示效果\",{\"1\":{\"416\":1}}],[\"展示\",{\"1\":{\"416\":1}}],[\"年级\",{\"1\":{\"518\":1}}],[\"年版本得到迭代\",{\"1\":{\"415\":1}}],[\"年龄\",{\"1\":{\"237\":1,\"416\":2,\"418\":2,\"687\":1}}],[\"版本\",{\"1\":{\"682\":1}}],[\"版本号法\",{\"1\":{\"768\":1}}],[\"版本号\",{\"1\":{\"682\":1}}],[\"版本号管理\",{\"1\":{\"476\":1}}],[\"版本号机制version\",{\"1\":{\"145\":1}}],[\"版本后对此也不在支持\",{\"1\":{\"415\":1}}],[\"版本后\",{\"1\":{\"415\":1}}],[\"专用\",{\"1\":{\"415\":1}}],[\"专门存放异常消息的队列\",{\"1\":{\"351\":1}}],[\"源代码等\",{\"1\":{\"415\":1}}],[\"源码如下\",{\"1\":{\"98\":1}}],[\"源码里面没有加锁\",{\"1\":{\"95\":1}}],[\"模版的渲染速度\",{\"1\":{\"696\":1}}],[\"模糊匹配\",{\"1\":{\"710\":2}}],[\"模糊\",{\"1\":{\"674\":1}}],[\"模板\",{\"1\":{\"430\":1,\"431\":1}}],[\"模板存放位置\",{\"1\":{\"423\":1}}],[\"模板引擎\",{\"1\":{\"415\":1,\"690\":1}}],[\"模拟1000个用户同时发送请求\",{\"1\":{\"788\":1}}],[\"模拟1000万数据\",{\"0\":{\"535\":1}}],[\"模拟触发\",{\"1\":{\"544\":1}}],[\"模拟等7个人召唤神龙\",{\"1\":{\"108\":1}}],[\"模拟接口项目开发\",{\"0\":{\"16\":1}}],[\"​\",{\"1\":{\"415\":1}}],[\"认为微服务挂了\",{\"1\":{\"412\":1}}],[\"认为自己在使用数据时不会有别的线程修改数据或资源\",{\"1\":{\"145\":1}}],[\"断开了几分钟\",{\"1\":{\"412\":1}}],[\"断言\",{\"1\":{\"27\":2}}],[\"参考文档\",{\"1\":{\"630\":1}}],[\"参考阿里开发手册\",{\"1\":{\"487\":1}}],[\"参考连接\",{\"1\":{\"412\":1}}],[\"参数列表\",{\"1\":{\"789\":1,\"796\":1}}],[\"参数分别是\",{\"1\":{\"781\":1}}],[\"参数来设置过期时间\",{\"1\":{\"749\":1}}],[\"参数格式校验失败\",{\"1\":{\"666\":1}}],[\"参数说明\",{\"1\":{\"651\":1}}],[\"参数调整\",{\"1\":{\"634\":1}}],[\"参数所在的位置\",{\"1\":{\"612\":1}}],[\"参数不能为空\",{\"1\":{\"607\":2}}],[\"参数不存在\",{\"1\":{\"22\":1,\"23\":1}}],[\"参数设置为false\",{\"1\":{\"361\":1}}],[\"参数解释\",{\"1\":{\"317\":1}}],[\"参数传递\",{\"1\":{\"256\":1,\"257\":1,\"258\":1,\"259\":7}}],[\"参数前添加\",{\"1\":{\"256\":1}}],[\"参数名称\",{\"1\":{\"184\":2}}],[\"参数占位符\",{\"0\":{\"182\":1}}],[\"参数是一个字符串\",{\"1\":{\"175\":1}}],[\"参数三\",{\"1\":{\"165\":2}}],[\"参数二\",{\"1\":{\"165\":2}}],[\"参数一\",{\"1\":{\"165\":2}}],[\"参数\",{\"1\":{\"67\":1,\"143\":1,\"297\":1}}],[\"参数被忽略\",{\"1\":{\"67\":1}}],[\"参数有哪些\",{\"1\":{\"47\":1}}],[\"群发\",{\"1\":{\"407\":1}}],[\"浏览这个网页的自然人\",{\"1\":{\"821\":1}}],[\"浏览器对空格的编码和java不一样\",{\"1\":{\"710\":1}}],[\"浏览器和服务器只需要完成一次握手\",{\"1\":{\"403\":1}}],[\"浏览接口\",{\"0\":{\"22\":1}}],[\"建议大家用自己写\",{\"1\":{\"559\":1}}],[\"建议分批\",{\"1\":{\"535\":1}}],[\"建议用标签\",{\"1\":{\"508\":1}}],[\"建议是抽象出一个公共项目\",{\"1\":{\"29\":1}}],[\"建立好映射关系\",{\"1\":{\"688\":1}}],[\"建立\",{\"1\":{\"557\":1}}],[\"建立对象\",{\"1\":{\"524\":1}}],[\"建立前缀索引\",{\"1\":{\"469\":1}}],[\"建立连接\",{\"1\":{\"395\":2,\"396\":1,\"407\":1,\"463\":1}}],[\"入门\",{\"0\":{\"395\":1,\"398\":1}}],[\"到\",{\"1\":{\"738\":1,\"817\":1}}],[\"到不同的机器上\",{\"1\":{\"634\":1}}],[\"到聚集索引中查找整行数据\",{\"1\":{\"466\":1}}],[\"到期会被自动删除\",{\"1\":{\"393\":1}}],[\"到队列\",{\"1\":{\"350\":1}}],[\"右侧llen\",{\"1\":{\"388\":1}}],[\"右连接和左连接\",{\"1\":{\"47\":1}}],[\"左侧lrange\",{\"1\":{\"388\":1}}],[\"评论数量\",{\"1\":{\"801\":1}}],[\"评论列表等\",{\"1\":{\"387\":1}}],[\"评价\",{\"1\":{\"47\":1}}],[\"朋友圈点赞列表\",{\"1\":{\"387\":1}}],[\"既是销售属性又是基本属性\",{\"1\":{\"670\":1}}],[\"既可以支持正向检索和也可以支持反向检索\",{\"1\":{\"387\":1}}],[\"既然mq通知不一定发送到交易服务\",{\"1\":{\"352\":1}}],[\"既然不会出现冲突自然而然就不会阻塞其他线程的操作\",{\"1\":{\"131\":1}}],[\"停止\",{\"1\":{\"378\":1,\"639\":1}}],[\"物联网\",{\"1\":{\"377\":1}}],[\"社招\",{\"1\":{\"508\":1}}],[\"社交媒体\",{\"1\":{\"377\":1}}],[\"社区\",{\"1\":{\"327\":1}}],[\"图片地址\",{\"1\":{\"670\":1}}],[\"图片最好上传图床吧\",{\"1\":{\"43\":1}}],[\"图文消息回复\",{\"0\":{\"455\":1}}],[\"图标中央下端的尖角位置\",{\"1\":{\"439\":1}}],[\"图形等\",{\"1\":{\"377\":1}}],[\"列表\",{\"0\":{\"387\":1},\"1\":{\"670\":1,\"672\":1,\"675\":1}}],[\"列族\",{\"1\":{\"377\":1}}],[\"列出指定文件夹下以\",{\"1\":{\"47\":1}}],[\"往往用来衡量网站的流量\",{\"1\":{\"821\":1}}],[\"往往形式松散\",{\"1\":{\"377\":1}}],[\"往返回值里写数据\",{\"1\":{\"27\":1}}],[\"键值型\",{\"1\":{\"377\":1}}],[\"键值对\",{\"1\":{\"377\":1}}],[\"键值对已经成功存储在\",{\"1\":{\"69\":1}}],[\"键值对数量\",{\"1\":{\"67\":1,\"69\":1}}],[\"官方文档\",{\"1\":{\"661\":1}}],[\"官方在\",{\"1\":{\"415\":1}}],[\"官方网站\",{\"1\":{\"377\":1}}],[\"官网链接\",{\"1\":{\"415\":1}}],[\"官网地址\",{\"1\":{\"397\":1}}],[\"官网文档\",{\"1\":{\"316\":1}}],[\"官网网站\",{\"1\":{\"316\":1}}],[\"官网\",{\"1\":{\"174\":1,\"195\":1,\"317\":1,\"326\":1,\"429\":1,\"449\":1,\"524\":1,\"583\":1,\"594\":1}}],[\"搭建redis集群\",{\"1\":{\"373\":1}}],[\"立即记录到aof文件\",{\"1\":{\"371\":1}}],[\"指维护一个数据的多个版本\",{\"1\":{\"476\":2}}],[\"指向上一个版本的事务版本记录地址\",{\"1\":{\"476\":1}}],[\"指向\",{\"1\":{\"465\":1}}],[\"指令设置自动触发rdb持久化的条件\",{\"1\":{\"369\":1}}],[\"指定圆心\",{\"1\":{\"815\":1}}],[\"指定队列名称\",{\"1\":{\"795\":1}}],[\"指定锁的名称\",{\"1\":{\"781\":1}}],[\"指定存活时间\",{\"1\":{\"706\":1}}],[\"指定生产的缓存使用key\",{\"1\":{\"706\":1}}],[\"指定过期时间\",{\"1\":{\"704\":1}}],[\"指定索引\",{\"1\":{\"687\":1}}],[\"指定\",{\"1\":{\"682\":1}}],[\"指定运行容器时默认执行的命令\",{\"1\":{\"642\":1}}],[\"指定查询运行时间超过多少秒才会被记录到慢查询日志中\",{\"1\":{\"485\":1}}],[\"指定定位位置\",{\"1\":{\"439\":1}}],[\"指定文件\",{\"1\":{\"431\":1}}],[\"指定freemarker模板文件的后缀名\",{\"1\":{\"416\":1,\"423\":1}}],[\"指定服务名\",{\"1\":{\"416\":1,\"423\":1}}],[\"指定将获取到的主键值封装到哪儿个属性里\",{\"1\":{\"188\":1}}],[\"指定参与同步的线程数量\",{\"1\":{\"108\":1}}],[\"指定了容量为\",{\"1\":{\"58\":1}}],[\"快捷键command+shift+f9\",{\"1\":{\"690\":1}}],[\"快捷的设置字段\",{\"1\":{\"626\":1}}],[\"快速展示\",{\"1\":{\"670\":2}}],[\"快速入门\",{\"0\":{\"196\":1,\"317\":1,\"323\":1,\"332\":1,\"416\":1}}],[\"快\",{\"1\":{\"512\":1}}],[\"快照包含了事务开始时数据库中所有数据行的有效版本\",{\"1\":{\"476\":1}}],[\"快照读取\",{\"1\":{\"476\":1}}],[\"快照文件称为rdb文件\",{\"1\":{\"368\":1}}],[\"恢复数据\",{\"1\":{\"368\":1}}],[\"恢复库存\",{\"1\":{\"352\":1}}],[\"强调acid\",{\"1\":{\"377\":1}}],[\"强一致\",{\"1\":{\"363\":1}}],[\"强制删除镜像\",{\"1\":{\"643\":1}}],[\"强制转换\",{\"1\":{\"297\":1}}],[\"强制终止死锁进程或线程中的一个或多个\",{\"1\":{\"153\":1}}],[\"强制\",{\"1\":{\"115\":1}}],[\"镜像节点会替代成新的主\",{\"1\":{\"363\":1}}],[\"镜像队列结构是一主多从\",{\"1\":{\"363\":1}}],[\"镜像集群特征如下\",{\"1\":{\"363\":1}}],[\"镜像集群本质是主从模式\",{\"1\":{\"363\":1}}],[\"镜像集群\",{\"1\":{\"363\":2}}],[\"共同关注\",{\"0\":{\"807\":1}}],[\"共同标签越多\",{\"1\":{\"566\":1}}],[\"共享资源的访问是不会发生冲突的\",{\"1\":{\"768\":1}}],[\"共享存储\",{\"1\":{\"81\":1,\"533\":1}}],[\"共有3个节点\",{\"1\":{\"363\":1}}],[\"仲裁队列使用\",{\"1\":{\"363\":1}}],[\"仲裁队列用于解决镜像集群中主节点故障时的数据一致性问题\",{\"1\":{\"363\":1}}],[\"仲裁队列\",{\"1\":{\"363\":2}}],[\"采用的就是timeline的方式\",{\"1\":{\"808\":1}}],[\"采用timeline的模式\",{\"1\":{\"808\":1}}],[\"采用发布订阅模型\",{\"1\":{\"793\":1}}],[\"采用惰性队列\",{\"1\":{\"362\":1}}],[\"采用一些策略\",{\"1\":{\"153\":1}}],[\"之所以有这个问题\",{\"1\":{\"779\":1}}],[\"之后发送的消息就会成为死信\",{\"1\":{\"362\":1}}],[\"之前的点赞是放到set集合\",{\"1\":{\"804\":1}}],[\"之前逆向工程生成代码的时候已经生成了页面\",{\"1\":{\"664\":1}}],[\"之前错误的先唤醒后等待\",{\"1\":{\"156\":1}}],[\"之前有没有别的线程更新了这个数据\",{\"1\":{\"145\":1}}],[\"之前会先去进行扩容操作\",{\"1\":{\"56\":1}}],[\"拒绝被消费\",{\"1\":{\"361\":1}}],[\"拒绝策略\",{\"1\":{\"115\":1,\"713\":1}}],[\"拒绝策略等\",{\"1\":{\"47\":1}}],[\"场景\",{\"1\":{\"361\":1}}],[\"抛出异常则返回nack\",{\"1\":{\"359\":1}}],[\"削峰消谷\",{\"1\":{\"359\":1}}],[\"短信登录\",{\"0\":{\"737\":1}}],[\"短信\",{\"1\":{\"359\":1}}],[\"验证码不正确\",{\"1\":{\"738\":1,\"741\":1}}],[\"验证码\",{\"1\":{\"359\":1,\"738\":1,\"741\":1}}],[\"验证是否死锁\",{\"1\":{\"104\":1}}],[\"声明式\",{\"1\":{\"657\":1}}],[\"声明一个交换机\",{\"1\":{\"361\":1}}],[\"声明交换机\",{\"1\":{\"355\":1}}],[\"声明队列和交换机\",{\"0\":{\"338\":1}}],[\"死信的其他情况\",{\"1\":{\"361\":1}}],[\"死信会被路由到死信交换机\",{\"1\":{\"354\":1}}],[\"死信交换机可以将消息路由到另一个队列或执行其他操作\",{\"1\":{\"361\":1}}],[\"死信交换机是\",{\"1\":{\"361\":1}}],[\"死信交换机将死信路由到指定的队列\",{\"1\":{\"354\":1}}],[\"死信交换机\",{\"0\":{\"354\":1},\"1\":{\"354\":1}}],[\"死信交换机+ttl\",{\"1\":{\"353\":1}}],[\"死锁检测算法\",{\"1\":{\"153\":1}}],[\"死锁场景包括以下四个必要条件\",{\"1\":{\"104\":1}}],[\"死锁是指两个或多个线程在执行过程中\",{\"1\":{\"153\":1}}],[\"死锁是一种状态\",{\"1\":{\"104\":1}}],[\"死锁是多线程编程中常见的问题\",{\"1\":{\"104\":1}}],[\"死锁\",{\"0\":{\"104\":1,\"153\":1},\"1\":{\"104\":1}}],[\"死锁发生的情况通常包括两个或多个事务互相持有对方需要的锁\",{\"1\":{\"47\":1}}],[\"死锁发生的情况\",{\"1\":{\"47\":1}}],[\"延迟队列插件实现延迟队列delayexchange\",{\"1\":{\"361\":1}}],[\"延迟队列是一种特殊的队列\",{\"1\":{\"361\":1}}],[\"延迟队列有了解过吗\",{\"0\":{\"361\":1}}],[\"延迟时间为30分钟\",{\"1\":{\"355\":1}}],[\"延迟任务\",{\"1\":{\"353\":1}}],[\"延迟消息插件\",{\"1\":{\"353\":1}}],[\"延迟消息\",{\"0\":{\"353\":1}}],[\"延迟阻塞队列\",{\"1\":{\"112\":1}}],[\"兜底方案\",{\"1\":{\"352\":1}}],[\"放入redis\",{\"1\":{\"807\":1}}],[\"放到阻塞队列中\",{\"1\":{\"790\":1,\"796\":1}}],[\"放到一个更快读取的地方\",{\"1\":{\"540\":1}}],[\"放假了\",{\"1\":{\"704\":1}}],[\"放弃处理\",{\"1\":{\"352\":1,\"355\":1}}],[\"放接口\",{\"1\":{\"29\":1}}],[\"订单key\",{\"1\":{\"789\":1,\"796\":1}}],[\"订单id\",{\"1\":{\"765\":1,\"770\":2,\"796\":1}}],[\"订单状态\",{\"1\":{\"764\":1}}],[\"订单不存在或交易已经结束\",{\"1\":{\"355\":1}}],[\"订单不存在或者订单状态不是1\",{\"1\":{\"352\":1}}],[\"订单支付超时时间为30分钟\",{\"1\":{\"353\":1}}],[\"订阅与pattern格式匹配的所有频道\",{\"1\":{\"793\":1}}],[\"订阅一个或多个频道\",{\"1\":{\"793\":1}}],[\"订阅\",{\"1\":{\"334\":1}}],[\"经度\",{\"1\":{\"815\":1}}],[\"经常组合查询的字段单独放在一张表中\",{\"1\":{\"730\":1}}],[\"经常读\",{\"1\":{\"705\":1}}],[\"经常写\",{\"1\":{\"705\":1}}],[\"经常被用来实现排行榜这样的功能\",{\"1\":{\"391\":1}}],[\"经常会出现业务被重复执行的情况\",{\"1\":{\"352\":1}}],[\"经过哪些过\",{\"1\":{\"47\":1}}],[\"较好的处理方案是republishmessagerecoverer\",{\"1\":{\"351\":1}}],[\"丢弃消息\",{\"1\":{\"351\":1}}],[\"初步修改抢优惠券\",{\"1\":{\"789\":1}}],[\"初步检索\",{\"0\":{\"682\":1}}],[\"初级\",{\"1\":{\"508\":1}}],[\"初识的失败等待时长为1秒\",{\"1\":{\"350\":1}}],[\"初始状态\",{\"1\":{\"696\":1}}],[\"初始容量是16\",{\"1\":{\"71\":1}}],[\"初始容量和负载因子\",{\"1\":{\"71\":1}}],[\"初始容量表示哈希表的初始大小\",{\"1\":{\"64\":1,\"71\":1}}],[\"初始化项目\",{\"0\":{\"584\":1}}],[\"初始化地图\",{\"1\":{\"438\":1}}],[\"初始化等一系列工作\",{\"1\":{\"268\":1}}],[\"初始化webapplicationcontext对象\",{\"1\":{\"245\":1}}],[\"初始化核心插件\",{\"1\":{\"219\":1}}],[\"初始化容量小于16的时候\",{\"1\":{\"71\":1}}],[\"初始化数组\",{\"1\":{\"71\":1}}],[\"带来巨大压力\",{\"1\":{\"753\":1}}],[\"带来不必要的压力\",{\"1\":{\"350\":1}}],[\"带\",{\"1\":{\"682\":1}}],[\"带有executor参数\",{\"1\":{\"121\":3,\"717\":3}}],[\"极端情况就是消费者一直无法执行成功\",{\"1\":{\"350\":1}}],[\"回复的内容\",{\"1\":{\"801\":1}}],[\"回复的评论id\",{\"1\":{\"801\":1}}],[\"回滚指针\",{\"1\":{\"476\":1}}],[\"回滚段\",{\"1\":{\"476\":1}}],[\"回滚日志\",{\"1\":{\"475\":1}}],[\"回进行\",{\"1\":{\"467\":1}}],[\"回表查询是指在使用覆盖索引\",{\"1\":{\"466\":1}}],[\"回表查询\",{\"1\":{\"466\":1,\"467\":2}}],[\"回龙观支行\",{\"1\":{\"444\":1}}],[\"回调方法即时重发\",{\"1\":{\"359\":1}}],[\"回执有三种可选值\",{\"1\":{\"349\":1}}],[\"回答问题\",{\"1\":{\"468\":1,\"476\":1}}],[\"回答面试\",{\"1\":{\"467\":1,\"470\":1}}],[\"回答\",{\"1\":{\"58\":1,\"359\":1,\"361\":1,\"362\":1,\"363\":1}}],[\"应用名称\",{\"1\":{\"658\":1}}],[\"应用创建\",{\"1\":{\"436\":1}}],[\"应用概述\",{\"1\":{\"43\":1}}],[\"应该把给该笔记点赞的人显示出来\",{\"1\":{\"804\":1}}],[\"应该达到的条件\",{\"1\":{\"685\":1}}],[\"应该立刻取消订单\",{\"1\":{\"353\":1}}],[\"应该向rabbitmq发送一个回执\",{\"1\":{\"349\":1}}],[\"惰性队列的特征如下\",{\"1\":{\"347\":1,\"362\":1}}],[\"超出时数据丢失\",{\"1\":{\"793\":1}}],[\"超卖问题是典型的多线程安全问题\",{\"1\":{\"766\":1}}],[\"超过了消费者处理速度\",{\"1\":{\"347\":1}}],[\"超时处理\",{\"1\":{\"782\":1}}],[\"超时释放\",{\"1\":{\"776\":1}}],[\"超时剔除\",{\"1\":{\"749\":1}}],[\"超时订单\",{\"1\":{\"361\":2}}],[\"超时订单问题\",{\"1\":{\"355\":1}}],[\"超时无人消费\",{\"1\":{\"361\":1}}],[\"超时后自动释放资源\",{\"1\":{\"153\":1}}],[\"超时机制\",{\"1\":{\"153\":1}}],[\"超时\",{\"1\":{\"112\":2,\"354\":1}}],[\"超时操作\",{\"1\":{\"112\":1}}],[\"超时时间不正确\",{\"1\":{\"558\":1}}],[\"超时时间>当前时间\",{\"1\":{\"558\":2}}],[\"超时时间为指定延迟时间的队列中\",{\"1\":{\"354\":1}}],[\"超时时间\",{\"1\":{\"27\":1,\"556\":1,\"777\":1}}],[\"持续优化\",{\"0\":{\"646\":1}}],[\"持久性\",{\"1\":{\"472\":1}}],[\"持久化缓存\",{\"1\":{\"700\":1}}],[\"持久化是指将内存中的数据库状态保存到硬盘上的一种持久化存储方式\",{\"1\":{\"368\":1}}],[\"持久化消息\",{\"1\":{\"359\":1}}],[\"持久消息投递到了mq\",{\"1\":{\"343\":1}}],[\"持有锁的线程在锁的内部出现了阻塞\",{\"1\":{\"778\":1}}],[\"持有锁a\",{\"1\":{\"104\":1}}],[\"持有锁b\",{\"1\":{\"104\":1}}],[\"告知rabbitmq自己消息处理状态\",{\"1\":{\"349\":1}}],[\"告知投递失败\",{\"1\":{\"343\":1}}],[\"告知投递成功\",{\"1\":{\"343\":2}}],[\"告诉前端这个请求在业务层面上是成功还是失败了\",{\"1\":{\"622\":1}}],[\"告诉\",{\"1\":{\"201\":1}}],[\"告诉处理器在写屏障之前将所有存储在缓存\",{\"1\":{\"161\":1}}],[\"临时消息投递到了mq\",{\"1\":{\"343\":1}}],[\"尚未消费就突然宕机\",{\"1\":{\"341\":1}}],[\"支付时间\",{\"1\":{\"764\":1}}],[\"支付宝\",{\"1\":{\"764\":1}}],[\"支付方式\",{\"1\":{\"764\":1}}],[\"支付金额\",{\"1\":{\"764\":1}}],[\"支付服务中支付流水显示支付成功\",{\"1\":{\"340\":1}}],[\"支付成功\",{\"1\":{\"340\":1,\"355\":1}}],[\"支持多生产\",{\"1\":{\"793\":1}}],[\"支持每秒产生2^32个不同id\",{\"1\":{\"763\":1}}],[\"支持更多的字段\",{\"1\":{\"626\":1}}],[\"支持setnx\",{\"1\":{\"548\":1}}],[\"支持基于redis的jdkcollection实现\",{\"1\":{\"397\":1}}],[\"支持基于jdk\",{\"1\":{\"397\":1}}],[\"支持基于lettuce的响应式编程\",{\"1\":{\"397\":1}}],[\"支持redis哨兵和redis集群\",{\"1\":{\"397\":1}}],[\"支持redis的发布订阅模型\",{\"1\":{\"397\":1}}],[\"支持复杂的查询和事务\",{\"1\":{\"377\":1}}],[\"支持主从数据同步\",{\"1\":{\"363\":1}}],[\"支持数百万条的消息存储\",{\"1\":{\"347\":1,\"362\":1}}],[\"支持自动装配注入bean\",{\"1\":{\"313\":1}}],[\"支持阻塞操作\",{\"1\":{\"112\":1}}],[\"胜\",{\"1\":{\"337\":1}}],[\"孙悟空大战哥斯拉\",{\"1\":{\"337\":1}}],[\"喜报\",{\"1\":{\"337\":1}}],[\"惊现哥斯拉\",{\"1\":{\"336\":1}}],[\"红色警报\",{\"1\":{\"336\":1}}],[\"红黑树拆分成的树的结点数小于等于临界值6个\",{\"1\":{\"70\":1}}],[\"q=\",{\"1\":{\"684\":1}}],[\"q=0\",{\"1\":{\"523\":4}}],[\"qiuzhao\",{\"1\":{\"595\":1}}],[\"qs\",{\"1\":{\"532\":1}}],[\"qriuymdlb2vzue6\",{\"1\":{\"519\":1,\"537\":1,\"538\":1,\"539\":1,\"598\":1,\"609\":1}}],[\"qq\",{\"1\":{\"449\":1,\"450\":1,\"451\":1,\"453\":1,\"457\":3,\"458\":1,\"519\":1,\"522\":1,\"537\":1,\"538\":1,\"539\":1,\"661\":4,\"663\":3}}],[\"q2\",{\"1\":{\"335\":1,\"336\":1,\"337\":1}}],[\"q1\",{\"1\":{\"335\":1,\"336\":1,\"337\":1}}],[\"quick\",{\"1\":{\"670\":1,\"687\":1}}],[\"quickstart\",{\"1\":{\"29\":1}}],[\"quitteam\",{\"1\":{\"562\":1}}],[\"quartz\",{\"1\":{\"544\":1}}],[\"qualifier来指定注入哪个名称的bean对象\",{\"1\":{\"305\":1}}],[\"qualifier\",{\"0\":{\"305\":1},\"1\":{\"305\":1}}],[\"quality\",{\"1\":{\"66\":1}}],[\"queries\",{\"1\":{\"485\":1}}],[\"queryhotblog\",{\"1\":{\"803\":1}}],[\"querywithpassthrough\",{\"1\":{\"758\":5}}],[\"querywithlogicalexpire\",{\"1\":{\"756\":1,\"758\":5}}],[\"querywithmutex\",{\"1\":{\"755\":2,\"758\":2}}],[\"querywrapper和updatewrapper在构造条件的时候都需要写死字段名称\",{\"1\":{\"206\":1}}],[\"querywrapper<follow>\",{\"1\":{\"806\":1,\"807\":1}}],[\"querywrapper<attrgroupentity>\",{\"1\":{\"670\":1}}],[\"querywrapper<userteam>\",{\"1\":{\"561\":1,\"562\":2,\"564\":1,\"574\":1}}],[\"querywrapper<user>\",{\"1\":{\"204\":2,\"207\":3,\"209\":1,\"512\":2,\"534\":1,\"540\":1,\"544\":2,\"551\":1,\"566\":2,\"573\":1,\"575\":4,\"599\":1,\"605\":1,\"608\":1}}],[\"querywrapper<team>\",{\"1\":{\"558\":1,\"559\":1}}],[\"querywrapper<>\",{\"1\":{\"204\":2,\"512\":2,\"534\":1,\"540\":1,\"544\":2,\"551\":1,\"558\":1,\"559\":1,\"561\":2,\"562\":2,\"564\":1,\"566\":2,\"573\":1,\"574\":2,\"575\":4,\"599\":1,\"605\":1,\"608\":1,\"806\":1,\"807\":1}}],[\"querywrapper\",{\"0\":{\"204\":1},\"1\":{\"204\":3,\"206\":3,\"512\":6,\"534\":2,\"540\":2,\"544\":5,\"551\":2,\"558\":3,\"559\":10,\"566\":4,\"573\":2,\"575\":8}}],[\"querylist\",{\"1\":{\"747\":2}}],[\"querytypelist\",{\"1\":{\"747\":1}}],[\"queryshopbytype\",{\"1\":{\"817\":3}}],[\"queryshopbyid\",{\"1\":{\"747\":1}}],[\"querystring\",{\"1\":{\"630\":1,\"710\":2}}],[\"queryblogoffollow\",{\"1\":{\"810\":3}}],[\"querybloglikes\",{\"1\":{\"805\":3}}],[\"querybloguser\",{\"1\":{\"802\":2,\"803\":2,\"810\":1}}],[\"queryblogbyid\",{\"1\":{\"802\":3,\"803\":1}}],[\"querybyid中\",{\"1\":{\"751\":1}}],[\"querybyid\",{\"1\":{\"747\":2,\"752\":1,\"758\":2}}],[\"querybuilders\",{\"1\":{\"687\":1,\"710\":9}}],[\"querybaseattrpage\",{\"1\":{\"673\":1}}],[\"query<skuinfoentity>\",{\"1\":{\"675\":1}}],[\"query<spuinfoentity>\",{\"1\":{\"675\":1}}],[\"query<attrentity>\",{\"1\":{\"673\":1,\"674\":1}}],[\"query<attrgroupentity>\",{\"1\":{\"670\":2}}],[\"querypagebycondition\",{\"1\":{\"675\":3}}],[\"querypage\",{\"1\":{\"670\":2}}],[\"querypayorderbybizorderno\",{\"1\":{\"355\":1}}],[\"query=url\",{\"1\":{\"661\":2,\"663\":2}}],[\"query=atm机\",{\"1\":{\"444\":1}}],[\"querycurrentuser\",{\"1\":{\"613\":1}}],[\"query\",{\"0\":{\"685\":1},\"1\":{\"209\":10,\"220\":14,\"377\":1,\"463\":2,\"485\":2,\"519\":1,\"520\":4,\"531\":3,\"544\":1,\"612\":2,\"655\":1,\"684\":1,\"685\":16,\"687\":1,\"710\":3,\"738\":1,\"741\":1,\"747\":1,\"770\":3,\"790\":1,\"803\":1,\"805\":1,\"806\":1,\"809\":1,\"810\":1,\"817\":2}}],[\"queryuserteam\",{\"1\":{\"562\":4}}],[\"queryuserspage\",{\"1\":{\"220\":4}}],[\"queryusers\",{\"1\":{\"209\":2}}],[\"queryuserbyids\",{\"1\":{\"208\":1,\"214\":1}}],[\"queryuserbyid\",{\"1\":{\"208\":1,\"214\":1}}],[\"queuing\",{\"1\":{\"332\":1}}],[\"queue的延迟消息\",{\"1\":{\"355\":1}}],[\"queue的消息\",{\"1\":{\"347\":1}}],[\"queuebuilder\",{\"1\":{\"347\":1,\"359\":1}}],[\"queuebinding\",{\"1\":{\"338\":4,\"340\":1,\"355\":2}}],[\"queue消息\",{\"1\":{\"339\":1}}],[\"queue2\",{\"1\":{\"338\":4}}],[\"queue2的消息\",{\"1\":{\"336\":1,\"337\":1,\"338\":2}}],[\"queue1\",{\"1\":{\"338\":4,\"359\":1}}],[\"queue1的消息\",{\"1\":{\"336\":1,\"337\":1,\"338\":2}}],[\"queuestodeclare\",{\"1\":{\"347\":1}}],[\"queues的模式\",{\"1\":{\"347\":1}}],[\"queues\",{\"1\":{\"332\":1,\"333\":2,\"335\":2,\"336\":2,\"337\":2,\"339\":1}}],[\"queuename\",{\"1\":{\"332\":2,\"333\":2,\"796\":5}}],[\"queue\",{\"1\":{\"112\":1,\"114\":1,\"115\":1,\"136\":1,\"332\":2,\"333\":3,\"338\":18,\"339\":2,\"340\":2,\"347\":6,\"351\":8,\"355\":4,\"359\":1,\"362\":1,\"713\":1}}],[\"questions\",{\"1\":{\"44\":1,\"496\":1}}],[\"头匹配\",{\"1\":{\"334\":1}}],[\"头像\",{\"1\":{\"237\":1,\"519\":1,\"596\":1}}],[\"空值\",{\"1\":{\"752\":1,\"755\":1}}],[\"空值缓存\",{\"1\":{\"699\":1}}],[\"空值处理\",{\"0\":{\"421\":1}}],[\"空间浪费的问题\",{\"1\":{\"572\":1}}],[\"空闲了很多时间\",{\"1\":{\"333\":1}}],[\"空参\",{\"1\":{\"168\":1}}],[\"端口\",{\"1\":{\"332\":1}}],[\"收件箱满足可以根据时间戳排序\",{\"1\":{\"809\":1}}],[\"收到来自客户端\",{\"1\":{\"407\":1}}],[\"收到客户端消息后调用的方法\",{\"1\":{\"407\":1}}],[\"收到nack\",{\"1\":{\"344\":1}}],[\"收到ack\",{\"1\":{\"344\":1}}],[\"收到confirm\",{\"1\":{\"344\":1}}],[\"收到消息的return\",{\"1\":{\"344\":1}}],[\"收发消息\",{\"0\":{\"329\":1}}],[\"收钱\",{\"1\":{\"165\":2}}],[\"毫秒以内\",{\"1\":{\"327\":1}}],[\"毫秒级\",{\"1\":{\"327\":2}}],[\"毫秒等\",{\"1\":{\"115\":1,\"713\":1}}],[\"差异化处理\",{\"1\":{\"710\":1}}],[\"差距\",{\"1\":{\"575\":1}}],[\"差\",{\"1\":{\"327\":1}}],[\"高清\",{\"1\":{\"824\":1}}],[\"高亮\",{\"1\":{\"710\":2}}],[\"高亮显示\",{\"1\":{\"710\":2}}],[\"高通\",{\"1\":{\"710\":2}}],[\"高级特性\",{\"1\":{\"824\":1}}],[\"高级表格\",{\"1\":{\"616\":1}}],[\"高级表单\",{\"0\":{\"616\":1}}],[\"高级\",{\"1\":{\"508\":1}}],[\"高级消息队列协议\",{\"1\":{\"332\":1}}],[\"高并发下提高磁盘o和网络连接数\",{\"1\":{\"478\":1}}],[\"高\",{\"1\":{\"327\":6}}],[\"高位尾如果记录的有数据\",{\"1\":{\"71\":1}}],[\"高位尾不为null\",{\"1\":{\"71\":1}}],[\"高位尾\",{\"1\":{\"71\":1}}],[\"高位头\",{\"1\":{\"71\":1}}],[\"高位16\",{\"1\":{\"71\":1}}],[\"协议保证强一致性\",{\"1\":{\"363\":1}}],[\"协议支持\",{\"1\":{\"327\":1}}],[\"协议是什么样的\",{\"1\":{\"47\":1}}],[\"阿里\",{\"1\":{\"327\":1}}],[\"阿里云\",{\"1\":{\"241\":1}}],[\"阿里云oss\",{\"1\":{\"241\":1}}],[\"阿里云oss存储\",{\"0\":{\"240\":1}}],[\"交由人工处理\",{\"1\":{\"359\":2}}],[\"交互不实时\",{\"1\":{\"327\":1}}],[\"交换机和队列元信息\",{\"1\":{\"363\":1}}],[\"交换机持久化\",{\"1\":{\"346\":1,\"359\":1}}],[\"交换机名称\",{\"1\":{\"335\":1,\"336\":1,\"337\":1,\"359\":1}}],[\"交换机的类型有四种\",{\"1\":{\"334\":1}}],[\"交换机\",{\"0\":{\"334\":1},\"1\":{\"334\":1,\"346\":1,\"363\":1}}],[\"交换\",{\"1\":{\"131\":1}}],[\"级联失败\",{\"1\":{\"327\":1}}],[\"拓展性差\",{\"1\":{\"327\":1}}],[\"桶名词\",{\"1\":{\"318\":1,\"733\":2}}],[\"~\",{\"1\":{\"317\":8,\"323\":2,\"426\":3,\"651\":9,\"652\":2,\"681\":3,\"691\":3}}],[\"文章内容表\",{\"1\":{\"729\":1}}],[\"文章配置表\",{\"1\":{\"729\":1}}],[\"文章基本信息表\",{\"1\":{\"729\":1}}],[\"文章列表查询\",{\"0\":{\"731\":1}}],[\"文章列表\",{\"0\":{\"729\":1}}],[\"文档version\",{\"1\":{\"682\":1}}],[\"文档是json格式\",{\"1\":{\"680\":1}}],[\"文档document\",{\"1\":{\"680\":1}}],[\"文档\",{\"1\":{\"316\":1,\"630\":1}}],[\"文件将上传至bucket的根目录下\",{\"1\":{\"665\":1}}],[\"文件服务器\",{\"1\":{\"533\":1}}],[\"文件排序\",{\"1\":{\"486\":1}}],[\"文件\",{\"1\":{\"370\":1}}],[\"文件全路径\",{\"1\":{\"319\":8}}],[\"文件前缀\",{\"1\":{\"319\":4}}],[\"文件流\",{\"1\":{\"318\":1,\"319\":5,\"733\":2}}],[\"文件类型\",{\"1\":{\"318\":1,\"733\":2}}],[\"文件访问的url\",{\"1\":{\"241\":1}}],[\"文件访问路径\",{\"1\":{\"241\":1}}],[\"文件名\",{\"1\":{\"241\":1,\"318\":1,\"319\":4,\"733\":2}}],[\"文件上传失败\",{\"1\":{\"801\":1}}],[\"文件上传成功\",{\"1\":{\"801\":1}}],[\"文件上传完成\",{\"1\":{\"241\":1}}],[\"文件上传\",{\"1\":{\"239\":1,\"241\":1,\"319\":1}}],[\"文件上传的配置\",{\"1\":{\"238\":1}}],[\"文件位置\",{\"1\":{\"201\":2}}],[\"文件中可以直接使用类名\",{\"1\":{\"201\":1}}],[\"步骤如下\",{\"1\":{\"660\":1}}],[\"步骤\",{\"1\":{\"310\":1}}],[\"删锁\",{\"1\":{\"779\":1}}],[\"删掉一些代码\",{\"1\":{\"609\":1}}],[\"删掉<bean>标签\",{\"1\":{\"299\":1}}],[\"删除关注记录\",{\"1\":{\"806\":1,\"807\":1}}],[\"删除指定的消费者组xgroup\",{\"1\":{\"795\":1}}],[\"删除缓存\",{\"1\":{\"750\":2,\"751\":1}}],[\"删除多个缓存\",{\"1\":{\"706\":1}}],[\"删除锁的时候问题\",{\"1\":{\"703\":1}}],[\"删除锁\",{\"1\":{\"703\":4}}],[\"删除索引\",{\"1\":{\"682\":1}}],[\"删除文档\",{\"1\":{\"682\":1}}],[\"删除文件\",{\"1\":{\"319\":2}}],[\"删除delete\",{\"1\":{\"682\":1}}],[\"删除分类\",{\"1\":{\"663\":1}}],[\"删除playwright\",{\"1\":{\"585\":1}}],[\"删除test文件夹\",{\"1\":{\"585\":1}}],[\"删除config\",{\"1\":{\"585\":1}}],[\"删除src\",{\"1\":{\"585\":2}}],[\"删除队伍\",{\"1\":{\"563\":1}}],[\"删除成员\",{\"1\":{\"392\":1}}],[\"删除集合中成员\",{\"1\":{\"390\":1}}],[\"删除hkeys\",{\"1\":{\"386\":1}}],[\"删除objects\",{\"1\":{\"319\":1}}],[\"删除掉applicationcontext\",{\"1\":{\"301\":1}}],[\"删除业务层中使用new的方式创建的dao对象\",{\"1\":{\"270\":2}}],[\"删除new操作\",{\"1\":{\"270\":1}}],[\"删除方法与以前没有区别\",{\"1\":{\"215\":1}}],[\"删除用户=>队伍关系到关系表\",{\"1\":{\"562\":1}}],[\"删除用户\",{\"1\":{\"208\":1,\"608\":1}}],[\"删除元素\",{\"1\":{\"98\":1}}],[\"删除元素remove\",{\"0\":{\"67\":1}}],[\"删除一些测试用的代码\",{\"1\":{\"12\":1}}],[\"删除\",{\"0\":{\"189\":1},\"1\":{\"9\":1,\"14\":1,\"51\":1,\"192\":1,\"208\":1,\"215\":1,\"262\":1,\"585\":1,\"605\":1,\"616\":1,\"750\":1,\"778\":1,\"780\":1}}],[\"容易沉迷\",{\"1\":{\"808\":1}}],[\"容器\",{\"1\":{\"582\":1,\"651\":1}}],[\"容器中的\",{\"1\":{\"317\":2}}],[\"容器会按类型自动装配\",{\"1\":{\"310\":1}}],[\"容器创建\",{\"1\":{\"296\":1}}],[\"容量就变为32\",{\"1\":{\"71\":1}}],[\"遍历所有用户\",{\"1\":{\"575\":1}}],[\"遍历properties\",{\"1\":{\"288\":1}}],[\"遍历map\",{\"1\":{\"288\":1}}],[\"遍历set\",{\"1\":{\"288\":1}}],[\"遍历list\",{\"1\":{\"288\":1}}],[\"遍历数组\",{\"1\":{\"71\":1,\"288\":1}}],[\"首页一级菜单渲染\",{\"1\":{\"696\":4}}],[\"首页三级分类接口\",{\"1\":{\"690\":1}}],[\"首页\",{\"0\":{\"690\":1}}],[\"首次访问页面\",{\"1\":{\"615\":1}}],[\"首字母小写\",{\"1\":{\"287\":1}}],[\"首先检查大键表示的锁是否存在\",{\"1\":{\"782\":1}}],[\"首先移除i18多国语言\",{\"1\":{\"585\":1}}],[\"首先获取key的hashcode值\",{\"1\":{\"72\":1}}],[\"首先会计算键的哈希值\",{\"1\":{\"69\":1}}],[\"首先\",{\"1\":{\"47\":1,\"66\":2,\"67\":1,\"155\":1}}],[\"引用类型\",{\"0\":{\"282\":1,\"285\":1}}],[\"引入需要的技术\",{\"1\":{\"580\":1}}],[\"引入spring\",{\"1\":{\"533\":1}}],[\"引入redis\",{\"1\":{\"533\":1,\"698\":2}}],[\"引入maven依赖\",{\"1\":{\"241\":1}}],[\"引入依赖\",{\"1\":{\"196\":1,\"395\":1}}],[\"案例\",{\"0\":{\"269\":1}}],[\"黑马点评7\",{\"0\":{\"813\":1}}],[\"黑马点评6\",{\"0\":{\"799\":1}}],[\"黑马点评5\",{\"0\":{\"786\":1}}],[\"黑马点评4\",{\"0\":{\"774\":1}}],[\"黑马点评3\",{\"0\":{\"761\":1}}],[\"黑马点评2\",{\"0\":{\"745\":1}}],[\"黑马点评\",{\"0\":{\"851\":1},\"2\":{\"743\":1,\"744\":1,\"759\":1,\"760\":1,\"772\":1,\"773\":1,\"784\":1,\"785\":1,\"797\":1,\"798\":1,\"811\":1,\"812\":1,\"822\":1,\"823\":1}}],[\"黑马点评的登录逻辑完成\",{\"1\":{\"742\":1}}],[\"黑马点评1\",{\"0\":{\"736\":1}}],[\"黑马头条api文档\",{\"1\":{\"727\":2}}],[\"黑马头条后台api\",{\"1\":{\"726\":1}}],[\"黑马头条\",{\"0\":{\"850\":1},\"1\":{\"726\":1},\"2\":{\"734\":1,\"735\":1}}],[\"黑马头条1\",{\"0\":{\"724\":1}}],[\"黑马程序员\",{\"1\":{\"261\":1,\"726\":1}}],[\"黑白名单\",{\"1\":{\"27\":2}}],[\"携带时间的日期\",{\"1\":{\"259\":1}}],[\"日期标题\",{\"1\":{\"430\":1}}],[\"日期格式化\",{\"1\":{\"422\":1}}],[\"日期参数传递\",{\"0\":{\"259\":1}}],[\"日本乱排核废水\",{\"1\":{\"336\":1}}],[\"日志优化\",{\"1\":{\"696\":2}}],[\"日志存储等\",{\"1\":{\"377\":1}}],[\"日志\",{\"0\":{\"480\":1},\"1\":{\"7\":1}}],[\"嵌套pojo类型参数\",{\"0\":{\"252\":1}}],[\"五种类型参数传递\",{\"0\":{\"249\":1}}],[\"乱码处理\",{\"1\":{\"248\":1}}],[\"乱码解决\",{\"1\":{\"248\":1}}],[\"普通券\",{\"1\":{\"764\":1}}],[\"普通用户\",{\"1\":{\"596\":1,\"616\":1}}],[\"普通插入\",{\"0\":{\"537\":1}}],[\"普通索引\",{\"1\":{\"509\":1}}],[\"普通卫星地图\",{\"1\":{\"439\":1}}],[\"普通集群模式会在各个节点间共享部分数据\",{\"1\":{\"363\":1}}],[\"普通集群\",{\"1\":{\"363\":2}}],[\"普通参数\",{\"0\":{\"250\":1}}],[\"普通参数传递\",{\"1\":{\"248\":3,\"250\":4}}],[\"普通字段注解和\",{\"1\":{\"200\":1}}],[\"排他锁\",{\"1\":{\"476\":1}}],[\"排除掉controller包中的bean\",{\"1\":{\"245\":1}}],[\"排序不能为空\",{\"1\":{\"667\":1}}],[\"排序必须大于等于0\",{\"1\":{\"666\":1,\"667\":1}}],[\"排序\",{\"1\":{\"469\":1,\"666\":1,\"667\":1,\"670\":2,\"710\":3}}],[\"排序条件\",{\"1\":{\"220\":1}}],[\"排序字段\",{\"1\":{\"220\":1}}],[\"找当前二级分类的三级分类封装成vo\",{\"1\":{\"690\":1,\"697\":1}}],[\"找到该圆内包含的所有member\",{\"1\":{\"815\":1}}],[\"找到所有的二级分类\",{\"1\":{\"663\":1}}],[\"找到登录按钮\",{\"1\":{\"612\":1}}],[\"找到对应的session\",{\"1\":{\"605\":1}}],[\"找到有共同标签最多的用户\",{\"1\":{\"566\":1}}],[\"找到有相似标签的用户\",{\"1\":{\"566\":1}}],[\"找到\",{\"1\":{\"317\":1}}],[\"找不到会报404\",{\"1\":{\"245\":1}}],[\"找出没有选课记录的学生\",{\"1\":{\"47\":1}}],[\"完美的\",{\"1\":{\"634\":1}}],[\"完全感知不到redis的存在\",{\"1\":{\"550\":1}}],[\"完善验证逻辑\",{\"1\":{\"452\":1}}],[\"完整逻辑如下\",{\"1\":{\"607\":1}}],[\"完整了解做项目的思路\",{\"1\":{\"579\":1}}],[\"完整代码\",{\"1\":{\"351\":1,\"599\":1,\"605\":1}}],[\"完整路径中不能包含bucket名称\",{\"1\":{\"241\":1,\"665\":1}}],[\"完成下单\",{\"1\":{\"796\":1}}],[\"完成fork后读取内存数据并写入\",{\"1\":{\"370\":1}}],[\"完成一般字段的映射\",{\"1\":{\"181\":1}}],[\"完成主键字段的映射\",{\"1\":{\"181\":1}}],[\"完成时回调\",{\"0\":{\"120\":1,\"716\":1}}],[\"完成插入\",{\"1\":{\"69\":1}}],[\"杭州\",{\"1\":{\"241\":1,\"665\":1}}],[\"三种方案\",{\"1\":{\"750\":1}}],[\"三种初始化\",{\"1\":{\"586\":1}}],[\"三级分类\",{\"0\":{\"663\":1}}],[\"三件套+react+组件库ant\",{\"1\":{\"582\":1}}],[\"三个都需要修改\",{\"1\":{\"373\":1}}],[\"三个参数分别是\",{\"1\":{\"359\":1}}],[\"三层架构\",{\"1\":{\"244\":1}}],[\"三要素\",{\"1\":{\"237\":1}}],[\"三大特性\",{\"0\":{\"134\":1}}],[\"姓名\",{\"1\":{\"237\":1,\"416\":2,\"418\":2}}],[\"拦截所有请求\",{\"1\":{\"742\":1}}],[\"拦截\",{\"1\":{\"739\":1,\"742\":1}}],[\"拦截内容不同\",{\"1\":{\"231\":1}}],[\"拦截器修改\",{\"1\":{\"740\":1}}],[\"拦截器参数\",{\"1\":{\"232\":1}}],[\"拦截器中的prehandler方法\",{\"1\":{\"232\":1}}],[\"拦截器需要被spring\",{\"1\":{\"232\":1}}],[\"拦截器interceptor和过滤器filter的区别\",{\"1\":{\"231\":1}}],[\"拦截器\",{\"0\":{\"231\":1}}],[\"归还一个信号\",{\"1\":{\"704\":1}}],[\"归属不同\",{\"1\":{\"231\":1}}],[\"归根结底\",{\"1\":{\"156\":1}}],[\"功能\",{\"1\":{\"663\":1}}],[\"功能测试\",{\"1\":{\"634\":1}}],[\"功能较为强大\",{\"1\":{\"415\":1}}],[\"功能bean\",{\"1\":{\"245\":1}}],[\"功能模块开发\",{\"1\":{\"224\":1}}],[\"功能实现\",{\"0\":{\"10\":1}}],[\"9300\",{\"1\":{\"681\":2}}],[\"93d4\",{\"1\":{\"660\":1}}],[\"936404\",{\"1\":{\"445\":1}}],[\"9s\",{\"1\":{\"539\":1}}],[\"99\",{\"1\":{\"523\":1,\"696\":1}}],[\"967008\",{\"1\":{\"444\":1}}],[\"9200\",{\"1\":{\"681\":4,\"682\":5,\"687\":1}}],[\"920\",{\"1\":{\"439\":1}}],[\"91092455\",{\"1\":{\"443\":1}}],[\"910\",{\"1\":{\"439\":1}}],[\"915\",{\"1\":{\"438\":1,\"439\":1}}],[\"903738\",{\"1\":{\"815\":2}}],[\"90\",{\"1\":{\"696\":1}}],[\"900\",{\"1\":{\"439\":1}}],[\"9000000\",{\"1\":{\"468\":1}}],[\"9000会自动跳转到其他静态端口\",{\"1\":{\"317\":1}}],[\"9000\",{\"1\":{\"317\":6,\"318\":3,\"319\":3,\"691\":2,\"733\":4}}],[\"909005\",{\"1\":{\"815\":2}}],[\"9090\",{\"1\":{\"317\":3}}],[\"9\",{\"1\":{\"224\":1,\"256\":1,\"339\":1,\"355\":1,\"452\":1,\"523\":1,\"599\":2,\"605\":1,\"643\":1,\"646\":1,\"710\":4,\"738\":3,\"788\":1}}],[\"9<\",{\"1\":{\"29\":2,\"512\":1}}],[\"页脚如下\",{\"1\":{\"609\":1}}],[\"页面刚进入时\",{\"1\":{\"613\":1}}],[\"页面的切换\",{\"1\":{\"507\":1}}],[\"页面展示\",{\"1\":{\"418\":1}}],[\"页面\",{\"1\":{\"416\":1,\"616\":1}}],[\"页面卡顿时频繁刷新导致表单重复提交\",{\"1\":{\"352\":1}}],[\"页面效果如下\",{\"1\":{\"506\":1}}],[\"页面效果\",{\"1\":{\"22\":1}}],[\"页码\",{\"1\":{\"219\":1,\"220\":2,\"817\":1}}],[\"意思是这个根数据库对应\",{\"1\":{\"216\":1}}],[\"冻结\",{\"1\":{\"216\":2,\"220\":1}}],[\"枚举处理器\",{\"0\":{\"216\":1}}],[\"逻辑层\",{\"1\":{\"765\":1}}],[\"逻辑过期解决缓存\",{\"1\":{\"758\":2}}],[\"逻辑过期\",{\"0\":{\"756\":1},\"1\":{\"754\":1}}],[\"逻辑实现\",{\"1\":{\"688\":1}}],[\"逻辑\",{\"1\":{\"663\":1,\"688\":1,\"789\":1}}],[\"逻辑未删除值\",{\"1\":{\"215\":1,\"605\":1}}],[\"逻辑已删除值\",{\"1\":{\"215\":1,\"605\":1}}],[\"逻辑删除是一种数据库管理和数据保留的方法\",{\"1\":{\"215\":1}}],[\"逻辑删除\",{\"0\":{\"215\":1}}],[\"逻辑性强\",{\"1\":{\"47\":1}}],[\"转换为bit则是\",{\"1\":{\"819\":1}}],[\"转化为java\",{\"1\":{\"710\":1}}],[\"转为json放入缓存中\",{\"1\":{\"698\":1}}],[\"转为vo返回\",{\"1\":{\"214\":1}}],[\"转行\",{\"1\":{\"508\":1}}],[\"转发到\",{\"1\":{\"27\":2}}],[\"转发请求到哪里\",{\"1\":{\"27\":1}}],[\"耗时只有1秒多\",{\"1\":{\"538\":1}}],[\"耗时比较大\",{\"1\":{\"537\":1}}],[\"耗时在8s左右\",{\"1\":{\"211\":1}}],[\"耗时\",{\"1\":{\"211\":2,\"431\":1}}],[\"耗时为24s左右\",{\"1\":{\"211\":1}}],[\"批量修改\",{\"1\":{\"663\":2}}],[\"批量插入用户\",{\"1\":{\"539\":1}}],[\"批量新增\",{\"0\":{\"211\":1}}],[\"批量删除\",{\"0\":{\"190\":1},\"1\":{\"190\":1}}],[\"改为自己的elasticsearch版本\",{\"1\":{\"687\":1}}],[\"改成\",{\"1\":{\"451\":1}}],[\"改造当前关注用户的逻辑\",{\"1\":{\"807\":1}}],[\"改造pagedto实体\",{\"1\":{\"220\":1}}],[\"改造根据id用户查询的接口\",{\"1\":{\"214\":1}}],[\"改造根据id修改用户余额的接口\",{\"1\":{\"210\":1}}],[\"改进\",{\"1\":{\"142\":1}}],[\"扣库存\",{\"1\":{\"789\":1,\"796\":1}}],[\"扣减失败\",{\"1\":{\"790\":1}}],[\"扣减库存失败\",{\"1\":{\"790\":1}}],[\"扣减库存\",{\"1\":{\"765\":1,\"769\":1,\"770\":2,\"790\":1}}],[\"扣减用户余额\",{\"1\":{\"208\":1}}],[\"扣200\",{\"1\":{\"205\":1}}],[\"控制台输入jconsole即可启动\",{\"1\":{\"695\":1}}],[\"控制用户的访问权限\",{\"1\":{\"615\":1}}],[\"控制同一时间只有某些线程能访问到资源\",{\"1\":{\"545\":1}}],[\"控制同一时间只有一台机器去执行定时任务\",{\"1\":{\"540\":1}}],[\"控制定时任务的执行\",{\"1\":{\"545\":1}}],[\"控制反转\",{\"1\":{\"268\":1}}],[\"控制器shoptypecontroller\",{\"1\":{\"747\":1}}],[\"控制器修改\",{\"1\":{\"747\":1,\"751\":1}}],[\"控制器上面添加组\",{\"1\":{\"667\":1}}],[\"控制器中加注解\",{\"1\":{\"666\":1}}],[\"控制器usercontroller\",{\"0\":{\"606\":1}}],[\"控制器构造一些list和map数据\",{\"1\":{\"418\":1}}],[\"控制器\",{\"1\":{\"208\":1,\"663\":1,\"710\":1,\"764\":1,\"765\":1,\"802\":1,\"805\":1,\"806\":1,\"807\":1,\"810\":1,\"817\":1,\"819\":1,\"820\":1}}],[\"控制层中的常用注解\",{\"1\":{\"47\":1}}],[\"例子\",{\"1\":{\"204\":1}}],[\"例如朋友圈\",{\"1\":{\"808\":1}}],[\"例如200代表2元\",{\"1\":{\"764\":2}}],[\"例如当前时间为\",{\"1\":{\"731\":1}}],[\"例如达到了50s\",{\"1\":{\"703\":1}}],[\"例如采用缓存击穿的防护机制\",{\"1\":{\"699\":1}}],[\"例如vip\",{\"1\":{\"573\":1}}],[\"例如一个user对象\",{\"1\":{\"382\":1}}],[\"例如每隔20秒就查询一次\",{\"1\":{\"352\":1}}],[\"例如我的是\",{\"1\":{\"317\":1}}],[\"例如在构建datasource对象的时候\",{\"1\":{\"310\":1}}],[\"例如http\",{\"1\":{\"262\":1}}],[\"例如service里面要注入dao\",{\"1\":{\"287\":1}}],[\"例如service包\",{\"1\":{\"245\":1}}],[\"例如selectbyid接口\",{\"1\":{\"182\":1}}],[\"例如d\",{\"1\":{\"241\":1,\"665\":1}}],[\"例如exampledir\",{\"1\":{\"241\":1,\"665\":1}}],[\"例如examplebucket\",{\"1\":{\"241\":1,\"665\":1}}],[\"例如处理json就可以使用jacksontypehandler处理器\",{\"1\":{\"217\":1}}],[\"例如处于sleep\",{\"1\":{\"155\":1}}],[\"例如is\",{\"1\":{\"215\":1}}],[\"例如数据库锁定整个记录\",{\"1\":{\"210\":1}}],[\"例如like的第一个参数都是条件判断\",{\"1\":{\"209\":1}}],[\"例如定时执行任务\",{\"1\":{\"115\":1,\"713\":1}}],[\"例如\",{\"1\":{\"112\":1,\"155\":1,\"158\":3,\"183\":1,\"262\":1,\"352\":1,\"355\":1,\"382\":1,\"387\":1,\"421\":1,\"485\":1,\"749\":1,\"780\":1}}],[\"例如垃圾回收\",{\"1\":{\"89\":1}}],[\"例如重新哈希\",{\"1\":{\"63\":1}}],[\"别名包扫描路径\",{\"1\":{\"201\":1}}],[\"连同一台机器\",{\"1\":{\"634\":1}}],[\"连锁效应\",{\"1\":{\"549\":1}}],[\"连接服务器的时候遇到下面这个报错\",{\"1\":{\"636\":1}}],[\"连接服务器之后\",{\"1\":{\"605\":1}}],[\"连接断开\",{\"1\":{\"407\":1}}],[\"连接关闭调用的方法\",{\"1\":{\"407\":1}}],[\"连接关闭的回调方法\",{\"1\":{\"406\":1}}],[\"连接建立成功调用的方法\",{\"1\":{\"407\":1}}],[\"连接成功\",{\"1\":{\"406\":1}}],[\"连接成功建立的回调方法\",{\"1\":{\"406\":1}}],[\"连接发生错误的回调方法\",{\"1\":{\"406\":1}}],[\"连接websocket节点\",{\"1\":{\"406\":1}}],[\"连接池\",{\"0\":{\"396\":1},\"1\":{\"398\":1}}],[\"连接数据库资源文件\",{\"1\":{\"224\":1}}],[\"连接数据库\",{\"1\":{\"213\":1}}],[\"连接\",{\"1\":{\"201\":1,\"211\":1}}],[\"连续调用两次unpark和调用一次unpark效果一样\",{\"1\":{\"156\":1}}],[\"英文老师\",{\"1\":{\"196\":1,\"208\":1,\"211\":1}}],[\"虽然索引已经包含了查询需要的所有列\",{\"1\":{\"466\":1}}],[\"虽然\",{\"1\":{\"415\":1}}],[\"虽然简单\",{\"1\":{\"192\":1}}],[\"虽然在等待的过程中条件可能已经满足了\",{\"1\":{\"92\":1}}],[\"假设一个大v写信息\",{\"1\":{\"808\":1}}],[\"假设用户关注了大量的用户\",{\"1\":{\"808\":1}}],[\"假设现在某个节点挂了\",{\"1\":{\"783\":1}}],[\"假设现在线程3过来访问\",{\"1\":{\"756\":1}}],[\"假设现在线程2过来\",{\"1\":{\"755\":1}}],[\"假设现在线程1过来访问\",{\"1\":{\"755\":1}}],[\"假设还是上边的情况\",{\"1\":{\"778\":1}}],[\"假设我们不设置过期时间\",{\"1\":{\"756\":1}}],[\"假设线程过来\",{\"1\":{\"755\":1}}],[\"假设线程1去查询缓存\",{\"1\":{\"756\":1}}],[\"假设线程1在查询缓存之后\",{\"1\":{\"754\":1}}],[\"假设线程1先来\",{\"1\":{\"750\":1}}],[\"假设布隆过滤器判断这个数据不存在\",{\"1\":{\"752\":1}}],[\"假设并发访问的情况是比较少见的\",{\"1\":{\"110\":1}}],[\"假ikun\",{\"1\":{\"537\":1,\"538\":1,\"539\":1}}],[\"假如有人持有这把锁\",{\"1\":{\"782\":1}}],[\"假如订单超时支付时间为30分钟\",{\"1\":{\"355\":1}}],[\"假如数组中的id数据是\",{\"1\":{\"190\":1}}],[\"属性聚合\",{\"1\":{\"710\":1}}],[\"属性值\",{\"1\":{\"670\":1,\"710\":1}}],[\"属性组内排序\",{\"1\":{\"670\":1}}],[\"属性分组关联\",{\"1\":{\"670\":1}}],[\"属性分组id\",{\"1\":{\"670\":1}}],[\"属性分组\",{\"1\":{\"670\":1}}],[\"属性分组表\",{\"1\":{\"670\":1}}],[\"属性类型\",{\"1\":{\"670\":1}}],[\"属性图标\",{\"1\":{\"670\":1}}],[\"属性名字\",{\"1\":{\"670\":1}}],[\"属性名\",{\"1\":{\"670\":2,\"710\":1}}],[\"属性id\",{\"1\":{\"670\":3,\"710\":1}}],[\"属性\",{\"1\":{\"190\":5,\"198\":1,\"616\":1,\"670\":2}}],[\"属性需要配置数据封装的类型\",{\"1\":{\"179\":1}}],[\"动词\",{\"1\":{\"680\":1}}],[\"动态链接\",{\"1\":{\"694\":1}}],[\"动态配置管理\",{\"1\":{\"657\":1}}],[\"动态配置\",{\"1\":{\"545\":1}}],[\"动态表名\",{\"1\":{\"218\":1}}],[\"动态sql\",{\"0\":{\"185\":1}}],[\"动作\",{\"1\":{\"143\":1}}],[\"封装过期时间\",{\"1\":{\"756\":1}}],[\"封装所有的查询条件\",{\"1\":{\"710\":1}}],[\"封装数据\",{\"1\":{\"690\":2,\"697\":2}}],[\"封装每个sku的信息\",{\"1\":{\"688\":1}}],[\"封装页面指定的vo\",{\"1\":{\"675\":1}}],[\"封装全局异常处理\",{\"0\":{\"626\":1}}],[\"封装通用返回对象\",{\"0\":{\"622\":1}}],[\"封装结果\",{\"1\":{\"457\":1}}],[\"封装实体类\",{\"1\":{\"453\":1}}],[\"封装为starter\",{\"0\":{\"319\":1}}],[\"封装为一个map集合\",{\"1\":{\"190\":1}}],[\"封装返回数据\",{\"1\":{\"810\":1}}],[\"封装返回\",{\"1\":{\"220\":2}}],[\"封装vo结果\",{\"1\":{\"220\":2}}],[\"封装对象\",{\"1\":{\"184\":1}}],[\"封装创建接口模态框createmodal\",{\"1\":{\"14\":1}}],[\"华为\",{\"1\":{\"184\":2,\"655\":1,\"710\":2}}],[\"占分布式锁\",{\"1\":{\"703\":5}}],[\"占用内存\",{\"1\":{\"567\":1}}],[\"占位符\",{\"1\":{\"182\":1}}],[\"占有并等待条件\",{\"1\":{\"104\":1}}],[\"复杂搜索\",{\"1\":{\"687\":1}}],[\"复杂聚合\",{\"1\":{\"685\":1}}],[\"复杂操作\",{\"1\":{\"682\":1}}],[\"复用\",{\"1\":{\"565\":1}}],[\"复用性不高\",{\"1\":{\"180\":1}}],[\"复制一份配置\",{\"1\":{\"771\":1}}],[\"复制一份组件\",{\"1\":{\"614\":1}}],[\"复制\",{\"1\":{\"616\":1}}],[\"复制爬虫链接\",{\"1\":{\"523\":1}}],[\"复制阿里云提供的示例代码\",{\"1\":{\"241\":1}}],[\"复制代码\",{\"1\":{\"28\":1}}],[\"复制粘贴维护麻烦\",{\"1\":{\"28\":1}}],[\"标示是否被当前用户点赞\",{\"1\":{\"803\":1}}],[\"标准化产品单元\",{\"1\":{\"669\":1}}],[\"标准地图\",{\"1\":{\"439\":1}}],[\"标题\",{\"1\":{\"506\":1,\"518\":1,\"556\":1,\"670\":1,\"801\":1}}],[\"标题显示在右侧\",{\"0\":{\"1\":1}}],[\"标识该请求来源于微信\",{\"1\":{\"452\":1}}],[\"标签列表\",{\"1\":{\"510\":1,\"512\":1}}],[\"标签是用户的固有属性\",{\"1\":{\"510\":2}}],[\"标签\",{\"1\":{\"509\":1}}],[\"标签名称\",{\"1\":{\"509\":1}}],[\"标签名\",{\"1\":{\"509\":1}}],[\"标签表\",{\"0\":{\"509\":1},\"1\":{\"508\":1}}],[\"标签筛选页面\",{\"1\":{\"505\":1}}],[\"标签的分类\",{\"1\":{\"500\":1,\"508\":1}}],[\"标签可以用于动态包含需要更新的列\",{\"1\":{\"191\":1}}],[\"标签不会错误地添加多余的分隔符\",{\"1\":{\"190\":1}}],[\"标签用来迭代任何可迭代的对象\",{\"1\":{\"190\":1}}],[\"标签中其实是可以配置多个\",{\"1\":{\"178\":1}}],[\"标记每一个参数\",{\"1\":{\"184\":1}}],[\"必须用redis的数据结构实现\",{\"1\":{\"809\":1}}],[\"必须匹配\",{\"1\":{\"710\":1}}],[\"必须包含mill\",{\"1\":{\"685\":1}}],[\"必须提交给定的值\",{\"1\":{\"668\":1}}],[\"必须密码匹配才可以\",{\"1\":{\"561\":1}}],[\"必须使所有的数据都保持一致状态\",{\"1\":{\"472\":1}}],[\"必须在索引中全部能够找到\",{\"1\":{\"467\":1}}],[\"必须在启动线程之前调用此方法\",{\"1\":{\"89\":1}}],[\"必须有\",{\"1\":{\"466\":1}}],[\"必须要有密码\",{\"1\":{\"558\":2}}],[\"必须要确保ioc容器中该类型对应的bean对象只能有一个\",{\"1\":{\"297\":1}}],[\"必须要保持一致\",{\"1\":{\"285\":1}}],[\"必须指定\",{\"1\":{\"198\":1,\"682\":1}}],[\"必须是接口对应的全限定名字\",{\"1\":{\"176\":1}}],[\"驱动\",{\"1\":{\"175\":1}}],[\"导致他的锁自动释放\",{\"1\":{\"778\":1}}],[\"导致大量请求到达数据库\",{\"1\":{\"753\":1}}],[\"导致大量的请求直接访问底层存储系统\",{\"1\":{\"700\":1}}],[\"导致其他线程进来\",{\"1\":{\"703\":1}}],[\"导致死锁\",{\"1\":{\"703\":1}}],[\"导致出现死锁\",{\"1\":{\"703\":1}}],[\"导致请求穿透到底层存储系统\",{\"1\":{\"701\":1}}],[\"导致每次请求都要查询数据库或其他存储系统\",{\"1\":{\"699\":1}}],[\"导致一个方法堆了成百上千行\",{\"1\":{\"490\":1}}],[\"导致消息未被确认\",{\"1\":{\"360\":1}}],[\"导致mq的消息处理飙升\",{\"1\":{\"350\":1}}],[\"导致海洋生物变异\",{\"1\":{\"336\":1}}],[\"导致第一个消费者处理完了\",{\"1\":{\"333\":1}}],[\"导包\",{\"1\":{\"312\":1}}],[\"导入店铺数据到geo\",{\"0\":{\"816\":1}}],[\"导入页面到search目录下面\",{\"1\":{\"710\":1}}],[\"导入redis\",{\"1\":{\"698\":1}}],[\"导入上传文件的三个文件\",{\"1\":{\"665\":1}}],[\"导入common模块\",{\"1\":{\"663\":1}}],[\"导入到common模块\",{\"1\":{\"658\":1}}],[\"导入开源项目renren\",{\"1\":{\"655\":3}}],[\"导入数据pms\",{\"1\":{\"663\":1}}],[\"导入数据\",{\"1\":{\"535\":1}}],[\"导入excel信息\",{\"1\":{\"524\":1}}],[\"导入包\",{\"1\":{\"522\":1}}],[\"导入maven依赖\",{\"1\":{\"687\":1}}],[\"导入maven坐标\",{\"0\":{\"405\":1}}],[\"导入mybatis\",{\"1\":{\"655\":1}}],[\"导入mybatis配置\",{\"1\":{\"312\":1}}],[\"导入jar包\",{\"1\":{\"245\":1}}],[\"导入依赖到每个模块\",{\"1\":{\"659\":1}}],[\"导入依赖到common模块\",{\"1\":{\"657\":1,\"660\":1}}],[\"导入依赖\",{\"1\":{\"224\":1,\"294\":1,\"319\":1,\"340\":1,\"398\":1,\"416\":1,\"665\":1,\"733\":1,\"770\":1}}],[\"导入坐标\",{\"1\":{\"175\":1}}],[\"导航条\",{\"1\":{\"505\":1}}],[\"导航\",{\"2\":{\"2\":1,\"3\":1,\"35\":1,\"36\":1}}],[\"教师类\",{\"1\":{\"171\":1}}],[\"学习工具\",{\"2\":{\"828\":1,\"829\":1}}],[\"学习实用工具\",{\"0\":{\"827\":1}}],[\"学习不同的方式\",{\"1\":{\"672\":1}}],[\"学习方向\",{\"1\":{\"500\":1}}],[\"学习使用策略模式消除\",{\"1\":{\"490\":1}}],[\"学习记录\",{\"0\":{\"833\":1},\"2\":{\"46\":1}}],[\"学生\",{\"1\":{\"508\":1}}],[\"学生对象\",{\"1\":{\"416\":1}}],[\"学生类\",{\"1\":{\"171\":1}}],[\"播妞\",{\"1\":{\"171\":1}}],[\"睡觉\",{\"1\":{\"171\":1}}],[\"女\",{\"1\":{\"171\":1,\"508\":1,\"518\":2}}],[\"存入一个0或1\",{\"1\":{\"819\":1}}],[\"存入数据\",{\"1\":{\"395\":1}}],[\"存不同种如手机等图片\",{\"1\":{\"670\":1}}],[\"存到服务器上\",{\"1\":{\"604\":1}}],[\"存了所有的分数信息\",{\"1\":{\"567\":1}}],[\"存json字符串\",{\"1\":{\"510\":1}}],[\"存放会话对象\",{\"1\":{\"407\":1}}],[\"存数据\",{\"1\":{\"395\":1}}],[\"存款大于等于1000元的人\",{\"1\":{\"204\":1}}],[\"存在误判\",{\"1\":{\"752\":1}}],[\"存在误判可能缓存空对象思路分析\",{\"1\":{\"752\":1}}],[\"存在\",{\"1\":{\"739\":1,\"740\":1,\"758\":1,\"789\":1,\"796\":1}}],[\"存在sku销售属性表里面\",{\"1\":{\"670\":1}}],[\"存在sql注入问题\",{\"1\":{\"182\":1}}],[\"存在则为重复消息放弃处理\",{\"1\":{\"352\":1}}],[\"存在业务入侵\",{\"1\":{\"349\":1}}],[\"存在就能拿到\",{\"1\":{\"169\":2,\"170\":2}}],[\"存储和管理消息\",{\"1\":{\"791\":1}}],[\"存储和检索数据\",{\"1\":{\"681\":1}}],[\"存储\",{\"1\":{\"741\":1,\"788\":1}}],[\"存储类的元数据信息\",{\"1\":{\"694\":1}}],[\"存储老版本数据\",{\"1\":{\"476\":1}}],[\"存储消息达到上限\",{\"1\":{\"362\":1}}],[\"存储等待执行的任务\",{\"1\":{\"114\":1}}],[\"存储过程如下\",{\"1\":{\"69\":1}}],[\"暴力反射\",{\"1\":{\"168\":1,\"169\":1,\"170\":1}}],[\"获得了锁的线程他会开启一个\",{\"1\":{\"756\":1}}],[\"获得所有的构造\",{\"1\":{\"168\":2}}],[\"获取今天是第几天\",{\"1\":{\"819\":1}}],[\"获取距离\",{\"1\":{\"817\":1}}],[\"获取店铺id\",{\"1\":{\"817\":1}}],[\"获取时间\",{\"1\":{\"810\":1}}],[\"获取登录用户\",{\"1\":{\"801\":1,\"809\":1}}],[\"获取登录用户的标签\",{\"1\":{\"575\":1}}],[\"获取消息的起始id\",{\"1\":{\"795\":1}}],[\"获取消息中的订单id\",{\"1\":{\"355\":1}}],[\"获取失败\",{\"1\":{\"777\":2,\"790\":1}}],[\"获取成功\",{\"1\":{\"777\":1}}],[\"获取成员数sinter\",{\"1\":{\"390\":1}}],[\"获取成员方法\",{\"0\":{\"170\":1}}],[\"获取成员变量的值\",{\"1\":{\"171\":1}}],[\"获取成员变量的名字\",{\"1\":{\"171\":1}}],[\"获取成员变量\",{\"0\":{\"169\":1},\"1\":{\"169\":1}}],[\"获取锁失败\",{\"1\":{\"790\":1}}],[\"获取锁的拥有者\",{\"1\":{\"782\":1}}],[\"获取锁的最大等待时间\",{\"1\":{\"781\":1}}],[\"获取锁的值\",{\"1\":{\"778\":1}}],[\"获取锁中的线程标示\",{\"1\":{\"780\":1}}],[\"获取锁时添加一个超时时间\",{\"1\":{\"776\":1}}],[\"获取锁\",{\"1\":{\"776\":1,\"781\":1}}],[\"获取序列号\",{\"1\":{\"763\":1}}],[\"获取全局id\",{\"1\":{\"763\":1}}],[\"获取2022\",{\"1\":{\"763\":1}}],[\"获取互斥锁\",{\"1\":{\"756\":1,\"758\":1}}],[\"获取互斥锁后\",{\"1\":{\"755\":1}}],[\"获取redis中的用户\",{\"1\":{\"742\":1}}],[\"获取请求头中的token\",{\"1\":{\"742\":1}}],[\"获取到消息后自动确认\",{\"1\":{\"795\":1}}],[\"获取到锁\",{\"1\":{\"755\":1}}],[\"获取到品牌的聚合\",{\"1\":{\"710\":1}}],[\"获取到错误提示\",{\"1\":{\"666\":1}}],[\"获取5条记录\",{\"1\":{\"710\":1}}],[\"获取一个值+1\",{\"1\":{\"704\":1}}],[\"获取一个值\",{\"1\":{\"704\":1}}],[\"获取一个信号\",{\"1\":{\"704\":1}}],[\"获取分析数据\",{\"1\":{\"687\":1}}],[\"获取错误的属性的名字\",{\"1\":{\"666\":1}}],[\"获取签名\",{\"1\":{\"665\":1}}],[\"获取id\",{\"1\":{\"810\":1}}],[\"获取id列表\",{\"1\":{\"575\":1}}],[\"获取ioc容器\",{\"1\":{\"269\":2}}],[\"获取当前页数据\",{\"1\":{\"803\":1}}],[\"获取当前时间戳\",{\"1\":{\"763\":1}}],[\"获取当前分组没有关联的所有属性\",{\"1\":{\"674\":1}}],[\"获取当前分组还没有关联的属性\",{\"1\":{\"674\":1}}],[\"获取当前用户后端接口\",{\"1\":{\"613\":1}}],[\"获取当前用户\",{\"0\":{\"613\":1}}],[\"获取当前用户创建的队伍\",{\"0\":{\"565\":1}}],[\"获取当前用户已加入的队伍\",{\"0\":{\"564\":1}}],[\"获取当前线程的id\",{\"1\":{\"777\":1,\"778\":2}}],[\"获取当前线程\",{\"1\":{\"83\":1}}],[\"获取token的代码\",{\"1\":{\"457\":1}}],[\"获取access\",{\"0\":{\"457\":1}}],[\"获取a锁\",{\"1\":{\"104\":1}}],[\"获取同义词\",{\"0\":{\"454\":1}}],[\"获取回复消息\",{\"1\":{\"453\":1}}],[\"获取模板\",{\"1\":{\"423\":1}}],[\"获取数据\",{\"1\":{\"395\":1}}],[\"获取数据类型\",{\"1\":{\"169\":1}}],[\"获取列表长度\",{\"1\":{\"388\":1}}],[\"获取指定位置\",{\"1\":{\"819\":1}}],[\"获取指定范围达到元素rpop\",{\"1\":{\"388\":1}}],[\"获取指定构造\",{\"1\":{\"168\":2}}],[\"获取所有用户列表\",{\"1\":{\"575\":1}}],[\"获取所有值\",{\"1\":{\"386\":1}}],[\"获取所有字段hvals\",{\"1\":{\"386\":1}}],[\"获取所有的成员变量\",{\"1\":{\"171\":1}}],[\"获取所有的方法\",{\"1\":{\"170\":2}}],[\"获取hdel\",{\"1\":{\"386\":1}}],[\"获取session\",{\"1\":{\"739\":1}}],[\"获取setex\",{\"1\":{\"384\":1}}],[\"获取spu的规格参数信息\",{\"1\":{\"721\":1}}],[\"获取spu的介绍\",{\"1\":{\"721\":1}}],[\"获取spu的销售属性组合\",{\"1\":{\"721\":1}}],[\"获取string数据\",{\"1\":{\"399\":1}}],[\"获取sqlsessionfactory\",{\"1\":{\"184\":1}}],[\"获取sqlsession对象\",{\"1\":{\"175\":1,\"184\":1}}],[\"获取并移除下一个延迟时间\",{\"1\":{\"355\":1}}],[\"获取bitmap中bit数组\",{\"1\":{\"819\":1}}],[\"获取bean\",{\"0\":{\"297\":1}}],[\"获取b锁\",{\"1\":{\"104\":1}}],[\"获取上传的文件的输入流\",{\"1\":{\"241\":1}}],[\"获取阿里云oss参数\",{\"1\":{\"241\":1}}],[\"获取文件的后缀名\",{\"1\":{\"239\":1}}],[\"获取原始文件名称\",{\"1\":{\"801\":1}}],[\"获取原始文件名\",{\"1\":{\"239\":1}}],[\"获取mapper接口的代理对象\",{\"1\":{\"184\":1}}],[\"获取usermapper接口的代理对象\",{\"1\":{\"176\":1}}],[\"获取字节码文件的对象\",{\"1\":{\"171\":1}}],[\"获取方法的参数类型列表\",{\"1\":{\"170\":1}}],[\"获取方法的参数列表\",{\"1\":{\"170\":1}}],[\"获取方法的参数个数\",{\"1\":{\"170\":1}}],[\"获取方法的返回值类型\",{\"1\":{\"170\":1}}],[\"获取方法的名称\",{\"1\":{\"170\":1}}],[\"获取方法的修饰符\",{\"1\":{\"170\":1}}],[\"获取单一方法\",{\"1\":{\"170\":1}}],[\"获取单个的\",{\"1\":{\"169\":1}}],[\"获取变量名\",{\"1\":{\"169\":1}}],[\"获取参数列表\",{\"1\":{\"168\":1}}],[\"获取权限修饰符\",{\"1\":{\"168\":1,\"169\":1}}],[\"获取class字节码文件对象\",{\"1\":{\"168\":1,\"169\":1,\"170\":1}}],[\"获取class对象\",{\"1\":{\"167\":1}}],[\"获取call方法返回的结果\",{\"1\":{\"83\":1}}],[\"获取反射三种方式\",{\"0\":{\"167\":1}}],[\"获取结果\",{\"1\":{\"143\":2}}],[\"获取\",{\"1\":{\"136\":1,\"175\":1,\"796\":2}}],[\"获取与释放\",{\"1\":{\"136\":1}}],[\"获取两个\",{\"1\":{\"122\":2,\"718\":2}}],[\"获取许可证\",{\"1\":{\"109\":1}}],[\"获取计算结果\",{\"1\":{\"105\":1}}],[\"获取用户信息\",{\"1\":{\"14\":2,\"613\":1,\"739\":1}}],[\"才释放锁\",{\"1\":{\"756\":1}}],[\"才能进行查询如果获取到了锁的线程\",{\"1\":{\"755\":1}}],[\"才能做转发的\",{\"1\":{\"412\":1}}],[\"才能继续运行就是同步\",{\"1\":{\"81\":1}}],[\"才会接收到消息\",{\"1\":{\"336\":1}}],[\"才可以使用\",{\"1\":{\"167\":1}}],[\"蔡徐坤\",{\"1\":{\"165\":1,\"339\":1,\"399\":2,\"400\":1}}],[\"准备10万条数据\",{\"1\":{\"211\":1}}],[\"准备舞台\",{\"1\":{\"165\":1}}],[\"准备话筒\",{\"1\":{\"165\":1}}],[\"准备就绪\",{\"1\":{\"81\":1}}],[\"外面的人需要大明星唱一首歌\",{\"1\":{\"165\":1}}],[\"外层调用\",{\"1\":{\"152\":2}}],[\"外层\",{\"1\":{\"103\":2,\"152\":1}}],[\"禁止查看\",{\"1\":{\"801\":1}}],[\"禁止加入私有队伍\",{\"1\":{\"561\":1,\"574\":1}}],[\"禁止加入私有的队伍\",{\"1\":{\"561\":1}}],[\"禁止地图旋转和倾斜可以通过配置项进行设置\",{\"1\":{\"438\":1}}],[\"禁重排\",{\"1\":{\"161\":1}}],[\"禁用\",{\"1\":{\"25\":1,\"670\":1}}],[\"屏障指令等\",{\"1\":{\"161\":1}}],[\"屏蔽各个硬件平台和操作系统的内存访问差异以实现让jva程序在各种平台下都能达到一致的内存访问效果\",{\"1\":{\"157\":1}}],[\"读第一个消息\",{\"1\":{\"794\":1}}],[\"读消息\",{\"1\":{\"794\":1}}],[\"读模式\",{\"1\":{\"706\":1}}],[\"读锁加锁成功\",{\"1\":{\"704\":1}}],[\"读写数据的时候\",{\"1\":{\"705\":1}}],[\"读写锁\",{\"1\":{\"704\":1}}],[\"读写速度快\",{\"1\":{\"548\":1}}],[\"读写分离解决的是\",{\"1\":{\"487\":1}}],[\"读写分离\",{\"1\":{\"487\":1}}],[\"读已提交\",{\"1\":{\"474\":1}}],[\"读excel\",{\"0\":{\"433\":1}}],[\"读屏障\",{\"1\":{\"161\":1}}],[\"读的内存语义是直接从主内存中读取\",{\"1\":{\"160\":1}}],[\"读取最新的消息\",{\"1\":{\"794\":1}}],[\"读取收集来的基础⽤户信息\",{\"1\":{\"571\":1}}],[\"读取结果\",{\"1\":{\"525\":1}}],[\"读取操作\",{\"1\":{\"476\":1}}],[\"读取properties配置\",{\"1\":{\"312\":1}}],[\"读取properties配置文件\",{\"1\":{\"306\":1}}],[\"读取properties文件\",{\"0\":{\"295\":1}}],[\"读取info中的属性时就非常不方便\",{\"1\":{\"217\":1}}],[\"读取当前内存中的值与期望值进行比较\",{\"1\":{\"131\":1}}],[\"读取完成\",{\"1\":{\"110\":2}}],[\"读取\",{\"1\":{\"110\":2,\"158\":1}}],[\"规则如下\",{\"1\":{\"337\":1}}],[\"规则是去掉set\",{\"1\":{\"287\":1}}],[\"规则\",{\"1\":{\"159\":1}}],[\"规避资源耗尽的风险\",{\"1\":{\"115\":1}}],[\"于是删除这把锁\",{\"1\":{\"778\":1}}],[\"于是不进行删除锁逻辑\",{\"1\":{\"778\":1}}],[\"于该对象的\",{\"1\":{\"159\":1}}],[\"于该线程的终止操作\",{\"1\":{\"159\":1}}],[\"于该线程的任何操作\",{\"1\":{\"159\":1}}],[\"于被中断线程检测到中断事件的发生\",{\"1\":{\"159\":1}}],[\"于后续对该变量的读操作\",{\"1\":{\"159\":1}}],[\"于后续对同一把锁的加锁操作\",{\"1\":{\"159\":1}}],[\"变量的修改对于其他线程是可见的\",{\"1\":{\"159\":1}}],[\"变量的写操作\",{\"1\":{\"159\":1}}],[\"住内存中该变量的一份拷贝\",{\"1\":{\"158\":1}}],[\"里面放一个elasticsearch\",{\"1\":{\"681\":1}}],[\"里面放spring\",{\"1\":{\"18\":1}}],[\"里面配置自己服务器的信息\",{\"1\":{\"636\":1}}],[\"里面的children就是子页面\",{\"1\":{\"615\":1}}],[\"里面的内容必须和map集合中键的名称一致\",{\"1\":{\"184\":1}}],[\"里面的内容必须和实体类属性名保持一致\",{\"1\":{\"184\":1}}],[\"里面还存在一个new操作\",{\"1\":{\"269\":1}}],[\"里面必须为\",{\"1\":{\"207\":1}}],[\"里面保存该线程使用到的变量的副本\",{\"1\":{\"158\":1}}],[\"各个变量的读写访问方式并决定一个线程对共享变量的写入何时以及如何变成对另一个线程可见\",{\"1\":{\"157\":1}}],[\"各个入驻卖家售价是多少\",{\"1\":{\"143\":1}}],[\"尤其是多线程\",{\"1\":{\"157\":1}}],[\"尤其是当runnable包含耗时的操作时\",{\"1\":{\"143\":1}}],[\"证不够\",{\"1\":{\"156\":1}}],[\"证明是缓存穿透数据\",{\"1\":{\"752\":1}}],[\"证明没有到链表尾部\",{\"1\":{\"71\":1}}],[\"证明已经有数据了\",{\"1\":{\"71\":2}}],[\"证明当前数组位置为空\",{\"1\":{\"71\":2}}],[\"故不会阻塞\",{\"1\":{\"156\":1}}],[\"累加无效\",{\"1\":{\"156\":1}}],[\"形式为sort=hotscore\",{\"1\":{\"710\":1}}],[\"形参\",{\"1\":{\"165\":1}}],[\"形象的理解\",{\"1\":{\"156\":1}}],[\"形成了映射关系\",{\"1\":{\"819\":1}}],[\"形成点赞排行榜\",{\"1\":{\"804\":1}}],[\"形成集群\",{\"1\":{\"771\":1}}],[\"形成循环等待\",{\"1\":{\"153\":1}}],[\"形成一个循环\",{\"1\":{\"104\":1}}],[\"许可\",{\"1\":{\"156\":1}}],[\"许可证数量\",{\"1\":{\"109\":1}}],[\"被举报\",{\"1\":{\"801\":1}}],[\"被点击的菜单id\",{\"1\":{\"670\":1}}],[\"被注入的对象必须要被spring的ioc容器管理\",{\"1\":{\"287\":1}}],[\"被创建或被管理的对象在ioc容器中统称为bean\",{\"1\":{\"268\":1}}],[\"被调用的处理器对象\",{\"1\":{\"232\":1}}],[\"被代理方法的参数\",{\"1\":{\"165\":1}}],[\"被代理的方法\",{\"1\":{\"165\":1}}],[\"被代理的明星对象\",{\"1\":{\"165\":1}}],[\"被代理类的所有接口\",{\"1\":{\"165\":1}}],[\"被volatile修饰的变量有两个特点\",{\"1\":{\"160\":1}}],[\"被设置中断标志的线程将继续正常运行\",{\"1\":{\"155\":1}}],[\"被final修饰的方法是可以重载的\",{\"1\":{\"133\":1}}],[\"被final修饰的方法不能够被子类所重写\",{\"1\":{\"133\":1}}],[\"静态资源\",{\"1\":{\"696\":1}}],[\"静态工厂创建对象\",{\"1\":{\"275\":1}}],[\"静态工厂实例化\",{\"0\":{\"275\":1}}],[\"静态方法\",{\"1\":{\"155\":1}}],[\"静态同步方法\",{\"0\":{\"149\":1}}],[\"解构赋值\",{\"1\":{\"663\":1}}],[\"解释\",{\"1\":{\"646\":1}}],[\"解压\",{\"1\":{\"639\":1}}],[\"解析出id\",{\"1\":{\"817\":1}}],[\"解析出用户\",{\"1\":{\"805\":2}}],[\"解析数据\",{\"1\":{\"810\":1}}],[\"解析消息\",{\"1\":{\"796\":2}}],[\"解析到一条数据\",{\"1\":{\"525\":1}}],[\"解析json字符串\",{\"1\":{\"512\":1}}],[\"解析sql\",{\"1\":{\"463\":1}}],[\"解析\",{\"1\":{\"457\":1}}],[\"解除\",{\"1\":{\"153\":1}}],[\"解决缓存\",{\"1\":{\"758\":4}}],[\"解决登录状态刷新问题\",{\"0\":{\"742\":1}}],[\"解决集群间登录态同步问题\",{\"1\":{\"571\":1}}],[\"解决\",{\"1\":{\"567\":1,\"706\":3,\"749\":1,\"778\":1}}],[\"解决单表存储和性能的问题\",{\"1\":{\"478\":1}}],[\"解决海量数据存储和高并发的问题\",{\"1\":{\"478\":1}}],[\"解决消息堆积有三种种思路\",{\"1\":{\"362\":2}}],[\"解决特殊字段类型与数据库类型转换的问题\",{\"1\":{\"217\":1}}],[\"解决办法如下\",{\"1\":{\"655\":1}}],[\"解决办法消费者确认机制\",{\"1\":{\"359\":1}}],[\"解决办法\",{\"1\":{\"99\":1,\"100\":1,\"359\":2,\"360\":1,\"380\":1,\"485\":1,\"496\":1,\"653\":1,\"663\":1,\"703\":3,\"750\":1}}],[\"解决方案就是在每个线程释放锁的时候\",{\"1\":{\"778\":1}}],[\"解决方案\",{\"1\":{\"143\":1,\"352\":1,\"353\":1,\"468\":1,\"533\":1,\"549\":1,\"698\":1,\"753\":1,\"778\":1}}],[\"解决方案copyonwritearraylist\",{\"0\":{\"98\":1}}],[\"解决方案collections\",{\"0\":{\"97\":1}}],[\"解决方案vector\",{\"0\":{\"96\":1}}],[\"相较于原来从缓存中查询不到数据后直接查询数据库而言\",{\"1\":{\"755\":1}}],[\"相较于rdb持久化\",{\"1\":{\"371\":1}}],[\"相对于java的异常类\",{\"1\":{\"626\":1}}],[\"相对于传统关系型数据库而言\",{\"1\":{\"377\":1}}],[\"相差\",{\"1\":{\"575\":1}}],[\"相似度计算算法+本地式分布式计算\",{\"1\":{\"500\":1}}],[\"相同用户的放在一个集合中\",{\"1\":{\"214\":1}}],[\"相当于条件判断并没有起到作用\",{\"1\":{\"779\":1}}],[\"相当于mysql的databse\",{\"1\":{\"680\":1}}],[\"相当于mysql的insert\",{\"1\":{\"680\":1}}],[\"相当于替换eureka\",{\"1\":{\"657\":1}}],[\"相当于每秒发送50条消息\",{\"1\":{\"333\":1}}],[\"相当于case\",{\"1\":{\"186\":3}}],[\"相当于switch\",{\"1\":{\"186\":1}}],[\"相互等待\",{\"1\":{\"153\":1}}],[\"相反\",{\"1\":{\"121\":2,\"717\":2}}],[\"试图获取a锁\",{\"1\":{\"153\":1}}],[\"试图获取b锁\",{\"1\":{\"153\":1}}],[\"若确认此次get请求来自微信服务器\",{\"1\":{\"452\":1}}],[\"若要中断一个线程\",{\"1\":{\"155\":1}}],[\"若无外力作用\",{\"1\":{\"153\":1}}],[\"若只有有参会报错\",{\"1\":{\"47\":1}}],[\"显示状态\",{\"1\":{\"666\":1,\"667\":1,\"668\":1}}],[\"显示\",{\"1\":{\"496\":1,\"666\":1,\"667\":1,\"668\":1}}],[\"显示索引之间的列之间的比较\",{\"1\":{\"486\":1}}],[\"显示可能用于此查询的索引\",{\"1\":{\"486\":1}}],[\"显示查询涉及的表名\",{\"1\":{\"486\":1}}],[\"显示锁\",{\"1\":{\"152\":1}}],[\"显然这种方式比较麻烦\",{\"1\":{\"338\":1}}],[\"显式的锁定之后再操作同步资源\",{\"1\":{\"145\":1}}],[\"虚拟主机\",{\"1\":{\"332\":1}}],[\"虚拟目录\",{\"1\":{\"248\":1}}],[\"虚拟机\",{\"1\":{\"152\":1}}],[\"虚假唤醒是指在没有调用\",{\"1\":{\"92\":1}}],[\"刻再次获取同步状态的概率就变得非常大\",{\"1\":{\"151\":1}}],[\"某个线程一直得不到锁\",{\"1\":{\"151\":1}}],[\"反向代理\",{\"1\":{\"611\":1,\"663\":1}}],[\"反序列化为对象\",{\"1\":{\"756\":1,\"758\":1}}],[\"反序列化\",{\"1\":{\"512\":1}}],[\"反之亦然\",{\"1\":{\"475\":1}}],[\"反之不行\",{\"1\":{\"111\":1}}],[\"反射获取构造方法\",{\"0\":{\"168\":1}}],[\"反射允许对成员变量\",{\"1\":{\"166\":1}}],[\"反射\",{\"0\":{\"164\":1,\"166\":1},\"2\":{\"172\":1,\"173\":1}}],[\"反编译synchronized锁的是什么\",{\"0\":{\"150\":1}}],[\"得到购买资格\",{\"1\":{\"789\":1,\"790\":1,\"796\":1}}],[\"得到分类的名字\",{\"1\":{\"710\":1}}],[\"得到分类的id\",{\"1\":{\"710\":1}}],[\"得到品牌的图片\",{\"1\":{\"710\":1}}],[\"得到品牌的名字\",{\"1\":{\"710\":1}}],[\"得到品牌的id\",{\"1\":{\"710\":1}}],[\"得到锁以后\",{\"1\":{\"702\":1}}],[\"得到登录成功的session\",{\"1\":{\"605\":1}}],[\"得到一个session态\",{\"1\":{\"605\":1}}],[\"得到准确的数据\",{\"1\":{\"371\":1}}],[\"得到结果\",{\"1\":{\"319\":1,\"454\":1}}],[\"得到数组中的索引\",{\"1\":{\"72\":1}}],[\"得之我幸不得我命\",{\"1\":{\"145\":1}}],[\"适用场景\",{\"1\":{\"377\":1}}],[\"适用于小数据\",{\"1\":{\"535\":1}}],[\"适用于数据量大的场景\",{\"1\":{\"526\":1}}],[\"适用于多线程环境\",{\"1\":{\"155\":1}}],[\"适用于需要高度可扩展性和灵活性的应用\",{\"1\":{\"377\":1}}],[\"适用于需要强一致性和复杂事务处理的应用\",{\"1\":{\"377\":1}}],[\"适用于需要按照一定规律执行任务的场景\",{\"1\":{\"115\":1,\"713\":1}}],[\"适用于需要保证任务按照顺序执行的场景\",{\"1\":{\"115\":1,\"713\":1}}],[\"适用于短生命周期的异步任务\",{\"1\":{\"115\":1,\"713\":1}}],[\"适用于并发任务数量可控的场景\",{\"1\":{\"115\":1,\"713\":1}}],[\"适用于读操作频繁\",{\"1\":{\"98\":1}}],[\"适合一次性导入\",{\"1\":{\"535\":1}}],[\"适合读操作多的场景\",{\"1\":{\"145\":1}}],[\"适合写操作多的场景\",{\"1\":{\"145\":1}}],[\"另一部分是针对jvm实现的\",{\"1\":{\"159\":1}}],[\"另一个操作\",{\"1\":{\"159\":1}}],[\"另一个completionstage\",{\"1\":{\"143\":1}}],[\"另外当waiting和timed\",{\"1\":{\"84\":1}}],[\"传智播客\",{\"1\":{\"261\":1}}],[\"传递\",{\"1\":{\"782\":1}}],[\"传递的值长度有限\",{\"1\":{\"531\":1}}],[\"传递性\",{\"1\":{\"159\":1}}],[\"传递哪些参数\",{\"1\":{\"18\":1}}],[\"传入了一个自定义线程池\",{\"1\":{\"143\":2}}],[\"都不能算是加锁成功\",{\"1\":{\"783\":1}}],[\"都没查到\",{\"1\":{\"754\":1}}],[\"都操作缓存\",{\"1\":{\"750\":1}}],[\"都会将用户信息保存到session中\",{\"1\":{\"738\":1}}],[\"都会来调用\",{\"1\":{\"525\":1}}],[\"都可以\",{\"1\":{\"682\":1}}],[\"都可以把对象所有的字段名和值\",{\"1\":{\"171\":1}}],[\"都需要进行编译打包和重部署\",{\"1\":{\"267\":1}}],[\"都在读屏障之后执行\",{\"1\":{\"161\":1}}],[\"都必需在线程自己的工作内存中进行\",{\"1\":{\"158\":1}}],[\"都用默认线程池forkjoinpool\",{\"1\":{\"143\":1}}],[\"都是主从模式\",{\"1\":{\"363\":1}}],[\"都是用来让当前线程进入等待状态\",{\"1\":{\"93\":1}}],[\"都是java中用于实现线程同步的机制\",{\"1\":{\"91\":1}}],[\"否\",{\"1\":{\"143\":2,\"198\":6,\"509\":1,\"670\":2}}],[\"否则会一直出现kibana\",{\"1\":{\"681\":1}}],[\"否则会先匹配到renrenfast模块\",{\"1\":{\"663\":1}}],[\"否则没有权限访问文件夹\",{\"1\":{\"639\":1}}],[\"否则接入失败\",{\"1\":{\"452\":1}}],[\"否则无法封装\",{\"1\":{\"251\":1}}],[\"否则需要等待\",{\"1\":{\"152\":1}}],[\"否则返回指定的默认值\",{\"1\":{\"143\":1}}],[\"否则返回false\",{\"1\":{\"136\":2,\"143\":1,\"421\":1}}],[\"否则继续拆分\",{\"1\":{\"117\":1}}],[\"否则阻塞线程等待\",{\"1\":{\"109\":1}}],[\"否则新位置\",{\"1\":{\"73\":1}}],[\"否则忽略值\",{\"1\":{\"67\":1}}],[\"否则不扩容\",{\"1\":{\"56\":1}}],[\"否则\",{\"1\":{\"54\":1,\"66\":1,\"67\":2,\"769\":1}}],[\"几个问题需要考虑\",{\"1\":{\"750\":1}}],[\"几个注解\",{\"1\":{\"706\":1}}],[\"几个获取异步结果的对比\",{\"1\":{\"143\":1}}],[\"几种常见的锁\",{\"1\":{\"110\":1}}],[\"单个hll的内存永远小于16kb\",{\"1\":{\"821\":1}}],[\"单个文件\",{\"1\":{\"238\":1}}],[\"单位秒\",{\"1\":{\"777\":1}}],[\"单位是分\",{\"1\":{\"764\":2}}],[\"单位ssetnx\",{\"1\":{\"384\":1}}],[\"单体系统\",{\"1\":{\"750\":1}}],[\"单\",{\"1\":{\"564\":1}}],[\"单机\",{\"1\":{\"543\":1}}],[\"单机吞吐量\",{\"1\":{\"327\":1}}],[\"单独抽离处理逻辑\",{\"1\":{\"526\":1}}],[\"单身\",{\"1\":{\"508\":1}}],[\"单表1000万或超过20g\",{\"1\":{\"478\":1}}],[\"单表超过10万数据\",{\"1\":{\"469\":1}}],[\"单节点redis的并发能力是有上限的\",{\"1\":{\"373\":1}}],[\"单条件查询\",{\"0\":{\"186\":1}}],[\"单元测试\",{\"1\":{\"175\":1,\"224\":1,\"395\":1,\"580\":1,\"634\":1,\"756\":1}}],[\"单步查询\",{\"1\":{\"143\":1}}],[\"单线程线程池\",{\"1\":{\"115\":1,\"713\":1}}],[\"万⾏的时间从\",{\"1\":{\"571\":1}}],[\"万箭齐发\",{\"1\":{\"143\":1}}],[\"万达信息\",{\"1\":{\"47\":1}}],[\"按之前的步骤配置注册中心\",{\"1\":{\"665\":1}}],[\"按图中的选\",{\"1\":{\"598\":1}}],[\"按钮的值\",{\"1\":{\"612\":1}}],[\"按钮\",{\"1\":{\"506\":2,\"518\":1}}],[\"按需引入组件\",{\"1\":{\"504\":1}}],[\"按字典排序\",{\"1\":{\"452\":1}}],[\"按类型不可以找到多个对象\",{\"1\":{\"287\":1}}],[\"按类型注入\",{\"1\":{\"286\":1,\"297\":1}}],[\"按索引注入\",{\"1\":{\"286\":1}}],[\"按部就班\",{\"1\":{\"143\":1}}],[\"按照距离排序\",{\"1\":{\"817\":1}}],[\"按照距离进行排序\",{\"1\":{\"575\":1}}],[\"按照typeid分组\",{\"1\":{\"816\":1}}],[\"按照我们穿进去的id的顺序进行排序\",{\"1\":{\"805\":1}}],[\"按照发布时间倒序查询前10条数据\",{\"1\":{\"731\":1}}],[\"按照属性id聚合\",{\"1\":{\"710\":1}}],[\"按照属性\",{\"1\":{\"710\":1}}],[\"按照编辑距离从小到达排序\",{\"1\":{\"566\":1,\"575\":1}}],[\"按照不同的请求方式代表不同的操作类型\",{\"1\":{\"262\":1}}],[\"按照mybatisplus插件\",{\"1\":{\"213\":1}}],[\"按照javabean的规范\",{\"1\":{\"200\":1}}],[\"按照程序代码的顺序\",{\"1\":{\"159\":1}}],[\"按照\",{\"1\":{\"93\":1,\"817\":1}}],[\"出来的\",{\"1\":{\"742\":1}}],[\"出来\",{\"1\":{\"233\":1}}],[\"出来结果希望是同款产品的在不同地方的价格清单列表\",{\"1\":{\"143\":1}}],[\"出现问题\",{\"1\":{\"703\":1}}],[\"出现了多个值\",{\"1\":{\"663\":1}}],[\"出现数据丢失如何解决\",{\"1\":{\"363\":1}}],[\"出现消息丢失可能会出现在以下场景\",{\"1\":{\"359\":1}}],[\"出现冲突就重试当前操作直到没有冲突为止\",{\"1\":{\"131\":1}}],[\"出现线程安全的问题一般是因为主内存和工作内存数据不一致性和重排序导致的\",{\"1\":{\"126\":1}}],[\"示例\",{\"1\":{\"143\":2}}],[\"尽可能多地查符合要求的数据\",{\"1\":{\"567\":1}}],[\"尽量只查需要的数据\",{\"1\":{\"567\":1}}],[\"尽量使用联合索引\",{\"1\":{\"469\":1}}],[\"尽量建立唯一索引\",{\"1\":{\"469\":1}}],[\"尽量选择区分度高的列作为索引\",{\"1\":{\"469\":1}}],[\"尽量避免使用select\",{\"1\":{\"467\":1}}],[\"尽量避免资源竞争\",{\"1\":{\"153\":1}}],[\"尽量不要使用new构建\",{\"1\":{\"143\":1}}],[\"尽管a操作和b操作在不同的线程中执行\",{\"1\":{\"128\":1}}],[\"力\",{\"1\":{\"143\":1}}],[\"观察者模式\",{\"1\":{\"143\":1}}],[\"速度快了一倍左右\",{\"1\":{\"142\":1}}],[\"过期自动释放锁\",{\"1\":{\"777\":1}}],[\"过期\",{\"1\":{\"764\":1}}],[\"过期了\",{\"1\":{\"756\":1,\"758\":1}}],[\"过期时间ex\",{\"1\":{\"776\":1}}],[\"过期时间就无法执行\",{\"1\":{\"776\":1}}],[\"过期时间随机化\",{\"1\":{\"700\":1}}],[\"过期时间\",{\"1\":{\"557\":2}}],[\"过一会再进行尝试\",{\"1\":{\"755\":1}}],[\"过⾃定义\",{\"1\":{\"572\":1}}],[\"过滤掉标签为空的用户\",{\"1\":{\"567\":1}}],[\"过滤\",{\"1\":{\"518\":1,\"710\":2}}],[\"过滤器\",{\"1\":{\"27\":2}}],[\"过了一会才去获取子任务的执行结果或变更的任务状态\",{\"1\":{\"141\":1}}],[\"忙其它事情或者先执行完\",{\"1\":{\"141\":1}}],[\"子句\",{\"1\":{\"710\":1}}],[\"子组件被点击\",{\"1\":{\"670\":1}}],[\"子组件\",{\"1\":{\"670\":1}}],[\"子查询\",{\"1\":{\"486\":1}}],[\"子进程共享主进程的内存数据\",{\"1\":{\"370\":1}}],[\"子线程可能比较耗时\",{\"1\":{\"141\":1}}],[\"子类需要根据实际需求实现这个方法\",{\"1\":{\"136\":2}}],[\"子类需要实现aqs提供的几个核心方法来定义自己的同步逻辑\",{\"1\":{\"136\":1}}],[\"链接\",{\"1\":{\"140\":1,\"211\":1,\"458\":1}}],[\"链表形式\",{\"1\":{\"71\":1}}],[\"链表和红黑树转换\",{\"0\":{\"70\":1}}],[\"尝试多次获取锁\",{\"1\":{\"782\":1}}],[\"尝试一次\",{\"1\":{\"776\":1}}],[\"尝试更新订单\",{\"1\":{\"352\":1}}],[\"尝试释放共享同步状态\",{\"1\":{\"136\":1}}],[\"尝试释放同步状态\",{\"1\":{\"136\":1}}],[\"尝试获取stream\",{\"1\":{\"796\":1}}],[\"尝试获取锁\",{\"1\":{\"777\":1,\"781\":1}}],[\"尝试获取共享同步状态\",{\"1\":{\"136\":1}}],[\"尝试获取同步状态\",{\"1\":{\"136\":1}}],[\"尝试插入键值对\",{\"1\":{\"66\":1}}],[\"又会删除别人的锁\",{\"1\":{\"703\":1}}],[\"又发现这行数据已经存在\",{\"1\":{\"473\":1}}],[\"又叫做比较交换来鉴别线程是否出现冲突\",{\"1\":{\"131\":1}}],[\"又称为无锁操作\",{\"1\":{\"131\":1}}],[\"比锁\",{\"1\":{\"779\":1}}],[\"比对同一个商品在各个平台上的价格\",{\"1\":{\"143\":1}}],[\"比较延迟\",{\"1\":{\"808\":1}}],[\"比较节约空间\",{\"1\":{\"808\":1}}],[\"比较与设置\",{\"1\":{\"155\":1}}],[\"比较\",{\"1\":{\"131\":1}}],[\"比如最早点赞的top5\",{\"1\":{\"804\":1}}],[\"比如是否一人一单\",{\"1\":{\"789\":1}}],[\"比如是否库存足够\",{\"1\":{\"789\":1}}],[\"比如因为线程崩溃或异常退出\",{\"1\":{\"782\":1}}],[\"比如锁的过期时间的一半\",{\"1\":{\"782\":1}}],[\"比如当前没有人持有这把锁\",{\"1\":{\"782\":1}}],[\"比如他已经拿到了当前这把锁确实是属于他自己的\",{\"1\":{\"779\":1}}],[\"比如jvm参数\",{\"1\":{\"634\":1}}],[\"比如用户未登录\",{\"1\":{\"630\":1}}],[\"比如用户信息\",{\"1\":{\"615\":1}}],[\"比如从\",{\"1\":{\"630\":1}}],[\"比如按记录查\",{\"1\":{\"567\":1}}],[\"比如说有几亿个商品\",{\"1\":{\"567\":1}}],[\"比如重复插入\",{\"1\":{\"545\":1}}],[\"比如10000台服务器同时执行\",{\"1\":{\"545\":1}}],[\"比如标签数\",{\"1\":{\"512\":1}}],[\"比如查询id\",{\"1\":{\"467\":1}}],[\"比如\",{\"1\":{\"347\":1,\"567\":1,\"611\":1}}],[\"比如拦截\",{\"1\":{\"232\":1}}],[\"比如放弃修改\",{\"1\":{\"145\":1}}],[\"比如主线程让一个子线程去执行任务\",{\"1\":{\"141\":1}}],[\"比如垃圾回收线程\",{\"1\":{\"89\":1}}],[\"比如老数组容量是16\",{\"1\":{\"71\":1}}],[\"比如怎么校验用户名和密码\",{\"1\":{\"47\":1}}],[\"比如启动类的enabledubbo\",{\"1\":{\"29\":1}}],[\"比如网关请求http\",{\"1\":{\"27\":2}}],[\"比如添加请求头\",{\"1\":{\"27\":1}}],[\"比如上线新接口\",{\"1\":{\"27\":1}}],[\"理论\",{\"1\":{\"377\":1}}],[\"理论上说我们应该在下单时发送一条延迟消息\",{\"1\":{\"355\":1}}],[\"理解它们的核心在于理解java内存模型\",{\"1\":{\"126\":1}}],[\"理想场景\",{\"1\":{\"556\":1}}],[\"理想\",{\"1\":{\"28\":1}}],[\"任意一个\",{\"1\":{\"123\":1,\"719\":1}}],[\"任务完成的时候\",{\"1\":{\"123\":1,\"719\":1}}],[\"任务的返回结果\",{\"1\":{\"122\":1,\"718\":1}}],[\"任务执行\",{\"1\":{\"117\":1,\"143\":1}}],[\"任务拆分\",{\"1\":{\"117\":1}}],[\"任务只有在尚未开始执行时才能被取消\",{\"1\":{\"105\":1}}],[\"任务队列\",{\"1\":{\"47\":1}}],[\"池中的线程会并行地执行这些任务\",{\"1\":{\"117\":1}}],[\"池执行\",{\"1\":{\"117\":1}}],[\"池执行的任务\",{\"1\":{\"117\":1}}],[\"同上\",{\"1\":{\"682\":1}}],[\"同义词\",{\"1\":{\"454\":1}}],[\"同一个用户只能点赞一次\",{\"1\":{\"803\":1}}],[\"同一个线程可以多次获得锁\",{\"1\":{\"782\":1}}],[\"同一个人还是可以抢到两个优惠卷\",{\"1\":{\"771\":1}}],[\"同一个对象\",{\"1\":{\"431\":1}}],[\"同一套项目代码在不同的阶段需要根据实际情况\",{\"1\":{\"634\":1}}],[\"同一款产品\",{\"1\":{\"143\":2}}],[\"同名请求参数可以使用\",{\"1\":{\"254\":2}}],[\"同名请求参数可以直接映射到对应名称的形参数组对象中\",{\"1\":{\"253\":1}}],[\"同级不能相互访问\",{\"1\":{\"158\":1}}],[\"同理分类修改时\",{\"1\":{\"672\":1}}],[\"同理\",{\"1\":{\"156\":1}}],[\"同时的去执行数据库代码\",{\"1\":{\"754\":1}}],[\"同时将验证码进行保存\",{\"1\":{\"738\":1}}],[\"同时计算每个分组内的目录名称\",{\"1\":{\"710\":1}}],[\"同时计算每个分组内的品牌名称和品牌图片\",{\"1\":{\"710\":1}}],[\"同时下面删除this\",{\"1\":{\"675\":1}}],[\"同时屏蔽掉项目框架本身的异常\",{\"1\":{\"626\":1}}],[\"同时返回ack的确认信息\",{\"1\":{\"343\":1}}],[\"同时绑定key\",{\"1\":{\"336\":1}}],[\"同时搜索出本产品在同一个电商平台下\",{\"1\":{\"143\":1}}],[\"同时搜索出同款产品在各大电商平台的售价\",{\"1\":{\"143\":1}}],[\"同时也可以通过实现\",{\"1\":{\"142\":1}}],[\"同样\",{\"1\":{\"117\":1,\"136\":1}}],[\"同步更新其他关联表的数据\",{\"1\":{\"672\":1,\"706\":1}}],[\"同步读\",{\"1\":{\"526\":1}}],[\"同步读取会自动finish\",{\"1\":{\"526\":1}}],[\"同步阻塞等待mq的回执\",{\"1\":{\"344\":1}}],[\"同步\",{\"1\":{\"327\":1}}],[\"同步状态是aqs实现同步的核心\",{\"1\":{\"136\":1}}],[\"同步状态\",{\"1\":{\"136\":1}}],[\"同步的代码块\",{\"1\":{\"130\":1}}],[\"同步的方法体\",{\"1\":{\"130\":1}}],[\"同步代码块\",{\"0\":{\"147\":1},\"1\":{\"130\":1}}],[\"同步方法\",{\"0\":{\"148\":1},\"1\":{\"130\":1}}],[\"同步点\",{\"1\":{\"108\":1}}],[\"同步与异步对比\",{\"1\":{\"327\":1}}],[\"同步与异步\",{\"1\":{\"81\":1}}],[\"递归锁\",{\"0\":{\"152\":1}}],[\"递归操作\",{\"1\":{\"117\":1}}],[\"递归任务\",{\"1\":{\"117\":1}}],[\"继承pagequery\",{\"1\":{\"220\":1}}],[\"继承\",{\"1\":{\"117\":2}}],[\"继续在redis中判断用户是否可以下单\",{\"1\":{\"789\":1}}],[\"继续等待\",{\"1\":{\"547\":1}}],[\"继续执行\",{\"1\":{\"108\":1,\"778\":1}}],[\"继续执行循环\",{\"1\":{\"71\":1}}],[\"继续查找下一个节点\",{\"1\":{\"66\":1}}],[\"框架\",{\"0\":{\"615\":1}}],[\"框架封装的服务器tomcat去记录\",{\"1\":{\"604\":1}}],[\"框架图\",{\"1\":{\"266\":1}}],[\"框架的基本流程如下\",{\"1\":{\"117\":1}}],[\"框架的核心\",{\"1\":{\"117\":1}}],[\"框架最适用于可以被递归地拆分成独立子任务的问题\",{\"1\":{\"117\":1}}],[\"框架是\",{\"1\":{\"117\":1}}],[\"框架和\",{\"1\":{\"114\":1}}],[\"去判断一下当前这把锁是否属于自己\",{\"1\":{\"778\":1}}],[\"去集中处理错误\",{\"1\":{\"630\":1}}],[\"去调用写入\",{\"1\":{\"431\":1}}],[\"去数据库查询判断是否存在\",{\"1\":{\"352\":1}}],[\"去掉当前\",{\"1\":{\"710\":1}}],[\"去掉\",{\"1\":{\"156\":1,\"611\":1}}],[\"去创建\",{\"1\":{\"115\":1}}],[\"去将请求转发到对应的路由\",{\"1\":{\"27\":1}}],[\"周期性执行任务等\",{\"1\":{\"115\":1,\"713\":1}}],[\"固定大小线程池\",{\"1\":{\"115\":1,\"713\":1}}],[\"剩余人数\",{\"1\":{\"556\":1}}],[\"剩余\",{\"1\":{\"151\":1}}],[\"剩余调用次数\",{\"1\":{\"25\":1}}],[\"剩下\",{\"1\":{\"115\":1,\"713\":1}}],[\"个队伍\",{\"1\":{\"561\":1}}],[\"个人页面\",{\"0\":{\"519\":1}}],[\"个默认拒绝策略\",{\"1\":{\"115\":1,\"713\":1}}],[\"个被安排上了\",{\"1\":{\"115\":1,\"713\":1}}],[\"个继续执行\",{\"1\":{\"115\":1,\"713\":1}}],[\"个进入队列排队\",{\"1\":{\"115\":1,\"713\":1}}],[\"个能直接得到执行\",{\"1\":{\"115\":1,\"713\":1}}],[\"个类的属性加载顺序是什么\",{\"1\":{\"47\":1}}],[\"答案\",{\"1\":{\"115\":1,\"713\":1}}],[\"工具\",{\"2\":{\"829\":1}}],[\"工具类\",{\"1\":{\"241\":1,\"430\":1}}],[\"工作目录\",{\"1\":{\"642\":1}}],[\"工作\",{\"1\":{\"500\":1}}],[\"工作队列\",{\"1\":{\"114\":1,\"115\":1,\"713\":1}}],[\"工商银行\",{\"1\":{\"422\":1}}],[\"工厂类创建的\",{\"1\":{\"115\":1,\"713\":1}}],[\"工厂类的静态方法创建不同类型的线程池\",{\"1\":{\"114\":1}}],[\"避免了死锁或长时间阻塞的情况\",{\"1\":{\"782\":1}}],[\"避免了阻塞等待计算结果的情况\",{\"1\":{\"141\":1}}],[\"避免被猜测id规律\",{\"1\":{\"752\":1}}],[\"避免在请求到来时才去加载\",{\"1\":{\"701\":1}}],[\"避免直接使用select\",{\"1\":{\"487\":1}}],[\"避免回表\",{\"1\":{\"469\":1}}],[\"避免文件覆盖\",{\"1\":{\"241\":1}}],[\"避免代码重排序\",{\"1\":{\"161\":1}}],[\"避免相互等待\",{\"1\":{\"153\":2}}],[\"避免阻塞调用线程\",{\"1\":{\"143\":1}}],[\"避免系统因为过多线程而耗尽资源\",{\"1\":{\"114\":1}}],[\"避免饥饿问题\",{\"1\":{\"102\":1}}],[\"更详细的\",{\"1\":{\"630\":1}}],[\"更灵活\",{\"1\":{\"508\":1,\"626\":1}}],[\"更换依赖版本\",{\"1\":{\"817\":1}}],[\"更换redis版本\",{\"1\":{\"817\":1}}],[\"更换地图类型\",{\"1\":{\"439\":1}}],[\"更换为\",{\"1\":{\"301\":1}}],[\"更换加载容器\",{\"1\":{\"301\":1}}],[\"更多的是当作参数传递\",{\"1\":{\"167\":1}}],[\"更好地控制资源\",{\"1\":{\"114\":1}}],[\"更新锁的过期时间\",{\"1\":{\"782\":1}}],[\"更新数据库\",{\"1\":{\"751\":1}}],[\"更新数据库时候让缓存生效\",{\"1\":{\"750\":1}}],[\"更新商铺信息\",{\"1\":{\"751\":1}}],[\"更新文档post\",{\"1\":{\"682\":1}}],[\"更新其他关联\",{\"1\":{\"672\":1}}],[\"更新队伍队长失败\",{\"1\":{\"562\":1}}],[\"更新队伍的队长\",{\"1\":{\"562\":1}}],[\"更新订单状态\",{\"1\":{\"355\":1}}],[\"更新\",{\"1\":{\"208\":1,\"686\":1,\"750\":1}}],[\"更新id为1\",{\"1\":{\"205\":1}}],[\"更新用户名为jack的用户的余额为2000\",{\"1\":{\"204\":1}}],[\"更新操作将失败\",{\"1\":{\"110\":1}}],[\"更新元素数量和结构\",{\"1\":{\"69\":1}}],[\"更新哈希表的\",{\"1\":{\"67\":1}}],[\"更新时间\",{\"1\":{\"9\":2,\"22\":1,\"23\":1,\"25\":1,\"509\":1,\"557\":4,\"596\":2,\"764\":3,\"801\":2}}],[\"降低缓存失效的概率\",{\"1\":{\"701\":1}}],[\"降低了cpu的消耗\",{\"1\":{\"465\":1}}],[\"降低数据排序的成本\",{\"1\":{\"465\":1}}],[\"降低数据库的o成本\",{\"1\":{\"465\":1}}],[\"降低线程创建销毁的开销\",{\"1\":{\"114\":1}}],[\"降级为读锁\",{\"1\":{\"111\":1}}],[\"降级处理返回数据\",{\"1\":{\"27\":1}}],[\"降级\",{\"1\":{\"27\":3,\"657\":1}}],[\"稳定性以及资源的利用率\",{\"1\":{\"114\":1}}],[\"除了该系统\",{\"1\":{\"510\":1}}],[\"除了获取public修饰的内容还可以获取private修改的内容\",{\"1\":{\"304\":1}}],[\"除了自定义的异常处理器\",{\"1\":{\"229\":1,\"230\":1}}],[\"除了阻塞方法外\",{\"1\":{\"112\":1}}],[\"除了指定参与同步的线程数量外\",{\"1\":{\"108\":1}}],[\"元素只有在其指定的延迟时间过后才能出队\",{\"1\":{\"112\":1}}],[\"元素按照优先级顺序出队\",{\"1\":{\"112\":1}}],[\"无数的请求访问会在瞬间给数据库带来巨大的冲击\",{\"1\":{\"754\":1}}],[\"无数据\",{\"1\":{\"220\":2}}],[\"无效写比较多\",{\"1\":{\"750\":1}}],[\"无论是否存在\",{\"1\":{\"738\":1}}],[\"无标签或者是自己\",{\"1\":{\"566\":1,\"575\":1}}],[\"无法避免消息丢失\",{\"1\":{\"792\":1,\"793\":1}}],[\"无法保证原子性\",{\"1\":{\"776\":1}}],[\"无法进行修改\",{\"1\":{\"612\":1}}],[\"无法访问\",{\"1\":{\"317\":1}}],[\"无法执行\",{\"1\":{\"156\":1}}],[\"无参构造方法\",{\"0\":{\"274\":1}}],[\"无需手动ack\",{\"1\":{\"795\":1}}],[\"无需创建监听器\",{\"1\":{\"526\":1}}],[\"无需解析\",{\"1\":{\"245\":1}}],[\"无需程序员显式操作\",{\"1\":{\"152\":1}}],[\"无视权限修饰符\",{\"1\":{\"168\":1}}],[\"无异常处理\",{\"1\":{\"143\":3}}],[\"无\",{\"1\":{\"143\":2,\"751\":1}}],[\"无返回值\",{\"1\":{\"143\":1}}],[\"无锁操作是使用\",{\"1\":{\"131\":1}}],[\"无界阻塞队列\",{\"1\":{\"112\":1}}],[\"无权限\",{\"1\":{\"17\":1}}],[\"常量表\",{\"1\":{\"486\":1}}],[\"常用于好友或关注\",{\"1\":{\"808\":1}}],[\"常用的java模板引擎还有哪些\",{\"1\":{\"415\":1}}],[\"常用来存储一个有序数据\",{\"1\":{\"387\":1}}],[\"常用命令\",{\"0\":{\"384\":1,\"386\":1,\"388\":1,\"390\":1,\"392\":1}}],[\"常用配置\",{\"0\":{\"201\":1}}],[\"常见的命令有\",{\"1\":{\"815\":1}}],[\"常见的分布式锁有三种\",{\"1\":{\"775\":1}}],[\"常见的实现方式包括数据库中的行级锁或表级锁\",{\"1\":{\"767\":1}}],[\"常见的解决方案有两种\",{\"1\":{\"752\":1,\"754\":1}}],[\"常见的值有\",{\"1\":{\"486\":1}}],[\"常见的方式为\",{\"1\":{\"382\":1}}],[\"常见的mq消息队列对比\",{\"1\":{\"327\":1}}],[\"常见注解\",{\"0\":{\"197\":1}}],[\"常见线程池\",{\"1\":{\"115\":1,\"713\":1}}],[\"常见实现\",{\"1\":{\"112\":1}}],[\"常被用于数据库和文件系统中作为索引结构\",{\"1\":{\"47\":1}}],[\"生产环境\",{\"1\":{\"635\":1}}],[\"生产者向对应channel发送消息后\",{\"1\":{\"793\":1}}],[\"生产者会收到一个确认消息\",{\"1\":{\"359\":1}}],[\"生产者的所有请求都会被阻塞\",{\"1\":{\"347\":1}}],[\"生产者确认机制是指生产者发送消息后\",{\"1\":{\"359\":1}}],[\"生产者确认机制\",{\"0\":{\"343\":1},\"1\":{\"359\":1}}],[\"生产者重试机制\",{\"0\":{\"342\":1}}],[\"生产者发送消息到达mq的exchange后\",{\"1\":{\"341\":1}}],[\"生产者发送消息到达mq后未找到exchange\",{\"1\":{\"341\":1}}],[\"生产者发送消息时连接mq失败\",{\"1\":{\"341\":1}}],[\"生产者\",{\"1\":{\"336\":1,\"791\":1}}],[\"生产者线程试图往队列中添加元素时会被阻塞\",{\"1\":{\"112\":1}}],[\"生日\",{\"1\":{\"416\":1}}],[\"生成新文件名\",{\"1\":{\"801\":1}}],[\"生成用户token完毕\",{\"1\":{\"788\":1}}],[\"生成1000个登录用户并生成token\",{\"1\":{\"788\":1}}],[\"生成订单\",{\"1\":{\"765\":1,\"770\":2,\"789\":1,\"790\":2,\"796\":3}}],[\"生成token\",{\"1\":{\"741\":1,\"788\":1}}],[\"生成一个token给\",{\"1\":{\"741\":1}}],[\"生成验证码\",{\"1\":{\"738\":1,\"741\":1}}],[\"生成的代码如下\",{\"1\":{\"598\":1}}],[\"生成equals和hashcode方法时\",{\"1\":{\"220\":1}}],[\"生成代码\",{\"1\":{\"213\":1}}],[\"生成最终的哈希码\",{\"1\":{\"66\":1}}],[\"生效时间\",{\"1\":{\"764\":1}}],[\"生效时\",{\"1\":{\"198\":1}}],[\"消费组名称\",{\"1\":{\"795\":1}}],[\"消费者名称\",{\"1\":{\"795\":1}}],[\"消费者组\",{\"0\":{\"795\":1},\"1\":{\"795\":1}}],[\"消费者可以订阅一个或多个channel\",{\"1\":{\"793\":1}}],[\"消费者可靠性是指确保消费者能够成功消费消息\",{\"1\":{\"348\":1}}],[\"消费者可靠性\",{\"0\":{\"348\":1}}],[\"消费者\",{\"1\":{\"791\":1}}],[\"消费者使用basic\",{\"1\":{\"361\":1}}],[\"消费者在处理消息过程中发生异常\",{\"1\":{\"360\":1}}],[\"消费者在失败后消息没有重新回到mq无限重新投递\",{\"1\":{\"350\":1}}],[\"消费者未接收到消息\",{\"1\":{\"359\":1}}],[\"消费者确认机制\",{\"0\":{\"349\":1}}],[\"消费者要消费消息时才会从磁盘中读取并加载到内存\",{\"1\":{\"347\":1,\"362\":1}}],[\"消费者处理消息后可以向mq发送ack回执\",{\"1\":{\"359\":1}}],[\"消费者处理消息时\",{\"1\":{\"341\":1}}],[\"消费者处理业务发生阻塞\",{\"1\":{\"347\":1}}],[\"消费者宕机或出现网络故障\",{\"1\":{\"347\":1}}],[\"消费者1接收到topic\",{\"1\":{\"337\":1,\"338\":1}}],[\"消费者1接收到direct\",{\"1\":{\"336\":1,\"338\":1}}],[\"消费者1接收到fanout消息\",{\"1\":{\"335\":1}}],[\"消费者1接收到消息\",{\"1\":{\"333\":1}}],[\"消费者接收到object\",{\"1\":{\"339\":1}}],[\"消费者接收到消息后处理自己的业务\",{\"1\":{\"352\":1}}],[\"消费者接收到消息\",{\"1\":{\"332\":1}}],[\"消费者接收代码\",{\"1\":{\"336\":1}}],[\"消费者接收消息\",{\"1\":{\"335\":1}}],[\"消费者2接收到topic\",{\"1\":{\"337\":1,\"338\":1}}],[\"消费者2接收到direct\",{\"1\":{\"336\":1,\"338\":1}}],[\"消费者2接收到fanout消息\",{\"1\":{\"335\":1}}],[\"消费者2处理速度较慢\",{\"1\":{\"333\":1}}],[\"消费者2\",{\"1\":{\"333\":1}}],[\"消费者线程试图从队列中获取元素时会被阻塞\",{\"1\":{\"112\":1}}],[\"消耗时间\",{\"1\":{\"696\":1,\"706\":1}}],[\"消极\",{\"1\":{\"508\":1}}],[\"消息可回溯\",{\"1\":{\"794\":1}}],[\"消息可靠性\",{\"1\":{\"327\":1}}],[\"消息堆积有上限\",{\"1\":{\"793\":1}}],[\"消息上限高\",{\"1\":{\"362\":1}}],[\"消息超时未消费就会变成死信\",{\"1\":{\"361\":1}}],[\"消息存活时间\",{\"1\":{\"361\":1}}],[\"消息本身设置了存活时间\",{\"1\":{\"361\":1}}],[\"消息所在的队列设置了存活时间\",{\"1\":{\"361\":1}}],[\"消息在队列中会等待一段指定的时间后才会被投递给消费者\",{\"1\":{\"361\":1}}],[\"消息在队列中存活时间超过\",{\"1\":{\"354\":1}}],[\"消息是一个过期消息\",{\"1\":{\"361\":1}}],[\"消息失败之后如何处理呢\",{\"1\":{\"359\":1}}],[\"消息未达到队列\",{\"1\":{\"359\":1}}],[\"消息未达到交换机\",{\"1\":{\"359\":1}}],[\"消息体\",{\"1\":{\"355\":1}}],[\"消息被拒绝\",{\"1\":{\"354\":1}}],[\"消息重复消费出现场景\",{\"1\":{\"360\":1}}],[\"消息重复传递或者其他原因导致同一个操作被执行多次\",{\"1\":{\"352\":1}}],[\"消息重新入队\",{\"1\":{\"351\":1}}],[\"消息会再次requeue到队列\",{\"1\":{\"350\":1}}],[\"消息会不断requeue\",{\"1\":{\"350\":1}}],[\"消息会立刻从mq删除\",{\"1\":{\"349\":1}}],[\"消息处理失败并拒绝该消息\",{\"1\":{\"349\":1}}],[\"消息处理失败\",{\"1\":{\"349\":1}}],[\"消息确认机制是\",{\"1\":{\"349\":1}}],[\"消息持久化\",{\"1\":{\"346\":1,\"359\":3}}],[\"消息发送量激增\",{\"1\":{\"347\":1}}],[\"消息发送失败\",{\"1\":{\"344\":2}}],[\"消息发送成功\",{\"1\":{\"344\":2}}],[\"消息回调失败\",{\"1\":{\"344\":1}}],[\"消息接收后处理过程中抛出异常\",{\"1\":{\"341\":1}}],[\"消息接收后尚未处理突然宕机\",{\"1\":{\"341\":1}}],[\"消息到达mq\",{\"1\":{\"341\":1}}],[\"消息到达mq后\",{\"1\":{\"341\":1}}],[\"消息从生产者到消费者的每一步都可能导致消息丢失\",{\"1\":{\"341\":1}}],[\"消息转换器\",{\"0\":{\"339\":1}}],[\"消息\",{\"1\":{\"333\":1,\"335\":1,\"336\":1,\"337\":1,\"354\":1,\"505\":1}}],[\"消息延迟\",{\"1\":{\"327\":1}}],[\"消息队列中的订单信息\",{\"1\":{\"796\":2}}],[\"消息队列满了\",{\"1\":{\"354\":1}}],[\"消息队列的流程\",{\"1\":{\"341\":1}}],[\"消息队列\",{\"1\":{\"81\":1,\"791\":1}}],[\"表结构\",{\"1\":{\"764\":1}}],[\"表格列名\",{\"1\":{\"616\":1}}],[\"表的拆分\",{\"0\":{\"730\":1}}],[\"表的设计优化\",{\"1\":{\"487\":2}}],[\"表的列名\",{\"1\":{\"181\":2}}],[\"表\",{\"1\":{\"377\":1}}],[\"表现层bean\",{\"1\":{\"245\":1}}],[\"表名\",{\"1\":{\"198\":1}}],[\"表锁的粒度较大\",{\"1\":{\"110\":1}}],[\"表锁是在数据库表级别上加锁\",{\"1\":{\"110\":1}}],[\"表锁\",{\"1\":{\"110\":1}}],[\"表示只返回前10个分组\",{\"1\":{\"685\":1}}],[\"表示只有在值匹配时才移除键值对\",{\"1\":{\"67\":1}}],[\"表示你想要匹配所有文档\",{\"1\":{\"685\":1}}],[\"表示有哪些分支\",{\"1\":{\"493\":1}}],[\"表示从表中检索出的行的百分比\",{\"1\":{\"486\":1}}],[\"表示使用的索引的长度\",{\"1\":{\"486\":1}}],[\"表示mysql预计扫描的行数\",{\"1\":{\"486\":1}}],[\"表示mysql实际选择用于查询的索引\",{\"1\":{\"486\":1}}],[\"表示mysql在表中找到所需行的方式\",{\"1\":{\"486\":1}}],[\"表示查询使用的分区\",{\"1\":{\"486\":1}}],[\"表示每个查询中的查询类型\",{\"1\":{\"486\":1}}],[\"表示每执行一次写命令\",{\"1\":{\"371\":1}}],[\"表示如果name为空显示空字符串\",{\"1\":{\"421\":1}}],[\"表示当900秒\",{\"1\":{\"369\":1}}],[\"表示消息已成功消费\",{\"1\":{\"349\":1}}],[\"表示将本地系统中的\",{\"1\":{\"317\":2}}],[\"表示bean销毁前对应的操作\",{\"1\":{\"278\":1}}],[\"表示bean初始化对应的操作\",{\"1\":{\"278\":1}}],[\"表示rest风格中的删除操作\",{\"1\":{\"262\":2}}],[\"表示rest风格中的添加操作\",{\"1\":{\"262\":1}}],[\"表示这个字段的值和数据库对应\",{\"1\":{\"216\":1}}],[\"表示这个阶段的操作不产生结果\",{\"1\":{\"121\":2,\"717\":2}}],[\"表示别的线程请求这条线程中断\",{\"1\":{\"155\":1}}],[\"表示资源的数量或可用性\",{\"1\":{\"136\":1}}],[\"表示没有线程持有锁\",{\"1\":{\"782\":1}}],[\"表示没有返回值的任务\",{\"1\":{\"117\":1}}],[\"表示没有发生哈希冲突\",{\"1\":{\"69\":1}}],[\"表示一个有返回值的任务\",{\"1\":{\"117\":1}}],[\"表示发生了哈希冲突\",{\"1\":{\"69\":1}}],[\"表示找到了要移除的节点\",{\"1\":{\"67\":1}}],[\"表示找到了相同的键\",{\"1\":{\"66\":1}}],[\"表示在移除节点时不移动其他节点\",{\"1\":{\"67\":1}}],[\"表示要移除的键\",{\"1\":{\"67\":1}}],[\"表示要插入的值\",{\"1\":{\"66\":1}}],[\"表示要插入的键\",{\"1\":{\"66\":1}}],[\"表示\",{\"1\":{\"66\":1}}],[\"表示键的哈希值\",{\"1\":{\"66\":1,\"67\":1}}],[\"表示了哈希表的负载因子\",{\"1\":{\"64\":1}}],[\"表示哈希表的大小\",{\"1\":{\"63\":1}}],[\"悲观锁通常会导致并发性能较差\",{\"1\":{\"767\":1}}],[\"悲观锁的核心思想是在访问共享资源之前\",{\"1\":{\"767\":1}}],[\"悲观锁都会先对数据进行加锁\",{\"1\":{\"145\":1}}],[\"悲观锁是一种并发控制机制\",{\"1\":{\"145\":1}}],[\"悲观锁是一种悲观地认为并发访问是普遍存在的\",{\"1\":{\"110\":1}}],[\"悲观锁常常使用数据库的行锁来实现\",{\"1\":{\"110\":1}}],[\"悲观锁\",{\"0\":{\"767\":1},\"1\":{\"110\":1,\"145\":1,\"360\":1,\"766\":1}}],[\"离开了车位\",{\"1\":{\"109\":1}}],[\"离开了教室\",{\"1\":{\"107\":2}}],[\"释放掉别人的锁\",{\"1\":{\"549\":1}}],[\"释放掉内存\",{\"1\":{\"27\":1}}],[\"释放库存\",{\"1\":{\"353\":1}}],[\"释放资源\",{\"1\":{\"153\":1,\"175\":1,\"184\":1}}],[\"释放锁的业务流程\",{\"1\":{\"780\":1}}],[\"释放锁的时候\",{\"1\":{\"549\":1}}],[\"释放锁\",{\"1\":{\"110\":2,\"755\":1,\"756\":1,\"758\":1,\"776\":1,\"777\":1,\"781\":1}}],[\"释放\",{\"1\":{\"109\":1,\"136\":1}}],[\"释放后\",{\"1\":{\"109\":1}}],[\"释放许可证\",{\"1\":{\"109\":1}}],[\"号球员已经就位\",{\"1\":{\"108\":1}}],[\"设计key的时候可以随机\",{\"1\":{\"741\":1}}],[\"设计\",{\"1\":{\"580\":1}}],[\"设计缓存key\",{\"1\":{\"544\":1}}],[\"设计模式\",{\"2\":{\"494\":1,\"495\":1}}],[\"设定一个同步点\",{\"1\":{\"108\":1}}],[\"设置token\",{\"1\":{\"788\":1}}],[\"设置一个锁的持续时间\",{\"1\":{\"782\":1}}],[\"设置锁的过期时间\",{\"1\":{\"782\":2}}],[\"设置空值\",{\"1\":{\"758\":1}}],[\"设置逻辑过期\",{\"1\":{\"758\":1}}],[\"设置超时时间\",{\"1\":{\"751\":1}}],[\"设置有效期\",{\"1\":{\"741\":1,\"788\":1}}],[\"设置过期时间\",{\"1\":{\"703\":4}}],[\"设置短暂的缓存过期时间\",{\"1\":{\"701\":1}}],[\"设置缓存数据的过期时间时\",{\"1\":{\"700\":1}}],[\"设置分类信息\",{\"1\":{\"673\":1}}],[\"设置分类和分组名字\",{\"1\":{\"673\":1}}],[\"设置分组信息\",{\"1\":{\"673\":1}}],[\"设置数据库类型为mysql\",{\"1\":{\"671\":1}}],[\"设置数据源\",{\"1\":{\"312\":1}}],[\"设置上传到oss文件的前缀\",{\"1\":{\"665\":1}}],[\"设置开机自启\",{\"1\":{\"652\":1}}],[\"设置环境变量\",{\"1\":{\"639\":1}}],[\"设置cookie\",{\"1\":{\"605\":1}}],[\"设置队伍的人数\",{\"1\":{\"556\":1}}],[\"设置long\",{\"1\":{\"485\":1}}],[\"设置图片偏移\",{\"1\":{\"439\":2}}],[\"设置地图类型为地球模式\",{\"1\":{\"439\":1}}],[\"设置地图的倾斜角度\",{\"1\":{\"438\":1}}],[\"设置地图的旋转角度和倾斜角度\",{\"1\":{\"438\":1}}],[\"设置地图旋转角度\",{\"1\":{\"438\":1}}],[\"设置中心点坐标和地图级别\",{\"1\":{\"438\":1}}],[\"设置为0表示立即检查\",{\"1\":{\"416\":1,\"423\":1}}],[\"设置为durable就是持久化模式\",{\"1\":{\"346\":1}}],[\"设置value的序列化\",{\"1\":{\"399\":1}}],[\"设置key和hashkey的序列化方式\",{\"1\":{\"399\":1}}],[\"设置redistemplate的连接工厂\",{\"1\":{\"399\":1}}],[\"设置密码\",{\"1\":{\"395\":1,\"396\":1}}],[\"设置指定key过期时间\",{\"1\":{\"384\":1}}],[\"设置get\",{\"1\":{\"384\":1}}],[\"设置重试次数\",{\"1\":{\"359\":1}}],[\"设置mq的连接超时时间\",{\"1\":{\"342\":1}}],[\"设置两个端口\",{\"1\":{\"317\":1}}],[\"设置spring环境对应的配置类\",{\"1\":{\"313\":1}}],[\"设置springmvc请求地址拦截规则\",{\"1\":{\"224\":1}}],[\"设置类运行器\",{\"1\":{\"313\":1}}],[\"设置模型类的别名扫描\",{\"1\":{\"312\":1}}],[\"设置非单例\",{\"0\":{\"302\":1}}],[\"设置静态资源访问过滤\",{\"1\":{\"263\":1}}],[\"设置当前请求方法为delete\",{\"1\":{\"262\":2}}],[\"设置当前请求方法为post\",{\"1\":{\"262\":1}}],[\"设置当前控制器方法响应内容为当前返回值\",{\"1\":{\"245\":1}}],[\"设置请求\",{\"1\":{\"788\":1}}],[\"设置请求映射路径\",{\"0\":{\"247\":1}}],[\"设置请求超时时间\",{\"1\":{\"27\":1}}],[\"设置由springmvc控制器处理的请求映射路径\",{\"1\":{\"245\":1}}],[\"设置post请求中文乱码过滤器\",{\"1\":{\"224\":1}}],[\"设置注解\",{\"1\":{\"29\":1}}],[\"设置\",{\"1\":{\"27\":1,\"651\":1}}],[\"班长离开了教室\",{\"1\":{\"107\":2}}],[\"班长才可以离开教室\",{\"1\":{\"107\":2}}],[\"6500\",{\"1\":{\"710\":1}}],[\"6537\",{\"1\":{\"696\":1}}],[\"6844903785744056333\",{\"1\":{\"821\":1}}],[\"68\",{\"1\":{\"696\":1}}],[\"6l\",{\"1\":{\"655\":1}}],[\"6s\",{\"1\":{\"539\":1}}],[\"6和swagger不兼容\",{\"1\":{\"522\":1}}],[\"61434438\",{\"1\":{\"496\":1}}],[\"64g\",{\"1\":{\"669\":1}}],[\"647a352e9bbbaa226268580a\",{\"1\":{\"444\":2}}],[\"64\",{\"1\":{\"438\":1}}],[\"64mb\",{\"1\":{\"372\":1}}],[\"6379\",{\"1\":{\"379\":1,\"395\":1,\"396\":2,\"398\":1,\"533\":1,\"652\":2,\"698\":1,\"704\":1,\"781\":1}}],[\"666\",{\"1\":{\"229\":1,\"286\":1}}],[\"6<\",{\"1\":{\"224\":1,\"312\":1}}],[\"6辆汽车\",{\"1\":{\"109\":1}}],[\"6\",{\"0\":{\"843\":1},\"1\":{\"107\":3,\"109\":1,\"347\":1,\"452\":1,\"469\":1,\"523\":1,\"558\":1,\"567\":1,\"639\":4,\"643\":1,\"646\":1,\"688\":1,\"710\":1,\"738\":2,\"741\":1,\"764\":1,\"765\":1,\"770\":2,\"790\":1,\"815\":3,\"817\":2}}],[\"6个同学离开教室后\",{\"1\":{\"107\":2}}],[\"60秒\",{\"1\":{\"355\":1}}],[\"60\",{\"1\":{\"27\":1,\"151\":3,\"539\":1}}],[\"简单的按照内容发布时间排序\",{\"1\":{\"808\":1}}],[\"简单的解决方案就是哪怕这个数据在数据库中也不存在\",{\"1\":{\"752\":1}}],[\"简单服务\",{\"1\":{\"696\":1}}],[\"简单地运算\",{\"1\":{\"567\":1}}],[\"简单查询\",{\"1\":{\"486\":1}}],[\"简单数据类型\",{\"0\":{\"283\":1,\"286\":1}}],[\"简单介绍一下你的图书馆里项目怎么实现的\",{\"1\":{\"47\":1}}],[\"简称\",{\"1\":{\"354\":1}}],[\"简称jmm\",{\"1\":{\"157\":2}}],[\"简称同步器\",{\"1\":{\"135\":1}}],[\"简而言之\",{\"1\":{\"104\":1}}],[\"内连接会对两个表进行优化\",{\"1\":{\"487\":1}}],[\"内建函数c\",{\"1\":{\"422\":1}}],[\"内置函数\",{\"0\":{\"422\":1}}],[\"内至少有1个键被修改\",{\"1\":{\"369\":1}}],[\"内部还是通过converter接口的实现类完成的\",{\"1\":{\"261\":1}}],[\"内容获取效率低\",{\"1\":{\"808\":1}}],[\"内容包含voucherid\",{\"1\":{\"796\":1}}],[\"内容\",{\"1\":{\"184\":2,\"505\":1}}],[\"内层调用\",{\"1\":{\"152\":2}}],[\"内层\",{\"1\":{\"103\":2,\"152\":1}}],[\"内存压力大\",{\"1\":{\"808\":1}}],[\"内存值\",{\"1\":{\"769\":2}}],[\"内存淘汰策略\",{\"1\":{\"749\":1}}],[\"内存的读写性能远高于磁盘\",{\"1\":{\"746\":1}}],[\"内存数据库\",{\"1\":{\"548\":1}}],[\"内存足够\",{\"1\":{\"512\":1}}],[\"内存查询\",{\"1\":{\"512\":1}}],[\"内存\",{\"0\":{\"481\":1}}],[\"内存占用较少\",{\"1\":{\"752\":1}}],[\"内存占用较大\",{\"1\":{\"398\":1}}],[\"内存占用较高\",{\"1\":{\"98\":1}}],[\"内存屏障之后的所有读操作都能获得内存屏障之前的所有写操作的最新结果\",{\"1\":{\"161\":1}}],[\"内存屏障之前的所有写操作都要回写到主内存\",{\"1\":{\"161\":1}}],[\"内存屏障其实就是一种jvm指令\",{\"1\":{\"161\":1}}],[\"内存屏障\",{\"0\":{\"161\":1},\"1\":{\"161\":1}}],[\"内存模型是java应用程序在运行时使用的内存组织方式\",{\"1\":{\"694\":1}}],[\"内存模型\",{\"1\":{\"159\":1}}],[\"内存管理\",{\"1\":{\"47\":1}}],[\"能干嘛\",{\"1\":{\"157\":1}}],[\"能够多次获取同一个锁\",{\"1\":{\"103\":1}}],[\"能减少很多样板代码\",{\"1\":{\"14\":1}}],[\"且实现起来麻烦\",{\"1\":{\"757\":1}}],[\"且实现简单\",{\"1\":{\"757\":1}}],[\"且只能串行执行性能肯定受到影响逻辑过期方案\",{\"1\":{\"757\":1}}],[\"且通\",{\"1\":{\"572\":1}}],[\"且<=20\",{\"1\":{\"558\":2}}],[\"且查询比较频繁的表建立索引\",{\"1\":{\"469\":1}}],[\"且\",{\"1\":{\"159\":1}}],[\"且希望避免饥饿问题\",{\"1\":{\"102\":1}}],[\"且pojo和javabean中\",{\"1\":{\"47\":1}}],[\"新功能\",{\"1\":{\"815\":2}}],[\"新的数据被旧数据覆盖了\",{\"1\":{\"750\":1}}],[\"新的文件名\",{\"1\":{\"239\":1}}],[\"新生代主要存放新创建的对象\",{\"1\":{\"694\":1}}],[\"新版本已经默认可以数据持久化了\",{\"1\":{\"652\":1}}],[\"新加虚拟主机\",{\"1\":{\"330\":1}}],[\"新增博客失败\",{\"1\":{\"809\":1}}],[\"新增秒杀优惠券的同时\",{\"1\":{\"789\":1}}],[\"新增秒杀券的时候保存到redis中\",{\"1\":{\"789\":1}}],[\"新增秒杀券\",{\"1\":{\"764\":1}}],[\"新增商品\",{\"0\":{\"675\":1}}],[\"新增关联关系\",{\"1\":{\"673\":1}}],[\"新增不能指定id\",{\"1\":{\"667\":1}}],[\"新增品牌后端校验\",{\"0\":{\"666\":1}}],[\"新增品牌管理菜单\",{\"1\":{\"664\":1}}],[\"新增队伍\",{\"1\":{\"561\":1}}],[\"新增少\",{\"1\":{\"544\":1}}],[\"新增新的套餐会变得容易\",{\"1\":{\"490\":1}}],[\"新增用户\",{\"1\":{\"208\":1}}],[\"新增\",{\"1\":{\"208\":1,\"262\":1,\"682\":1}}],[\"新任务会被放入队列中等待\",{\"1\":{\"115\":1,\"713\":1}}],[\"新来的线程有可能在等待队列中插队\",{\"1\":{\"102\":1}}],[\"新建实体类\",{\"1\":{\"756\":1}}],[\"新建bucket\",{\"1\":{\"665\":1}}],[\"新建一个第三方模块\",{\"1\":{\"665\":1}}],[\"新建一个application\",{\"1\":{\"636\":1}}],[\"新建一个自己的request\",{\"1\":{\"630\":1}}],[\"新建一个用户模型\",{\"1\":{\"518\":1}}],[\"新建一个项目\",{\"1\":{\"18\":1}}],[\"新建三个文件夹\",{\"1\":{\"373\":1}}],[\"新建\",{\"1\":{\"14\":1,\"81\":1}}],[\"谁先返回用谁\",{\"1\":{\"512\":1}}],[\"谁先抢到锁就由谁获得\",{\"1\":{\"102\":1}}],[\"谁快\",{\"1\":{\"47\":1}}],[\"先执行set\",{\"1\":{\"780\":2}}],[\"先获取锁来阻止其他线程或进程的访问\",{\"1\":{\"767\":1}}],[\"先获取延迟时间的int值\",{\"1\":{\"355\":1}}],[\"先请求redis\",{\"1\":{\"752\":1}}],[\"先修改\",{\"1\":{\"751\":1}}],[\"先修改数据库\",{\"1\":{\"751\":1}}],[\"先操作数据库\",{\"1\":{\"750\":1}}],[\"先始终拥有权限即可\",{\"1\":{\"664\":1}}],[\"先编写product模块的路由规则\",{\"1\":{\"663\":1}}],[\"先找到所有的一级分类\",{\"1\":{\"663\":1}}],[\"先安装node\",{\"1\":{\"655\":1}}],[\"先安装宝塔面板\",{\"1\":{\"641\":1}}],[\"先提前创建一个redis\",{\"1\":{\"652\":1}}],[\"先查一次数据库\",{\"1\":{\"575\":1}}],[\"先查询所有用户\",{\"1\":{\"512\":1}}],[\"先创建监听器\",{\"1\":{\"526\":1}}],[\"先创建一个实体类\",{\"1\":{\"430\":1}}],[\"先用docker启动一次nginx\",{\"1\":{\"426\":1}}],[\"先2\",{\"1\":{\"233\":2}}],[\"先1\",{\"1\":{\"233\":1}}],[\"先看前端有没有传排序字段\",{\"1\":{\"220\":1}}],[\"先行发生于任意后续对这volatile变量的读\",{\"1\":{\"161\":1}}],[\"先发放了凭证后续可以畅通无阻\",{\"1\":{\"156\":1}}],[\"先signal后wait\",{\"1\":{\"156\":1}}],[\"先来后到\",{\"1\":{\"562\":1}}],[\"先来的人吧数据改为自己的表示\",{\"1\":{\"547\":1}}],[\"先来的人先买后来的人在队尾排着\",{\"1\":{\"151\":1}}],[\"先来先得\",{\"1\":{\"151\":1}}],[\"先来先得的原则\",{\"1\":{\"102\":1}}],[\"先加锁可以保证写操作时数据正确\",{\"1\":{\"145\":1}}],[\"先有\",{\"1\":{\"115\":1,\"713\":1}}],[\"先给新接口分配20\",{\"1\":{\"27\":1}}],[\"括号里配置的对象\",{\"1\":{\"101\":1}}],[\"迭代器弱一致性\",{\"1\":{\"98\":1}}],[\"从最后一次签到开始向前统计\",{\"1\":{\"820\":1}}],[\"从消息队列获取消息并处理消息\",{\"1\":{\"791\":1}}],[\"从数据库中获取数据\",{\"1\":{\"755\":1}}],[\"从数据库中获取\",{\"1\":{\"747\":2,\"751\":1,\"752\":1}}],[\"从数据库中查询模拟接口是否存在\",{\"1\":{\"29\":2}}],[\"从缓存中获取数据\",{\"1\":{\"747\":2,\"752\":1,\"755\":1,\"756\":1,\"758\":1}}],[\"从redis删除\",{\"1\":{\"803\":1,\"804\":1}}],[\"从redis中查询数据\",{\"1\":{\"758\":1}}],[\"从redis中获取验证码\",{\"1\":{\"741\":1}}],[\"从redis读数据\",{\"1\":{\"741\":1}}],[\"从rabbitmq的3\",{\"1\":{\"347\":1}}],[\"从搜索结果的第0条记录开始\",{\"1\":{\"710\":1}}],[\"从第二条文档开始返回\",{\"1\":{\"685\":1}}],[\"从当前分类的所有属性中移除这些属性\",{\"1\":{\"674\":1}}],[\"从本机复制文件\",{\"1\":{\"642\":1}}],[\"从请求参数中取出队伍名称等查询条件\",{\"1\":{\"559\":1}}],[\"从cheatacitivity返回\",{\"1\":{\"409\":1}}],[\"从节点做读\",{\"1\":{\"373\":1}}],[\"从头到尾执行一边\",{\"1\":{\"371\":1}}],[\"从磁盘读取快照文件\",{\"1\":{\"368\":1}}],[\"从就是镜像\",{\"1\":{\"363\":1}}],[\"从jdk9以后jdk中的javax\",{\"1\":{\"303\":1}}],[\"从\",{\"1\":{\"263\":1}}],[\"从环境变量中获取访问凭证\",{\"1\":{\"241\":1,\"665\":1}}],[\"从pagequery转到mybatisplus的page对象比较麻烦\",{\"1\":{\"220\":1}}],[\"从一个或多个死锁进程或线程中抢占资源\",{\"1\":{\"153\":1}}],[\"从而确保其他线程有机会获取锁\",{\"1\":{\"782\":1}}],[\"从而避免对于数据库访问压力过大\",{\"1\":{\"755\":1}}],[\"从而避免了潜在的问题\",{\"1\":{\"132\":1}}],[\"从而减少对底层系统的冲击\",{\"1\":{\"700\":1}}],[\"从而影响性能\",{\"1\":{\"699\":1}}],[\"从而可以进行重发或者其他处理\",{\"1\":{\"359\":1}}],[\"从而不用再去主动new\",{\"1\":{\"270\":1}}],[\"从而提高系统的扩展性\",{\"1\":{\"478\":1}}],[\"从而提高数据插入的效率\",{\"1\":{\"211\":1}}],[\"从而提供了一种线程安全的方式来处理布尔值\",{\"1\":{\"155\":1}}],[\"从而实现任务的并行执行\",{\"1\":{\"117\":1}}],[\"从而导致存储系统负载激增\",{\"1\":{\"700\":1}}],[\"从而导致\",{\"1\":{\"115\":2}}],[\"从而保证线程安全\",{\"1\":{\"98\":1}}],[\"从队列中取出元素\",{\"1\":{\"112\":1}}],[\"特殊符号\",{\"0\":{\"183\":1}}],[\"特别是在访问频繁的情况下\",{\"1\":{\"749\":1}}],[\"特别是在并发操作时\",{\"1\":{\"47\":1}}],[\"特别是如果runnable中包含耗时的操作\",{\"1\":{\"143\":1}}],[\"特点\",{\"1\":{\"98\":1,\"155\":1}}],[\"唤醒的线程会尝试重新获取锁\",{\"1\":{\"93\":1}}],[\"轮询耗费cpu\",{\"1\":{\"142\":1}}],[\"轮\",{\"1\":{\"93\":1}}],[\"语法\",{\"0\":{\"417\":1}}],[\"语法是\",{\"1\":{\"47\":1}}],[\"语句和dml\",{\"1\":{\"477\":2}}],[\"语句\",{\"1\":{\"92\":1,\"190\":1,\"477\":3,\"486\":1}}],[\"循环使用\",{\"1\":{\"108\":1}}],[\"循环栅栏cyclicbarrier\",{\"0\":{\"108\":1}}],[\"循环等待条件\",{\"1\":{\"104\":1}}],[\"循环来替换\",{\"1\":{\"92\":1}}],[\"循环遍历\",{\"1\":{\"71\":1}}],[\"你会看到一些变量或标志来表示锁的状态\",{\"1\":{\"782\":1}}],[\"你解释一下mvcc\",{\"1\":{\"476\":2}}],[\"你想让微服务注册上consul就只能重启微服务了\",{\"1\":{\"412\":1}}],[\"你的虚拟机ip\",{\"1\":{\"332\":1}}],[\"你的名字是\",{\"1\":{\"16\":2,\"27\":1}}],[\"你需要手动调用该线程的interrupt\",{\"1\":{\"155\":1}}],[\"你可以通过配置文件中的\",{\"1\":{\"369\":1}}],[\"你可以提供一个处理异常的函数\",{\"1\":{\"143\":1}}],[\"你可以将\",{\"1\":{\"92\":1}}],[\"干活\",{\"1\":{\"92\":1,\"93\":3}}],[\"锁将在过期时间后自动释放\",{\"1\":{\"782\":1}}],[\"锁将按照请求的顺序分配给这些线程\",{\"1\":{\"102\":1}}],[\"锁可以一直保持有效\",{\"1\":{\"782\":1}}],[\"锁不存在\",{\"1\":{\"782\":1}}],[\"锁自动释放时间\",{\"1\":{\"781\":1}}],[\"锁自动释放\",{\"1\":{\"778\":1}}],[\"锁自动过期被删掉\",{\"1\":{\"704\":1}}],[\"锁也会在30s后自动删除\",{\"1\":{\"704\":1}}],[\"锁的拥有者需要周期性地\",{\"1\":{\"782\":1}}],[\"锁的续约\",{\"1\":{\"782\":1}}],[\"锁的续约等等\",{\"1\":{\"782\":1}}],[\"锁的续租\",{\"1\":{\"782\":1}}],[\"锁的状态\",{\"1\":{\"782\":1}}],[\"锁的创建\",{\"1\":{\"782\":1}}],[\"锁的基本接口\",{\"1\":{\"777\":1}}],[\"锁的力度太大了\",{\"1\":{\"770\":1}}],[\"锁的名字要有业务名字区分\",{\"1\":{\"704\":1}}],[\"锁的自动续期\",{\"1\":{\"704\":1}}],[\"锁的公平性\",{\"1\":{\"91\":1}}],[\"锁过期了\",{\"1\":{\"703\":1}}],[\"锁提前过起\",{\"1\":{\"549\":1}}],[\"锁一定要\",{\"1\":{\"549\":1}}],[\"锁\",{\"0\":{\"479\":1},\"1\":{\"476\":1,\"545\":1}}],[\"锁定规则\",{\"1\":{\"159\":1}}],[\"锁定和解锁\",{\"1\":{\"91\":1}}],[\"锁对象的是同一个对象\",{\"1\":{\"152\":1}}],[\"锁降级\",{\"0\":{\"111\":1},\"1\":{\"111\":1}}],[\"锁是\",{\"1\":{\"101\":1}}],[\"锁是当前类的\",{\"1\":{\"101\":1}}],[\"锁是当前实例对象\",{\"1\":{\"101\":1}}],[\"张三\",{\"1\":{\"659\":1}}],[\"张\",{\"1\":{\"91\":1}}],[\"张票\",{\"1\":{\"91\":3,\"151\":1}}],[\"执行lua脚本\",{\"1\":{\"789\":1,\"790\":1,\"796\":1}}],[\"执行业务\",{\"1\":{\"704\":3,\"781\":1}}],[\"执行检索\",{\"1\":{\"687\":1}}],[\"执行命令\",{\"1\":{\"642\":1,\"655\":1}}],[\"执行\",{\"1\":{\"615\":1}}],[\"执行阶段\",{\"1\":{\"463\":1}}],[\"执行写操作\",{\"1\":{\"370\":1}}],[\"执行bgsave\",{\"1\":{\"369\":1}}],[\"执行set\",{\"1\":{\"780\":1}}],[\"执行save命令\",{\"1\":{\"369\":1}}],[\"执行sql语句\",{\"1\":{\"535\":1}}],[\"执行sql\",{\"1\":{\"175\":1,\"463\":1}}],[\"执行时机\",{\"0\":{\"369\":1}}],[\"执行不同的业务操作\",{\"1\":{\"244\":1}}],[\"执行顺序\",{\"1\":{\"233\":1}}],[\"执行完之后可以打印id\",{\"1\":{\"188\":1}}],[\"执行方法\",{\"1\":{\"170\":1,\"184\":1}}],[\"执行被代理的方法\",{\"1\":{\"165\":1}}],[\"执行任务\",{\"1\":{\"123\":1,\"719\":1}}],[\"执行结果的类型是\",{\"1\":{\"117\":1}}],[\"执行同步代码块\",{\"1\":{\"91\":1}}],[\"执行单元\",{\"1\":{\"81\":1}}],[\"块中调用\",{\"1\":{\"91\":1}}],[\"非高清\",{\"1\":{\"824\":1}}],[\"非阻塞\",{\"1\":{\"776\":1}}],[\"非字符串精确匹配\",{\"1\":{\"685\":1}}],[\"非队长\",{\"1\":{\"562\":1}}],[\"非聚簇索引\",{\"1\":{\"466\":1}}],[\"非叶子节点只存储指针\",{\"1\":{\"465\":1}}],[\"非关系型数据库\",{\"1\":{\"377\":6}}],[\"非常不安全\",{\"1\":{\"349\":1}}],[\"非常高\",{\"1\":{\"327\":1}}],[\"非单例prototype\",{\"1\":{\"272\":1}}],[\"非空校验\",{\"1\":{\"220\":2}}],[\"非同步的代码块\",{\"1\":{\"130\":2}}],[\"非抢占条件\",{\"1\":{\"104\":1}}],[\"非公平锁的优点是相对于公平锁\",{\"1\":{\"102\":1}}],[\"非公平锁是一种不保证线程获取锁的顺序的锁\",{\"1\":{\"102\":1}}],[\"非公平锁\",{\"1\":{\"91\":1,\"102\":2,\"151\":1}}],[\"非对称加密\",{\"1\":{\"17\":1}}],[\"来实现了大量数据的表示\",{\"1\":{\"819\":1}}],[\"来的对象\",{\"1\":{\"770\":1}}],[\"来操作事务\",{\"1\":{\"770\":1}}],[\"来操作\",{\"1\":{\"703\":1}}],[\"来调整配置\",{\"1\":{\"634\":1}}],[\"来个头像链接\",{\"1\":{\"598\":1}}],[\"来存储⽤户信息\",{\"1\":{\"571\":1}}],[\"来自于ikun学习java\",{\"1\":{\"455\":1}}],[\"来查询和操作数据\",{\"1\":{\"377\":1}}],[\"来组织数据\",{\"1\":{\"377\":1}}],[\"来手动触发rdb持久化\",{\"1\":{\"369\":1}}],[\"来表示所有不同类型的交换机\",{\"1\":{\"338\":1}}],[\"来指定使用哪儿段配置\",{\"1\":{\"178\":1}}],[\"来指定是否使用公平锁\",{\"1\":{\"91\":1}}],[\"来屏蔽掉各种硬件和操作系统的内存访问差异\",{\"1\":{\"157\":1}}],[\"来重新构建\",{\"1\":{\"63\":1}}],[\"具有ai功能加持的终端工具warp使用总结\",{\"1\":{\"824\":1}}],[\"具有可重入性\",{\"1\":{\"91\":1}}],[\"具备下列特点\",{\"1\":{\"795\":1}}],[\"具体代码实现\",{\"1\":{\"763\":1}}],[\"具体代码以及解释\",{\"1\":{\"742\":1}}],[\"具体实施\",{\"1\":{\"750\":1}}],[\"具体实现\",{\"0\":{\"751\":1},\"1\":{\"27\":2,\"765\":1}}],[\"具体逻辑\",{\"0\":{\"604\":1},\"1\":{\"755\":1}}],[\"具体需要返回多少行可以在`pagereadlistener`的构造函数设置\",{\"1\":{\"525\":1}}],[\"具体拆分策略\",{\"1\":{\"478\":1}}],[\"具体的响应用户发送消息的代码\",{\"1\":{\"453\":1}}],[\"具体的同步器\",{\"1\":{\"136\":1}}],[\"具体可以将applicationcontext更换成classpathxmlapplicationcontext\",{\"1\":{\"278\":1}}],[\"具体可以在官网找到\",{\"1\":{\"175\":1}}],[\"具体操作如下\",{\"1\":{\"270\":1,\"810\":1}}],[\"具体到实际请求编写\",{\"1\":{\"208\":1}}],[\"具体表现为以下\",{\"1\":{\"101\":1}}],[\"具体取决于桶内键值对的数量\",{\"1\":{\"69\":1}}],[\"具体取决于链表长度\",{\"1\":{\"66\":1}}],[\"允许存储地理坐标信息\",{\"1\":{\"815\":1}}],[\"允许存储不同结构的数据\",{\"1\":{\"377\":1}}],[\"允许加入多个队伍\",{\"1\":{\"561\":1}}],[\"允许多个实例\",{\"1\":{\"533\":1}}],[\"允许多个事务同时操作同一表的不同行\",{\"1\":{\"110\":1}}],[\"允许用户传入多个标签\",{\"1\":{\"512\":2}}],[\"允许用户去修改标签\",{\"1\":{\"500\":1}}],[\"允许用户根据标签去搜索其他用户\",{\"1\":{\"500\":1}}],[\"允许用户自定义po到vo的转换方式\",{\"1\":{\"220\":1}}],[\"允许在计算完成之前进行取消操作\",{\"1\":{\"142\":1}}],[\"允许在一定的时间内阻塞等待或者返回特定值\",{\"1\":{\"112\":1}}],[\"允许开发人员实现自定义的同步器\",{\"1\":{\"136\":1}}],[\"允许你指定一个特定的执行器来执行提供的runnable操作\",{\"1\":{\"121\":1,\"717\":1}}],[\"允许你指定一个特定的执行器来执行提供的consumer函数\",{\"1\":{\"121\":1,\"717\":1}}],[\"允许你指定一个特定的执行器来执行提供的函数\",{\"1\":{\"121\":1,\"717\":1}}],[\"允许的创建线程数量为\",{\"1\":{\"115\":1}}],[\"允许的请求队列的长度可能会堆积大量的请求\",{\"1\":{\"115\":1}}],[\"允许新来的线程插队\",{\"1\":{\"102\":1}}],[\"允许其他线程进入临界区执行\",{\"1\":{\"93\":1}}],[\"允许更细粒度的控制\",{\"1\":{\"91\":1}}],[\"允许线程多次获取同一把锁\",{\"1\":{\"91\":1}}],[\"允许对共享资源进行更细粒度的控制\",{\"1\":{\"91\":1}}],[\"允许客户端从不同的源\",{\"1\":{\"27\":1}}],[\"还是从6后一点的5去拿\",{\"1\":{\"809\":1}}],[\"还是\",{\"1\":{\"806\":1,\"807\":1}}],[\"还是会把这个数据写入到redis中\",{\"1\":{\"752\":1}}],[\"还会有关于等待锁的超时时间处理\",{\"1\":{\"782\":1}}],[\"还得利用代理来生效\",{\"1\":{\"770\":1}}],[\"还需要设置分组id和分类路径\",{\"1\":{\"673\":1}}],[\"还需要在链式编程的最后添加一个list\",{\"1\":{\"209\":1}}],[\"还有其他人\",{\"1\":{\"562\":1}}],[\"还提供了许多分布式服务\",{\"1\":{\"781\":1}}],[\"还提供了带有超时参数的方法\",{\"1\":{\"112\":1}}],[\"还提供了与锁关联的\",{\"1\":{\"91\":1}}],[\"还可以使用注解方式来声明\",{\"1\":{\"338\":1}}],[\"还可以更简单\",{\"1\":{\"262\":1}}],[\"还可以在所有线程到达同步点时执行一个指定的runnable\",{\"1\":{\"108\":1}}],[\"还可以校验请求参数\",{\"1\":{\"29\":1}}],[\"还剩\",{\"1\":{\"91\":2}}],[\"卖出了\",{\"1\":{\"151\":1}}],[\"卖出了第\",{\"1\":{\"91\":2}}],[\"卖票案例\",{\"1\":{\"91\":1}}],[\"区分度越高\",{\"1\":{\"469\":1}}],[\"区域的代码\",{\"1\":{\"91\":1}}],[\"区别\",{\"1\":{\"89\":1,\"91\":2}}],[\"直译为投喂\",{\"1\":{\"808\":1}}],[\"直击数据库\",{\"1\":{\"752\":1}}],[\"直至持有线程释放该锁\",{\"1\":{\"152\":1}}],[\"直到遇到第一次未签到为止\",{\"1\":{\"820\":1}}],[\"直到新开的线程完成这个逻辑后\",{\"1\":{\"756\":1}}],[\"直到获取到锁为止\",{\"1\":{\"755\":1}}],[\"直到线程1把锁释放后\",{\"1\":{\"755\":1}}],[\"直到线程执行完毕\",{\"1\":{\"105\":1,\"712\":1}}],[\"直到持久化过程完成\",{\"1\":{\"369\":1}}],[\"直到队列\",{\"1\":{\"362\":1}}],[\"直到队列有空间\",{\"1\":{\"112\":1}}],[\"直到消息处理成功为止\",{\"1\":{\"350\":1}}],[\"直到触发内存预警上限\",{\"1\":{\"347\":1}}],[\"直到显式调用关闭方法为止\",{\"1\":{\"114\":1}}],[\"直到有元素可用\",{\"1\":{\"112\":1}}],[\"直到有许可证可用\",{\"1\":{\"109\":1}}],[\"直到计算完成并返回结果\",{\"1\":{\"105\":1}}],[\"直到资源被释放\",{\"1\":{\"104\":1}}],[\"直到占有资源的线程释放它\",{\"1\":{\"104\":1}}],[\"直到锁被释放\",{\"1\":{\"91\":1,\"767\":1}}],[\"直接向stream\",{\"1\":{\"796\":1}}],[\"直接内存不受jvm堆内存限制\",{\"1\":{\"694\":1}}],[\"直接内存\",{\"1\":{\"694\":1}}],[\"直接复制源代码进行使用\",{\"1\":{\"616\":1}}],[\"直接复制login页面进行修改即可\",{\"1\":{\"612\":1}}],[\"直接取出所有用户\",{\"1\":{\"567\":1}}],[\"直接删除队伍\",{\"1\":{\"562\":1}}],[\"直接引入\",{\"1\":{\"551\":1}}],[\"直接调用使用数据就行\",{\"1\":{\"525\":1}}],[\"直接调用lambdaquery\",{\"1\":{\"209\":1}}],[\"直接加在select前面即可\",{\"1\":{\"486\":1}}],[\"直接走聚集索引查询\",{\"1\":{\"467\":1}}],[\"直接reject\",{\"1\":{\"351\":1}}],[\"直接在用户表补充tags字段\",{\"1\":{\"510\":1}}],[\"直接在接口语句上面写sql即可\",{\"1\":{\"192\":1}}],[\"直接在新建文件里面试就可以了\",{\"1\":{\"44\":1}}],[\"直接使用main线程处理\",{\"1\":{\"143\":1}}],[\"直接获取锁\",{\"1\":{\"102\":1}}],[\"直接jdk17\",{\"1\":{\"76\":1}}],[\"直接请求到其他项目的方法\",{\"1\":{\"28\":1}}],[\"直接返回数据\",{\"1\":{\"467\":1}}],[\"直接返回\",{\"1\":{\"14\":1,\"702\":1,\"756\":2,\"758\":3}}],[\"定时\",{\"1\":{\"544\":1}}],[\"定时更新缓存\",{\"1\":{\"540\":1}}],[\"定时任务来实现缓存\",{\"1\":{\"573\":1}}],[\"定时任务缓存预热\",{\"0\":{\"573\":1}}],[\"定时任务+锁\",{\"1\":{\"551\":1}}],[\"定时任务\",{\"1\":{\"544\":1,\"567\":1}}],[\"定时任务的实现\",{\"1\":{\"544\":1}}],[\"定时任务类\",{\"0\":{\"409\":1}}],[\"定时任务线程池\",{\"1\":{\"115\":1,\"713\":1}}],[\"定时发布\",{\"1\":{\"361\":2}}],[\"定期检查系统状态\",{\"1\":{\"153\":1}}],[\"定期任务等\",{\"1\":{\"89\":1}}],[\"定义滚动返回值实体类\",{\"1\":{\"810\":1}}],[\"定义响应类\",{\"1\":{\"673\":1}}],[\"定义业务异常类\",{\"1\":{\"626\":1}}],[\"定义code枚举类\",{\"0\":{\"625\":1}}],[\"定义confirmcallback\",{\"1\":{\"344\":1}}],[\"定义创建result对象的resultutils\",{\"0\":{\"624\":1}}],[\"定义统一返回结果result\",{\"0\":{\"623\":1}}],[\"定义表格有哪些列\",{\"1\":{\"616\":1}}],[\"定义记录消息延迟时间的消息体\",{\"1\":{\"355\":1}}],[\"定义一个统一结果返回类型\",{\"1\":{\"630\":1}}],[\"定义一个logo的常量\",{\"1\":{\"609\":1}}],[\"定义一个工厂类\",{\"1\":{\"493\":1}}],[\"定义一个操作类\",{\"1\":{\"491\":1}}],[\"定义一个republishmessagerecoverer\",{\"1\":{\"351\":1}}],[\"定义一个枚举类\",{\"1\":{\"216\":1,\"493\":1}}],[\"定义消息转换器\",{\"1\":{\"339\":1,\"352\":1}}],[\"定义bean\",{\"1\":{\"312\":2}}],[\"定义形参即可接收参数\",{\"1\":{\"250\":1}}],[\"定义拦截器类\",{\"1\":{\"232\":1}}],[\"定义控制器\",{\"1\":{\"220\":1}}],[\"定义了整个项目中使用的公共数据\",{\"1\":{\"615\":1}}],[\"定义了四个变量\",{\"1\":{\"71\":1}}],[\"定义了一组抽象的方法\",{\"1\":{\"47\":1}}],[\"定义每列的内容\",{\"1\":{\"14\":1}}],[\"户线程\",{\"1\":{\"89\":1}}],[\"守护线程通常用于执行后台任务\",{\"1\":{\"89\":1}}],[\"守护线程是程序的辅助线程\",{\"1\":{\"89\":1}}],[\"守护线程是一种特殊的线程\",{\"1\":{\"89\":1}}],[\"守护线程\",{\"1\":{\"89\":1}}],[\"守护线程daemon\",{\"0\":{\"89\":1}}],[\"函数式接口\",{\"1\":{\"143\":2}}],[\"函数\",{\"0\":{\"87\":1}}],[\"异或\",{\"1\":{\"819\":1}}],[\"异或运算\",{\"1\":{\"72\":1}}],[\"异步的构建缓存\",{\"1\":{\"756\":1}}],[\"异步加载\",{\"1\":{\"700\":1}}],[\"异步发送\",{\"1\":{\"359\":1}}],[\"异步调用模型\",{\"1\":{\"327\":1}}],[\"异步\",{\"0\":{\"711\":1},\"1\":{\"327\":1}}],[\"异步计算\",{\"1\":{\"105\":1}}],[\"异常类型\",{\"1\":{\"666\":1}}],[\"异常\",{\"1\":{\"143\":2}}],[\"异常处理器类\",{\"0\":{\"229\":1}}],[\"异常处理\",{\"0\":{\"228\":1},\"1\":{\"143\":1}}],[\"异常结果\",{\"1\":{\"83\":1}}],[\"管理的\",{\"1\":{\"742\":1}}],[\"管理页\",{\"1\":{\"615\":1}}],[\"管理员\",{\"1\":{\"596\":1,\"616\":1}}],[\"管理员可以发布接口\",{\"1\":{\"5\":1}}],[\"管理druiddatasource对象\",{\"1\":{\"294\":1}}],[\"管理和销毁线程\",{\"1\":{\"114\":1}}],[\"管道通信\",{\"1\":{\"81\":1}}],[\"信号灯semaphore\",{\"0\":{\"109\":1}}],[\"信号量\",{\"1\":{\"81\":1,\"704\":1}}],[\"信息噪音较多\",{\"1\":{\"808\":1}}],[\"信息全面\",{\"1\":{\"808\":1}}],[\"信息流中不展示已过期的队伍\",{\"1\":{\"559\":1}}],[\"信息\",{\"1\":{\"47\":1,\"670\":1}}],[\"信息脱敏\",{\"1\":{\"27\":1}}],[\"上一次查询的最小时间戳\",{\"1\":{\"810\":1}}],[\"上架商品\",{\"1\":{\"688\":1}}],[\"上架\",{\"1\":{\"670\":1,\"764\":1}}],[\"上架状态\",{\"1\":{\"670\":1}}],[\"上线\",{\"1\":{\"567\":1}}],[\"上了\",{\"1\":{\"317\":1}}],[\"上传成功\",{\"1\":{\"665\":2}}],[\"上传方式\",{\"1\":{\"665\":1}}],[\"上传标签的用户\",{\"1\":{\"509\":1}}],[\"上传html文件\",{\"1\":{\"319\":2}}],[\"上传图片文件\",{\"1\":{\"319\":2}}],[\"上传图片工具类\",{\"1\":{\"241\":1}}],[\"上传\",{\"1\":{\"318\":1}}],[\"上传文件接口\",{\"1\":{\"801\":1}}],[\"上传文件解压\",{\"1\":{\"639\":1}}],[\"上传文件失败\",{\"1\":{\"319\":2}}],[\"上传文件到\",{\"1\":{\"241\":1}}],[\"上传文件\",{\"1\":{\"241\":1,\"733\":1}}],[\"上面配置的是全局\",{\"1\":{\"663\":1}}],[\"上面的代码其实还是有点冗余问题\",{\"1\":{\"492\":1}}],[\"上面的拦截器类存在一些问题\",{\"1\":{\"232\":1}}],[\"上面都是按name注入的\",{\"1\":{\"286\":1}}],[\"上面这个代码有更简单的方式替代\",{\"1\":{\"245\":1}}],[\"上面这种是为了演示demo做的\",{\"1\":{\"241\":1}}],[\"上面需要加enumvalue\",{\"1\":{\"216\":1}}],[\"上等待的一个线程\",{\"1\":{\"93\":1}}],[\"上交替执行\",{\"1\":{\"81\":1}}],[\"上同时执行\",{\"1\":{\"81\":1}}],[\"上海艾融软件\",{\"1\":{\"47\":1}}],[\"与geosearch功能一致\",{\"1\":{\"815\":1}}],[\"与redis交互\",{\"1\":{\"782\":1}}],[\"与优惠券是一对一关系\",{\"1\":{\"764\":1}}],[\"与栈内存类似\",{\"1\":{\"694\":1}}],[\"与堆内存一样\",{\"1\":{\"694\":1}}],[\"与java中的treeset有些类似\",{\"1\":{\"391\":1}}],[\"与镜像队列一样\",{\"1\":{\"363\":1}}],[\"与消息一起投递给消费者\",{\"1\":{\"352\":1}}],[\"与direct类似\",{\"1\":{\"334\":1}}],[\"与minio创建的名词一致\",{\"1\":{\"318\":1,\"733\":2}}],[\"与物理删除不同\",{\"1\":{\"215\":1}}],[\"与\",{\"1\":{\"98\":1,\"108\":1,\"819\":1}}],[\"与同属一个进程的其他线程共享进程所拥有的全部资源\",{\"1\":{\"81\":1}}],[\"与操作\",{\"1\":{\"71\":2}}],[\"旧位置\",{\"1\":{\"73\":1}}],[\"次\",{\"1\":{\"93\":3}}],[\"次幂可以使用位与运算代替取模\",{\"1\":{\"73\":1}}],[\"次数+1\",{\"1\":{\"25\":2}}],[\"次数\",{\"1\":{\"5\":1}}],[\"原\",{\"1\":{\"657\":1}}],[\"原本请求\",{\"1\":{\"611\":1}}],[\"原本在service注入dao\",{\"1\":{\"287\":1}}],[\"原来有问题的代码\",{\"1\":{\"777\":1}}],[\"原来是先一次性把数据全部都查出来\",{\"1\":{\"575\":1}}],[\"原来的hashcode值\",{\"1\":{\"72\":1}}],[\"原理图如下\",{\"1\":{\"782\":1}}],[\"原理\",{\"1\":{\"551\":1}}],[\"原子操作\",{\"1\":{\"549\":1}}],[\"原子性指的是一个操作是不可中断的\",{\"1\":{\"158\":1}}],[\"原子性操作\",{\"1\":{\"155\":1}}],[\"原子性\",{\"1\":{\"134\":1,\"158\":1,\"377\":1,\"472\":1}}],[\"原先代码中存在的问题如下\",{\"1\":{\"267\":1}}],[\"原始方法调用完成后执行的内容\",{\"1\":{\"232\":1}}],[\"原始方法调用后执行的内容\",{\"1\":{\"232\":1}}],[\"原始方法调用前执行的内容\",{\"1\":{\"232\":1}}],[\"原始po类型\",{\"1\":{\"220\":3}}],[\"原则\",{\"1\":{\"157\":1}}],[\"原因在于三级之后的children为空\",{\"1\":{\"670\":1}}],[\"原因是因为接口不在白名单\",{\"1\":{\"457\":1}}],[\"原因是\",{\"1\":{\"303\":1}}],[\"原因\",{\"1\":{\"95\":1,\"344\":1,\"412\":1,\"688\":1,\"750\":1}}],[\"原下标+原数组容量\",{\"1\":{\"71\":1}}],[\"视频\",{\"1\":{\"316\":1}}],[\"视为需要进行扩容操作\",{\"1\":{\"71\":1}}],[\"视图\",{\"0\":{\"483\":1},\"1\":{\"63\":1}}],[\"记录1次pv\",{\"1\":{\"821\":1}}],[\"记录\",{\"1\":{\"682\":1}}],[\"记录他们的关系\",{\"1\":{\"672\":1}}],[\"记录登录态\",{\"1\":{\"605\":1}}],[\"记录用户登录态\",{\"1\":{\"605\":1}}],[\"记录用户的登录态\",{\"1\":{\"604\":1}}],[\"记录用户和标签的关系\",{\"1\":{\"510\":1}}],[\"记录了所有的ddl\",{\"1\":{\"477\":1}}],[\"记录不同事务修改数据的版本\",{\"1\":{\"476\":1}}],[\"记录每一次操作的事务id\",{\"1\":{\"476\":1}}],[\"记录每个写命令的操作\",{\"1\":{\"371\":1}}],[\"记录的是逻辑日志\",{\"1\":{\"475\":1}}],[\"记录的是数据页的物理变化\",{\"1\":{\"475\":1}}],[\"记录的是事务提交时数据页的物理修改\",{\"1\":{\"475\":1}}],[\"记录延迟时间的集合\",{\"1\":{\"355\":1}}],[\"记录日志\",{\"1\":{\"230\":2,\"359\":1}}],[\"记录高位尾数据\",{\"1\":{\"71\":1}}],[\"记录低位尾数据\",{\"1\":{\"71\":1}}],[\"低位尾如果记录的有数据\",{\"1\":{\"71\":1}}],[\"低位尾不为null\",{\"1\":{\"71\":1}}],[\"低位尾\",{\"1\":{\"71\":1}}],[\"低位头\",{\"1\":{\"71\":1}}],[\"低位\",{\"1\":{\"71\":1}}],[\"下单\",{\"1\":{\"789\":1,\"796\":1}}],[\"下单时间\",{\"1\":{\"764\":1}}],[\"下单的用户id\",{\"1\":{\"764\":1}}],[\"下单后修改状态\",{\"1\":{\"340\":1}}],[\"下的属性名称\",{\"1\":{\"710\":1}}],[\"下架\",{\"1\":{\"670\":1,\"764\":1}}],[\"下次查询时\",{\"1\":{\"810\":1}}],[\"下次用户过来访问这个不存在的数据\",{\"1\":{\"752\":1}}],[\"下次访问项目\",{\"1\":{\"691\":1}}],[\"下次有想要的东西\",{\"1\":{\"646\":1}}],[\"下次等待时长\",{\"1\":{\"342\":1,\"350\":1}}],[\"下一步\",{\"1\":{\"598\":1}}],[\"下面这种方式\",{\"1\":{\"776\":1}}],[\"下面这个插件可以自动填充函数\",{\"1\":{\"607\":1}}],[\"下面这个test\",{\"1\":{\"176\":1}}],[\"下面无需改动\",{\"1\":{\"643\":1}}],[\"下面进行消除\",{\"1\":{\"491\":1}}],[\"下面有校验方式\",{\"1\":{\"452\":1}}],[\"下载源码到服务器\",{\"1\":{\"639\":1}}],[\"下载好后\",{\"1\":{\"355\":1}}],[\"下载文件\",{\"1\":{\"319\":2}}],[\"下个节点\",{\"1\":{\"71\":1}}],[\"下标为0\",{\"1\":{\"71\":1}}],[\"下线\",{\"0\":{\"21\":1},\"1\":{\"14\":1,\"21\":1}}],[\"下线接口\",{\"1\":{\"5\":1,\"21\":1}}],[\"赋值给islike字段\",{\"1\":{\"803\":2}}],[\"赋值等\",{\"1\":{\"158\":1}}],[\"赋值\",{\"1\":{\"71\":1}}],[\"像把元素删除完之后的情况\",{\"1\":{\"71\":1}}],[\"像调用本地方法一样调用远程方法\",{\"1\":{\"28\":1}}],[\"等有人查询的时候\",{\"1\":{\"750\":1}}],[\"等到所有任务都完成\",{\"1\":{\"721\":1}}],[\"等先来的人执行方法结束\",{\"1\":{\"547\":1}}],[\"等于原始用户对象中的余额值\",{\"1\":{\"210\":1}}],[\"等于给定的\",{\"1\":{\"210\":1}}],[\"等这些字符在xml中有特殊含义\",{\"1\":{\"183\":1}}],[\"等\",{\"1\":{\"114\":1,\"155\":1,\"158\":1,\"371\":1,\"415\":1,\"486\":2}}],[\"等等\",{\"1\":{\"112\":1}}],[\"等待异步计算完成\",{\"1\":{\"143\":2}}],[\"等待队列\",{\"1\":{\"136\":1}}],[\"等待所有任务完成\",{\"1\":{\"124\":1,\"720\":1}}],[\"等待其他线程到达同步点\",{\"1\":{\"108\":1}}],[\"等待其他线程通过\",{\"1\":{\"93\":1}}],[\"等待线程到达同步点\",{\"1\":{\"108\":1}}],[\"等待这个进程结束\",{\"1\":{\"87\":1}}],[\"等待\",{\"1\":{\"81\":2,\"107\":1}}],[\"等价于oldthr\",{\"1\":{\"71\":1}}],[\"等调用完转发的接口后才会执行\",{\"1\":{\"27\":1}}],[\"老的扩容阈值\",{\"1\":{\"71\":1}}],[\"老接口80\",{\"1\":{\"27\":1}}],[\"讲一讲hashmap的扩容机制\",{\"0\":{\"71\":1}}],[\"时效快\",{\"1\":{\"808\":1}}],[\"时效性会降低\",{\"1\":{\"362\":1}}],[\"时报错\",{\"1\":{\"655\":1}}],[\"时候\",{\"1\":{\"263\":1}}],[\"时指定是否使用公平锁\",{\"1\":{\"91\":1}}],[\"时\",{\"1\":{\"70\":1,\"98\":1,\"184\":2,\"354\":1,\"466\":1,\"694\":1}}],[\"时并且数组长度达到64时\",{\"1\":{\"70\":1}}],[\"时间久了会报错\",{\"1\":{\"698\":1}}],[\"时间后端来格式化\",{\"1\":{\"675\":1}}],[\"时间换空间\",{\"1\":{\"567\":1}}],[\"时间戳\",{\"1\":{\"451\":1,\"452\":2,\"763\":1}}],[\"时间却没有均匀分配\",{\"1\":{\"333\":1}}],[\"时间单位\",{\"1\":{\"115\":1,\"713\":1,\"781\":1}}],[\"时间复杂度是多少\",{\"1\":{\"47\":1}}],[\"时间和当前时间不能超过\",{\"1\":{\"27\":1}}],[\"此方法会跳转到\",{\"1\":{\"612\":1}}],[\"此字段显示与索引列进行比较的列名\",{\"1\":{\"486\":1}}],[\"此做法与css\",{\"1\":{\"439\":1}}],[\"此处使用到了类型转换\",{\"1\":{\"261\":1}}],[\"此处不能添加\",{\"1\":{\"261\":1}}],[\"此顺序循环\",{\"1\":{\"93\":1}}],[\"此外\",{\"1\":{\"69\":1,\"158\":1}}],[\"此时t3时刻来拿第二页\",{\"1\":{\"809\":1}}],[\"此时这个11放到最顶上\",{\"1\":{\"809\":1}}],[\"此时才是加锁成功\",{\"1\":{\"783\":1}}],[\"此时锁信息就已经丢掉了\",{\"1\":{\"783\":1}}],[\"此时主机宕机\",{\"1\":{\"783\":1}}],[\"此时我们去写命令\",{\"1\":{\"783\":1}}],[\"此时线程1反应过来\",{\"1\":{\"778\":1}}],[\"此时线程1去获得互斥锁\",{\"1\":{\"756\":1}}],[\"此时线程2过来\",{\"1\":{\"750\":1}}],[\"此时只要线程1走完这个逻辑\",{\"1\":{\"754\":1}}],[\"此时只需要4s\",{\"1\":{\"211\":1}}],[\"此时会发现\",{\"1\":{\"805\":1}}],[\"此时会发现在分布式情况下\",{\"1\":{\"771\":1}}],[\"此时会访问到数据库\",{\"1\":{\"752\":1}}],[\"此时会报错\",{\"1\":{\"259\":1}}],[\"此时他写入缓存\",{\"1\":{\"750\":1}}],[\"此时不会刷新令牌\",{\"1\":{\"742\":1}}],[\"此时重启elasticsearch\",{\"1\":{\"687\":1}}],[\"此时重新登录\",{\"1\":{\"663\":1}}],[\"此时页面已经存在增删改查功能\",{\"1\":{\"664\":1}}],[\"此时点登录会出现跨域问题\",{\"1\":{\"663\":1}}],[\"此时\",{\"1\":{\"663\":1}}],[\"此时需要在bootstrap文件中配置namespace\",{\"1\":{\"660\":1}}],[\"此时需要去下载java底层源码\",{\"1\":{\"140\":1}}],[\"此时nacos中的配置重新发布即可\",{\"1\":{\"660\":1}}],[\"此时发送请求可以获取到值\",{\"1\":{\"660\":1}}],[\"此时发现nginx进程的启动者是nobody\",{\"1\":{\"639\":1}}],[\"此时发现\",{\"1\":{\"612\":1}}],[\"此时发现端口对应\",{\"1\":{\"317\":1}}],[\"此时调用接口即可\",{\"1\":{\"659\":1}}],[\"此时在8081的端口查看登录信息\",{\"1\":{\"533\":1}}],[\"此时访问gulimall\",{\"1\":{\"691\":1}}],[\"此时访问http\",{\"1\":{\"612\":1}}],[\"此时访问\",{\"1\":{\"451\":1}}],[\"此时rabbitmq会将内存消息刷到磁盘上\",{\"1\":{\"347\":1}}],[\"此时可以达到负载均衡的效果\",{\"1\":{\"771\":1}}],[\"此时可以正常登录\",{\"1\":{\"738\":1}}],[\"此时可以进行分词\",{\"1\":{\"687\":1}}],[\"此时可以进行访问\",{\"1\":{\"318\":1}}],[\"此时可以访问\",{\"1\":{\"661\":1}}],[\"此时可以登录成功\",{\"1\":{\"14\":1}}],[\"此时如果启动会发现访问本地的localhost\",{\"1\":{\"317\":1}}],[\"此时就将新值去替换\",{\"1\":{\"769\":1}}],[\"此时就会把本应该属于线程2的锁进行删除\",{\"1\":{\"778\":1}}],[\"此时就会出现库存的超卖问题\",{\"1\":{\"766\":1}}],[\"此时就会自动释放锁\",{\"1\":{\"703\":1}}],[\"此时就能够从缓存中拿到数据了\",{\"1\":{\"755\":1}}],[\"此时就可以自动填充了\",{\"1\":{\"607\":1}}],[\"此时就可以执行到init方法\",{\"1\":{\"278\":1}}],[\"此时就需要di依赖注入了\",{\"1\":{\"269\":1}}],[\"此时就完成了bookdao这个bean的创建\",{\"1\":{\"269\":1}}],[\"此时的username与前端不对应\",{\"1\":{\"250\":1}}],[\"此时究竞该做什么需要你自己写代码实现\",{\"1\":{\"155\":1}}],[\"此时称系统处于死锁状态或系统产生了死锁\",{\"1\":{\"153\":1}}],[\"此时读写会有问题\",{\"1\":{\"110\":1}}],[\"此时想要获取到堆内存里的数据\",{\"1\":{\"51\":1}}],[\"此时执行\",{\"1\":{\"14\":1}}],[\"即使锁的拥有者在某些情况下无法释放锁\",{\"1\":{\"782\":1}}],[\"即使不手动解锁\",{\"1\":{\"704\":1}}],[\"即使某一层缓存失效\",{\"1\":{\"700\":1}}],[\"即使它们处于空闲状态\",{\"1\":{\"115\":1,\"713\":1}}],[\"即最多返回3条匹配的文档\",{\"1\":{\"685\":1}}],[\"即检索所有数据\",{\"1\":{\"685\":1}}],[\"即content\",{\"1\":{\"665\":1}}],[\"即分布式事务解决方案\",{\"1\":{\"657\":1}}],[\"即将容器中的\",{\"1\":{\"651\":1}}],[\"即key\",{\"1\":{\"382\":1}}],[\"即可\",{\"1\":{\"371\":1}}],[\"即redis的安装目录\",{\"1\":{\"369\":1}}],[\"即为惰性队列\",{\"1\":{\"362\":1}}],[\"即消息投递给消费者后立刻ack\",{\"1\":{\"349\":1}}],[\"即变成\",{\"1\":{\"287\":1}}],[\"即允许优化重排序\",{\"1\":{\"159\":1}}],[\"即在更新数据库记录时\",{\"1\":{\"210\":1}}],[\"即在调用thenrun的线程中执行runnable\",{\"1\":{\"143\":1}}],[\"即在获取锁的过程中\",{\"1\":{\"91\":1}}],[\"即acquire\",{\"1\":{\"136\":1}}],[\"即一种基于模板和要改变的数据\",{\"1\":{\"415\":1}}],[\"即一直引用这个对象\",{\"1\":{\"133\":1}}],[\"即一次只能由一个线程使用\",{\"1\":{\"104\":1}}],[\"即假设每一次执行临界区代码都会产生冲突\",{\"1\":{\"131\":1}}],[\"即比较并交换\",{\"1\":{\"131\":1}}],[\"即锁定表中的某一行数据\",{\"1\":{\"110\":1}}],[\"即当一个线程修改了这个变量的值\",{\"1\":{\"155\":1}}],[\"即当一个事务对表进行操作时\",{\"1\":{\"110\":1}}],[\"即当队列为空时\",{\"1\":{\"112\":1}}],[\"即当所有线程都到达同步点后\",{\"1\":{\"108\":1}}],[\"即迭代器遍历的是创建迭代器时的快照\",{\"1\":{\"98\":1}}],[\"即等待获取锁的时候\",{\"1\":{\"84\":1}}],[\"即java并发编程工具包\",{\"1\":{\"80\":1}}],[\"即\",{\"1\":{\"71\":1,\"102\":1,\"201\":1,\"267\":1,\"349\":1,\"359\":1}}],[\"即多个键的哈希值相同\",{\"1\":{\"69\":1}}],[\"即数组和链表或红黑树\",{\"1\":{\"69\":1}}],[\"也叫页面访问量或点击量\",{\"1\":{\"821\":1}}],[\"也叫独立访客量\",{\"1\":{\"821\":1}}],[\"也叫写后读\",{\"1\":{\"161\":1}}],[\"也被称为消息代理\",{\"1\":{\"791\":1}}],[\"也会在锁的持续时间过期后\",{\"1\":{\"782\":1}}],[\"也会卡死\",{\"1\":{\"156\":1}}],[\"也没其他的事情需要操心\",{\"1\":{\"757\":1}}],[\"也通过挂载让容器内的nginx使用该配置文件\",{\"1\":{\"646\":1}}],[\"也需要删除配置里的关于oneapi的配置\",{\"1\":{\"585\":1}}],[\"也是前端mock数据类似的\",{\"1\":{\"585\":1}}],[\"也就不正常了\",{\"1\":{\"412\":1}}],[\"也就是需要使用jmeter进行压力测试\",{\"1\":{\"788\":1}}],[\"也就是不断重置或续租锁的持续时间\",{\"1\":{\"782\":1}}],[\"也就是字符串类型\",{\"1\":{\"383\":1}}],[\"也就是time\",{\"1\":{\"361\":1}}],[\"也就是懒加载\",{\"1\":{\"347\":1}}],[\"也就是惰性队列\",{\"1\":{\"347\":1}}],[\"也就是controller包下的类\",{\"1\":{\"245\":1}}],[\"也就是最后一次迭代不会加分隔符\",{\"1\":{\"190\":1}}],[\"也就是将核心配置文件的加载映射配置文件的配置修改为\",{\"1\":{\"176\":1}}],[\"也就是说多次重试等待的过程中\",{\"1\":{\"342\":1}}],[\"也就是说要让ioc容器中有一个bookdao对象\",{\"1\":{\"310\":1}}],[\"也就是说要绑定service和dao对象之间的关系\",{\"1\":{\"268\":1}}],[\"也就是说在load屏障指令之后就能够保证后面的读取数据指令一定能够读取到最新的数据\",{\"1\":{\"161\":1}}],[\"也就是说当看到store屏障指令\",{\"1\":{\"161\":1}}],[\"也就是理解happens\",{\"1\":{\"159\":1}}],[\"也就是happens\",{\"1\":{\"159\":1}}],[\"也就是调用这些方法后线程会进入timed\",{\"1\":{\"84\":1}}],[\"也就是哈希表中的键值对集合\",{\"1\":{\"63\":1}}],[\"也可也写在setter方法上\",{\"1\":{\"304\":1}}],[\"也可以配置自动触发\",{\"1\":{\"372\":1}}],[\"也可以在业务中基于id判断是否是重复消息\",{\"1\":{\"339\":1,\"352\":1}}],[\"也可以在自己的线程中调用\",{\"1\":{\"155\":1}}],[\"也可以读取jdbc\",{\"1\":{\"310\":1}}],[\"也可以用这个\",{\"1\":{\"278\":1}}],[\"也可以帮助我们实现crud功能\",{\"1\":{\"214\":1}}],[\"也可以接受一个\",{\"1\":{\"105\":1}}],[\"也可以使用kafka\",{\"1\":{\"791\":1}}],[\"也可以使用\",{\"1\":{\"91\":1}}],[\"也称为\",{\"1\":{\"782\":1}}],[\"也称为桶或存储槽\",{\"1\":{\"69\":1}}],[\"也称之为双写方案\",{\"1\":{\"750\":1}}],[\"也称内存栅栏\",{\"1\":{\"161\":1}}],[\"也提供了一定的有序性保证\",{\"1\":{\"158\":1}}],[\"也提供了转换和组合completablefuture的方法\",{\"1\":{\"143\":1}}],[\"也即中断标识协商机制\",{\"1\":{\"155\":1}}],[\"也有可能代表一个完成阶段\",{\"1\":{\"143\":1}}],[\"确定固定排位\",{\"1\":{\"567\":1}}],[\"确定表头\",{\"1\":{\"524\":1}}],[\"确定未支付\",{\"1\":{\"355\":1}}],[\"确定新的存储位置等\",{\"1\":{\"71\":1}}],[\"确定键值对在哈希表中的存储位置\",{\"1\":{\"69\":1}}],[\"确保多条命令执行时的原子性\",{\"1\":{\"780\":1}}],[\"确保多个线程之间正确地共享资源\",{\"1\":{\"130\":1}}],[\"确保只能有一个线程获取锁\",{\"1\":{\"776\":1}}],[\"确保只有经过授权的用户可以访问特定资源\",{\"1\":{\"27\":1}}],[\"确保事务不会出现问题\",{\"1\":{\"770\":1}}],[\"确保即使发生缓存失效\",{\"1\":{\"700\":1}}],[\"确保数据的一致性和完整性\",{\"1\":{\"377\":1}}],[\"确保数组已使用长度\",{\"1\":{\"56\":1}}],[\"确保生产者的消息能到达队列\",{\"1\":{\"359\":1}}],[\"确保生产者一定把消息发送到mq\",{\"1\":{\"341\":1}}],[\"确保业务操作的幂等性是非常重要的\",{\"1\":{\"352\":1}}],[\"确保消息未消费前在队列中不会丢失\",{\"1\":{\"359\":1}}],[\"确保消息可靠性的核心机制\",{\"1\":{\"349\":1}}],[\"确保消费者一定要处理消息\",{\"1\":{\"341\":1}}],[\"确保mq不会将消息弄丢\",{\"1\":{\"341\":1}}],[\"确保main线程结束前能给daemonthread能够分到时间片\",{\"1\":{\"89\":1}}],[\"确保了对flag的修改对所有线程可见\",{\"1\":{\"132\":1}}],[\"确保在更新时数据没有被其他线程修改\",{\"1\":{\"110\":1}}],[\"确保在合适的时机释放锁\",{\"1\":{\"91\":1}}],[\"确保在锁定和解锁的过程中不会出现死锁等问题\",{\"1\":{\"91\":1}}],[\"确保共享资源的安全访问\",{\"1\":{\"91\":1}}],[\"确保新版本的服务在就绪后才会接收到流量\",{\"1\":{\"27\":1}}],[\"哈希\",{\"0\":{\"385\":1}}],[\"哈希值是一个整数\",{\"1\":{\"69\":1}}],[\"哈希表会进行扩容\",{\"1\":{\"63\":1}}],[\"哈希表可以根据其他序列化的信息\",{\"1\":{\"63\":1}}],[\"哈希表的内部状态不需要被序列化\",{\"1\":{\"63\":1}}],[\"计数\",{\"1\":{\"208\":1}}],[\"计数器为零代表锁已被释了\",{\"1\":{\"152\":1}}],[\"计算总的签到次数\",{\"1\":{\"820\":1}}],[\"计算分页参数\",{\"1\":{\"817\":1}}],[\"计算北京西站到北京站到距离\",{\"1\":{\"815\":1}}],[\"计算指定的两个点之间的距离并返回\",{\"1\":{\"815\":1}}],[\"计算每个属性\",{\"1\":{\"710\":1}}],[\"计算相关性得分\",{\"1\":{\"685\":1}}],[\"计算距离并加入优先队列\",{\"1\":{\"575\":1}}],[\"计算结果\",{\"1\":{\"143\":1}}],[\"计算索引时效率更高\",{\"1\":{\"73\":1}}],[\"计算新数组的索引位置\",{\"1\":{\"71\":1}}],[\"计算得出结果不为0\",{\"1\":{\"71\":1}}],[\"计算得出结果为0\",{\"1\":{\"71\":1}}],[\"计算出来的阈值赋值\",{\"1\":{\"71\":1}}],[\"计算存储位置\",{\"1\":{\"69\":1}}],[\"计算键的哈希值\",{\"1\":{\"69\":1}}],[\"计费\",{\"1\":{\"5\":1}}],[\"底层的实现是一个跳表\",{\"1\":{\"391\":1}}],[\"底层是c++实现的\",{\"1\":{\"140\":1}}],[\"底层是将数据存储在elementdata这个数组中的\",{\"1\":{\"53\":1}}],[\"底层使用hash表数据结构\",{\"1\":{\"69\":1}}],[\"说一下hashmap的实现原理\",{\"0\":{\"69\":1}}],[\"说明是重复下单\",{\"1\":{\"789\":1,\"796\":1}}],[\"说明是当前线程的锁\",{\"1\":{\"778\":1}}],[\"说明他可以下单\",{\"1\":{\"789\":1}}],[\"说明订单超时未支付\",{\"1\":{\"355\":1}}],[\"说明在查询和更新之间有其他事务修改了用户的余额\",{\"1\":{\"210\":1}}],[\"说明\",{\"1\":{\"9\":1,\"25\":1,\"115\":1,\"168\":1,\"169\":1,\"170\":1,\"557\":2,\"685\":1}}],[\"为用户持续的提供\",{\"1\":{\"808\":1}}],[\"为10s\",{\"1\":{\"776\":1}}],[\"为每个线程分配一个私有的栈\",{\"1\":{\"694\":1}}],[\"为每个资源请求设置超时时间\",{\"1\":{\"153\":1}}],[\"为单个值\",{\"1\":{\"670\":1}}],[\"为容器指定一个名称\",{\"1\":{\"651\":1}}],[\"为解决同⼀⽤户重复加⼊队伍\",{\"1\":{\"574\":1}}],[\"为解决⾸次访问系统的⽤户主⻚加载过慢的问题\",{\"1\":{\"573\":1}}],[\"为新技术\",{\"1\":{\"415\":1}}],[\"为bean设置作用范围\",{\"1\":{\"272\":1}}],[\"为例\",{\"1\":{\"241\":1,\"665\":1}}],[\"为post\",{\"1\":{\"237\":1}}],[\"为false表示未中断\",{\"1\":{\"155\":1}}],[\"为了提高redis的可用性\",{\"1\":{\"783\":1}}],[\"为了提高性能\",{\"1\":{\"127\":1}}],[\"为了解决缓存穿透问题\",{\"1\":{\"699\":1}}],[\"为了解决这个问题\",{\"1\":{\"333\":1,\"347\":1,\"490\":1,\"783\":1}}],[\"为了做实验\",{\"1\":{\"634\":1}}],[\"为了区分不同的阶段\",{\"1\":{\"634\":1}}],[\"为了进行非空校验\",{\"1\":{\"599\":1}}],[\"为了方便\",{\"1\":{\"436\":1}}],[\"为了节省内存空间\",{\"1\":{\"400\":1}}],[\"为了测试方便\",{\"1\":{\"332\":1}}],[\"为了避免缓存击穿\",{\"1\":{\"701\":1}}],[\"为了避免缓存雪崩\",{\"1\":{\"700\":1}}],[\"为了避免写的操作所造成的性能影响可以采用读写分离的架构\",{\"1\":{\"487\":1}}],[\"为了避免出现循环依赖问题\",{\"1\":{\"214\":1}}],[\"为了避免这种情况\",{\"1\":{\"142\":1}}],[\"为了尽可能少的对编译器和处理器做约束从而提高性能\",{\"1\":{\"159\":1}}],[\"为了确保可见性\",{\"1\":{\"158\":1}}],[\"为了确保在使用\",{\"1\":{\"91\":1}}],[\"为了防止虚假唤醒\",{\"1\":{\"92\":1}}],[\"为何hashmap的数组长度一定是2的次幂\",{\"0\":{\"73\":1}}],[\"为\",{\"1\":{\"67\":1,\"415\":1,\"567\":1}}],[\"为什么要使用缓存\",{\"1\":{\"746\":1}}],[\"为什么要使用spring\",{\"0\":{\"267\":1}}],[\"为什么要序列化\",{\"1\":{\"47\":1}}],[\"为什么唤醒两次后阻塞两次\",{\"1\":{\"156\":1}}],[\"为什么可以突破wait\",{\"1\":{\"156\":1}}],[\"为什么b+树的查询是logn\",{\"1\":{\"47\":2}}],[\"为什么需要代理\",{\"1\":{\"165\":1}}],[\"为什么需要\",{\"1\":{\"17\":1,\"634\":1}}],[\"位数字可以是\",{\"1\":{\"738\":1}}],[\"位可能包含对象的不同信息\",{\"1\":{\"66\":1}}],[\"位和低\",{\"1\":{\"66\":1}}],[\"位\",{\"1\":{\"66\":1}}],[\"位置\",{\"1\":{\"14\":1,\"71\":1,\"140\":1}}],[\"^\",{\"1\":{\"66\":3,\"72\":1,\"599\":2,\"605\":1,\"611\":1,\"666\":1,\"667\":1}}],[\"xgroup\",{\"1\":{\"795\":2}}],[\"xreadgroup\",{\"1\":{\"795\":1,\"796\":2}}],[\"xread阻塞方式\",{\"1\":{\"794\":1}}],[\"xread\",{\"1\":{\"794\":2}}],[\"xadd\",{\"1\":{\"794\":1,\"796\":2}}],[\"xiaoymin\",{\"1\":{\"727\":1}}],[\"xiaoymin<\",{\"1\":{\"522\":1,\"727\":1}}],[\"xcontenttype\",{\"1\":{\"687\":1,\"688\":1}}],[\"x版本\",{\"1\":{\"522\":1}}],[\"xx\",{\"1\":{\"457\":2,\"522\":2,\"571\":3,\"663\":2}}],[\"xxx\",{\"1\":{\"17\":1,\"27\":1,\"241\":4,\"457\":1,\"622\":2}}],[\"xlsx\",{\"1\":{\"430\":1,\"431\":1,\"432\":2,\"433\":1,\"525\":1}}],[\"xmx300m\",{\"1\":{\"698\":2}}],[\"xmx512m\",{\"1\":{\"681\":1}}],[\"xms64m\",{\"1\":{\"681\":1}}],[\"xmpp\",{\"1\":{\"327\":2}}],[\"xml格式\",{\"1\":{\"453\":1}}],[\"xml<\",{\"1\":{\"339\":1}}],[\"xmlbeanfactory\",{\"1\":{\"298\":1}}],[\"xmlschema\",{\"1\":{\"269\":1,\"270\":1,\"278\":1,\"295\":1}}],[\"xmlns\",{\"1\":{\"269\":1,\"270\":1,\"278\":1,\"295\":2}}],[\"xmlns=\",{\"1\":{\"269\":1,\"270\":1,\"278\":1,\"295\":1}}],[\"xml添加jackson依赖\",{\"1\":{\"256\":1}}],[\"xml文件中的<if>标签\",{\"1\":{\"209\":1}}],[\"xml文件中\",{\"1\":{\"207\":1}}],[\"xml文件地址\",{\"1\":{\"201\":1,\"215\":1}}],[\"xml\",{\"1\":{\"175\":5,\"176\":1,\"184\":1,\"198\":1,\"201\":6,\"215\":1,\"241\":1,\"245\":1,\"269\":3,\"270\":1,\"278\":2,\"295\":1,\"296\":1,\"298\":1,\"301\":3,\"313\":1,\"453\":3,\"454\":2,\"643\":2,\"646\":1,\"655\":1}}],[\"xstream\",{\"1\":{\"453\":5,\"454\":5,\"455\":5}}],[\"xstream将对象转换为xml字符串\",{\"1\":{\"453\":1,\"454\":1}}],[\"xstreamalias\",{\"1\":{\"453\":9}}],[\"xstream<\",{\"1\":{\"453\":1}}],[\"xstream用来发送xml类型消息\",{\"1\":{\"453\":1}}],[\"xsd\",{\"1\":{\"269\":1,\"270\":1,\"278\":1,\"295\":2}}],[\"xsi\",{\"1\":{\"269\":1,\"270\":1,\"278\":1,\"295\":1}}],[\"xsi=\",{\"1\":{\"269\":1,\"270\":1,\"278\":1,\"295\":1}}],[\"x\",{\"1\":{\"143\":2,\"347\":1,\"442\":1,\"443\":1,\"523\":1,\"643\":1,\"646\":1,\"657\":1,\"665\":5,\"817\":6}}],[\"xor\",{\"1\":{\"66\":1}}],[\"xors\",{\"1\":{\"66\":1}}],[\"检索条件\",{\"1\":{\"687\":1}}],[\"检索数据\",{\"1\":{\"687\":1}}],[\"检索首字母必须是一个字母\",{\"1\":{\"666\":1,\"667\":1}}],[\"检索首字母\",{\"1\":{\"666\":1,\"667\":1}}],[\"检索\",{\"1\":{\"567\":2}}],[\"检索服务\",{\"0\":{\"440\":1,\"710\":1}}],[\"检测nginx性能\",{\"1\":{\"696\":1}}],[\"检测是否存在死锁\",{\"1\":{\"153\":1}}],[\"检测\",{\"1\":{\"153\":1}}],[\"检查锁是否存在\",{\"1\":{\"782\":1}}],[\"检查表和字段是否存在\",{\"1\":{\"463\":1}}],[\"检查模板更新延迟时间\",{\"1\":{\"416\":1,\"423\":1}}],[\"检查给定key是否存在type\",{\"1\":{\"393\":1}}],[\"检查当前线程是否已被中断\",{\"1\":{\"155\":1}}],[\"检查值是否匹配\",{\"1\":{\"67\":1}}],[\"检查是否已经存在哈希表\",{\"1\":{\"66\":1}}],[\"检验接口是否存在\",{\"1\":{\"21\":1}}],[\"处于创建模式\",{\"1\":{\"66\":1}}],[\"处理pendinglist异常\",{\"1\":{\"796\":1}}],[\"处理订单失败\",{\"1\":{\"796\":1}}],[\"处理消息的进程发生异常\",{\"1\":{\"341\":1}}],[\"处理完成才能获取下一个消息\",{\"1\":{\"333\":1}}],[\"处理完任务后\",{\"1\":{\"122\":1,\"718\":1}}],[\"处理器中处理自定义异常\",{\"1\":{\"230\":1}}],[\"处理器在读屏障之后的读操作\",{\"1\":{\"161\":1}}],[\"处理vo\",{\"1\":{\"214\":1}}],[\"处理参数\",{\"1\":{\"184\":1}}],[\"处理该任务\",{\"1\":{\"122\":1,\"718\":1}}],[\"处理异常情况\",{\"1\":{\"120\":1,\"716\":1}}],[\"处理正常和异常的结果\",{\"1\":{\"120\":1,\"716\":1}}],[\"处理任务\",{\"1\":{\"114\":1}}],[\"处理哈希冲突\",{\"1\":{\"69\":1}}],[\"处理\",{\"1\":{\"63\":1}}],[\"处理响应\",{\"1\":{\"27\":1}}],[\"处理请求\",{\"1\":{\"27\":1,\"675\":1}}],[\"处理流程\",{\"1\":{\"27\":1}}],[\"负责对象的创建\",{\"1\":{\"268\":1}}],[\"负责页面请求和数据的收集以及响应结果给前端\",{\"1\":{\"244\":1}}],[\"负责管理工作线程的执行和任务的提交\",{\"1\":{\"117\":1}}],[\"负责创建\",{\"1\":{\"114\":1}}],[\"负责实际的移除操作\",{\"1\":{\"67\":1}}],[\"负责实际的键值对插入和处理\",{\"1\":{\"66\":1}}],[\"负载因子表示哈希表可以填充的程度\",{\"1\":{\"71\":1}}],[\"负载因子表示在何时进行扩容操作\",{\"1\":{\"71\":1}}],[\"负载因子表示在扩容之前哈希表的容量利用率\",{\"1\":{\"64\":1}}],[\"负载因子的作用\",{\"1\":{\"71\":1}}],[\"负载因子是0\",{\"1\":{\"71\":1}}],[\"负载因子是一个在扩容时用于确定新容量的参数\",{\"1\":{\"63\":1}}],[\"负载因子等\",{\"1\":{\"63\":1}}],[\"负载均衡导致消息被多个消费者消费\",{\"1\":{\"360\":1}}],[\"负载均衡\",{\"1\":{\"27\":2,\"657\":1}}],[\"则记录多次pv\",{\"1\":{\"821\":1}}],[\"则点赞按钮高亮显示\",{\"1\":{\"803\":1}}],[\"则值为0\",{\"1\":{\"801\":1}}],[\"则创建锁\",{\"1\":{\"782\":1}}],[\"则删除锁\",{\"1\":{\"780\":1}}],[\"则脚本如下\",{\"1\":{\"780\":2}}],[\"则判断当前这把锁是属于自己的\",{\"1\":{\"778\":1}}],[\"则不进行锁的删除\",{\"1\":{\"778\":1}}],[\"则不会删除锁\",{\"1\":{\"703\":1}}],[\"则不会过期\",{\"1\":{\"551\":1}}],[\"则不会进行\",{\"1\":{\"198\":1}}],[\"则在开启独立线程后直接返回之前的数据\",{\"1\":{\"756\":1}}],[\"则休眠\",{\"1\":{\"755\":1}}],[\"则进行互斥锁的获取\",{\"1\":{\"755\":1}}],[\"则进行拦截\",{\"1\":{\"738\":1}}],[\"则是之前写入的数据\",{\"1\":{\"752\":1}}],[\"则放行\",{\"1\":{\"752\":1}}],[\"则查询数据库\",{\"1\":{\"751\":1}}],[\"则查询所有\",{\"1\":{\"670\":1}}],[\"则为用户创建账号信息\",{\"1\":{\"738\":1}}],[\"则后台根据手机号查询用户\",{\"1\":{\"738\":1}}],[\"则后续的检测取消即可\",{\"1\":{\"355\":1}}],[\"则无法通过校验\",{\"1\":{\"738\":1}}],[\"则要求用户重新输入手机号\",{\"1\":{\"738\":1}}],[\"则表示可以下单\",{\"1\":{\"789\":1}}],[\"则表示获得到了锁\",{\"1\":{\"775\":1}}],[\"则表示未使用索引\",{\"1\":{\"486\":1}}],[\"则表示只有在键的值与\",{\"1\":{\"67\":1}}],[\"则表示只在键不存在时才插入值\",{\"1\":{\"66\":1}}],[\"则该索引会在key字段中显示\",{\"1\":{\"486\":1}}],[\"则该异常会传递到下一个阶段\",{\"1\":{\"143\":1}}],[\"则innodb\",{\"1\":{\"466\":1}}],[\"则接入生效\",{\"1\":{\"452\":1}}],[\"则可以将对象序列化为json字符串后存储\",{\"1\":{\"382\":1}}],[\"则可以使用包扫描的方式简化sql映射文件的加载\",{\"1\":{\"176\":1}}],[\"则会拷贝一份数据\",{\"1\":{\"370\":1}}],[\"则会变为死信\",{\"1\":{\"361\":1}}],[\"则会直接消耗掉这个凭证然后正常退出\",{\"1\":{\"156\":1}}],[\"则允许配置三种确认模式\",{\"1\":{\"359\":1}}],[\"则最终死信就会被投递到这个队列中\",{\"1\":{\"354\":1}}],[\"则我们应该在用户下单后的第30分钟检查订单支付状态\",{\"1\":{\"353\":1}}],[\"则立刻更新订单状态为已支付即可\",{\"1\":{\"352\":1}}],[\"则默认从示例程序所属项目对应本地路径中上传文件流\",{\"1\":{\"665\":1}}],[\"则默认从示例程序所属项目对应本地路径中上传文件\",{\"1\":{\"241\":1}}],[\"则代表中间没有被人修改过\",{\"1\":{\"769\":1}}],[\"则代表拦截\",{\"1\":{\"232\":1}}],[\"则代表放行\",{\"1\":{\"232\":1}}],[\"则将之前说的信息存入到到queue中去\",{\"1\":{\"789\":1}}],[\"则将userid和优惠卷存入到redis中\",{\"1\":{\"789\":1}}],[\"则将新值写入内存位置\",{\"1\":{\"769\":1}}],[\"则将用户信息保存到threadlocal中\",{\"1\":{\"738\":1}}],[\"则将用户status修改为冻结状态\",{\"1\":{\"210\":1}}],[\"则将其设置为已完成\",{\"1\":{\"143\":1}}],[\"则\",{\"1\":{\"159\":1}}],[\"则根据不同的实现方式执行不同的操作\",{\"1\":{\"145\":1}}],[\"则第一个任务使用的是你自己传入的线程池\",{\"1\":{\"143\":1}}],[\"则第二个任务和第一个任务是共用同一个线程池\",{\"1\":{\"143\":1}}],[\"则thread\",{\"1\":{\"132\":1}}],[\"则使用新值来更新内存中的值\",{\"1\":{\"131\":1}}],[\"则直接结束\",{\"1\":{\"789\":1}}],[\"则直接返回redis中的数据\",{\"1\":{\"756\":1}}],[\"则直接返回数据\",{\"1\":{\"752\":1}}],[\"则直接返回\",{\"1\":{\"752\":1,\"780\":1}}],[\"则直接从缓存中返回\",{\"1\":{\"747\":1}}],[\"则直接从缓存中返回结果\",{\"1\":{\"463\":1}}],[\"则直接执行\",{\"1\":{\"117\":1}}],[\"则直接使用\",{\"1\":{\"71\":1}}],[\"则阻塞等待元素可用\",{\"1\":{\"112\":1}}],[\"则阻塞等待空间\",{\"1\":{\"112\":1}}],[\"则需要使用bindingbuilder来创建binding对象\",{\"1\":{\"338\":1}}],[\"则需要遍历链表\",{\"1\":{\"71\":1}}],[\"则需要扩容\",{\"1\":{\"71\":1}}],[\"则退化成链表\",{\"1\":{\"70\":1}}],[\"则新的键值对将被添加到同一桶中\",{\"1\":{\"69\":1}}],[\"则新的值会替代旧值\",{\"1\":{\"66\":1}}],[\"则新值将覆盖旧值\",{\"1\":{\"69\":1}}],[\"则调用红黑树的移除方法进行处理\",{\"1\":{\"67\":1}}],[\"则调用红黑树的插入方法进行处理\",{\"1\":{\"66\":1}}],[\"则尝试进行哈希表的初始化\",{\"1\":{\"66\":1}}],[\"则实现了接口中定义的方法\",{\"1\":{\"47\":1}}],[\"中取出\",{\"1\":{\"630\":1}}],[\"中级\",{\"1\":{\"508\":1}}],[\"中保存原始数据的副本\",{\"1\":{\"476\":1}}],[\"中国农业银行24小时自助银行\",{\"1\":{\"444\":1}}],[\"中国建设银行atm\",{\"1\":{\"444\":1}}],[\"中国建设银行24小时自助银行\",{\"1\":{\"444\":1}}],[\"中国工商银行24小时自助银行服务\",{\"1\":{\"444\":1}}],[\"中国工商银行24小时自助银行\",{\"1\":{\"444\":2}}],[\"中一个特殊的交换机\",{\"1\":{\"354\":1}}],[\"中bookdao的作用是让spring能在ioc容器中找到id为bookdao的bean对象给bookservice进行注入\",{\"1\":{\"270\":1}}],[\"中bookdao的作用是让spring的ioc容器在获取到名称后\",{\"1\":{\"270\":1}}],[\"中间更新的意义不大\",{\"1\":{\"750\":1}}],[\"中间件越多\",{\"1\":{\"696\":1}}],[\"中间件性能测试\",{\"0\":{\"696\":1}}],[\"中间件\",{\"0\":{\"842\":1},\"2\":{\"320\":1,\"321\":1,\"324\":1,\"325\":1,\"356\":1,\"357\":1,\"364\":1,\"365\":1,\"374\":1,\"375\":1,\"401\":1,\"402\":1,\"424\":1,\"425\":1}}],[\"中间\",{\"1\":{\"233\":1}}],[\"中有自定义实现\",{\"1\":{\"201\":1}}],[\"中有自定义方法\",{\"1\":{\"201\":1}}],[\"中调用的时候不用包含包名\",{\"1\":{\"201\":1}}],[\"中使用\",{\"1\":{\"178\":1}}],[\"中提供的一个原子性布尔变量类\",{\"1\":{\"155\":1}}],[\"中断规则\",{\"1\":{\"159\":1}}],[\"中断标识也被清空置为false\",{\"1\":{\"155\":1}}],[\"中断通常与异常一起使用\",{\"1\":{\"155\":1}}],[\"中断是一种协作机制\",{\"1\":{\"155\":1}}],[\"中断线程\",{\"1\":{\"155\":1}}],[\"中断大三api\",{\"1\":{\"155\":1}}],[\"中断的过程完全需要程序员自己实现\",{\"1\":{\"155\":1}}],[\"中断只是一种协作协商机制\",{\"1\":{\"155\":1}}],[\"中的一个\",{\"1\":{\"738\":1}}],[\"中的一个特殊交换机\",{\"1\":{\"361\":1}}],[\"中的数据同步到主内存\",{\"1\":{\"161\":1}}],[\"中的关键字\",{\"1\":{\"155\":1}}],[\"中的\",{\"1\":{\"152\":2,\"159\":1}}],[\"中的线程池\",{\"1\":{\"114\":1}}],[\"中用于控制并发线程数量的工具类\",{\"1\":{\"109\":1}}],[\"中用于同步线程的工具类之一\",{\"1\":{\"108\":1}}],[\"中层调用\",{\"1\":{\"152\":2}}],[\"中层\",{\"1\":{\"103\":1}}],[\"中并发编程中的一种线程安全的容器\",{\"1\":{\"98\":1}}],[\"中时\",{\"1\":{\"69\":1}}],[\"中指定键\",{\"1\":{\"67\":1}}],[\"中\",{\"1\":{\"66\":1,\"69\":1,\"158\":3,\"198\":1,\"663\":1,\"741\":1,\"749\":1,\"782\":1}}],[\"类似文件名\",{\"1\":{\"660\":2}}],[\"类似于mysql的table\",{\"1\":{\"680\":1}}],[\"类似于冒泡\",{\"1\":{\"670\":1}}],[\"类似于乐观锁\",{\"1\":{\"352\":1}}],[\"类似于文件系统的目录\",{\"1\":{\"317\":1}}],[\"类似于synchronized\",{\"1\":{\"91\":1}}],[\"类似mybatis的mapper\",{\"1\":{\"209\":1}}],[\"类加载器\",{\"1\":{\"165\":1}}],[\"类是\",{\"1\":{\"143\":1}}],[\"类的全限定名\",{\"1\":{\"179\":1}}],[\"类的\",{\"1\":{\"66\":1,\"67\":1}}],[\"类型相同的商户作为同一组\",{\"1\":{\"816\":1}}],[\"类型type\",{\"1\":{\"680\":1}}],[\"类型转换\",{\"1\":{\"470\":1}}],[\"类型别名\",{\"0\":{\"179\":1},\"1\":{\"179\":1}}],[\"类型的哈希码\",{\"1\":{\"66\":1}}],[\"类型\",{\"1\":{\"9\":1,\"25\":1,\"66\":1,\"115\":3,\"198\":1,\"382\":1,\"509\":1,\"557\":2,\"596\":1,\"713\":3}}],[\"通配符订阅\",{\"1\":{\"334\":1}}],[\"通用响应\",{\"1\":{\"630\":1}}],[\"通用命令\",{\"0\":{\"393\":1}}],[\"通用唯一识别码\",{\"1\":{\"239\":1}}],[\"通用分页实体\",{\"0\":{\"220\":1}}],[\"通用接口为iservice\",{\"1\":{\"208\":1}}],[\"通知其他线程\",{\"1\":{\"92\":2}}],[\"通知\",{\"1\":{\"92\":1,\"93\":3}}],[\"通知机制\",{\"1\":{\"81\":1}}],[\"通常由硬件提供支持\",{\"1\":{\"769\":1}}],[\"通常用来\",{\"1\":{\"749\":1}}],[\"通常用于独占式同步器\",{\"1\":{\"136\":1}}],[\"通常用于判断操作是否在竞争条件下成功执行\",{\"1\":{\"131\":1}}],[\"通常位于mysql的数据目录下\",{\"1\":{\"485\":1}}],[\"通常更容易水平扩展\",{\"1\":{\"377\":1}}],[\"通常采用垂直扩展\",{\"1\":{\"377\":1}}],[\"通常使用retryattempts和retryinterval参数来配置\",{\"1\":{\"782\":1}}],[\"通常使用sql\",{\"1\":{\"377\":1}}],[\"通常使用按类型装配\",{\"1\":{\"287\":2}}],[\"通常我们采取的措施就是利用定时任务定期查询\",{\"1\":{\"352\":1}}],[\"通常会在\",{\"1\":{\"91\":1}}],[\"通常是根据数据库类型而变化的\",{\"1\":{\"377\":1}}],[\"通常是原子性的\",{\"1\":{\"158\":1}}],[\"通常是原来大小的两倍\",{\"1\":{\"71\":1}}],[\"通常是容量乘以负载因子\",{\"1\":{\"63\":1}}],[\"通过无限下拉刷新获取新的信息\",{\"1\":{\"808\":1}}],[\"通过定期续租锁\",{\"1\":{\"782\":1}}],[\"通过原子比较和更新来确保在多线程环境下数据的一致性\",{\"1\":{\"769\":1}}],[\"通过互斥锁解决缓存击穿解决方案\",{\"1\":{\"755\":1}}],[\"通过一个庞大的二进制数组\",{\"1\":{\"752\":1}}],[\"通过异步任务去加载缓存\",{\"1\":{\"700\":1}}],[\"通过挂载可以让nginx访问这些文件\",{\"1\":{\"646\":1}}],[\"通过测试类进行测试\",{\"1\":{\"575\":1}}],[\"通过最少多少次增删改字符的操作可以变成字符串\",{\"1\":{\"566\":1}}],[\"通过查看执行计划\",{\"1\":{\"485\":1}}],[\"通过roll\",{\"1\":{\"476\":1}}],[\"通过逆操作恢复原来的数据\",{\"1\":{\"475\":1}}],[\"通过二级索引找到对应的主键值\",{\"1\":{\"466\":1}}],[\"通过索引列对数据进行排序\",{\"1\":{\"465\":1}}],[\"通过索引区间返回有序集合指定区间内的成员zincrby\",{\"1\":{\"392\":1}}],[\"通过map\",{\"1\":{\"418\":2}}],[\"通过messagedeliverymode\",{\"1\":{\"359\":1}}],[\"通过websocket每隔5秒向客户端发送消息\",{\"1\":{\"409\":1}}],[\"通过执行bgrewriteaof命令\",{\"1\":{\"372\":1}}],[\"通过publisher\",{\"1\":{\"343\":1}}],[\"通过实例工厂对象创建对象\",{\"1\":{\"276\":1}}],[\"通过实例工厂创建对象如下\",{\"1\":{\"276\":1}}],[\"通过静态工厂创建对象\",{\"1\":{\"275\":1}}],[\"通过工厂创建对象如下\",{\"1\":{\"275\":1}}],[\"通过文件读取\",{\"1\":{\"241\":1}}],[\"通过检查某个数据的版本或状态来判断是否可以执行更新操作\",{\"1\":{\"210\":1}}],[\"通过该属性可以给包中的类注册别名\",{\"1\":{\"201\":1}}],[\"通过default属性切换不同的environment\",{\"1\":{\"175\":1}}],[\"通过类的全路径\",{\"1\":{\"167\":1}}],[\"通过接口保证\",{\"1\":{\"165\":1}}],[\"通过这些内存屏障指令\",{\"1\":{\"161\":1}}],[\"通过这组规范定义了程序中\",{\"1\":{\"157\":1}}],[\"通过指令重排序规则来保证代码的执行顺序符合程序员的预期\",{\"1\":{\"158\":1}}],[\"通过jmm来实现线程和主内存之间的抽象关系\",{\"1\":{\"157\":1}}],[\"通过volatile变量实现\",{\"1\":{\"155\":1}}],[\"通过调用线程对象的interrupt方法将该线程的标识位设为true\",{\"1\":{\"155\":1}}],[\"通过线程池\",{\"1\":{\"114\":1}}],[\"通过使用volatile关键字\",{\"1\":{\"132\":1}}],[\"通过使用\",{\"1\":{\"92\":1}}],[\"通过构造函数传入参数进行设置\",{\"1\":{\"91\":1}}],[\"通过传入\",{\"1\":{\"91\":1}}],[\"通过\",{\"1\":{\"69\":2,\"71\":2,\"91\":1,\"616\":1}}],[\"通过http请求发送到服务器\",{\"1\":{\"47\":1}}],[\"结束\",{\"1\":{\"796\":1}}],[\"结合\",{\"1\":{\"792\":2}}],[\"结合转账的案例来说\",{\"1\":{\"472\":1}}],[\"结果按照skuprice字段降序排列\",{\"1\":{\"710\":1}}],[\"结果\",{\"1\":{\"430\":1,\"532\":1,\"817\":1}}],[\"结果如下\",{\"1\":{\"143\":1,\"339\":1,\"399\":1,\"453\":1,\"575\":2}}],[\"结果合并\",{\"1\":{\"117\":1}}],[\"结构性修改是指那些改变哈希表的键值对数量或修改其内部结构的操作\",{\"1\":{\"63\":1}}],[\"结论\",{\"0\":{\"57\":1},\"1\":{\"142\":1}}],[\"修饰的\",{\"1\":{\"87\":1}}],[\"修饰\",{\"1\":{\"63\":1}}],[\"修改新增探店笔记的业务\",{\"1\":{\"809\":1}}],[\"修改关于博客是否被当前用户点赞\",{\"1\":{\"803\":1}}],[\"修改关联关系\",{\"1\":{\"673\":1}}],[\"修改分页查询blog业务\",{\"1\":{\"803\":1}}],[\"修改分词文件位置\",{\"1\":{\"687\":1}}],[\"修改根据id查询blog的业务\",{\"1\":{\"803\":1}}],[\"修改根据id查询商铺的业务\",{\"1\":{\"756\":1}}],[\"修改点赞功能\",{\"1\":{\"803\":1}}],[\"修改路径为\",{\"1\":{\"801\":1}}],[\"修改likeblogs\",{\"1\":{\"804\":1}}],[\"修改lua脚本\",{\"1\":{\"796\":1}}],[\"修改lombok版本\",{\"1\":{\"663\":1}}],[\"修改之前的秒杀下单lua脚本\",{\"1\":{\"796\":1}}],[\"修改原来的代码\",{\"1\":{\"781\":1}}],[\"修改原本接口的返回结果类型\",{\"1\":{\"630\":1}}],[\"修改业务代码\",{\"1\":{\"777\":1,\"803\":1}}],[\"修改vm参数\",{\"1\":{\"771\":1}}],[\"修改端口为8082\",{\"1\":{\"771\":1}}],[\"修改端口为8081\",{\"1\":{\"533\":1}}],[\"修改商店种类缓存\",{\"1\":{\"747\":1}}],[\"修改发送验证码逻辑\",{\"1\":{\"741\":1}}],[\"修改mapping映射\",{\"1\":{\"710\":1}}],[\"修改后业务\",{\"1\":{\"796\":1}}],[\"修改后删除缓存\",{\"1\":{\"706\":1}}],[\"修改后代码\",{\"1\":{\"110\":1}}],[\"修改获取三级分类菜单\",{\"1\":{\"698\":1}}],[\"修改当前spu的状态\",{\"1\":{\"688\":1}}],[\"修改基本数据\",{\"1\":{\"673\":1}}],[\"修改操作\",{\"1\":{\"673\":1}}],[\"修改规格参数\",{\"1\":{\"673\":1}}],[\"修改回显\",{\"1\":{\"670\":1}}],[\"修改下面几项信息\",{\"1\":{\"655\":1}}],[\"修改命令如下\",{\"1\":{\"640\":1}}],[\"修改命名空间\",{\"1\":{\"176\":1}}],[\"修改nginx配置文件\",{\"1\":{\"639\":1}}],[\"修改admin\",{\"1\":{\"615\":1}}],[\"修改app\",{\"1\":{\"14\":1}}],[\"修改为\",{\"1\":{\"663\":1}}],[\"修改为usermanage\",{\"1\":{\"614\":1}}],[\"修改为自定义异常\",{\"1\":{\"605\":1}}],[\"修改前端的配置向后端网关88端口发送请求\",{\"1\":{\"663\":1}}],[\"修改前端代码和nginx配置\",{\"1\":{\"646\":1}}],[\"修改前端每次刷新自动获取当前用户的逻辑\",{\"1\":{\"613\":1}}],[\"修改前端登录参数\",{\"1\":{\"609\":1}}],[\"修改如下\",{\"1\":{\"612\":1,\"777\":1}}],[\"修改注册\",{\"1\":{\"612\":1}}],[\"修改页脚代码为自己的信息\",{\"1\":{\"609\":1}}],[\"修改队伍信息\",{\"0\":{\"560\":1},\"1\":{\"556\":1}}],[\"修改batchsize为10000时\",{\"1\":{\"539\":1}}],[\"修改用户表\",{\"0\":{\"510\":1}}],[\"修改用户类型\",{\"1\":{\"216\":1}}],[\"修改时间\",{\"1\":{\"509\":1}}],[\"修改shopcontroller中的业务逻辑\",{\"1\":{\"751\":1}}],[\"修改springboot版本\",{\"1\":{\"663\":1}}],[\"修改script里面的ak为自己的ak\",{\"1\":{\"438\":1}}],[\"修改save之后的保存位置\",{\"1\":{\"369\":1}}],[\"修改文件夹名字为conf\",{\"1\":{\"426\":1}}],[\"修改配置generator\",{\"1\":{\"655\":1}}],[\"修改配置\",{\"1\":{\"423\":1,\"533\":1,\"663\":1,\"691\":1,\"697\":1}}],[\"修改配置文件~\",{\"1\":{\"76\":1}}],[\"修改密码\",{\"1\":{\"379\":1}}],[\"修改renrenfast的xml文件\",{\"1\":{\"663\":1}}],[\"修改redis\",{\"1\":{\"369\":1}}],[\"修改rdb文件的保存目录\",{\"1\":{\"373\":1}}],[\"修改记录\",{\"1\":{\"371\":1}}],[\"修改conf文件\",{\"1\":{\"371\":1}}],[\"修改代码生成器数据库信息为自己要生成的数据库\",{\"1\":{\"655\":1}}],[\"修改代码\",{\"1\":{\"340\":1}}],[\"修改测试类\",{\"1\":{\"176\":1}}],[\"修改已记录的值\",{\"1\":{\"169\":1}}],[\"修改状态字段为0\",{\"1\":{\"21\":1}}],[\"修改数据库中的状态字段为1\",{\"1\":{\"21\":1}}],[\"修改\",{\"0\":{\"191\":1},\"1\":{\"14\":2,\"98\":1,\"143\":1,\"192\":1,\"262\":1,\"491\":1,\"667\":1,\"752\":1,\"769\":1,\"771\":1,\"819\":1}}],[\"修改登录逻辑\",{\"1\":{\"14\":1,\"741\":1}}],[\"修改openapi插件配置\",{\"1\":{\"14\":1}}],[\"或不淘汰等\",{\"1\":{\"749\":1}}],[\"或没有合适的唯一索引\",{\"1\":{\"466\":1}}],[\"或水平分区来提高性能\",{\"1\":{\"377\":1}}],[\"或throws了\",{\"1\":{\"230\":1}}],[\"或者进行冲突解决操作\",{\"1\":{\"768\":1}}],[\"或者在键的创建时通过\",{\"1\":{\"749\":1}}],[\"或者在某些情况下可以被中断\",{\"1\":{\"105\":1}}],[\"或者切换使用jedis\",{\"1\":{\"698\":1}}],[\"或者使用\",{\"1\":{\"640\":1,\"749\":1}}],[\"或者根据\",{\"1\":{\"630\":1}}],[\"或者没有符合路由规则的队列\",{\"1\":{\"334\":1}}],[\"或者\",{\"1\":{\"263\":1,\"347\":1,\"352\":1,\"639\":1,\"682\":2}}],[\"或者结合其他机制来处理\",{\"1\":{\"142\":1}}],[\"或者对插入和删除操作频繁的情况\",{\"1\":{\"47\":1}}],[\"或\",{\"1\":{\"63\":1,\"91\":1,\"92\":1,\"93\":1,\"354\":1,\"369\":1,\"710\":2,\"749\":2,\"782\":1,\"819\":1}}],[\"zrevrangebyscore\",{\"1\":{\"810\":1}}],[\"zoneoffset\",{\"1\":{\"763\":2}}],[\"zookeeper也是企业级开发中较好的一个实现分布式锁的方案\",{\"1\":{\"775\":1}}],[\"zookeeper\",{\"1\":{\"702\":1,\"775\":1}}],[\"zookeeper实现\",{\"1\":{\"548\":1}}],[\"z\",{\"1\":{\"666\":1,\"667\":1}}],[\"z1w\",{\"1\":{\"665\":1}}],[\"zip\",{\"1\":{\"639\":1,\"655\":1}}],[\"zxvf\",{\"1\":{\"639\":1}}],[\"z0\",{\"1\":{\"599\":2,\"605\":1}}],[\"za\",{\"1\":{\"599\":2,\"605\":1,\"666\":1,\"667\":1}}],[\"zadd\",{\"1\":{\"392\":1,\"804\":1}}],[\"zsxq\",{\"1\":{\"523\":4}}],[\"zset\",{\"1\":{\"400\":8}}],[\"zsetoperations\",{\"1\":{\"400\":8,\"810\":1}}],[\"zero\",{\"1\":{\"63\":2,\"71\":1,\"140\":1}}],[\"zhangsan\",{\"1\":{\"687\":2}}],[\"zhangwu\",{\"1\":{\"47\":1}}],[\"zhihu\",{\"1\":{\"533\":1}}],[\"zhuanlan\",{\"1\":{\"533\":1}}],[\"zh\",{\"1\":{\"12\":1,\"14\":2,\"29\":1,\"43\":1,\"174\":1,\"240\":1,\"504\":1,\"516\":1,\"523\":2,\"657\":1,\"665\":3}}],[\"公共配置\",{\"1\":{\"635\":1}}],[\"公开\",{\"1\":{\"556\":1,\"557\":2}}],[\"公司\",{\"1\":{\"327\":1}}],[\"公平锁是一种保证线程获取锁的顺序按照线程请求的顺序来的锁\",{\"1\":{\"102\":1}}],[\"公平锁和非公平锁\",{\"0\":{\"102\":1,\"151\":1}}],[\"公平锁按照请求锁的顺序获取锁\",{\"1\":{\"91\":1}}],[\"公平锁按照请求锁的顺序来获取锁\",{\"1\":{\"91\":1}}],[\"公平锁\",{\"1\":{\"91\":1,\"102\":2,\"151\":1}}],[\"公平性\",{\"1\":{\"91\":1}}],[\"公式如下\",{\"1\":{\"63\":1}}],[\"公众号openid\",{\"1\":{\"9\":1}}],[\"默认时间\",{\"1\":{\"706\":1}}],[\"默认加的锁都是30s时间\",{\"1\":{\"704\":1}}],[\"默认使用jdk序列化机制\",{\"1\":{\"706\":1}}],[\"默认使用\",{\"1\":{\"698\":1}}],[\"默认图\",{\"1\":{\"670\":1}}],[\"默认图片\",{\"1\":{\"670\":1}}],[\"默认default\",{\"1\":{\"660\":1}}],[\"默认请求是否带上cookie\",{\"1\":{\"630\":1,\"635\":1}}],[\"默认名称为hostname\",{\"1\":{\"485\":1}}],[\"默认可重复读\",{\"1\":{\"474\":1}}],[\"默认配置中会有一条规则\",{\"1\":{\"369\":1}}],[\"默认两种机制都是关闭状态\",{\"1\":{\"343\":1}}],[\"默认的value值\",{\"1\":{\"706\":1}}],[\"默认的消息转换器是jdk序列化\",{\"1\":{\"339\":1}}],[\"默认的初始容量\",{\"1\":{\"63\":1}}],[\"默认就是这种方式\",{\"1\":{\"351\":1}}],[\"默认就是这个无参构造\",{\"1\":{\"274\":1}}],[\"默认就是非公平锁\",{\"1\":{\"102\":1}}],[\"默认是无加锁的\",{\"1\":{\"706\":1}}],[\"默认是采用jdk序列化\",{\"1\":{\"398\":1}}],[\"默认是no\",{\"1\":{\"371\":1}}],[\"默认是保存在当前运行目录\",{\"1\":{\"368\":1}}],[\"默认是返回jsp页面\",{\"1\":{\"261\":1}}],[\"默认是非公平锁\",{\"1\":{\"91\":1,\"102\":1}}],[\"默认这种格式可以\",{\"1\":{\"259\":1}}],[\"默认为public\",{\"1\":{\"660\":1}}],[\"默认为\",{\"1\":{\"215\":2,\"605\":2}}],[\"默认为8\",{\"1\":{\"70\":1}}],[\"默认实现为serviceimpl\",{\"1\":{\"208\":1}}],[\"默认值为10秒\",{\"1\":{\"485\":1}}],[\"默认值\",{\"1\":{\"198\":1}}],[\"默认\",{\"1\":{\"190\":1}}],[\"默认非公平锁\",{\"1\":{\"151\":1}}],[\"默认情况下mq的数据都是在内存存储的临时数据\",{\"1\":{\"346\":1}}],[\"默认情况下\",{\"1\":{\"71\":1,\"347\":1}}],[\"默认容量为10\",{\"1\":{\"53\":1}}],[\"把每一个bit位对应当月的每一天\",{\"1\":{\"819\":1}}],[\"把店铺分组\",{\"1\":{\"816\":1}}],[\"把text\",{\"1\":{\"730\":1}}],[\"把不常用的字段单独放在一张表\",{\"1\":{\"730\":1}}],[\"把队伍给最早加入的用户\",{\"1\":{\"562\":1}}],[\"把标识清空\",{\"1\":{\"547\":1}}],[\"把json转为java对象\",{\"1\":{\"512\":1}}],[\"把java对象转为json\",{\"1\":{\"512\":1}}],[\"把kotlin目录下的文件放到java目录下\",{\"1\":{\"496\":1}}],[\"把大表放到里边\",{\"1\":{\"487\":1}}],[\"把刚刚报错的ip输入进去\",{\"1\":{\"457\":1}}],[\"把上传到oss的路径返回\",{\"1\":{\"241\":1}}],[\"把上面的both换成either\",{\"1\":{\"123\":1,\"719\":1}}],[\"把对象里面所有的成员变量名和值保存到本地文件中\",{\"1\":{\"171\":1}}],[\"把需要被代理的方法定义在接口中\",{\"1\":{\"165\":1}}],[\"把oldcap老数组容量设置为0\",{\"1\":{\"71\":1}}],[\"把我们传入的这个集合进行了包装而已\",{\"1\":{\"58\":1}}],[\"把公共代码打jar包\",{\"1\":{\"28\":1}}],[\"该模式的实现方案有三种\",{\"1\":{\"808\":2}}],[\"该组件下的路由都会被添加到路由配置中\",{\"1\":{\"615\":1}}],[\"该日志文件由两部分组成\",{\"1\":{\"475\":1}}],[\"该属性值是在拼接sql语句拼接后拼接的语句\",{\"1\":{\"190\":1}}],[\"该属性值是在拼接sql语句之前拼接的语句\",{\"1\":{\"190\":1}}],[\"该方式要求在映射配置文件的sql中使用\",{\"1\":{\"184\":2}}],[\"该方法的返回值就是全局可用的状态值\",{\"1\":{\"615\":1}}],[\"该方法也仅仅是将线程对象的中断标识设成true\",{\"1\":{\"155\":1}}],[\"该方法更适用于处理异步操作\",{\"1\":{\"143\":1}}],[\"该方法不关心runnable的执行是否涉及异步操作\",{\"1\":{\"143\":1}}],[\"该字符串必须是映射配置文件的namespace\",{\"1\":{\"175\":1}}],[\"该标识位为true表示中断\",{\"1\":{\"155\":1}}],[\"该元素的位置要么停留在原始位置\",{\"1\":{\"71\":1}}],[\"该语句只是声明和实例了一个\",{\"1\":{\"58\":1}}],[\"该如何创建\",{\"1\":{\"47\":1}}],[\"扩大队列容积\",{\"1\":{\"362\":2}}],[\"扩容时重新计算索引效率更高\",{\"1\":{\"73\":1}}],[\"扩容之后\",{\"1\":{\"71\":1}}],[\"扩容操作需要重新计算哈希值\",{\"1\":{\"71\":1}}],[\"扩容操作会创建一个新的更大的哈希表\",{\"1\":{\"71\":1}}],[\"扩容操作\",{\"1\":{\"71\":3}}],[\"扩容阈值是没有赋值的\",{\"1\":{\"71\":1}}],[\"扩容阈值=数组容量\",{\"1\":{\"63\":1}}],[\"扩容\",{\"1\":{\"70\":1,\"71\":1}}],[\"扩容的时候\",{\"1\":{\"56\":1}}],[\"扩展性\",{\"1\":{\"377\":1}}],[\"扩展功能\",{\"0\":{\"212\":1}}],[\"扩展\",{\"1\":{\"22\":1}}],[\"代金券标题\",{\"1\":{\"764\":1}}],[\"代替\",{\"1\":{\"571\":1}}],[\"代替原始实例工厂中创建对象的方法\",{\"1\":{\"277\":1}}],[\"代替取模\",{\"1\":{\"72\":1}}],[\"代表地理坐标\",{\"1\":{\"815\":1}}],[\"代表当前方法的结果需要缓存\",{\"1\":{\"706\":1}}],[\"代表投递成功\",{\"1\":{\"343\":1}}],[\"代表所拦截请求的路径规则\",{\"1\":{\"245\":1}}],[\"代表数组中元素类型的大小\",{\"1\":{\"51\":1}}],[\"代码优化\",{\"0\":{\"845\":1}}],[\"代码一起打包为镜像\",{\"1\":{\"642\":1}}],[\"代码评审\",{\"1\":{\"580\":1}}],[\"代码提交\",{\"1\":{\"580\":1}}],[\"代码清晰易于维护\",{\"1\":{\"526\":1}}],[\"代码\",{\"1\":{\"416\":1,\"423\":1,\"491\":1,\"512\":1,\"580\":1,\"710\":1,\"752\":1,\"778\":1,\"780\":1}}],[\"代码配置\",{\"1\":{\"347\":1}}],[\"代码生成器\",{\"0\":{\"213\":1,\"598\":1}}],[\"代码演示\",{\"1\":{\"165\":1}}],[\"代码如下\",{\"1\":{\"56\":1,\"278\":1,\"769\":1}}],[\"代理到\",{\"1\":{\"611\":1}}],[\"代理之后\",{\"1\":{\"611\":1}}],[\"代理\",{\"0\":{\"611\":1}}],[\"代理对象\",{\"1\":{\"165\":1}}],[\"代理对象的调用处理程序\",{\"1\":{\"165\":1}}],[\"代理工具\",{\"1\":{\"165\":1}}],[\"代理里面就是对象要被代理的方法\",{\"1\":{\"165\":1}}],[\"代理长什么样子\",{\"1\":{\"165\":1}}],[\"代理可以无侵入式的对方法进行增强\",{\"1\":{\"165\":1}}],[\"代理相关\",{\"0\":{\"165\":1}}],[\"由系统本身完成\",{\"1\":{\"750\":1}}],[\"由操作系统决定何时将缓冲区内容写回磁盘\",{\"1\":{\"371\":1}}],[\"由spring确认消息处理成功后完成ack\",{\"1\":{\"359\":1}}],[\"由spring监测listener代码是香出现异常\",{\"1\":{\"359\":1}}],[\"由\",{\"1\":{\"152\":1}}],[\"由于保证了互斥性\",{\"1\":{\"757\":1}}],[\"由于线程线程2持有着锁\",{\"1\":{\"756\":1}}],[\"由于线程池对线程的创建和销毁进行了管理\",{\"1\":{\"114\":1}}],[\"由于获取值+对比成功删除=原子操作\",{\"1\":{\"703\":1}}],[\"由于后端返回数据的时候只有一个categoryid\",{\"1\":{\"670\":1}}],[\"由于配置了\",{\"1\":{\"616\":1}}],[\"由于消费者1处理速度较快\",{\"1\":{\"333\":1}}],[\"由于\",{\"1\":{\"155\":1,\"682\":1}}],[\"由于竞争资源或者由于彼此通信而造成的一种阻塞的现象\",{\"1\":{\"153\":1}}],[\"由于写操作会复制整个数组\",{\"1\":{\"98\":1}}],[\"由于写操作需要复制整个数组\",{\"1\":{\"98\":1}}],[\"由第一个添加元素的方法可以看出\",{\"1\":{\"56\":1}}],[\"由java虚拟机的自动垃级回收器来管理\",{\"1\":{\"50\":1}}],[\"关注推送也叫做feed流\",{\"1\":{\"808\":1}}],[\"关注\",{\"1\":{\"806\":2,\"807\":2,\"810\":1}}],[\"关注测试公众号\",{\"1\":{\"453\":1}}],[\"关于文章一共有三张表\",{\"1\":{\"729\":1}}],[\"关于插入的时候产生碰撞使用链表还是红黑树\",{\"1\":{\"66\":1}}],[\"关系型数据库\",{\"1\":{\"377\":6}}],[\"关系的传递性\",{\"1\":{\"159\":1}}],[\"关联的用户id\",{\"1\":{\"806\":1}}],[\"关联的1级评论id\",{\"1\":{\"801\":1}}],[\"关联的优惠券的id\",{\"1\":{\"764\":1}}],[\"关联表\",{\"1\":{\"670\":1}}],[\"关联表的应用场景\",{\"1\":{\"510\":1}}],[\"关联查询属性分类和分组名称\",{\"1\":{\"673\":1}}],[\"关联查询用户信息\",{\"1\":{\"559\":1}}],[\"关联查询已加入队伍的用户信息\",{\"1\":{\"559\":2}}],[\"关联队列和交换机\",{\"1\":{\"351\":1}}],[\"关联\",{\"1\":{\"156\":1}}],[\"关联在\",{\"1\":{\"66\":1}}],[\"关键技术点都是围绕多线程的原子性\",{\"1\":{\"157\":1}}],[\"关键字\",{\"1\":{\"185\":1}}],[\"关键字或者其他同步手段\",{\"1\":{\"158\":1}}],[\"关键字就是一种隐式锁\",{\"1\":{\"152\":1}}],[\"关键字都是可重入锁的实现\",{\"1\":{\"103\":1}}],[\"关键方法\",{\"0\":{\"55\":1,\"65\":1},\"1\":{\"52\":1}}],[\"关闭缓存\",{\"1\":{\"690\":1}}],[\"关闭占用80和8080端口的进程\",{\"1\":{\"643\":1}}],[\"关闭标签\",{\"1\":{\"518\":1}}],[\"关闭模板缓存\",{\"1\":{\"416\":1,\"423\":1}}],[\"关闭连接\",{\"1\":{\"395\":1,\"406\":1}}],[\"关闭ack\",{\"1\":{\"359\":1}}],[\"关闭未支付订单\",{\"1\":{\"355\":1}}],[\"关闭confirm机制\",{\"1\":{\"344\":1}}],[\"关闭ossclient\",{\"1\":{\"241\":1}}],[\"关闭怎么实现\",{\"1\":{\"47\":1}}],[\"关闭\",{\"1\":{\"14\":1,\"22\":1,\"23\":1,\"114\":1}}],[\"关闭1\",{\"1\":{\"9\":1}}],[\"构建的dsl语句\",{\"1\":{\"710\":1}}],[\"构建面包屑导航\",{\"1\":{\"710\":1}}],[\"构建检索请求\",{\"1\":{\"710\":1}}],[\"构建检索dsl语句\",{\"1\":{\"710\":1}}],[\"构建检索条件\",{\"1\":{\"687\":1}}],[\"构建镜像\",{\"1\":{\"643\":1}}],[\"构建语法树\",{\"1\":{\"463\":1}}],[\"构建日志\",{\"1\":{\"27\":1}}],[\"构造保存请求\",{\"1\":{\"688\":1}}],[\"构造器注入\",{\"0\":{\"284\":1}}],[\"构造唯一的文件名\",{\"1\":{\"239\":1}}],[\"构造一个\",{\"1\":{\"108\":2}}],[\"构造方法是方便对象的创建\",{\"1\":{\"226\":2}}],[\"构造方法\",{\"0\":{\"54\":1},\"1\":{\"108\":1}}],[\"构造函数\",{\"0\":{\"64\":1},\"1\":{\"52\":1}}],[\"运\",{\"1\":{\"575\":1}}],[\"运维工具\",{\"1\":{\"485\":1}}],[\"运算相对轻量\",{\"1\":{\"567\":1}}],[\"运算\",{\"0\":{\"420\":1},\"1\":{\"420\":1}}],[\"运算过后判断是不是最大值并且oldcap需要大于16\",{\"1\":{\"71\":1}}],[\"运算符创建的对象和数组\",{\"1\":{\"50\":1}}],[\"运行期间自动给锁续上新的30s\",{\"1\":{\"704\":1}}],[\"运行kibana\",{\"1\":{\"681\":1}}],[\"运行redis容器\",{\"1\":{\"652\":1}}],[\"运行项目\",{\"1\":{\"584\":1}}],[\"运行安装命令\",{\"1\":{\"584\":1}}],[\"运行容器\",{\"1\":{\"323\":1,\"681\":1}}],[\"运行代码\",{\"1\":{\"318\":1}}],[\"运行本代码示例之前\",{\"1\":{\"241\":1,\"665\":1}}],[\"运行\",{\"1\":{\"47\":1,\"114\":1,\"317\":1,\"328\":1}}],[\"运行结果\",{\"1\":{\"19\":1,\"95\":1,\"142\":1,\"333\":1,\"418\":1,\"442\":1,\"443\":1,\"444\":1,\"526\":1,\"663\":1,\"670\":1}}],[\"运行这个服务\",{\"1\":{\"19\":1}}],[\"堆内存被所有线程共享\",{\"1\":{\"694\":1}}],[\"堆内存和方法区\",{\"1\":{\"694\":1}}],[\"堆内存用来存放\",{\"1\":{\"50\":1}}],[\"堆内存\",{\"1\":{\"50\":1,\"694\":1}}],[\"栈内存\",{\"1\":{\"50\":1,\"694\":1}}],[\"要注意的是\",{\"1\":{\"792\":1}}],[\"要解决这个问题\",{\"1\":{\"771\":1}}],[\"要更新的内存位置\",{\"1\":{\"769\":1}}],[\"要扫描的api\",{\"1\":{\"726\":1}}],[\"要加sudo\",{\"1\":{\"655\":1}}],[\"要代理的地址\",{\"1\":{\"611\":1}}],[\"要和数据库中的密码进行对比\",{\"1\":{\"604\":1}}],[\"要预留给其他缓存空间\",{\"1\":{\"544\":1}}],[\"要保证可控\",{\"1\":{\"535\":1}}],[\"要多建一个表\",{\"1\":{\"510\":1}}],[\"要有哪些标签\",{\"1\":{\"500\":1,\"508\":1}}],[\"要根据实际情况选择\",{\"1\":{\"487\":1}}],[\"要么全部失败\",{\"1\":{\"472\":1}}],[\"要么全部成功\",{\"1\":{\"472\":1}}],[\"要么移动到原始位置+增加的数组大小这个位置上\",{\"1\":{\"71\":1}}],[\"要控制索引的数量\",{\"1\":{\"469\":1}}],[\"要想知道点的位置\",{\"1\":{\"439\":1}}],[\"要想在tomcat服务器启动将其加载\",{\"1\":{\"245\":1}}],[\"要进一步提高redis的并发能力\",{\"1\":{\"373\":1}}],[\"要投递的队列消息堆积满了\",{\"1\":{\"361\":1}}],[\"要求attrs\",{\"1\":{\"710\":1}}],[\"要求只能存储string类型的key和value\",{\"1\":{\"400\":1}}],[\"要求数据库中的记录必须满足两个条件才能成功更新\",{\"1\":{\"210\":1}}],[\"要求如下\",{\"1\":{\"210\":1}}],[\"要求获得一个清单列表\",{\"1\":{\"143\":1}}],[\"要确定哪个更快\",{\"1\":{\"47\":1}}],[\"要重写tostring方法\",{\"1\":{\"47\":1}}],[\"所属分组名字\",{\"1\":{\"673\":2}}],[\"所属分类名字\",{\"1\":{\"673\":2}}],[\"所属分类id\",{\"1\":{\"670\":3}}],[\"所属分类\",{\"1\":{\"670\":1}}],[\"所存储的值的类型del\",{\"1\":{\"393\":1}}],[\"所对应的\",{\"1\":{\"201\":2}}],[\"所以数据的角标也在变化\",{\"1\":{\"809\":1}}],[\"所以数据一致\",{\"1\":{\"757\":1}}],[\"所以采用分布式锁的情况下\",{\"1\":{\"775\":1}}],[\"所以这个时候\",{\"1\":{\"804\":1}}],[\"所以这个地方\",{\"1\":{\"770\":1}}],[\"所以这里新建关联的时候查询的应该是当前分类的其他分组没有使用过的\",{\"1\":{\"674\":1}}],[\"所以我们可以按照商户类型做分组\",{\"1\":{\"816\":1}}],[\"所以我们无法根据type来对数据进行筛选\",{\"1\":{\"816\":1}}],[\"所以我们在这个地方存储他的id即可\",{\"1\":{\"816\":1}}],[\"所以我们选择将当前方法整体包裹起来\",{\"1\":{\"770\":1}}],[\"所以我们需要使用intern\",{\"1\":{\"770\":1}}],[\"所以我们需要去控制锁的力度\",{\"1\":{\"770\":1}}],[\"所以我改成了http\",{\"1\":{\"453\":1}}],[\"所以没有额外的内存消耗\",{\"1\":{\"757\":1}}],[\"所以线程3无法获得锁\",{\"1\":{\"756\":1}}],[\"所以还要进行下面的操作\",{\"1\":{\"655\":1}}],[\"所以请求拦截器\",{\"1\":{\"630\":1}}],[\"所以处理了较少的消息\",{\"1\":{\"333\":1}}],[\"所以处理了更多的消息\",{\"1\":{\"333\":1}}],[\"所以此时其他线程都会失败\",{\"1\":{\"769\":1}}],[\"所以此时我们需要将这些符号进行转义\",{\"1\":{\"183\":1}}],[\"所以此处无需提供setter方法\",{\"1\":{\"304\":1}}],[\"所以叫控制反转\",{\"1\":{\"268\":1}}],[\"所以需要在pom\",{\"1\":{\"256\":1}}],[\"所以volatile的写内存语义是直接刷新到主内存中\",{\"1\":{\"160\":1}}],[\"所以每个线程都有自己的工作内存\",{\"1\":{\"158\":1}}],[\"所以就减少了线程的开销\",{\"1\":{\"151\":1}}],[\"所以刚释放锁的线程在此\",{\"1\":{\"151\":1}}],[\"所以不会添加锁\",{\"1\":{\"145\":1}}],[\"所以当前线程获取到锁的时候同时也会阻塞其他线程获取该锁\",{\"1\":{\"131\":1}}],[\"所以yield\",{\"1\":{\"86\":1}}],[\"所以\",{\"1\":{\"47\":1,\"155\":2}}],[\"所有订阅者都能收到相关消息\",{\"1\":{\"793\":1}}],[\"所有配置文件的集合\",{\"1\":{\"660\":1}}],[\"所有响应拦截器\",{\"1\":{\"630\":1}}],[\"所有数据解析完成了\",{\"1\":{\"525\":1}}],[\"所有操作都是主节点完成\",{\"1\":{\"363\":1}}],[\"所有的分组id\",{\"1\":{\"674\":1}}],[\"所有的\",{\"1\":{\"169\":1}}],[\"所有的方法都是静态方法\",{\"1\":{\"156\":1}}],[\"所有的框架都认识\",{\"1\":{\"29\":1}}],[\"所有提交的任务都按顺序执行\",{\"1\":{\"115\":1,\"713\":1}}],[\"所有参与的线程必须到达这个点才能继续执行\",{\"1\":{\"108\":1}}],[\"所有路径为\",{\"1\":{\"27\":2}}],[\"然而停止线程却显得尤为重要\",{\"1\":{\"155\":1}}],[\"然而\",{\"1\":{\"47\":1,\"91\":1}}],[\"然后记录下当前最后一次拿取的记录\",{\"1\":{\"809\":1}}],[\"然后从这个位置开始去读取数据\",{\"1\":{\"809\":1}}],[\"然后从value中判断出来当前的数据已经过期了\",{\"1\":{\"756\":1}}],[\"然后按照时间排序即可\",{\"1\":{\"808\":1}}],[\"然后返回\",{\"1\":{\"789\":1}}],[\"然后返回过来\",{\"1\":{\"525\":1}}],[\"然后查找trylockinner方法\",{\"1\":{\"782\":1}}],[\"然后删除锁\",{\"1\":{\"778\":1}}],[\"然后线程2在持有锁执行过程中\",{\"1\":{\"778\":1}}],[\"然后大家一起去进行扣减\",{\"1\":{\"769\":1}}],[\"然后把这个数据重新加载到缓存的\",{\"1\":{\"754\":1}}],[\"然后和用户输入的验证码进行校验\",{\"1\":{\"738\":1}}],[\"然后重新生成代码\",{\"1\":{\"655\":1}}],[\"然后生成代码\",{\"1\":{\"655\":1}}],[\"然后读取第一个sheet\",{\"1\":{\"526\":1}}],[\"然后去实现不同种的编码方案\",{\"1\":{\"491\":1}}],[\"然后启动\",{\"1\":{\"450\":1}}],[\"然后启动三个redis\",{\"1\":{\"373\":1}}],[\"然后表示每隔1秒将缓冲区数据写到aof文件\",{\"1\":{\"371\":1}}],[\"然后同步给镜像节点\",{\"1\":{\"363\":1}}],[\"然后进行扫描到这个类\",{\"1\":{\"263\":1}}],[\"然后释放同步状态\",{\"1\":{\"151\":1}}],[\"然后处理任务\",{\"1\":{\"122\":1,\"718\":1}}],[\"然后再通过api去查看这两个set集合中的交集数据\",{\"1\":{\"807\":1}}],[\"然后再通过短信的方式将验证码发送给用户短信验证码登录\",{\"1\":{\"738\":1}}],[\"然后再来个线程异步的下单\",{\"1\":{\"789\":1}}],[\"然后再来执行逻辑\",{\"1\":{\"755\":1}}],[\"然后再上传阿里云\",{\"1\":{\"665\":1}}],[\"然后再安装\",{\"1\":{\"655\":1}}],[\"然后再排序\",{\"1\":{\"575\":1}}],[\"然后再同时开始执行\",{\"1\":{\"108\":1}}],[\"然后再根据条件确定newcapacity的大小\",{\"1\":{\"56\":1}}],[\"然后在副本上执行写操作\",{\"1\":{\"98\":1}}],[\"然后继续执行\",{\"1\":{\"93\":1}}],[\"然后右移16位\",{\"1\":{\"72\":1}}],[\"然后将数据存入redis\",{\"1\":{\"747\":1}}],[\"然后将数组的地址的赋给elementdata\",{\"1\":{\"54\":1}}],[\"然后将所有键值对重新分布到新的哈希表中\",{\"1\":{\"71\":1}}],[\"然后检查是否需要匹配值\",{\"1\":{\"67\":1}}],[\"然后接下来搭建自己的博客\",{\"1\":{\"44\":1}}],[\"然后写答案提交\",{\"1\":{\"44\":1}}],[\"然后\",{\"1\":{\"19\":1,\"66\":1,\"67\":1}}],[\"使其他线程有机会获取锁\",{\"1\":{\"782\":1}}],[\"使其永不过期\",{\"1\":{\"749\":1}}],[\"使⽤编辑距离算法实现了根据标签匹配最相似⽤户的功能\",{\"1\":{\"575\":1}}],[\"使⽤\",{\"1\":{\"571\":2,\"572\":1,\"573\":1,\"574\":1}}],[\"使私有方法可以被访问\",{\"1\":{\"170\":1}}],[\"使得自动将session存储到redis中\",{\"1\":{\"533\":1}}],[\"使得代码遵循开闭原则\",{\"1\":{\"490\":1}}],[\"使得读写操作没有冲突\",{\"1\":{\"476\":2}}],[\"使得此点之前的所有读写操作都执行后才可以开始执行此点之后的操作\",{\"1\":{\"161\":1}}],[\"使得系统更好地适应工作负载\",{\"1\":{\"114\":1}}],[\"使得它成为处理复杂同步需求的一种有力工具\",{\"1\":{\"91\":1}}],[\"使得在大规模数据存储时仍能保持高效率\",{\"1\":{\"47\":1}}],[\"使用阻塞队列优化秒杀\",{\"0\":{\"790\":1}}],[\"使用这把锁咱们就不使用主从了\",{\"1\":{\"783\":1}}],[\"使用代理\",{\"1\":{\"770\":1}}],[\"使用规则\",{\"1\":{\"764\":1}}],[\"使用锁解决\",{\"0\":{\"755\":1}}],[\"使用锁时\",{\"1\":{\"131\":1}}],[\"使用方案一比较靠谱\",{\"1\":{\"750\":1}}],[\"使用缓存原因\",{\"0\":{\"749\":1}}],[\"使用哈希存储\",{\"1\":{\"741\":1}}],[\"使用哈希值和哈希函数\",{\"1\":{\"69\":1}}],[\"使用bool查询\",{\"1\":{\"710\":1}}],[\"使用beanfactory\",{\"0\":{\"298\":1}}],[\"使用uuid作为值\",{\"1\":{\"703\":1}}],[\"使用本地锁\",{\"0\":{\"702\":1}}],[\"使用分布式锁\",{\"1\":{\"701\":1,\"702\":1}}],[\"使用互斥锁\",{\"1\":{\"701\":1}}],[\"使用多级缓存架构\",{\"1\":{\"700\":1}}],[\"使用多线程很重要的考量点是线程切换的开销\",{\"1\":{\"151\":1}}],[\"使用多线程和单个线程的区别\",{\"1\":{\"142\":1}}],[\"使用布隆过滤器来快速判断一个键值是否存在于缓存中\",{\"1\":{\"699\":1}}],[\"使用了terms聚合\",{\"1\":{\"685\":1}}],[\"使用了match\",{\"1\":{\"685\":1}}],[\"使用kibana\",{\"1\":{\"682\":1}}],[\"使用事件机制\",{\"1\":{\"670\":1}}],[\"使用逻辑删除\",{\"1\":{\"663\":1}}],[\"使用细节\",{\"1\":{\"660\":1}}],[\"使用命令\",{\"1\":{\"655\":1}}],[\"使用下面命令运行代码\",{\"1\":{\"640\":1}}],[\"使用自己的request\",{\"1\":{\"630\":1}}],[\"使用如下命令查看镜像\",{\"1\":{\"643\":1}}],[\"使用如下\",{\"1\":{\"607\":1}}],[\"使用可视化界面\",{\"1\":{\"596\":1}}],[\"使用优先队列耗时\",{\"1\":{\"575\":1}}],[\"使用优先队列优化空间\",{\"1\":{\"575\":1}}],[\"使用同步读取\",{\"1\":{\"526\":1}}],[\"使用其他ide编码\",{\"1\":{\"491\":1}}],[\"使用eclipse编码\",{\"1\":{\"491\":2}}],[\"使用excelproperty注解标注列的名字\",{\"1\":{\"430\":1}}],[\"使用ifconfig查看本机ip\",{\"1\":{\"681\":1}}],[\"使用if+else不停的判断\",{\"1\":{\"490\":1}}],[\"使用idea编码\",{\"1\":{\"491\":2}}],[\"使用id查询\",{\"1\":{\"467\":1}}],[\"使用策略模式消除ifelse\",{\"0\":{\"490\":1}}],[\"使用索引提示等\",{\"1\":{\"486\":1}}],[\"使用索引扫描\",{\"1\":{\"486\":1}}],[\"使用索引的效率越高\",{\"1\":{\"469\":1}}],[\"使用mysql自带的慢日志\",{\"1\":{\"485\":1}}],[\"使用map映射\",{\"1\":{\"184\":1}}],[\"使用开源工具\",{\"1\":{\"485\":1}}],[\"使用nvm\",{\"1\":{\"655\":1}}],[\"使用natapp进行内网穿透\",{\"1\":{\"450\":1}}],[\"使用ngrok进行内网穿透\",{\"1\":{\"450\":1}}],[\"使用模版写入\",{\"0\":{\"432\":1}}],[\"使用children来控制子页面\",{\"1\":{\"615\":1}}],[\"使用c就不会有\",{\"1\":{\"422\":1}}],[\"使用completablefuture提高性能\",{\"1\":{\"143\":1}}],[\"使用completablefuture\",{\"1\":{\"142\":1}}],[\"使用countdownlatch\",{\"1\":{\"107\":1}}],[\"使用答案提示\",{\"1\":{\"409\":1}}],[\"使用不同的查询语言或api\",{\"1\":{\"377\":1}}],[\"使用不同的数据模型\",{\"1\":{\"377\":1}}],[\"使用表格\",{\"1\":{\"377\":1}}],[\"使用集群来保证高可用性\",{\"1\":{\"363\":1}}],[\"使用时只需要声明一个交换机\",{\"1\":{\"361\":1}}],[\"使用queuebuilder创建队列\",{\"1\":{\"359\":1}}],[\"使用querywrapper\",{\"1\":{\"204\":2}}],[\"使用死信交换机实现延迟消息的原理是\",{\"1\":{\"354\":1}}],[\"使用能者多劳策略\",{\"1\":{\"333\":1}}],[\"使用docker安装nginx\",{\"1\":{\"687\":1}}],[\"使用docker\",{\"1\":{\"317\":1,\"696\":1}}],[\"使用按照名称注入\",{\"1\":{\"304\":1}}],[\"使用类来替换\",{\"1\":{\"301\":1}}],[\"使用property标签注入\",{\"1\":{\"283\":1}}],[\"使用parametertype可以指定参数的类型\",{\"1\":{\"182\":1}}],[\"使用的是<property\",{\"1\":{\"282\":1}}],[\"使用的是非公平锁\",{\"1\":{\"91\":1}}],[\"使用factorybean创建\",{\"0\":{\"277\":1}}],[\"使用futuretask\",{\"1\":{\"105\":1}}],[\"使用反射\",{\"1\":{\"274\":1}}],[\"使用配置类代替web\",{\"1\":{\"245\":1}}],[\"使用handler参数\",{\"1\":{\"232\":1}}],[\"使用状态\",{\"1\":{\"216\":1}}],[\"使用批量删除\",{\"1\":{\"211\":1}}],[\"使用乐观锁可以提高系统的并发性能\",{\"1\":{\"210\":1}}],[\"使用lua脚本来与redis服务器进行交互\",{\"1\":{\"782\":1}}],[\"使用lua脚本解锁\",{\"1\":{\"703\":1}}],[\"使用lua脚本\",{\"1\":{\"703\":1}}],[\"使用list排序耗时\",{\"1\":{\"575\":1}}],[\"使用log\",{\"1\":{\"485\":1}}],[\"使用locksupport\",{\"1\":{\"156\":1}}],[\"使用lock的一般形式\",{\"1\":{\"135\":1}}],[\"使用lambdaupdate\",{\"0\":{\"210\":1}}],[\"使用lambdaquerywrapper\",{\"1\":{\"209\":1}}],[\"使用lambda方法\",{\"0\":{\"209\":1}}],[\"使用redis消息队列\",{\"0\":{\"791\":1}}],[\"使用redisson修改上面获取三级分类的业务代码\",{\"1\":{\"704\":1}}],[\"使用redis做缓存\",{\"1\":{\"698\":1}}],[\"使用redis\",{\"1\":{\"652\":1}}],[\"使用redis进行缓存\",{\"1\":{\"572\":1}}],[\"使用react自带的image标签无法请求后端\",{\"1\":{\"616\":1}}],[\"使用readme\",{\"0\":{\"37\":1}}],[\"使用restfultool\",{\"1\":{\"608\":1}}],[\"使用resultmap\",{\"0\":{\"181\":1}}],[\"使用request对象可以获取请求数据中的内容\",{\"1\":{\"232\":1}}],[\"使用stream\",{\"0\":{\"796\":1}}],[\"使用string存储\",{\"1\":{\"741\":1}}],[\"使用stringredistemplate\",{\"0\":{\"400\":1}}],[\"使用spring\",{\"1\":{\"276\":1,\"626\":1,\"665\":1}}],[\"使用spring中的静态工厂\",{\"1\":{\"275\":1}}],[\"使用signal方法唤醒线程\",{\"1\":{\"156\":1}}],[\"使用setdaemon\",{\"1\":{\"89\":1}}],[\"使用jmeter进行并发测试\",{\"1\":{\"755\":1}}],[\"使用jsr303进行校验\",{\"1\":{\"666\":1}}],[\"使用jackson转换\",{\"1\":{\"339\":1}}],[\"使用juc包中condition的wait\",{\"1\":{\"156\":1}}],[\"使用jps\",{\"1\":{\"104\":1}}],[\"使用object中的notify方法唤醒线程\",{\"1\":{\"156\":1}}],[\"使用object中的wait方法让线程等待\",{\"1\":{\"156\":1}}],[\"使用autowire\",{\"1\":{\"287\":1}}],[\"使用api\",{\"1\":{\"155\":1}}],[\"使用aop切面的优点\",{\"1\":{\"26\":1}}],[\"使用aop\",{\"1\":{\"26\":1}}],[\"使用超时机制等\",{\"1\":{\"153\":1}}],[\"使用默认的executor执行器执行提供的runnable操作\",{\"1\":{\"121\":1,\"717\":1}}],[\"使用默认的executor执行器执行提供的consumer函数\",{\"1\":{\"121\":1,\"717\":1}}],[\"使用默认的初始容量\",{\"1\":{\"64\":1}}],[\"使用this\",{\"1\":{\"670\":1}}],[\"使用thread类或实现runnable接口创建的线程默认是用户线程\",{\"1\":{\"89\":1}}],[\"使用tostring\",{\"1\":{\"47\":1}}],[\"使用\",{\"0\":{\"241\":1,\"404\":1},\"1\":{\"56\":1,\"63\":1,\"91\":1,\"178\":1,\"184\":1,\"190\":1,\"200\":1,\"256\":1,\"307\":2,\"309\":1,\"310\":1,\"319\":1,\"491\":1,\"493\":1,\"534\":1,\"609\":1,\"706\":1,\"721\":1,\"749\":1,\"758\":1}}],[\"使用globalfilter全局拦截处理\",{\"1\":{\"27\":1}}],[\"使用签名\",{\"1\":{\"17\":1}}],[\"使用组件\",{\"1\":{\"14\":1}}],[\"使用现成的系统的功能\",{\"1\":{\"5\":1}}],[\"其测量结果是概率性的\",{\"1\":{\"821\":1}}],[\"其实我们又把他叫做feed流\",{\"1\":{\"808\":1}}],[\"其实使用mysql作为分布式锁比较少\",{\"1\":{\"775\":1}}],[\"其实是this\",{\"1\":{\"770\":1}}],[\"其实就不会有缓存击穿的问题\",{\"1\":{\"756\":1}}],[\"其实也是一张关联表\",{\"1\":{\"670\":1}}],[\"其所指向的地理位置距离图标左上\",{\"1\":{\"439\":1}}],[\"其结果应该与执行一次的结果相同\",{\"1\":{\"352\":1}}],[\"其结果是应用该函数的结果\",{\"1\":{\"121\":1,\"717\":1}}],[\"其它情况都会返回nack\",{\"1\":{\"343\":1}}],[\"其它region请按实际情况填写\",{\"1\":{\"241\":1,\"665\":1}}],[\"其它繁杂的内容有jmm规范结合操作系统给我们搞定\",{\"1\":{\"159\":1}}],[\"其次\",{\"1\":{\"155\":1}}],[\"其中就包含了各种分布式锁的实现\",{\"1\":{\"781\":1}}],[\"其中包含了新生代和老年代两部分\",{\"1\":{\"694\":1}}],[\"其中包含了数据层和业务层的类对象\",{\"1\":{\"268\":1}}],[\"其中记录了序列化时对应的class名称\",{\"1\":{\"399\":1}}],[\"其中对redis的集成模块就叫做springdataredis\",{\"1\":{\"397\":1}}],[\"其中延迟队列就用到了死信交换机和ttl\",{\"1\":{\"361\":1}}],[\"其中ack和nack属于publisher\",{\"1\":{\"343\":1}}],[\"其中的一些静态方法与iservice中方法签名基本一致\",{\"1\":{\"214\":1}}],[\"其中一个事务会成功\",{\"1\":{\"210\":1}}],[\"其中封装的方法可以分为以下几类\",{\"1\":{\"208\":1}}],[\"其中每个线程都在等待其他线程释放锁\",{\"1\":{\"104\":1}}],[\"其中n是元素个数\",{\"1\":{\"47\":1}}],[\"其中n是树中的节点数\",{\"1\":{\"47\":1}}],[\"其内部的\",{\"1\":{\"87\":1}}],[\"其含义是\",{\"1\":{\"87\":1}}],[\"其初始内容是由给定的map对象m提供的\",{\"1\":{\"64\":1}}],[\"其他\",{\"0\":{\"843\":1}}],[\"其他参数\",{\"1\":{\"780\":1}}],[\"其他层仍然可以提供部分数据\",{\"1\":{\"700\":1}}],[\"其他非text用term\",{\"1\":{\"685\":1}}],[\"其他字段将不会包含在结果中\",{\"1\":{\"685\":1}}],[\"其他地方报错的\",{\"1\":{\"655\":1}}],[\"其他人插入失败则表示无法获得到锁\",{\"1\":{\"775\":1}}],[\"其他人\",{\"1\":{\"556\":1,\"561\":1}}],[\"其他的人在处理时\",{\"1\":{\"769\":1}}],[\"其他的人继续抢锁\",{\"1\":{\"547\":1}}],[\"其他的线程只能返回之前的数据\",{\"1\":{\"757\":1}}],[\"其他的校验\",{\"1\":{\"599\":1,\"604\":1}}],[\"其他的直接返回\",{\"1\":{\"545\":1}}],[\"其他的类型一些测试\",{\"1\":{\"400\":1}}],[\"其他机器不用重复执行了\",{\"1\":{\"540\":1}}],[\"其他办法\",{\"1\":{\"539\":1}}],[\"其他系统可能要用到\",{\"1\":{\"510\":1}}],[\"其他事务就不能再获取该行的其他锁\",{\"1\":{\"476\":1}}],[\"其他事务不能同时对该表进行操作\",{\"1\":{\"110\":1}}],[\"其他格式\",{\"1\":{\"259\":1}}],[\"其他特殊逻辑\",{\"1\":{\"220\":1}}],[\"其他线程将有机会尝试获取锁\",{\"1\":{\"782\":1}}],[\"其他线程必须等待\",{\"1\":{\"767\":1}}],[\"其他线程才能走返回正确的数据\",{\"1\":{\"756\":1}}],[\"其他线程就都能从缓存中加载这些数据了\",{\"1\":{\"754\":1}}],[\"其他线程去异步处理数据库\",{\"1\":{\"750\":1}}],[\"其他线程能够立即看到最新的值\",{\"1\":{\"155\":1,\"158\":1}}],[\"其他线程可以竞争获取该锁\",{\"1\":{\"91\":1}}],[\"其他看你的简历问\",{\"1\":{\"47\":1}}],[\"其他项目引用\",{\"1\":{\"28\":1}}],[\"它主要分为两部分\",{\"1\":{\"694\":1}}],[\"它将文档按照age字段的值分组\",{\"1\":{\"685\":1}}],[\"它将返回\",{\"1\":{\"67\":1}}],[\"它将返回先前与该键关联的值\",{\"1\":{\"67\":1}}],[\"它记录一条对应相反的update记录\",{\"1\":{\"475\":1}}],[\"它对数据库中的数据的改变就是永久的\",{\"1\":{\"472\":1}}],[\"它包含了查询所需的所有列\",{\"1\":{\"467\":1}}],[\"它改变了数据存储的物理结构以优化性能\",{\"1\":{\"466\":1}}],[\"它不仅提供了一系列的分布式的java常用对象\",{\"1\":{\"781\":1}}],[\"它不是面向最终用户的\",{\"1\":{\"415\":1}}],[\"它不会立即从数据库中删除数据记录\",{\"1\":{\"215\":1}}],[\"它实现了浏览器与服务器全双工通信\",{\"1\":{\"403\":1}}],[\"它实现了future和completionstage接口\",{\"1\":{\"143\":1}}],[\"它有3个不同实现\",{\"1\":{\"351\":1}}],[\"它有多少种状\",{\"1\":{\"47\":1}}],[\"它允许消费者在消费消息后向\",{\"1\":{\"349\":1}}],[\"它允许你提交一个任务并在将来某个时候获取任务的执行结果\",{\"1\":{\"141\":1}}],[\"它提供了一个简单的api来发送和接收异步\",{\"1\":{\"332\":1}}],[\"它提供了比传统的synchronized关键字更灵活的锁定机制\",{\"1\":{\"91\":1}}],[\"它还可以实现\",{\"1\":{\"261\":1}}],[\"它通俗易懂的向我们程序员阐述了一个强内存模型\",{\"1\":{\"159\":1}}],[\"它通过lua脚本与redis服务器交互以获取锁\",{\"1\":{\"782\":1}}],[\"它通过递归地将任务拆分成更小的子任务\",{\"1\":{\"117\":1}}],[\"它通过添加多级索引来加速查找\",{\"1\":{\"47\":1}}],[\"它使用netty进行网络通信\",{\"1\":{\"698\":1}}],[\"它使用了底层的原子性操作\",{\"1\":{\"155\":1}}],[\"它使用默认的executor执行器执行提供的函数\",{\"1\":{\"121\":1,\"717\":1}}],[\"它假设在多线程环境下\",{\"1\":{\"145\":1}}],[\"它假设所有线程访问共享资源的时候不会出现冲突\",{\"1\":{\"131\":1}}],[\"它支持在计算完成以后触发一些函数或执行某些\",{\"1\":{\"143\":1}}],[\"它支持通过回调函数\",{\"1\":{\"143\":1}}],[\"它可能代表一个明确完成的future\",{\"1\":{\"143\":1}}],[\"它可以更好地确定哪个索引最有效地用于查询\",{\"1\":{\"469\":1}}],[\"它可以在应用程序中创建和维护线程\",{\"1\":{\"114\":1}}],[\"它可以控制同时访问某个特定资源的线程数量\",{\"1\":{\"109\":1}}],[\"它可以让一组线程达到一个同步点\",{\"1\":{\"108\":1}}],[\"它可以被用于方法和代码块\",{\"1\":{\"91\":1}}],[\"它在性能和可伸缩性方面有一些优势\",{\"1\":{\"136\":1}}],[\"它在哈希表中查找键的位置\",{\"1\":{\"67\":1}}],[\"它为构建各种同步工具提供了一个框架\",{\"1\":{\"136\":1}}],[\"它仅仅保存的是一个引用\",{\"1\":{\"133\":1}}],[\"它们的作用是确保数据的一致性和避免竞态条件\",{\"1\":{\"766\":1}}],[\"它们在数据存储\",{\"1\":{\"377\":1}}],[\"它们都将无法推进下去\",{\"1\":{\"153\":1}}],[\"它们中的一个将会获得许可证\",{\"1\":{\"109\":1}}],[\"它们就会被释放\",{\"1\":{\"108\":1}}],[\"它们会继续执行直到完成或手动中断\",{\"1\":{\"89\":1}}],[\"它就会被阻塞\",{\"1\":{\"108\":1}}],[\"它就会释放锁\",{\"1\":{\"91\":1}}],[\"它必须等待\",{\"1\":{\"104\":1}}],[\"它发生在两个或多个线程互相等待对方释放资源而无法继续执行的情况\",{\"1\":{\"104\":1}}],[\"它也会重新检查条件并决定是否继续等待\",{\"1\":{\"92\":1}}],[\"它会同时启动一个定时器或计时器\",{\"1\":{\"782\":1}}],[\"它会尝试从最近最少使用的键中选择一些进行淘汰以腾出内存空间\",{\"1\":{\"749\":1}}],[\"它会尝试获取锁\",{\"1\":{\"91\":1}}],[\"它会被路由到死信交换机\",{\"1\":{\"361\":1}}],[\"它会增加一个凭证\",{\"1\":{\"156\":1}}],[\"它会一直运行\",{\"1\":{\"114\":1}}],[\"它会自动重置\",{\"1\":{\"108\":1}}],[\"它会记录结构修改次数\",{\"1\":{\"69\":1}}],[\"它是逻辑日志\",{\"1\":{\"475\":1}}],[\"它是spring框架的一部分\",{\"1\":{\"332\":1}}],[\"它是一种原子操作\",{\"1\":{\"769\":1}}],[\"它是一种多线程同步的手段\",{\"1\":{\"131\":1}}],[\"它是一个可取消的异步计算任务\",{\"1\":{\"142\":1}}],[\"它是一个特殊类型的\",{\"1\":{\"117\":1}}],[\"它是\",{\"1\":{\"98\":1}}],[\"它是系统的守护者\",{\"1\":{\"89\":1}}],[\"它是在哈希表需要扩容时触发的阈值\",{\"1\":{\"64\":1}}],[\"它表示了一个运行中的线程是否被其他线程进行了中断操作\",{\"1\":{\"88\":1}}],[\"它的主要作用是保证该变量对所有线程的可见性\",{\"1\":{\"155\":1}}],[\"它的吞吐量更高\",{\"1\":{\"102\":1}}],[\"它的存在不会阻止程序的终止\",{\"1\":{\"89\":1}}],[\"它的临界值则为0\",{\"1\":{\"71\":1}}],[\"它的查询复杂度通常为o\",{\"1\":{\"47\":1}}],[\"它检查哈希表是否为空\",{\"1\":{\"67\":1}}],[\"它检查当前索引位置的节点是否与要插入的键匹配\",{\"1\":{\"66\":1}}],[\"它返回一个\",{\"1\":{\"66\":1}}],[\"它存储了键值对的桶\",{\"1\":{\"63\":1}}],[\"我是中国人\",{\"1\":{\"687\":1}}],[\"我是一个freemarker注释\",{\"1\":{\"417\":1}}],[\"我的配置文件挂载到了~\",{\"1\":{\"651\":1}}],[\"我的html页面在\",{\"1\":{\"639\":1}}],[\"我的在以下文件夹\",{\"1\":{\"323\":1}}],[\"我们按月来统计用户签到信息\",{\"1\":{\"819\":1}}],[\"我们把x和y轴传入到redis做的经纬度位置去\",{\"1\":{\"816\":1}}],[\"我们把过期时间设置在\",{\"1\":{\"756\":1}}],[\"我们的请求参数中就需要携带\",{\"1\":{\"810\":1}}],[\"我们这个地方可以采用sortedset来做\",{\"1\":{\"809\":1}}],[\"我们从t1时刻开始\",{\"1\":{\"809\":1}}],[\"我们本次针对好友的操作\",{\"1\":{\"808\":1}}],[\"我们直接给用户返回成功\",{\"1\":{\"789\":1}}],[\"我们将耗时比较短的逻辑判断放入到redis中\",{\"1\":{\"789\":1}}],[\"我们会搭建集群或者主从\",{\"1\":{\"783\":1}}],[\"我们使用锁必须保证锁必须是同一把\",{\"1\":{\"770\":1}}],[\"我们之所以会出现这个缓存击穿问题\",{\"1\":{\"756\":1}}],[\"我们如果发现命中之后\",{\"1\":{\"752\":1}}],[\"我们也把这个数据存入到redis中去\",{\"1\":{\"752\":1}}],[\"我们也可以直接向队列发送消息\",{\"1\":{\"332\":1}}],[\"我们都知道数据库能够承载的并发不如redis这么高\",{\"1\":{\"752\":1}}],[\"我们要分析出查询出数据的最小时间戳\",{\"1\":{\"810\":1}}],[\"我们要防止刚才的情况发生\",{\"1\":{\"779\":1}}],[\"我们要跳转到哪个地方\",{\"1\":{\"710\":1}}],[\"我们要解决消息丢失问题\",{\"1\":{\"341\":1}}],[\"我们系统的一致性解决方案\",{\"1\":{\"705\":1}}],[\"我们一般都用来做修改操作\",{\"1\":{\"682\":1}}],[\"我们希望点击左侧的分类\",{\"1\":{\"670\":1}}],[\"我们希望将高位的信息也包括在哈希码中\",{\"1\":{\"66\":1}}],[\"我们先定义一个编码接口\",{\"1\":{\"491\":1}}],[\"我们想要根据传入的codetype来进行判断使用那个编辑器coding\",{\"1\":{\"491\":1}}],[\"我们需要找到与上一次查询相同的查询个数作为偏移量\",{\"1\":{\"810\":1}}],[\"我们需要记录每次操作的最后一条\",{\"1\":{\"809\":1}}],[\"我们需要获得原始的事务对象\",{\"1\":{\"770\":1}}],[\"我们需要保证key不冲突\",{\"1\":{\"382\":1}}],[\"我们需要修改servletcontainersinitconfig\",{\"1\":{\"245\":1}}],[\"我们可以把两人的关注的人分别放入到一个set集合中\",{\"1\":{\"807\":1}}],[\"我们可以判断当前redis中返回的结果是否是0\",{\"1\":{\"789\":1}}],[\"我们可以使用lua来操作\",{\"1\":{\"789\":1}}],[\"我们可以使用策略模式+工厂模式+模版方法接口\",{\"1\":{\"492\":1}}],[\"我们可以采用逻辑过期方案\",{\"1\":{\"756\":1}}],[\"我们可以采用trylock方法\",{\"1\":{\"755\":1}}],[\"我们可以采用仲裁队列\",{\"1\":{\"363\":1}}],[\"我们可以不使用json序列化器来处理value\",{\"1\":{\"400\":1}}],[\"我们可以利用spring的retry机制\",{\"1\":{\"359\":1}}],[\"我们当时采用的镜像模式搭建的集群\",{\"1\":{\"363\":1}}],[\"我们当时一个什么业务使用到了延迟队列\",{\"1\":{\"361\":1}}],[\"我们在用户下单后的第10秒\",{\"1\":{\"355\":1}}],[\"我们在catch没有通过调用th\",{\"1\":{\"155\":1}}],[\"我们最好多检测几次订单支付状态\",{\"1\":{\"355\":1}}],[\"我们最早在控制台使用的正是fanout交换机\",{\"1\":{\"334\":1}}],[\"我们发送的消息却要在mq中停留30分钟\",{\"1\":{\"355\":1}}],[\"我们发现spring会多把springmvc的controller类也扫描到\",{\"1\":{\"245\":1}}],[\"我们依然能通过主动查询来保证订单状态的一致\",{\"1\":{\"352\":1}}],[\"我们该如何确保mq消息的可靠性\",{\"1\":{\"340\":1}}],[\"我们采用了db的静态方法\",{\"1\":{\"214\":1}}],[\"我们无需自己通过new的方式来创建wrapper\",{\"1\":{\"209\":1}}],[\"我们只需要进行快速的逻辑判断\",{\"1\":{\"789\":1}}],[\"我们只需要关注前者就好了\",{\"1\":{\"159\":1}}],[\"我们只写好代码即可\",{\"1\":{\"159\":1}}],[\"我们只要理解happens\",{\"1\":{\"159\":1}}],[\"我们定义的所有共享变量都储存在物理主内存中\",{\"1\":{\"158\":1}}],[\"我们就不用等待结果\",{\"1\":{\"142\":1}}],[\"我们来看b+树\",{\"1\":{\"47\":1}}],[\"我博客上搜了一圈\",{\"1\":{\"44\":1}}],[\"让程序串行执行\",{\"1\":{\"775\":1}}],[\"让前端带着token来访问后端\",{\"1\":{\"741\":1}}],[\"让进程在后台运行\",{\"1\":{\"640\":1}}],[\"让7002的主设置为7001\",{\"1\":{\"373\":1}}],[\"让spring来创建对象\",{\"1\":{\"267\":1}}],[\"让自定义异常类继承runtimeexception的好处是\",{\"1\":{\"230\":1}}],[\"让我们原来的mapper即成mybatis的basemapper\",{\"1\":{\"196\":1}}],[\"让我们来探讨一下\",{\"1\":{\"47\":1}}],[\"让开发者进行多线程编程时有效减少竞争条件和死锁线程\",{\"1\":{\"80\":1}}],[\"让用户输入accesskey和secretkey就可以直接调用\",{\"1\":{\"18\":1}}],[\"取关\",{\"1\":{\"806\":2,\"807\":2}}],[\"取\",{\"0\":{\"567\":1},\"1\":{\"567\":2}}],[\"取出前n名\",{\"1\":{\"575\":1}}],[\"取出不重复的队伍id\",{\"1\":{\"564\":1}}],[\"取出next节点\",{\"1\":{\"71\":1}}],[\"取消了这个面包屑以后\",{\"1\":{\"710\":1}}],[\"取消掉日志后\",{\"1\":{\"567\":1}}],[\"取消\",{\"1\":{\"518\":1}}],[\"取消订单\",{\"1\":{\"352\":1}}],[\"取消任务\",{\"1\":{\"105\":1}}],[\"取决于具体的使用场景和操作\",{\"1\":{\"47\":1}}],[\"取代了zuul\",{\"1\":{\"27\":1}}],[\"跳过这些查询过的数据\",{\"1\":{\"810\":1}}],[\"跳过\",{\"1\":{\"566\":1,\"575\":1}}],[\"跳过交换机\",{\"1\":{\"332\":1}}],[\"跳槽\",{\"1\":{\"508\":1}}],[\"跳表需要额外的空间来存储索引\",{\"1\":{\"47\":1}}],[\"跳表的优点之一是它相比于平衡树更容易实现和维护\",{\"1\":{\"47\":1}}],[\"跳表的查询复杂度也是o\",{\"1\":{\"47\":1}}],[\"跳表和b+哪个效率高\",{\"1\":{\"47\":1}}],[\"跳转到登录页面\",{\"1\":{\"630\":1}}],[\"跳转页面\",{\"1\":{\"261\":1}}],[\"跳转\",{\"1\":{\"1\":1}}],[\"字面意思就是存放消息的队列\",{\"1\":{\"791\":1}}],[\"字节\",{\"1\":{\"452\":1}}],[\"字节面试\",{\"1\":{\"47\":1}}],[\"字符数组\",{\"1\":{\"452\":1}}],[\"字符串不加单引号\",{\"1\":{\"470\":2}}],[\"字符串标题\",{\"1\":{\"430\":1}}],[\"字符串转json\",{\"1\":{\"422\":1}}],[\"字符串\",{\"0\":{\"383\":1},\"1\":{\"397\":1,\"430\":1,\"452\":2,\"566\":1,\"685\":2}}],[\"字段的长度较长\",{\"1\":{\"469\":1}}],[\"字段通常是因为在对象序列化时\",{\"1\":{\"63\":1}}],[\"字段\",{\"1\":{\"9\":1,\"25\":1,\"509\":1,\"557\":2,\"596\":1,\"694\":1}}],[\"态\",{\"1\":{\"47\":1}}],[\"谈一谈你对java多线程的了解\",{\"1\":{\"47\":1}}],[\"陆怎么实现的\",{\"1\":{\"47\":1}}],[\"登\",{\"1\":{\"47\":1}}],[\"登录的时候修改\",{\"1\":{\"740\":1}}],[\"登录拦截器修改如下\",{\"1\":{\"742\":1}}],[\"登录拦截\",{\"0\":{\"739\":1}}],[\"登录宝塔后进入软件商店\",{\"1\":{\"641\":1}}],[\"登录注册测试\",{\"0\":{\"608\":1}}],[\"登录service\",{\"1\":{\"605\":1}}],[\"登录逻辑\",{\"0\":{\"603\":1,\"725\":1}}],[\"登录redis\",{\"1\":{\"379\":1}}],[\"登录失败\",{\"1\":{\"14\":1}}],[\"登录成功\",{\"1\":{\"14\":1,\"605\":1}}],[\"登录\",{\"1\":{\"14\":1,\"581\":1,\"612\":1}}],[\"条数据\",{\"1\":{\"562\":1}}],[\"条没有下单的用户信息并按照注册时间排序\",{\"1\":{\"47\":1}}],[\"条件构造器\",{\"0\":{\"203\":1}}],[\"条件变量\",{\"1\":{\"91\":1}}],[\"条件\",{\"1\":{\"27\":1}}],[\"册时间\",{\"1\":{\"47\":1}}],[\"举个例子\",{\"1\":{\"47\":1,\"809\":1}}],[\"举一个进程线程多对多的例子\",{\"1\":{\"47\":1}}],[\"第四种方式\",{\"1\":{\"712\":1}}],[\"第四组\",{\"1\":{\"112\":1}}],[\"第三方\",{\"1\":{\"665\":1}}],[\"第三组\",{\"1\":{\"112\":1}}],[\"第三步创建多个线程\",{\"1\":{\"92\":1}}],[\"第三种方式\",{\"1\":{\"83\":1,\"155\":1,\"167\":1,\"712\":1}}],[\"第三个构造函数为可以穿入一个collection对象\",{\"1\":{\"54\":1}}],[\"第三个需要等到前两个子线程执行完毕后再执行\",{\"1\":{\"47\":1}}],[\"第二版\",{\"1\":{\"824\":1}}],[\"第二页这个时候拿数据\",{\"1\":{\"809\":1}}],[\"第二位是一个特定的数字\",{\"1\":{\"738\":1}}],[\"第二种方法\",{\"1\":{\"155\":1}}],[\"第二种方式\",{\"0\":{\"526\":1},\"1\":{\"83\":1,\"156\":1,\"167\":1,\"665\":1,\"712\":1}}],[\"第二个参数\",{\"1\":{\"423\":1}}],[\"第二个拦截器\",{\"1\":{\"233\":1}}],[\"第二个\",{\"1\":{\"156\":1}}],[\"第二个任务使用的是forkjoin线程池\",{\"1\":{\"143\":1}}],[\"第二个构造函数为无参构造\",{\"1\":{\"54\":1}}],[\"第二组\",{\"1\":{\"112\":1}}],[\"第二步在资源类操作方法\",{\"1\":{\"92\":1}}],[\"第一次调用可能要初始化很多东西\",{\"1\":{\"675\":1}}],[\"第一种办法\",{\"1\":{\"155\":1}}],[\"第一种方式问题\",{\"1\":{\"156\":1}}],[\"第一种方式\",{\"0\":{\"525\":1},\"1\":{\"83\":1,\"167\":1,\"712\":1}}],[\"第一组\",{\"1\":{\"112\":1}}],[\"第一步创建资源类\",{\"1\":{\"92\":1}}],[\"第一个用户访问还是很慢怎么办\",{\"1\":{\"544\":1}}],[\"第一个参数\",{\"1\":{\"423\":1}}],[\"第一个构造方法可以穿入一个整数\",{\"1\":{\"54\":1}}],[\"第一个和第二个没有关联\",{\"1\":{\"47\":1}}],[\"九州电子\",{\"1\":{\"47\":1}}],[\"事件是怎么组织的\",{\"1\":{\"47\":1}}],[\"事务想要生效\",{\"1\":{\"770\":1}}],[\"事务id\",{\"1\":{\"476\":1}}],[\"事务可以根据快照读取数据\",{\"1\":{\"476\":1}}],[\"事务对数据行的修改不会影响到正在读取旧版本数据行的其他事务\",{\"1\":{\"476\":1}}],[\"事务中的隔离性是如何保证的呢\",{\"0\":{\"476\":1},\"1\":{\"476\":1}}],[\"事务隔离级别越高\",{\"1\":{\"474\":1}}],[\"事务隔离级别\",{\"0\":{\"474\":1}}],[\"事务一旦提交或回滚\",{\"1\":{\"472\":1}}],[\"事务完成时\",{\"1\":{\"472\":1}}],[\"事务是不可分割的最小操作单元\",{\"1\":{\"472\":1}}],[\"事务\",{\"0\":{\"471\":1}}],[\"事务特性\",{\"1\":{\"377\":1}}],[\"事务注解transactional失效\",{\"1\":{\"47\":1}}],[\"事务的实现原理\",{\"1\":{\"47\":1}}],[\"事务的隔离级别\",{\"1\":{\"47\":1}}],[\"事务及事务的4大特性\",{\"1\":{\"47\":1}}],[\"程池组成\",{\"1\":{\"114\":1}}],[\"程序计数器的值被恢复\",{\"1\":{\"694\":1}}],[\"程序计数器\",{\"1\":{\"694\":1}}],[\"程序不能正确执行\",{\"1\":{\"268\":1}}],[\"程序次序规则\",{\"1\":{\"159\":1}}],[\"程序是静止的\",{\"1\":{\"81\":1}}],[\"程序如何编译\",{\"1\":{\"47\":1}}],[\"程\",{\"1\":{\"47\":1}}],[\"进阶检索\",{\"0\":{\"683\":1}}],[\"进去\",{\"1\":{\"233\":1}}],[\"进去同步代码前要获得当前类对象的锁\",{\"1\":{\"146\":1}}],[\"进一步拓展其功能\",{\"1\":{\"218\":1}}],[\"进入文件夹\",{\"1\":{\"639\":1}}],[\"进入容器\",{\"1\":{\"323\":1,\"643\":1,\"651\":1}}],[\"进入同步代码前要获得当前实例的锁\",{\"1\":{\"146\":1}}],[\"进入\",{\"1\":{\"86\":1,\"615\":1,\"646\":1}}],[\"进入一个循环\",{\"1\":{\"66\":1}}],[\"进程间通信\",{\"1\":{\"81\":1}}],[\"进程实体的运行过程就是进程\",{\"1\":{\"81\":1}}],[\"进程\",{\"1\":{\"81\":1}}],[\"进程与线程\",{\"1\":{\"81\":1}}],[\"进程和线程的区别\",{\"1\":{\"47\":1}}],[\"进行查询之后\",{\"1\":{\"755\":1}}],[\"进行业务处理\",{\"1\":{\"675\":1}}],[\"进行统一处理\",{\"1\":{\"630\":1}}],[\"进行接口测试\",{\"1\":{\"608\":1}}],[\"进行缓存\",{\"1\":{\"573\":1}}],[\"进行数据恢复使用\",{\"1\":{\"475\":1}}],[\"进行\",{\"1\":{\"371\":1}}],[\"进行上传之前先设置一下权限\",{\"1\":{\"318\":1}}],[\"进行占位\",{\"1\":{\"184\":1}}],[\"进行红黑树的操作\",{\"1\":{\"71\":1}}],[\"进行下一步操作\",{\"1\":{\"71\":1}}],[\"进行快速失败\",{\"1\":{\"63\":1}}],[\"进行重命名为requestconfig\",{\"1\":{\"14\":1}}],[\"整体流程如下\",{\"1\":{\"741\":1}}],[\"整体可读性有了很大提升\",{\"1\":{\"399\":1}}],[\"整个过程需要保证是原子性的\",{\"1\":{\"789\":1}}],[\"整个关系如下\",{\"1\":{\"670\":1}}],[\"整个http的内容\",{\"1\":{\"47\":1}}],[\"整合knife4j\",{\"0\":{\"727\":1}}],[\"整合swagger\",{\"0\":{\"726\":1}}],[\"整合组件库\",{\"1\":{\"504\":1}}],[\"整合运用\",{\"1\":{\"29\":1}}],[\"网络请求工具\",{\"1\":{\"630\":1}}],[\"网络抖动导致消息投递失败\",{\"1\":{\"360\":1}}],[\"网络tcp常见的问题\",{\"1\":{\"47\":1}}],[\"网关测试\",{\"1\":{\"696\":1}}],[\"网关添加配置允许跨域\",{\"1\":{\"663\":1}}],[\"网关的转发都是需要获取可用服务列表\",{\"1\":{\"412\":1}}],[\"网关的作用\",{\"1\":{\"27\":1}}],[\"网关项目比较纯净\",{\"1\":{\"28\":1}}],[\"网关业务逻辑\",{\"1\":{\"28\":1}}],[\"网关处理响应异常\",{\"1\":{\"27\":1}}],[\"网关代码\",{\"1\":{\"27\":1}}],[\"网关后端端口为\",{\"1\":{\"27\":2}}],[\"网关全部日志开启\",{\"1\":{\"27\":1}}],[\"网关分类\",{\"1\":{\"27\":1}}],[\"网关可以生成和管理服务的文档\",{\"1\":{\"27\":1}}],[\"网关可以记录所有请求和响应的日志\",{\"1\":{\"27\":1}}],[\"网关可以将请求分发到多个后端服务实例\",{\"1\":{\"27\":1}}],[\"网关可以控制服务的发布\",{\"1\":{\"27\":1}}],[\"网关可以根据配置规则对请求进行访问控制\",{\"1\":{\"27\":1}}],[\"网关可以根据请求的目标地址将请求路由到相应的后端服务\",{\"1\":{\"27\":1}}],[\"网关可以对请求进行统一的预处理和后处理\",{\"1\":{\"27\":1}}],[\"网关可以对请求进行身份验证和权限验证\",{\"1\":{\"27\":1}}],[\"网关可以对流量进行标记\",{\"1\":{\"27\":1}}],[\"网关可以缓存经常请求的数据\",{\"1\":{\"27\":1}}],[\"网关可以处理跨域请求\",{\"1\":{\"27\":1}}],[\"网关\",{\"0\":{\"728\":1},\"1\":{\"7\":1,\"26\":2,\"657\":1,\"665\":1}}],[\"并以十进制形式返回\",{\"1\":{\"819\":1}}],[\"并按照距离升序排序\",{\"1\":{\"815\":1}}],[\"并按照与指定点之间的距离排序后返回\",{\"1\":{\"815\":1}}],[\"并按照与圆心之间的距离排序后返回\",{\"1\":{\"815\":1}}],[\"并没有重复读取\",{\"1\":{\"808\":1}}],[\"并没有获得到锁\",{\"1\":{\"755\":1}}],[\"并不像jvm的阻塞队列那样会阻塞并等待消息\",{\"1\":{\"792\":1}}],[\"并不能真正的中断线程\",{\"1\":{\"155\":1}}],[\"并更新锁的过期时间\",{\"1\":{\"782\":1}}],[\"并为锁设置过期时间\",{\"1\":{\"782\":1}}],[\"并设置超时时间\",{\"1\":{\"751\":1}}],[\"并设置confirm类型\",{\"1\":{\"344\":1}}],[\"并新增版本号put\",{\"1\":{\"682\":1}}],[\"并通过优先队列来优化\",{\"1\":{\"575\":1}}],[\"并通过分布式锁保证多机部署时定时任务不会重复执⾏\",{\"1\":{\"573\":1}}],[\"并通过⾃定义线程池\",{\"1\":{\"571\":1}}],[\"并\",{\"1\":{\"571\":1}}],[\"并使⽤\",{\"1\":{\"571\":1}}],[\"并使用\",{\"1\":{\"198\":1}}],[\"并用来生成输出文本\",{\"1\":{\"415\":1}}],[\"并实现\",{\"1\":{\"403\":1}}],[\"并判断支付状态\",{\"1\":{\"352\":1}}],[\"并将小键表示的拥有者设置为1\",{\"1\":{\"782\":1}}],[\"并将拥有者设置为1\",{\"1\":{\"782\":2}}],[\"并将旧版本标记为无效\",{\"1\":{\"476\":2}}],[\"并将数据存储在容器内的\",{\"1\":{\"317\":1}}],[\"并将新数组赋给\",{\"1\":{\"56\":1}}],[\"并创建datasource对象在ioc容器中\",{\"1\":{\"309\":1}}],[\"并添加对应的属性键值对\",{\"1\":{\"295\":1}}],[\"并被扫描加载\",{\"1\":{\"263\":1}}],[\"并对请求进行分发\",{\"1\":{\"244\":1}}],[\"并查询出用户对应的所有地址\",{\"1\":{\"214\":1}}],[\"并抛出一个interruptedexception异常\",{\"1\":{\"155\":1}}],[\"并清除中断标志\",{\"1\":{\"155\":1}}],[\"并返回一个结果\",{\"1\":{\"143\":1}}],[\"并返回一个新的completablefuture\",{\"1\":{\"121\":1,\"717\":1}}],[\"并返回true\",{\"1\":{\"143\":1}}],[\"并返回当前任务的返回值\",{\"1\":{\"122\":1,\"718\":1}}],[\"并在同一目录下\",{\"1\":{\"176\":1}}],[\"并在最后将子任务的结果进行合并\",{\"1\":{\"117\":1}}],[\"并在任务到达时重复使用这些线程\",{\"1\":{\"114\":1}}],[\"并提高系统的性能\",{\"1\":{\"114\":1}}],[\"并行\",{\"1\":{\"81\":1}}],[\"并发控制字段\",{\"1\":{\"682\":1}}],[\"并发请求时可能出现问题\",{\"1\":{\"567\":1}}],[\"并发执行\",{\"0\":{\"539\":1}}],[\"并发事务问题\",{\"0\":{\"473\":1}}],[\"并发问题\",{\"1\":{\"457\":1,\"771\":1}}],[\"并发包的类\",{\"1\":{\"545\":1}}],[\"并发包\",{\"1\":{\"155\":1}}],[\"并发包中的一个类\",{\"1\":{\"142\":1}}],[\"并发包中用于并行计算的框架\",{\"1\":{\"117\":1}}],[\"并发关键字\",{\"0\":{\"129\":1}}],[\"并发理论jmm\",{\"0\":{\"125\":1}}],[\"并发进来怎么分配的\",{\"1\":{\"115\":1,\"713\":1}}],[\"并发\",{\"1\":{\"81\":1}}],[\"并发与并行\",{\"1\":{\"81\":1}}],[\"并发编程中提供的一个强大的工具\",{\"1\":{\"143\":1}}],[\"并发编程中用于表示异步计算结果的接口\",{\"1\":{\"141\":1}}],[\"并发编程\",{\"0\":{\"81\":1}}],[\"并检查是否需要进行扩容\",{\"1\":{\"69\":1}}],[\"并检查链表长度是否达到了转换为红黑树的阈值\",{\"1\":{\"66\":1}}],[\"并调用\",{\"1\":{\"67\":1}}],[\"并允许指定初始容量和负载因子\",{\"1\":{\"64\":1}}],[\"并集怎么实现\",{\"1\":{\"47\":1}}],[\"并且还可以记录当前获取数据时间戳最小值\",{\"1\":{\"809\":1}}],[\"并且还要调用我们之前写过的代码\",{\"1\":{\"28\":1}}],[\"并且实现也相对简单\",{\"1\":{\"808\":1}}],[\"并且返回0\",{\"1\":{\"789\":1}}],[\"并且选举一个slave变成master\",{\"1\":{\"783\":1}}],[\"并且将value设置为空\",{\"1\":{\"752\":1}}],[\"并且将其计数器加1\",{\"1\":{\"152\":1}}],[\"并且放行\",{\"1\":{\"738\":1}}],[\"并且attrs\",{\"1\":{\"710\":1}}],[\"并且这些年龄段中m的平均薪资和f的平均薪资以及这个年龄段的总体平均薪资\",{\"1\":{\"685\":1}}],[\"并且这个队列通过\",{\"1\":{\"354\":1}}],[\"并且设置了size为10\",{\"1\":{\"685\":1}}],[\"并且接通后端\",{\"1\":{\"643\":1}}],[\"并且数部署\",{\"1\":{\"634\":1}}],[\"并且数据库足够\",{\"1\":{\"512\":1}}],[\"并且在admin目录下面\",{\"1\":{\"614\":1}}],[\"并且把标签分好组\",{\"1\":{\"509\":1}}],[\"并且结果没有发生变化\",{\"1\":{\"463\":1}}],[\"并且需要返回微信需要的特定信息\",{\"1\":{\"451\":1}}],[\"并且查询时能自动把json反序列化为java对象\",{\"1\":{\"399\":1}}],[\"并且能将java对象自动的序列化为json字符串\",{\"1\":{\"399\":1}}],[\"并且频繁的创建和销毁连接会有性能损耗\",{\"1\":{\"396\":1}}],[\"并且使用起来也非常简单\",{\"1\":{\"363\":1}}],[\"并且消息的requeue\",{\"1\":{\"361\":1}}],[\"并且不会丢失或重复消费消息\",{\"1\":{\"348\":1}}],[\"并且不需要进行平衡操作\",{\"1\":{\"47\":1}}],[\"并且会阻塞队列进程\",{\"1\":{\"347\":1}}],[\"并且入队完成持久化\",{\"1\":{\"343\":1}}],[\"并且入队成功\",{\"1\":{\"343\":1}}],[\"并且它将多个插入操作一起批量提交给数据库\",{\"1\":{\"211\":1}}],[\"并且保证了对布尔变量的操作是原子性的\",{\"1\":{\"155\":1}}],[\"并且提供了函数式编程的能\",{\"1\":{\"143\":1}}],[\"并且无法再接受新任务时\",{\"1\":{\"115\":1,\"713\":1}}],[\"并且正在等待获取其他线程持有的资源\",{\"1\":{\"104\":1}}],[\"并且检查等待条件是否满足\",{\"1\":{\"92\":1}}],[\"并且没有树化\",{\"1\":{\"71\":1}}],[\"并且判断是否已经树化\",{\"1\":{\"71\":1}}],[\"并且树的高度相对较小\",{\"1\":{\"47\":1}}],[\"并且加载顺序是先加载properties\",{\"1\":{\"47\":1}}],[\"并且彼此等待对方释放锁\",{\"1\":{\"47\":1}}],[\"并且每次调用会进行统计\",{\"1\":{\"5\":1}}],[\"两次输入的密码不一致\",{\"1\":{\"612\":1}}],[\"两个关系\",{\"1\":{\"557\":1}}],[\"两个人实时打电话\",{\"1\":{\"327\":1}}],[\"两者之间就可以创建持久性的连接\",{\"1\":{\"403\":1}}],[\"两任务组合完成一个\",{\"0\":{\"123\":1,\"719\":1}}],[\"两任务组合\",{\"0\":{\"122\":1,\"718\":1}}],[\"两张表的交集\",{\"1\":{\"47\":1}}],[\"两种用法\",{\"1\":{\"792\":1}}],[\"两种存储方式\",{\"1\":{\"741\":1}}],[\"两种读取模式\",{\"1\":{\"526\":1}}],[\"两种读方式\",{\"1\":{\"524\":1}}],[\"两种方式\",{\"1\":{\"512\":1}}],[\"两种方式对比\",{\"1\":{\"372\":1}}],[\"两种使用方式\",{\"1\":{\"29\":1}}],[\"两种配置方式\",{\"1\":{\"27\":1}}],[\"多张以\",{\"1\":{\"801\":1}}],[\"多消费\",{\"1\":{\"793\":1}}],[\"多级缓存\",{\"1\":{\"700\":1}}],[\"多字段匹配\",{\"1\":{\"685\":1}}],[\"多对多关系一般都有一张中间表\",{\"1\":{\"672\":1}}],[\"多环境\",{\"0\":{\"634\":1},\"1\":{\"634\":2}}],[\"多环境配置\",{\"0\":{\"178\":1}}],[\"多\",{\"1\":{\"564\":1}}],[\"多维护一个表\",{\"1\":{\"510\":1}}],[\"多表互不影响\",{\"1\":{\"478\":1}}],[\"多版本并发控制\",{\"1\":{\"475\":1,\"476\":2}}],[\"多次退款堆商家有损失\",{\"1\":{\"352\":1}}],[\"多次恢复会出现库存增加现象\",{\"1\":{\"352\":1}}],[\"多次重试失败后将消息投递到异常交换机\",{\"1\":{\"359\":1}}],[\"多次重试\",{\"1\":{\"342\":1}}],[\"多租户\",{\"1\":{\"218\":1}}],[\"多条件查询\",{\"0\":{\"184\":1}}],[\"多个线程相当于一起去扣减库存\",{\"1\":{\"766\":1}}],[\"多个线程可以同时读取其中的元素而不会发生并发修改异常\",{\"1\":{\"98\":1}}],[\"多个机器都要执行任务\",{\"1\":{\"540\":1}}],[\"多个标签都存在才搜索出来\",{\"1\":{\"512\":1}}],[\"多个事务并行操作某一行记录\",{\"1\":{\"476\":1}}],[\"多个消费者共同处理消息处理\",{\"1\":{\"333\":1}}],[\"多个参数\",{\"1\":{\"262\":1}}],[\"多个文件总大小\",{\"1\":{\"238\":1}}],[\"多个进程或线程同时请求同一资源\",{\"1\":{\"153\":1}}],[\"多任务组合\",{\"0\":{\"124\":1,\"720\":1}}],[\"多余的空闲线程在被终止之前等待新任务的最长时间\",{\"1\":{\"115\":1,\"713\":1}}],[\"多态除开重载\",{\"1\":{\"47\":1}}],[\"多态在java里面怎么做的\",{\"1\":{\"47\":1}}],[\"多线程并发下很可能出现\",{\"1\":{\"158\":1}}],[\"多线程锁\",{\"0\":{\"101\":1,\"144\":1}}],[\"多线程池是如何创建的\",{\"1\":{\"47\":1}}],[\"多线程使用\",{\"1\":{\"47\":1}}],[\"选项来指定其他内存淘汰策略\",{\"1\":{\"749\":1}}],[\"选择三级分类时\",{\"1\":{\"670\":1}}],[\"选择要生成的数据库的表\",{\"1\":{\"598\":1}}],[\"选择umi版本为\",{\"1\":{\"584\":1}}],[\"选择umi4\",{\"1\":{\"12\":1}}],[\"选择第一种\",{\"1\":{\"510\":1}}],[\"选择库\",{\"1\":{\"395\":1,\"396\":1}}],[\"选课记录表里面\",{\"1\":{\"47\":1}}],[\"打印etag\",{\"1\":{\"665\":2}}],[\"打印日志\",{\"1\":{\"27\":1}}],[\"打开\",{\"1\":{\"379\":1}}],[\"打包\",{\"1\":{\"47\":1}}],[\"敏感词过滤是怎么实现的\",{\"1\":{\"47\":1}}],[\"四川空间座标信息科技有限公司\",{\"1\":{\"47\":2}}],[\"介绍\",{\"1\":{\"499\":1,\"666\":1,\"667\":1}}],[\"介绍索引\",{\"1\":{\"47\":1}}],[\"介绍一下自己的项目\",{\"1\":{\"47\":1}}],[\"可用于实现乐观锁\",{\"1\":{\"769\":1}}],[\"可用性和分区容忍性\",{\"1\":{\"377\":1}}],[\"可用性\",{\"1\":{\"327\":1}}],[\"可视化检索数据\",{\"1\":{\"681\":1}}],[\"可视化界面\",{\"1\":{\"535\":1}}],[\"可置空此项\",{\"1\":{\"665\":1}}],[\"可读性差\",{\"1\":{\"339\":1,\"398\":1}}],[\"可靠的消息\",{\"1\":{\"332\":1}}],[\"可选值列表\",{\"1\":{\"670\":1}}],[\"可选值为单例singloton\",{\"1\":{\"272\":1}}],[\"可选属性\",{\"1\":{\"226\":1}}],[\"可选的方法有\",{\"1\":{\"209\":1}}],[\"可改变返回值\",{\"1\":{\"120\":1,\"716\":1}}],[\"可处理异常\",{\"1\":{\"120\":1,\"716\":1}}],[\"可对结果做最后的处理\",{\"1\":{\"120\":1,\"716\":1}}],[\"可重入\",{\"1\":{\"781\":1}}],[\"可重入锁是通过在redis上使用特定的数据结构和lua脚本来实现的\",{\"1\":{\"782\":1}}],[\"可重入锁是指同一个线程在持有锁的情况下\",{\"1\":{\"103\":1}}],[\"可重入锁\",{\"0\":{\"103\":1,\"152\":1}}],[\"可重入性\",{\"1\":{\"91\":1}}],[\"可中断性\",{\"1\":{\"91\":1}}],[\"可见性问题通常涉及到缓存和主内存之间的数据同步\",{\"1\":{\"158\":1}}],[\"可见性指的是当一个线程修改了共享变量的值时\",{\"1\":{\"158\":1}}],[\"可见性和有序性展开的\",{\"1\":{\"157\":2}}],[\"可见性\",{\"1\":{\"91\":1,\"134\":1,\"158\":1,\"160\":1}}],[\"可能起到反作用\",{\"1\":{\"808\":1}}],[\"可能造成短期的不一致\",{\"1\":{\"752\":1}}],[\"可能需要跟踪锁的状态\",{\"1\":{\"782\":1}}],[\"可能需要考虑创建适当的索引\",{\"1\":{\"486\":1}}],[\"可能需要拆分链表\",{\"1\":{\"71\":1}}],[\"可能的值包括\",{\"1\":{\"486\":1}}],[\"可能是域名里面有\",{\"1\":{\"450\":1}}],[\"可能是未支付\",{\"1\":{\"355\":1}}],[\"可能出现数据丢失\",{\"1\":{\"363\":1}}],[\"可能对指令进行重排序\",{\"1\":{\"158\":1}}],[\"可能抛出\",{\"1\":{\"143\":1}}],[\"可能会出现错误\",{\"1\":{\"561\":1}}],[\"可能会很耗费性能\",{\"1\":{\"559\":1}}],[\"可能会被丢弃\",{\"1\":{\"362\":1}}],[\"可能会一直在循环中等待\",{\"1\":{\"132\":1}}],[\"可能会创建大量的线程\",{\"1\":{\"115\":1}}],[\"可能会导致当前方法事务还没有提交\",{\"1\":{\"770\":1}}],[\"可能会导致性能瓶颈\",{\"1\":{\"767\":1}}],[\"可能会导致数据不一致或其他问题\",{\"1\":{\"130\":1}}],[\"可能会导致并发性能下降\",{\"1\":{\"110\":1}}],[\"可能会导致不必要的数据传输和资源浪费\",{\"1\":{\"63\":1}}],[\"可能会形成链表或红黑树结构\",{\"1\":{\"69\":1}}],[\"可能很大\",{\"1\":{\"63\":1}}],[\"可能因为是应届生所以问的都比较简单\",{\"1\":{\"47\":1}}],[\"可以进行范围查询\",{\"1\":{\"809\":1}}],[\"可以实现分页查询\",{\"1\":{\"809\":1}}],[\"可以阻塞读取\",{\"1\":{\"794\":1}}],[\"可以满足消息有序性\",{\"1\":{\"792\":1}}],[\"可以找到redissonredlock类\",{\"1\":{\"782\":1}}],[\"可以为每个键设置一个过期时间\",{\"1\":{\"749\":1}}],[\"可以为空\",{\"1\":{\"209\":4}}],[\"可以是\",{\"1\":{\"738\":1}}],[\"可以是秒\",{\"1\":{\"115\":1,\"713\":1}}],[\"可以添加到nacos中\",{\"1\":{\"733\":1}}],[\"可以添加主键返回\",{\"1\":{\"188\":1}}],[\"可以采取以下措施\",{\"1\":{\"701\":1}}],[\"可以采取以下一些措施\",{\"1\":{\"700\":1}}],[\"可以考虑使用永不过期或较长时间的过期时间\",{\"1\":{\"700\":1}}],[\"可以考虑添加一些随机因素\",{\"1\":{\"700\":1}}],[\"可以考虑在缓存层面添加限制\",{\"1\":{\"699\":1}}],[\"可以考虑以下方法\",{\"1\":{\"699\":1}}],[\"可以新增可以修改\",{\"1\":{\"682\":1}}],[\"可以新增一个临时表\",{\"1\":{\"486\":1}}],[\"可以定义一个或者多个类型\",{\"1\":{\"680\":1}}],[\"可以定义下面属性\",{\"1\":{\"241\":1}}],[\"可以主动配置value和delval\",{\"1\":{\"663\":1}}],[\"可以成功上传\",{\"1\":{\"665\":1}}],[\"可以成功解决问题\",{\"1\":{\"663\":1}}],[\"可以成为死信\",{\"1\":{\"361\":1}}],[\"可以将这个空值也存入缓存\",{\"1\":{\"699\":1}}],[\"可以将renrenfast里面的代码复制过来\",{\"1\":{\"655\":1}}],[\"可以将环境\",{\"1\":{\"642\":1}}],[\"可以先将逆向工程里的这个注释掉\",{\"1\":{\"655\":1}}],[\"可以发起队伍或者加入别人的队伍\",{\"1\":{\"556\":1}}],[\"可以发现\",{\"1\":{\"333\":1}}],[\"可以发现lambdaquery方法中除了可以构建条件\",{\"1\":{\"209\":1}}],[\"可以发现调用的start0是native\",{\"1\":{\"140\":1}}],[\"可以发现死锁\",{\"1\":{\"104\":1}}],[\"可以封装卡片组件\",{\"1\":{\"534\":1}}],[\"可以并发查询\",{\"1\":{\"512\":1}}],[\"可以正查反查\",{\"1\":{\"510\":1}}],[\"可以帮助你了解索引的效率和覆盖范围\",{\"1\":{\"486\":1}}],[\"可以帮助我们简化异步编程的复杂性\",{\"1\":{\"143\":1}}],[\"可以优化sql结构\",{\"1\":{\"486\":1}}],[\"可以确保锁不会因为拥有者的故障而永久丧失\",{\"1\":{\"782\":1}}],[\"可以确保即使发生虚假唤醒\",{\"1\":{\"92\":1}}],[\"可以确定查询是否使用了索引\",{\"1\":{\"485\":1}}],[\"可以认为当delete\",{\"1\":{\"475\":1}}],[\"可以详细说一下吗\",{\"1\":{\"472\":1}}],[\"可以针对于字段的特点\",{\"1\":{\"469\":1}}],[\"可以针对单个字段做crud\",{\"1\":{\"385\":1}}],[\"可以完全满足查询需求\",{\"1\":{\"467\":1}}],[\"可以有多个\",{\"1\":{\"466\":1}}],[\"可以存在多个\",{\"1\":{\"466\":1}}],[\"可以访问\",{\"1\":{\"451\":1}}],[\"可以基于score属性对元素排序\",{\"1\":{\"391\":1}}],[\"可以更好地处理大规模数据\",{\"1\":{\"377\":1}}],[\"可以让开发者像使用本地集合一样使用redis\",{\"1\":{\"550\":1}}],[\"可以让mysql解释执行查询的计划\",{\"1\":{\"485\":1}}],[\"可以让aof文件执行重写功能\",{\"1\":{\"372\":1}}],[\"可以让线程在任意位置阻塞\",{\"1\":{\"156\":1}}],[\"可以与spring\",{\"1\":{\"332\":1}}],[\"可以\",{\"1\":{\"317\":1}}],[\"可以做限流\",{\"1\":{\"704\":1}}],[\"可以做为云存储的解决方案用来保存海量的图片\",{\"1\":{\"316\":1}}],[\"可以做类似knife4j的效果\",{\"1\":{\"23\":1}}],[\"可以简单一点\",{\"1\":{\"247\":1}}],[\"可以简化配置0或1表示成功失败\",{\"1\":{\"226\":1}}],[\"可以简化这部分的书写\",{\"1\":{\"179\":1}}],[\"可以获取方法的名称\",{\"1\":{\"232\":1}}],[\"可以获取方法的相关信息\",{\"1\":{\"232\":1}}],[\"可以自己创建命名空间\",{\"1\":{\"660\":1}}],[\"可以自己定义工具进行转化\",{\"1\":{\"220\":1}}],[\"可以自动生成domain实体对象等\",{\"1\":{\"598\":1}}],[\"可以自动生成配置代码提示\",{\"1\":{\"18\":1}}],[\"可以自定义序列化方式\",{\"1\":{\"398\":1}}],[\"可以利用基于变量的getter方法和反射技术实现\",{\"1\":{\"206\":1}}],[\"可以配置多个environment\",{\"1\":{\"175\":1}}],[\"可以保证对布尔变量的读取和写入操作是原子的\",{\"1\":{\"155\":1}}],[\"可以处理正常结果和异常结果\",{\"1\":{\"143\":1}}],[\"可以看做是一个value为null的hashmap\",{\"1\":{\"389\":1}}],[\"可以看做是一个双向链表结构\",{\"1\":{\"387\":1}}],[\"可以看到此时7001成为了master\",{\"1\":{\"373\":1}}],[\"可以看到如下锁的获取和释放\",{\"1\":{\"147\":1}}],[\"可以看到\",{\"1\":{\"142\":1}}],[\"可以看出要想理解reentrantlock关键核心在于对队列同步器abstractqueuedsynchronizer\",{\"1\":{\"135\":1}}],[\"可以看出\",{\"1\":{\"53\":1}}],[\"可以限制线程的数量\",{\"1\":{\"114\":1}}],[\"可以防止因为大量的线程创建导致系统资源不足而崩溃\",{\"1\":{\"114\":1}}],[\"可以事先创建一定数量的线程\",{\"1\":{\"114\":1}}],[\"可以设置一个较短的缓存过期时间\",{\"1\":{\"701\":1}}],[\"可以设置超时时间\",{\"1\":{\"112\":1}}],[\"可以设置容量\",{\"1\":{\"112\":1}}],[\"可以在启动时启动环境变量\",{\"1\":{\"636\":1}}],[\"可以在url里面添加\",{\"1\":{\"636\":1}}],[\"可以在配置文件后添加对应的环境名称后缀来区分开发环境和生产环境\",{\"1\":{\"635\":1}}],[\"可以在配置文件中进行设置\",{\"1\":{\"238\":1}}],[\"可以在mybatis\",{\"1\":{\"605\":1}}],[\"可以在客户端连接的时候加上一个参数rewritebatchedstatements\",{\"1\":{\"211\":1}}],[\"可以在别的线程中调用\",{\"1\":{\"155\":1}}],[\"可以在任务执行完成之前进行其他操作\",{\"1\":{\"141\":1}}],[\"可以在jvm\",{\"1\":{\"140\":1}}],[\"可以在多线程环境下安全地进行数据传递\",{\"1\":{\"112\":1}}],[\"可以在后续的操作中动态调整\",{\"1\":{\"64\":1}}],[\"可以重用\",{\"1\":{\"108\":1}}],[\"可以重新开始新一轮的同步\",{\"1\":{\"108\":1}}],[\"可以调用\",{\"1\":{\"105\":1}}],[\"可以通过配置\",{\"1\":{\"749\":1}}],[\"可以通过一定的策略\",{\"1\":{\"701\":1}}],[\"可以通过预加载缓存来将热门数据加载到缓存中\",{\"1\":{\"701\":1}}],[\"可以通过预热缓存来提前将热门数据加载到缓存中\",{\"1\":{\"699\":1}}],[\"可以通过某个关键词同时对名称和描述查询\",{\"1\":{\"559\":1}}],[\"可以通过并发进一步优化\",{\"1\":{\"512\":1}}],[\"可以通过该字段查看操作之间的父子关系\",{\"1\":{\"486\":1}}],[\"可以通过设置slow\",{\"1\":{\"485\":1}}],[\"可以通过exchangebuilder来简化这个过程\",{\"1\":{\"338\":1}}],[\"可以通过回调的方式处理计算结果\",{\"1\":{\"143\":1}}],[\"可以通过构造函数来指定初始的许可证数量\",{\"1\":{\"109\":1}}],[\"可以通过构造函数的参数来指定是公平锁还是非公平锁\",{\"1\":{\"102\":1}}],[\"可以通过\",{\"1\":{\"105\":2,\"698\":1}}],[\"可以接受一个\",{\"1\":{\"105\":1}}],[\"可以多次进入\",{\"1\":{\"103\":1}}],[\"可以选择多个值\",{\"1\":{\"670\":1}}],[\"可以选择\",{\"1\":{\"381\":1}}],[\"可以选择使用公平锁或非公平锁\",{\"1\":{\"91\":1}}],[\"可以选择在构造\",{\"1\":{\"91\":1}}],[\"可以用uuid表示\",{\"1\":{\"778\":1}}],[\"可以用缓存\",{\"1\":{\"510\":1}}],[\"可以用于分布式限流\",{\"1\":{\"704\":1}}],[\"可以用于执行定时任务\",{\"1\":{\"115\":1,\"713\":1}}],[\"可以用于下一轮同步\",{\"1\":{\"108\":1}}],[\"可以用于在不同线程之间进行等待和通知\",{\"1\":{\"91\":2}}],[\"可以用java代码来写逻辑\",{\"1\":{\"27\":1}}],[\"可以直接使用redis来解决session共享的问题\",{\"1\":{\"741\":1}}],[\"可以直接用gulimall\",{\"1\":{\"691\":1}}],[\"可以直接复制过来\",{\"1\":{\"664\":1}}],[\"可以直接放在dist\",{\"1\":{\"646\":1}}],[\"可以直接访问页面\",{\"1\":{\"319\":1}}],[\"可以直接将键值对存储在这里\",{\"1\":{\"69\":1}}],[\"可以直接在application\",{\"1\":{\"18\":1}}],[\"可以使用69年\",{\"1\":{\"763\":1}}],[\"可以使用互斥锁来保证只有一个线程或请求可以进行缓存的查询操作\",{\"1\":{\"701\":1}}],[\"可以使用分布式锁来保证只有一个线程或节点可以重新加载缓存\",{\"1\":{\"700\":1,\"701\":1}}],[\"可以使用直接内存来提高i\",{\"1\":{\"694\":1}}],[\"可以使用以下命令来重新加载nginx\",{\"1\":{\"646\":1}}],[\"可以使用serve服务器\",{\"1\":{\"635\":1}}],[\"可以使用commons\",{\"1\":{\"599\":1}}],[\"可以使用choose标签\",{\"1\":{\"186\":1}}],[\"可以使用explain或者desc明亮来获取mysql执行的select语句信息\",{\"1\":{\"486\":1}}],[\"可以使用覆盖索引解决\",{\"1\":{\"468\":1}}],[\"可以使用百度提供的坐标提取系统\",{\"1\":{\"439\":1}}],[\"可以使用命令\",{\"1\":{\"369\":1}}],[\"可以使用下面方式解耦合\",{\"1\":{\"286\":1}}],[\"可以使用下面两种方式进行\",{\"1\":{\"180\":1}}],[\"可以使用where语句解决\",{\"1\":{\"185\":1}}],[\"可以使用if条件判断\",{\"1\":{\"185\":1}}],[\"可以使用$替换\",{\"1\":{\"182\":1}}],[\"可以使用起别名的方式来解决这个问题\",{\"1\":{\"180\":1}}],[\"可以使用mapper代理的方式修改\",{\"1\":{\"176\":1}}],[\"可以使用带有超时参数的\",{\"1\":{\"142\":1}}],[\"可以使用\",{\"1\":{\"114\":1,\"158\":1,\"182\":1,\"254\":1,\"749\":2,\"776\":1}}],[\"可以使用非公平锁\",{\"1\":{\"102\":1}}],[\"可以使用公平锁\",{\"1\":{\"102\":1}}],[\"可以使用toarray方法\",{\"1\":{\"58\":1}}],[\"可以使用aslist方法\",{\"1\":{\"58\":1}}],[\"给blog添加字段\",{\"1\":{\"803\":1}}],[\"给blog类中添加一个islike字段\",{\"1\":{\"803\":1}}],[\"给业务添加多级缓存\",{\"1\":{\"753\":1}}],[\"给缓存业务添加降级限流策略\",{\"1\":{\"753\":1}}],[\"给缓存中放json字符串\",{\"1\":{\"698\":1}}],[\"给不同的key的ttl添加随机值\",{\"1\":{\"753\":1}}],[\"给字段加索引\",{\"1\":{\"696\":1}}],[\"给es中保存这些数据\",{\"1\":{\"688\":1}}],[\"给es中建立索引\",{\"1\":{\"688\":1}}],[\"给这个字段设置\",{\"1\":{\"670\":1}}],[\"给实体类增加组\",{\"1\":{\"667\":1}}],[\"给categoryentity类加上tablelogic字段\",{\"1\":{\"663\":1}}],[\"给对象补充一些信息\",{\"1\":{\"622\":1}}],[\"给属性提供setter方法\",{\"1\":{\"270\":1}}],[\"给前端的是这个值\",{\"1\":{\"216\":1}}],[\"给每段环境起名\",{\"1\":{\"178\":1}}],[\"给明星创建的代理\",{\"1\":{\"165\":1}}],[\"给一个key设置有效期\",{\"1\":{\"393\":1}}],[\"给一个明星对象创建代理\",{\"1\":{\"165\":1}}],[\"给一段代码让你改写成线程安全的代码块\",{\"1\":{\"47\":1}}],[\"给用户分配或用户自主申请接口调用次数\",{\"1\":{\"25\":1}}],[\"什么都需要\",{\"1\":{\"637\":1}}],[\"什么情况下索引会失效\",{\"1\":{\"470\":1}}],[\"什么时候用\",{\"1\":{\"47\":1}}],[\"什么时候用arraylist\",{\"1\":{\"47\":1}}],[\"什么难题可以体现自己的技术比较深\",{\"1\":{\"47\":1}}],[\"什么是消息队列\",{\"1\":{\"791\":1}}],[\"什么是接口文档\",{\"1\":{\"521\":1}}],[\"什么是聚簇索引什么是非聚簇索引\",{\"1\":{\"466\":1}}],[\"什么是反射\",{\"1\":{\"166\":1}}],[\"什么是中断机制\",{\"1\":{\"155\":1}}],[\"什么是jsp\",{\"1\":{\"47\":1}}],[\"什么是javaweb\",{\"1\":{\"47\":1}}],[\"什么是javascript\",{\"1\":{\"47\":1}}],[\"什么是router\",{\"1\":{\"47\":1}}],[\"什么是tomcat\",{\"1\":{\"47\":1}}],[\"什么是ioc\",{\"1\":{\"47\":1}}],[\"什么是范式\",{\"1\":{\"47\":1}}],[\"什么是外键\",{\"1\":{\"47\":1}}],[\"什么是主键\",{\"1\":{\"47\":1}}],[\"问简历上的项目经历用了哪些技术栈解决了\",{\"1\":{\"47\":1}}],[\"问题的原因在于当前方法被spring的事务控制\",{\"1\":{\"770\":1}}],[\"问题解决\",{\"1\":{\"703\":1}}],[\"问题是还没执行到设置过期时间的时候\",{\"1\":{\"703\":1}}],[\"问题如下\",{\"1\":{\"339\":1}}],[\"问题\",{\"1\":{\"28\":1,\"93\":1,\"142\":1,\"156\":1,\"245\":1,\"327\":1,\"340\":1,\"353\":1,\"468\":1,\"473\":1,\"478\":1,\"544\":1,\"545\":3,\"549\":1,\"702\":1,\"703\":1,\"758\":4}}],[\"成本最低\",{\"1\":{\"545\":1}}],[\"成本太大\",{\"1\":{\"545\":1}}],[\"成为开发者成功\",{\"1\":{\"452\":1}}],[\"成功返回true\",{\"1\":{\"776\":1}}],[\"成功登录\",{\"1\":{\"655\":1}}],[\"成功部署\",{\"1\":{\"643\":1}}],[\"成功完成对接\",{\"1\":{\"630\":1}}],[\"成功页面\",{\"1\":{\"612\":1}}],[\"成功测试登录\",{\"1\":{\"611\":1}}],[\"成功运行\",{\"1\":{\"584\":1}}],[\"成功运行的命令如下\",{\"1\":{\"317\":1}}],[\"成功加入到redis中\",{\"1\":{\"533\":1}}],[\"成功\",{\"1\":{\"496\":1,\"522\":1,\"612\":1,\"639\":1,\"756\":1,\"758\":1,\"796\":2}}],[\"成功发送后即刻删除表中的数据\",{\"1\":{\"359\":1}}],[\"成功处理消息\",{\"1\":{\"349\":1}}],[\"成功ac然后问思路\",{\"1\":{\"47\":1}}],[\"成员方法和构造方法的信息进行编程访问\",{\"1\":{\"166\":1}}],[\"成员变量名与数据库一致\",{\"1\":{\"200\":1}}],[\"成员变量名与数据库字段名不一致\",{\"1\":{\"200\":1}}],[\"成员变量是以isxxx命名\",{\"1\":{\"200\":1}}],[\"成员变量\",{\"0\":{\"53\":1,\"63\":1},\"1\":{\"52\":1}}],[\"成都信通网易医疗科技\",{\"1\":{\"47\":1}}],[\"没权限之类的\",{\"1\":{\"630\":1}}],[\"没有点赞\",{\"1\":{\"803\":1,\"804\":1}}],[\"没有购买资格\",{\"1\":{\"789\":1,\"790\":1,\"796\":1}}],[\"没有命中\",{\"1\":{\"756\":1,\"758\":1}}],[\"没有多余key\",{\"1\":{\"752\":1}}],[\"没有权限\",{\"1\":{\"625\":1}}],[\"没有对应的数据行\",{\"1\":{\"473\":1}}],[\"没有对应的bean对象\",{\"1\":{\"283\":1}}],[\"没有认证弄不了\",{\"1\":{\"458\":1}}],[\"没有使用答案提示\",{\"1\":{\"409\":1}}],[\"没有异常则返回ack\",{\"1\":{\"359\":1}}],[\"没有剩余延迟时间了\",{\"1\":{\"355\":1}}],[\"没有传入自定义线程池\",{\"1\":{\"143\":1}}],[\"没有返回值\",{\"1\":{\"122\":1,\"143\":1,\"718\":1}}],[\"没有hash冲突的节点\",{\"1\":{\"71\":1}}],[\"没有任何数据\",{\"1\":{\"71\":2}}],[\"没有操作数据库的包\",{\"1\":{\"28\":1}}],[\"没答上\",{\"1\":{\"47\":1}}],[\"没记到英文字母\",{\"1\":{\"47\":1}}],[\"线上环境\",{\"1\":{\"635\":1}}],[\"线程标识通过argv\",{\"1\":{\"782\":1}}],[\"线程在读取数据时不会加锁\",{\"1\":{\"768\":1}}],[\"线程在访问资源前必须先获得许可证\",{\"1\":{\"109\":1}}],[\"线程读取过程中不需要等待\",{\"1\":{\"757\":1}}],[\"线程去进行\",{\"1\":{\"756\":1}}],[\"线程2进入到锁的内部执行逻辑\",{\"1\":{\"778\":1}}],[\"线程2来尝试获得锁\",{\"1\":{\"778\":1}}],[\"线程2获得到锁\",{\"1\":{\"755\":1}}],[\"线程2在执行过程中\",{\"1\":{\"755\":1}}],[\"线程4同时过来访问当前这个方法\",{\"1\":{\"754\":1}}],[\"线程3也直接返回数据\",{\"1\":{\"756\":1}}],[\"线程3\",{\"1\":{\"754\":1}}],[\"线程数50\",{\"1\":{\"696\":1}}],[\"线程终止规则\",{\"1\":{\"159\":1}}],[\"线程启动规则\",{\"1\":{\"159\":1}}],[\"线程对共享变量所有的操作都必须先在线程自己的工作内存中进行后写回主内存\",{\"1\":{\"158\":1}}],[\"线程对变量的所有操作\",{\"1\":{\"158\":1}}],[\"线程自己的工作内存保存了该线程使用到的变量的主内存副本拷贝\",{\"1\":{\"158\":1}}],[\"线程阻塞需要消耗凭证\",{\"1\":{\"156\":1}}],[\"线程等待和唤醒\",{\"1\":{\"156\":1}}],[\"线程可以检查中断标志并相应地终止执行\",{\"1\":{\"155\":1}}],[\"线程中断\",{\"0\":{\"155\":1}}],[\"线程基础知识复习\",{\"0\":{\"140\":1}}],[\"线程就不会出现阻塞停顿的状态\",{\"1\":{\"131\":1}}],[\"线程就会被阻塞\",{\"1\":{\"91\":1}}],[\"线程获取锁是一种悲观锁策略\",{\"1\":{\"131\":1}}],[\"线程获取锁是基于竞争的\",{\"1\":{\"102\":1}}],[\"线程之间如何完成同步\",{\"1\":{\"126\":1}}],[\"线程之间如何通信\",{\"1\":{\"126\":1}}],[\"线程串行化方法\",{\"0\":{\"121\":1,\"717\":1}}],[\"线程工厂\",{\"1\":{\"115\":1,\"713\":1}}],[\"线程空闲时间\",{\"1\":{\"115\":1,\"713\":1}}],[\"线程的创建和销毁是相对昂贵的操作\",{\"1\":{\"114\":1}}],[\"线程的基本操作\",{\"0\":{\"85\":1}}],[\"线程池\",{\"0\":{\"713\":1},\"1\":{\"756\":1,\"758\":1}}],[\"线程池不允许使用\",{\"1\":{\"115\":1}}],[\"线程池中允许存在的最大线程数\",{\"1\":{\"115\":1,\"713\":1}}],[\"线程池中始终保持存活的线程数\",{\"1\":{\"115\":1,\"713\":1}}],[\"线程池构造器\",{\"1\":{\"115\":1,\"713\":1}}],[\"线程池创建\",{\"0\":{\"115\":1}}],[\"线程池的大小可动态调整\",{\"1\":{\"115\":1,\"713\":1}}],[\"线程池的生命周期包括\",{\"1\":{\"114\":1}}],[\"线程池的生命周期\",{\"1\":{\"114\":1}}],[\"线程池的创建\",{\"1\":{\"114\":1}}],[\"线程池的主要目标是降低线程创建和销毁的开销\",{\"1\":{\"114\":1}}],[\"线程池可以根据系统的负载情况动态地调整线程数量\",{\"1\":{\"114\":1}}],[\"线程池管理器\",{\"1\":{\"114\":1}}],[\"线程池是一种管理和复用线程的机制\",{\"1\":{\"114\":1}}],[\"线程池概述\",{\"0\":{\"114\":1}}],[\"线程不能强制占有其他线程已经持有的资源\",{\"1\":{\"104\":1}}],[\"线程不安全\",{\"1\":{\"99\":1,\"100\":1}}],[\"线程安全\",{\"1\":{\"98\":1,\"112\":1}}],[\"线程打印\",{\"1\":{\"93\":3}}],[\"线程间变量值的传递需要通过主内存来进行\",{\"1\":{\"158\":1}}],[\"线程间变量值的传递均需要通过主内存来完成\",{\"1\":{\"158\":1}}],[\"线程间定制化通信\",{\"0\":{\"93\":1}}],[\"线程间通信\",{\"0\":{\"92\":1}}],[\"线程也会重新检查条件并决定是否继续等待\",{\"1\":{\"92\":1}}],[\"线程被唤醒\",{\"1\":{\"92\":1}}],[\"线程依然处于runnable状态\",{\"1\":{\"86\":1}}],[\"线程进入到terminated状态\",{\"1\":{\"84\":1}}],[\"线程进入到runable状态\",{\"1\":{\"84\":1}}],[\"线程运行结束后\",{\"1\":{\"84\":1}}],[\"线程会进入到blocked阻塞状态\",{\"1\":{\"84\":1}}],[\"线程会切换到runable的状态\",{\"1\":{\"84\":1}}],[\"线程创建之后调用start\",{\"1\":{\"84\":1}}],[\"线程创建的三种方式\",{\"0\":{\"83\":1}}],[\"线程1现在持有锁之后\",{\"1\":{\"779\":1}}],[\"线程1卡顿\",{\"1\":{\"778\":1}}],[\"线程1反应过来\",{\"1\":{\"778\":1}}],[\"线程1再执行更新动作时\",{\"1\":{\"750\":1}}],[\"线程1\",{\"1\":{\"83\":1}}],[\"线程状态的转换\",{\"0\":{\"84\":1}}],[\"线程状态\",{\"1\":{\"81\":1}}],[\"线程本身不拥有系统资源\",{\"1\":{\"81\":1}}],[\"线程是进程中的一个实体\",{\"1\":{\"81\":1}}],[\"线程是属于进程的\",{\"1\":{\"81\":1}}],[\"线程\",{\"0\":{\"82\":1},\"1\":{\"81\":1}}],[\"线程怎么创建的\",{\"1\":{\"47\":1}}],[\"线程存活时间\",{\"1\":{\"47\":1}}],[\"线科安全集合\",{\"1\":{\"47\":1}}],[\"深浅拷贝\",{\"1\":{\"47\":1}}],[\"数学建模算法与应用\",{\"1\":{\"824\":1}}],[\"数字标题\",{\"1\":{\"430\":1}}],[\"数字默认3位会有一个\",{\"1\":{\"422\":1}}],[\"数字\",{\"1\":{\"143\":1}}],[\"数组参数传递\",{\"1\":{\"253\":1}}],[\"数组参数\",{\"1\":{\"253\":1}}],[\"数组类型参数\",{\"0\":{\"253\":1}}],[\"数组长度必须是2的n次幂\",{\"1\":{\"72\":1}}],[\"数组长度大于0\",{\"1\":{\"67\":1}}],[\"数组未初始化的情况\",{\"1\":{\"71\":1}}],[\"数组不受影响\",{\"1\":{\"58\":1}}],[\"数组操作的时间复杂度分析\",{\"1\":{\"51\":1}}],[\"数组\",{\"0\":{\"51\":1},\"1\":{\"190\":1}}],[\"数组是一种用连续的内存空间存储相同数据类型数据的线性数据结构\",{\"1\":{\"50\":1}}],[\"数组转list\",{\"1\":{\"47\":1}}],[\"数据安全性有保证\",{\"1\":{\"792\":1}}],[\"数据保存为json格式\",{\"1\":{\"706\":1}}],[\"数据过期下一次查询触发主动更新\",{\"1\":{\"705\":1}}],[\"数据迁移\",{\"1\":{\"686\":1}}],[\"数据校验出现异常\",{\"1\":{\"666\":1}}],[\"数据成功上传\",{\"1\":{\"665\":1}}],[\"数据发送给阿里云时存在跨域问题\",{\"1\":{\"665\":1}}],[\"数据量可控\",{\"1\":{\"535\":1}}],[\"数据量大的时候卡顿\",{\"1\":{\"526\":1}}],[\"数据操纵语言\",{\"1\":{\"477\":2}}],[\"数据定义语言\",{\"1\":{\"477\":2}}],[\"数据越安全\",{\"1\":{\"474\":1}}],[\"数据与索引分开存储\",{\"1\":{\"466\":1}}],[\"数据与索引放到一块\",{\"1\":{\"466\":1}}],[\"数据的展示\",{\"1\":{\"418\":2}}],[\"数据存储在结构化表格中\",{\"1\":{\"377\":1}}],[\"数据之间的关系通过外键建立\",{\"1\":{\"377\":1}}],[\"数据模型\",{\"1\":{\"377\":1,\"423\":1}}],[\"数据模型和适用场景等方面存在显著的区别\",{\"1\":{\"377\":1}}],[\"数据持久化\",{\"0\":{\"346\":1}}],[\"数据体积过大\",{\"1\":{\"339\":1}}],[\"数据隔离\",{\"0\":{\"330\":1}}],[\"数据层\",{\"1\":{\"267\":1,\"299\":1}}],[\"数据转换\",{\"1\":{\"220\":2}}],[\"数据结构里面那一种应对查找\",{\"1\":{\"47\":1}}],[\"数据结构在java里面对应的实现和差别\",{\"1\":{\"47\":1}}],[\"数据库key\",{\"1\":{\"789\":1,\"796\":1}}],[\"数据库与缓存的问题交由系统本身去处理\",{\"1\":{\"750\":1}}],[\"数据库拆分\",{\"0\":{\"729\":1}}],[\"数据库导入\",{\"0\":{\"654\":1}}],[\"数据库\",{\"1\":{\"545\":1,\"817\":1}}],[\"数据库查询慢\",{\"1\":{\"540\":1}}],[\"数据库新增一列个人简介\",{\"1\":{\"531\":1}}],[\"数据库的数据是会发生变化的\",{\"1\":{\"750\":1}}],[\"数据库的写入\",{\"1\":{\"487\":1}}],[\"数据库的user表的info字段是json格式\",{\"1\":{\"217\":1}}],[\"数据库中不存在\",{\"1\":{\"758\":1}}],[\"数据库中没有数据\",{\"1\":{\"747\":2,\"751\":1,\"752\":1,\"755\":1}}],[\"数据库中的数据被拆分成多个数据库实例和表集合\",{\"1\":{\"478\":1}}],[\"数据库中查是否已分配给用户秘钥\",{\"1\":{\"29\":1}}],[\"数据库仍然需要通过主键或者聚簇索引回到数据表中进行进一步的查询\",{\"1\":{\"466\":1}}],[\"数据库系统提供的隔离机制\",{\"1\":{\"472\":1}}],[\"数据库系统还维护着满足特定查找算法的数据结构\",{\"1\":{\"465\":1}}],[\"数据库系统根据优化器选择的执行计划执行sql查询\",{\"1\":{\"463\":1}}],[\"数据库系统根据查询的成本考虑选择最优的执行计划\",{\"1\":{\"463\":1}}],[\"数据库系统通过解析器对sql查询语句进行词法分析和语法分析\",{\"1\":{\"463\":1}}],[\"数据库锁\",{\"1\":{\"360\":1}}],[\"数据库对应\",{\"1\":{\"200\":1}}],[\"数据库映射问题\",{\"0\":{\"180\":1}}],[\"数据库连接信息\",{\"1\":{\"175\":2,\"178\":2}}],[\"数据库两表查询语法\",{\"1\":{\"47\":1}}],[\"数据库如何优化\",{\"1\":{\"47\":1}}],[\"数据库面试题\",{\"1\":{\"47\":1}}],[\"数据库可能会发生死锁\",{\"1\":{\"47\":1}}],[\"数据库是否会死锁\",{\"1\":{\"47\":1}}],[\"数据库创建序列可以使用create\",{\"1\":{\"47\":1}}],[\"数据库创建序列和增加表列数\",{\"1\":{\"47\":1}}],[\"数据库加索引可以通过create\",{\"1\":{\"47\":1}}],[\"数据库怎么加索引\",{\"1\":{\"47\":1}}],[\"数据库设计\",{\"0\":{\"9\":1,\"508\":1,\"596\":1,\"670\":1},\"1\":{\"557\":1}}],[\"数据\",{\"1\":{\"5\":1,\"465\":1}}],[\"那下标就为0\",{\"1\":{\"71\":1}}],[\"那么我们应该把这些数据推送给用户\",{\"1\":{\"808\":1}}],[\"那么我们就能锁住线程\",{\"1\":{\"775\":1}}],[\"那么他去获得锁的时候\",{\"1\":{\"783\":1}}],[\"那么他们就会同一时刻来访问查询缓存\",{\"1\":{\"754\":1}}],[\"那么锁将自动过期\",{\"1\":{\"782\":1}}],[\"那么state就会+1\",{\"1\":{\"782\":1}}],[\"那么state=1\",{\"1\":{\"782\":1}}],[\"那么state=0\",{\"1\":{\"782\":1}}],[\"那么此时就会拉取海量的内容\",{\"1\":{\"808\":1}}],[\"那么此时就是安全的\",{\"1\":{\"769\":1}}],[\"那么此时线程2进来\",{\"1\":{\"779\":1}}],[\"那么其他线程会进行阻塞\",{\"1\":{\"756\":1}}],[\"那么线程2就可以进行到休眠\",{\"1\":{\"755\":1}}],[\"那么线程1就会一个人去执行逻辑\",{\"1\":{\"755\":1}}],[\"那么线程将立即退出被阻塞状态\",{\"1\":{\"155\":1}}],[\"那么这些线程都不能从缓存中查询到数据\",{\"1\":{\"754\":1}}],[\"那么服务列表里没有他\",{\"1\":{\"412\":1}}],[\"那么队列中的死信就会投递到这个交换机中\",{\"1\":{\"354\":1}}],[\"那么交易服务就必须自己主动去查询支付状态\",{\"1\":{\"352\":1}}],[\"那么消息requeue就会无限循环\",{\"1\":{\"350\":1}}],[\"那么消息会丢失\",{\"1\":{\"334\":1}}],[\"那么对应bookdao接口如果有多个实现类\",{\"1\":{\"304\":1}}],[\"那么业务层的代码也需要跟着改变\",{\"1\":{\"267\":1}}],[\"那么到底是该让springmvc加载还是让spring加载呢\",{\"1\":{\"245\":1}}],[\"那么当前事务会失败\",{\"1\":{\"210\":1}}],[\"那么拼接后的sql语句就是\",{\"1\":{\"190\":1}}],[\"那么resulttype就可以简化了\",{\"1\":{\"179\":1}}],[\"那么在redis中也能找到这个数据就不会进入到缓存了布隆过滤\",{\"1\":{\"752\":1}}],[\"那么在执行的顺序上\",{\"1\":{\"159\":1}}],[\"那么在序列化和反序列化过程中\",{\"1\":{\"63\":1}}],[\"那么也会报上面的错误\",{\"1\":{\"156\":1}}],[\"那么会将该线程的中断标志设置为tue\",{\"1\":{\"155\":1}}],[\"那么jva虚拟机可以将其计数器加1\",{\"1\":{\"152\":1}}],[\"那么说明它没有被其他线程所持有\",{\"1\":{\"152\":1}}],[\"那么程序会直接结束\",{\"1\":{\"143\":1}}],[\"那么\",{\"1\":{\"131\":1}}],[\"那么它的临界值肯定还存在\",{\"1\":{\"71\":1}}],[\"那么就进行grow扩容操作\",{\"1\":{\"56\":1}}],[\"那么就会将elementdata开到这么大\",{\"1\":{\"54\":1}}],[\"那么都要写一个切面\",{\"1\":{\"26\":1}}],[\"那到底哪个更快\",{\"1\":{\"47\":2}}],[\"面试题回答\",{\"1\":{\"466\":1}}],[\"面试题\",{\"0\":{\"58\":1,\"68\":1},\"1\":{\"115\":1,\"155\":1,\"478\":1,\"713\":1}}],[\"面试题少\",{\"1\":{\"47\":1}}],[\"面试\",{\"0\":{\"835\":1,\"844\":1},\"2\":{\"48\":1,\"49\":1,\"488\":1,\"489\":1}}],[\"面向对象中什么是标准的javabean\",{\"1\":{\"47\":1}}],[\"手机号以\",{\"1\":{\"738\":1}}],[\"手机号格式\",{\"1\":{\"738\":1}}],[\"手机号格式不正确\",{\"1\":{\"738\":2,\"741\":2}}],[\"手机号\",{\"1\":{\"738\":2,\"741\":2}}],[\"手动释放\",{\"1\":{\"776\":1}}],[\"手动上传css和js到服务器\",{\"1\":{\"733\":1}}],[\"手动\",{\"1\":{\"544\":1}}],[\"手动反序列化\",{\"1\":{\"400\":1}}],[\"手动序列化\",{\"1\":{\"400\":1}}],[\"手动完成对象的序列化和反序列化\",{\"1\":{\"400\":1}}],[\"手动触发\",{\"1\":{\"369\":1}}],[\"手动ack\",{\"1\":{\"359\":1}}],[\"手动模式\",{\"1\":{\"349\":1}}],[\"手动转换为对象\",{\"1\":{\"217\":1}}],[\"手写\",{\"1\":{\"521\":1}}],[\"手写sql\",{\"1\":{\"204\":1,\"205\":1}}],[\"手写sql如下\",{\"1\":{\"204\":1}}],[\"手写代码\",{\"1\":{\"47\":1}}],[\"手撕rpc框架\",{\"0\":{\"33\":1}}],[\"冒泡排序\",{\"1\":{\"47\":1}}],[\"久远银海的编程题\",{\"1\":{\"47\":1}}],[\"自旋锁实现\",{\"1\":{\"769\":1}}],[\"自旋\",{\"1\":{\"703\":5}}],[\"自增的id存在一些问题\",{\"1\":{\"762\":1}}],[\"自增\",{\"1\":{\"655\":1,\"819\":1}}],[\"自由\",{\"1\":{\"377\":1}}],[\"自己的nginx前端里面的img目录\",{\"1\":{\"801\":1}}],[\"自己的电脑\",{\"1\":{\"634\":1}}],[\"自己装\",{\"1\":{\"637\":1}}],[\"自己退出队伍\",{\"1\":{\"562\":1}}],[\"自己不再使用new来创建对象\",{\"1\":{\"268\":1}}],[\"自己来决定自己的命运\",{\"1\":{\"155\":1}}],[\"自定义\",{\"1\":{\"706\":1}}],[\"自定义校验规则\",{\"0\":{\"668\":1}}],[\"自定义异常\",{\"1\":{\"627\":1}}],[\"自定义异常处理器\",{\"1\":{\"230\":2}}],[\"自定义异常处理类\",{\"0\":{\"230\":1}}],[\"自定义构造函数\",{\"1\":{\"626\":1}}],[\"自定义配置类\",{\"1\":{\"522\":1}}],[\"自定义菜单\",{\"0\":{\"458\":1}}],[\"自定义序列化方式\",{\"0\":{\"399\":1}}],[\"自定义协议\",{\"1\":{\"327\":2}}],[\"自定义sql\",{\"0\":{\"207\":1}}],[\"自定义线程池\",{\"0\":{\"116\":1}}],[\"自动解锁时间一定要大于业务执行时间\",{\"1\":{\"704\":1}}],[\"自动化接口文档生成\",{\"1\":{\"521\":1}}],[\"自动触发\",{\"1\":{\"369\":1}}],[\"自动ack\",{\"1\":{\"359\":1}}],[\"自动返回reject\",{\"1\":{\"349\":1}}],[\"自动模式\",{\"1\":{\"349\":1}}],[\"自动装配基于反射设计创建对象并通过暴力反射为私有属性进行设值\",{\"1\":{\"304\":1}}],[\"自动装配\",{\"0\":{\"287\":1}}],[\"自动分页\",{\"1\":{\"218\":1}}],[\"自动管理\",{\"1\":{\"152\":1}}],[\"自动创建客户端\",{\"1\":{\"18\":1}}],[\"自我介绍\",{\"1\":{\"47\":1}}],[\"偏设计\",{\"1\":{\"47\":1}}],[\"和偏移量这两个参数\",{\"1\":{\"810\":1}}],[\"和数据库不一致的问题\",{\"1\":{\"749\":1}}],[\"和swagger一样增加factory\",{\"1\":{\"727\":1}}],[\"和sleep\",{\"1\":{\"47\":1}}],[\"和属性值\",{\"1\":{\"710\":1}}],[\"和filter\",{\"1\":{\"710\":1}}],[\"和上面的区别是\",{\"1\":{\"685\":1}}],[\"和正式环境\",{\"1\":{\"634\":1}}],[\"和别人一起参加竞赛\",{\"1\":{\"556\":1}}],[\"和redo\",{\"1\":{\"475\":1}}],[\"和release\",{\"1\":{\"136\":1}}],[\"和单例模式非常像\",{\"1\":{\"457\":1}}],[\"和非关系型数据库\",{\"1\":{\"377\":1}}],[\"和队列进行绑定\",{\"1\":{\"336\":1}}],[\"和unpark\",{\"1\":{\"156\":1}}],[\"和对应的值\",{\"1\":{\"66\":1}}],[\"和足够容纳m中所有键值对的初始容量\",{\"1\":{\"64\":1}}],[\"和负载因子\",{\"1\":{\"64\":1}}],[\"和count\",{\"1\":{\"47\":1}}],[\"和$的区别\",{\"1\":{\"47\":1}}],[\"和\",{\"1\":{\"47\":1,\"67\":1,\"91\":1,\"93\":2,\"103\":1,\"112\":1,\"114\":1,\"115\":1,\"117\":1,\"120\":1,\"142\":1,\"143\":1,\"158\":1,\"567\":1,\"682\":1,\"716\":1}}],[\"和mock\",{\"1\":{\"14\":1}}],[\"索引不可以更新\",{\"1\":{\"686\":1}}],[\"索引文档\",{\"1\":{\"682\":1}}],[\"索引index\",{\"1\":{\"680\":1}}],[\"索引优化\",{\"1\":{\"487\":1}}],[\"索引树扫描\",{\"1\":{\"486\":1}}],[\"索引查询\",{\"1\":{\"486\":1}}],[\"索引将失效\",{\"1\":{\"470\":2}}],[\"索引会失效\",{\"1\":{\"470\":1}}],[\"索引有三个\",{\"1\":{\"470\":1}}],[\"索引可能会失效\",{\"1\":{\"470\":1}}],[\"索引失效\",{\"0\":{\"470\":1},\"1\":{\"470\":1}}],[\"索引越多\",{\"1\":{\"469\":1}}],[\"索引并不是多多益善\",{\"1\":{\"469\":1}}],[\"索引创建\",{\"0\":{\"469\":1}}],[\"索引作为聚集索引\",{\"1\":{\"466\":1}}],[\"索引结构的叶子节点关联的是对应的主键\",{\"1\":{\"466\":1}}],[\"索引结构的叶子节点保存了行数据\",{\"1\":{\"466\":1}}],[\"索引的键值决定了数据行在磁盘上的物理存储顺序\",{\"1\":{\"466\":1}}],[\"索引的底层数据结构了解过嘛\",{\"1\":{\"465\":1}}],[\"索引的分类及底层实现\",{\"1\":{\"47\":1}}],[\"索引\",{\"0\":{\"464\":1},\"1\":{\"465\":2,\"509\":1}}],[\"索引字段\",{\"1\":{\"47\":1}}],[\"但我们不能把所有的数据都放入到menber中去\",{\"1\":{\"816\":1}}],[\"但在更新数据时会检查数据的版本号或标记\",{\"1\":{\"768\":1}}],[\"但在某些特殊情况下\",{\"1\":{\"347\":1}}],[\"但多个并发请求同时请求这个不存在的数据\",{\"1\":{\"701\":1}}],[\"但设置一个较短的过期时间\",{\"1\":{\"699\":1}}],[\"但被频繁地查询\",{\"1\":{\"699\":1}}],[\"但受操作系统的限制\",{\"1\":{\"694\":1}}],[\"但与jvm密切相关\",{\"1\":{\"694\":1}}],[\"但用于执行本地方法\",{\"1\":{\"694\":1}}],[\"但两次读取的数据不同\",{\"1\":{\"473\":1}}],[\"但为了获取完整的结果集\",{\"1\":{\"466\":1}}],[\"但为时已晚\",{\"1\":{\"415\":1}}],[\"但底层数据结构却差别很大\",{\"1\":{\"391\":1}}],[\"但有一定限制\",{\"1\":{\"377\":1}}],[\"但通常不如sql数据库灵活\",{\"1\":{\"377\":1}}],[\"但只有最后一次写操作才有意义\",{\"1\":{\"372\":1}}],[\"但只能继承一个类\",{\"1\":{\"47\":1}}],[\"但基于磁盘存储\",{\"1\":{\"362\":1}}],[\"但更灵活\",{\"1\":{\"349\":1}}],[\"但具有一定的侵入性\",{\"1\":{\"232\":1,\"233\":1}}],[\"但volatile无法保证原子性\",{\"1\":{\"161\":1}}],[\"但对于复合操作\",{\"1\":{\"158\":1}}],[\"但最终结果还会阻塞线程\",{\"1\":{\"156\":1}}],[\"但凭证最多只能有1个\",{\"1\":{\"156\":1}}],[\"但不包括数据查询\",{\"1\":{\"477\":1}}],[\"但不包含队列里的消息\",{\"1\":{\"363\":1}}],[\"但不是强制性的\",{\"1\":{\"155\":1}}],[\"但不返回新的结果\",{\"1\":{\"121\":2,\"717\":2}}],[\"但这也会影响查询的性能\",{\"1\":{\"755\":1}}],[\"但这个时候锁过期了\",{\"1\":{\"549\":1}}],[\"但这个对象属性是可以改变的\",{\"1\":{\"133\":1}}],[\"但这些方法必须在同步代码块或同步方法中调用\",{\"1\":{\"91\":1}}],[\"但jmm向程序员保证a操作将对b操作可见\",{\"1\":{\"128\":1}}],[\"但灵活性较差\",{\"1\":{\"91\":1}}],[\"但立刻可以回到竞争线程锁的状态\",{\"1\":{\"86\":1}}],[\"但是不会影响我们之前记录的6\",{\"1\":{\"809\":1}}],[\"但是不设置过期时间\",{\"1\":{\"756\":1}}],[\"但是set集合是不能排序的\",{\"1\":{\"804\":1}}],[\"但是service对象和dao对象没有任何关系\",{\"1\":{\"268\":1}}],[\"但是假设在主机还没有来得及把数据写入到从机去的时候\",{\"1\":{\"783\":1}}],[\"但是假设在线程1没有走完的时候\",{\"1\":{\"754\":1}}],[\"但是线程1他会接着往后执行\",{\"1\":{\"779\":1}}],[\"但是线程1\",{\"1\":{\"778\":1}}],[\"但是线程却被唤醒了\",{\"1\":{\"92\":1}}],[\"但是由于mysql性能本身一般\",{\"1\":{\"775\":1}}],[\"但是以上做法依然有问题\",{\"1\":{\"770\":1}}],[\"但是以上这种方式通过测试发现会有很多失败的情况\",{\"1\":{\"769\":1}}],[\"但是锁已经释放也会导致问题\",{\"1\":{\"770\":1}}],[\"但是锁的过期时间只有30s\",{\"1\":{\"703\":1}}],[\"但是如果按照上面\",{\"1\":{\"770\":1}}],[\"但是如果不创建对象\",{\"1\":{\"267\":1}}],[\"但是100个人中只有1个人能扣减成功\",{\"1\":{\"769\":1}}],[\"但是此时他的锁到期了\",{\"1\":{\"779\":1}}],[\"但是此时他获得到了锁的资源\",{\"1\":{\"755\":1}}],[\"但是此时redis中没有数据\",{\"1\":{\"752\":1}}],[\"但是数据库中一定存在这个数据\",{\"1\":{\"752\":1}}],[\"但是数据库中也没有数据\",{\"1\":{\"752\":1}}],[\"但是没人查询\",{\"1\":{\"750\":1}}],[\"但是还会有以下\",{\"1\":{\"750\":1}}],[\"但是缓存没有同步的时候\",{\"1\":{\"750\":1}}],[\"但是后端如果有多个tomcat服务器\",{\"1\":{\"741\":1}}],[\"但是分布式系统下面有多台机器\",{\"1\":{\"702\":1}}],[\"但是访问http\",{\"1\":{\"691\":1}}],[\"但是左边是一个子组件\",{\"1\":{\"670\":1}}],[\"但是真实请求出现问题\",{\"1\":{\"663\":1}}],[\"但是自带的\",{\"1\":{\"616\":1}}],[\"但是要有个上限\",{\"1\":{\"561\":1}}],[\"但是只有ip符合配置的服务器才执行真实业务\",{\"1\":{\"545\":1}}],[\"但是代码会简洁很多更容易维护\",{\"1\":{\"491\":1}}],[\"但是需要回表查询数据\",{\"1\":{\"486\":1}}],[\"但是需要注意\",{\"1\":{\"210\":1}}],[\"但是性能越低\",{\"1\":{\"474\":1}}],[\"但是执行的效率比较低\",{\"1\":{\"415\":1}}],[\"但是7002和7003不可以写\",{\"1\":{\"373\":1}}],[\"但是大多数情况下用户支付都会在1分钟内完成\",{\"1\":{\"355\":1}}],[\"但是路由失败时\",{\"1\":{\"343\":1}}],[\"但是通知交易服务失败\",{\"1\":{\"340\":1}}],[\"但是destroy方法没有执行\",{\"1\":{\"278\":1}}],[\"但是list接口无法创建对象\",{\"1\":{\"254\":1}}],[\"但是这个时候还有一个问题\",{\"1\":{\"816\":1}}],[\"但是这个冗余字段存在问题\",{\"1\":{\"672\":1}}],[\"但是这样还是会存在一个人买多个优惠券的情况\",{\"1\":{\"770\":1}}],[\"但是这样不是在后台运行\",{\"1\":{\"640\":1}}],[\"但是这样实际上是不会拦截例如\",{\"1\":{\"232\":1}}],[\"但是这种方式还是太麻烦\",{\"1\":{\"180\":1}}],[\"但是与数据库的关键字冲突\",{\"1\":{\"200\":1}}],[\"但是无法完成复杂的sql语句\",{\"1\":{\"192\":1}}],[\"但是\",{\"1\":{\"110\":1}}],[\"但是在重构数据完成前\",{\"1\":{\"757\":1}}],[\"但是在插入数据时\",{\"1\":{\"473\":1}}],[\"但是在service里面还需要依赖bookdao\",{\"1\":{\"269\":1}}],[\"但是在迭代器创建之后的修改会被迭代器感知\",{\"1\":{\"98\":1}}],[\"但是在读操作频繁\",{\"1\":{\"98\":1}}],[\"但是释放的是当前的线程对象锁\",{\"1\":{\"87\":1}}],[\"但是已经初始化了\",{\"1\":{\"71\":1}}],[\"但是页面无法跳转\",{\"1\":{\"14\":1}}],[\"但它可以被子类重写以提供更有意义的哈希码\",{\"1\":{\"66\":1}}],[\"但它们在实际应用中的性能可能有所不同\",{\"1\":{\"47\":1}}],[\"但负载因子使用默认值\",{\"1\":{\"64\":1}}],[\"而此时新的master中实际上并没有锁信息\",{\"1\":{\"783\":1}}],[\"而此时加入有队列与死信交换机绑定\",{\"1\":{\"354\":1}}],[\"而线程1执行过程中\",{\"1\":{\"778\":1}}],[\"而线程1直接进行返回\",{\"1\":{\"756\":1}}],[\"而一旦命中后\",{\"1\":{\"756\":1}}],[\"而代码运行在内存中\",{\"1\":{\"746\":1}}],[\"而老年代则存放经过多次垃圾回收后仍然存活的对象\",{\"1\":{\"694\":1}}],[\"而前端的三级分类是一个数组\",{\"1\":{\"670\":1}}],[\"而只读取有效版本的数据行\",{\"1\":{\"476\":1}}],[\"而只是在更新时检查数据的版本或状态\",{\"1\":{\"210\":1}}],[\"而强调cap\",{\"1\":{\"377\":1}}],[\"而且读取完之后可以把他的收件箱进行清楚\",{\"1\":{\"808\":1}}],[\"而且已经走到了条件判断的过程中\",{\"1\":{\"779\":1}}],[\"而且会影响查询性能\",{\"1\":{\"510\":1}}],[\"而且不同的service里面都有这个关于不同套餐的计算方式\",{\"1\":{\"490\":1}}],[\"而且只有一个\",{\"1\":{\"466\":1}}],[\"而且sheetname必须不一样\",{\"1\":{\"431\":1}}],[\"而且aof会记录对同一个key的多次写操作\",{\"1\":{\"372\":1}}],[\"而且对于插入和删除操作可能需要更多的指针更新操作\",{\"1\":{\"47\":1}}],[\"而这个交换机就称为死信交换机\",{\"1\":{\"354\":1}}],[\"而return则属于publisher\",{\"1\":{\"343\":1}}],[\"而交易服务中的订单状态却显示未支付\",{\"1\":{\"340\":1}}],[\"而其他事务可能需要重新尝试或处理更新失败的情况\",{\"1\":{\"210\":1}}],[\"而每次这样写是特别麻烦的\",{\"1\":{\"179\":1}}],[\"而每个\",{\"1\":{\"109\":1}}],[\"而调用两次pak却需要消费两个凭证\",{\"1\":{\"156\":1}}],[\"而unpark则相反\",{\"1\":{\"156\":1}}],[\"而另一个进程或线程也在等待第一个进程或线程释放资源\",{\"1\":{\"153\":1}}],[\"而该资源数量不足时\",{\"1\":{\"153\":1}}],[\"而\",{\"1\":{\"142\":1,\"183\":1}}],[\"而对于引用类型变量而言\",{\"1\":{\"133\":1}}],[\"而cas操作\",{\"1\":{\"131\":1}}],[\"而是我们后续通过逻辑去处理\",{\"1\":{\"756\":1}}],[\"而是逻辑删除\",{\"1\":{\"605\":1}}],[\"而是一个java类库\",{\"1\":{\"415\":1}}],[\"而是统一使用string序列化器\",{\"1\":{\"400\":1}}],[\"而是交给ioc容器来创建对象\",{\"1\":{\"268\":1}}],[\"而是在本地重试了3次\",{\"1\":{\"350\":1}}],[\"而是在数据记录中添加一个版本号或时间戳字段\",{\"1\":{\"210\":1}}],[\"而是在更新数据时检查数据的版本号或其他标识\",{\"1\":{\"110\":1}}],[\"而是直接调用lambdaquery和lambdaupdate方法\",{\"1\":{\"209\":1}}],[\"而是应该由线程自己自行停止\",{\"1\":{\"155\":1}}],[\"而是通过标记数据记录为已删除或不可见的状态\",{\"1\":{\"215\":1}}],[\"而是通过\",{\"1\":{\"115\":1}}],[\"而不受其他事务的影响\",{\"1\":{\"476\":1}}],[\"而不能跳过中间的列\",{\"1\":{\"470\":1}}],[\"而不能够直接读写主内存中的变量\",{\"1\":{\"158\":1}}],[\"而不用使用全限定的类名\",{\"1\":{\"201\":1}}],[\"而不需要存储其所有值\",{\"1\":{\"821\":1}}],[\"而不需要额外地回到数据表中去获取数据\",{\"1\":{\"467\":1}}],[\"而不需要额外的同步措施\",{\"1\":{\"155\":1}}],[\"而不需要修改原始方法的代码\",{\"1\":{\"165\":1}}],[\"而不会导致死锁\",{\"1\":{\"782\":1}}],[\"而不会使用本地缓存\",{\"1\":{\"155\":1}}],[\"而不会被阻塞\",{\"1\":{\"103\":1}}],[\"而不考虑之前等待的线程\",{\"1\":{\"102\":1}}],[\"而不是同步地直接访问底层存储系统\",{\"1\":{\"700\":1}}],[\"而不是umi的request\",{\"1\":{\"630\":1}}],[\"而不是周期性地保存整个数据集的快照\",{\"1\":{\"371\":1}}],[\"而不是在最后第30分钟才检测\",{\"1\":{\"355\":1}}],[\"而不是锁定整个数据记录\",{\"1\":{\"210\":1}}],[\"而不是外面的锁\",{\"1\":{\"87\":1}}],[\"而不是正常的插入模式\",{\"1\":{\"66\":1}}],[\"而写操作是通过复制底层数组来实现的\",{\"1\":{\"98\":1}}],[\"而非公平锁允许插队\",{\"1\":{\"91\":2}}],[\"而springamqp\",{\"1\":{\"359\":1}}],[\"而sync类继承了abstractqueuedsynchronizer\",{\"1\":{\"135\":1}}],[\"而sleep\",{\"1\":{\"86\":1}}],[\"而session通常在用户关闭浏览器或超时时过期\",{\"1\":{\"47\":1}}],[\"而session数据存储在服务器端\",{\"1\":{\"47\":1}}],[\"而同样的wait\",{\"1\":{\"84\":1}}],[\"而插入的时候里面的计算哈希函数实现如下\",{\"1\":{\"66\":1}}],[\"而跳表则更适用于动态的数据结构\",{\"1\":{\"47\":1}}],[\"而跳表是一种基于链表的数据结构\",{\"1\":{\"47\":1}}],[\"而实现类中的方法则是具体的实现\",{\"1\":{\"47\":1}}],[\"而实现类\",{\"1\":{\"47\":1}}],[\"目的\",{\"0\":{\"579\":1},\"1\":{\"622\":1}}],[\"目的是和路径匹配\",{\"1\":{\"262\":1}}],[\"目的是为了查询时实现自动反序列化\",{\"1\":{\"399\":1}}],[\"目的是为了更好地支持高并发任务\",{\"1\":{\"80\":1}}],[\"目的是为了实现多态\",{\"1\":{\"47\":1}}],[\"目标\",{\"1\":{\"508\":1}}],[\"目标vo类型的字节码\",{\"1\":{\"220\":1}}],[\"目标vo类型\",{\"1\":{\"220\":3}}],[\"目前的拦截机制\",{\"1\":{\"742\":1}}],[\"目前已有的插件有\",{\"1\":{\"218\":1}}],[\"目前数组重存储的是int型的数据\",{\"1\":{\"51\":1}}],[\"目录下面即可\",{\"1\":{\"646\":1}}],[\"目录挂载到容器内的\",{\"1\":{\"651\":3}}],[\"目录挂载到\",{\"1\":{\"317\":2}}],[\"目录\",{\"1\":{\"317\":3,\"651\":3},\"2\":{\"2\":1,\"3\":1,\"35\":1,\"36\":1}}],[\"目录1\",{\"0\":{\"832\":1},\"1\":{\"1\":4}}],[\"重建缓存\",{\"1\":{\"756\":1,\"758\":1}}],[\"重建逻辑\",{\"1\":{\"756\":1}}],[\"重构完成后释放互斥锁\",{\"1\":{\"756\":1}}],[\"重新试一下即可\",{\"1\":{\"675\":1}}],[\"重新加载\",{\"1\":{\"639\":2}}],[\"重新回到主内存中读取最新共享变量\",{\"1\":{\"160\":1}}],[\"重定向到\",{\"1\":{\"612\":1}}],[\"重复调用\",{\"1\":{\"688\":1}}],[\"重复调用unpark也不会积累凭证\",{\"1\":{\"156\":1}}],[\"重复加入队伍的问题\",{\"1\":{\"567\":1}}],[\"重点逻辑\",{\"1\":{\"599\":1,\"605\":1}}],[\"重点\",{\"1\":{\"510\":1}}],[\"重启docker\",{\"1\":{\"697\":1}}],[\"重启docker容器\",{\"1\":{\"646\":1}}],[\"重启mysql服务使配置生效\",{\"1\":{\"485\":1}}],[\"重启后就会消失\",{\"1\":{\"346\":1}}],[\"重做日志缓冲\",{\"1\":{\"475\":1}}],[\"重做日志\",{\"1\":{\"475\":1}}],[\"重入锁的状态通常由一个count变量来表示\",{\"1\":{\"782\":1}}],[\"重入锁的实现原理\",{\"1\":{\"152\":1}}],[\"重入队\",{\"1\":{\"350\":1}}],[\"重排序等等\",{\"1\":{\"567\":1}}],[\"重排序\",{\"0\":{\"127\":1}}],[\"重写接口中的三个方法\",{\"1\":{\"232\":1}}],[\"重写和重载\",{\"1\":{\"47\":1}}],[\"重写\",{\"1\":{\"47\":2}}],[\"重写的区别\",{\"1\":{\"47\":1}}],[\"重载\",{\"1\":{\"47\":2}}],[\"重试机制\",{\"1\":{\"688\":1,\"782\":1}}],[\"重试耗尽后\",{\"1\":{\"351\":3}}],[\"重试抢锁等等\",{\"1\":{\"145\":1}}],[\"重试\",{\"1\":{\"27\":1,\"703\":5,\"777\":1,\"790\":1,\"796\":1}}],[\"后来的人发现标识已经存在\",{\"1\":{\"547\":1}}],[\"后来的也可能先获得锁\",{\"1\":{\"151\":1}}],[\"后者在磁盘中\",{\"1\":{\"475\":1}}],[\"后续的线程2\",{\"1\":{\"754\":1}}],[\"后续复用\",{\"1\":{\"476\":1}}],[\"后续由人工集中处理\",{\"1\":{\"351\":1}}],[\"后续处理handle\",{\"1\":{\"120\":1,\"716\":1}}],[\"后台线程慢慢的去执行queue里边的消息\",{\"1\":{\"789\":1}}],[\"后台通过jsessionid从session中拿到用户信息\",{\"1\":{\"738\":1}}],[\"后台从session中拿到当前验证码\",{\"1\":{\"738\":1}}],[\"后台此时生成对应的验证码\",{\"1\":{\"738\":1}}],[\"后台启动的时候报错\",{\"1\":{\"380\":1}}],[\"后台启动redis\",{\"1\":{\"378\":1}}],[\"后台\",{\"1\":{\"250\":1}}],[\"后1\",{\"1\":{\"233\":2}}],[\"后2\",{\"1\":{\"233\":1}}],[\"后期在抛出这两个异常的时候\",{\"1\":{\"230\":1}}],[\"后\",{\"1\":{\"155\":1}}],[\"后能够正确释放锁\",{\"1\":{\"91\":1}}],[\"后面都是2在干活\",{\"1\":{\"333\":1}}],[\"后面的位置要改为自己的下载路径\",{\"1\":{\"655\":1}}],[\"后面的就不会再执行了\",{\"1\":{\"232\":1}}],[\"后面的对象和代理需要实现同一个接口\",{\"1\":{\"165\":1}}],[\"后面的操作\",{\"1\":{\"159\":1}}],[\"后面还连着问了几个问题\",{\"1\":{\"47\":1}}],[\"后面可以带哪些函教\",{\"1\":{\"47\":1}}],[\"后加载的会覆盖前面的\",{\"1\":{\"47\":1}}],[\"后端接口\",{\"1\":{\"670\":1}}],[\"后端接口开发\",{\"0\":{\"512\":1}}],[\"后端处理前端发送的预检请求\",{\"1\":{\"663\":1}}],[\"后端dockerfile\",{\"1\":{\"643\":1}}],[\"后端多环境\",{\"0\":{\"636\":1}}],[\"后端优化\",{\"0\":{\"621\":1}}],[\"后端从session中可以取出基于该session存储的变量等\",{\"1\":{\"605\":1}}],[\"后端拿到前端传来的cookie\",{\"1\":{\"605\":1}}],[\"后端业务编写\",{\"0\":{\"597\":1}}],[\"后端推荐算法\",{\"1\":{\"534\":1}}],[\"后端整合swagger+knife4j接口文档\",{\"0\":{\"522\":1}}],[\"后端和前端都要用\",{\"1\":{\"521\":1}}],[\"后端server\",{\"0\":{\"407\":1}}],[\"后端开发怎么添加数据库的事务\",{\"1\":{\"47\":1}}],[\"后端代码\",{\"1\":{\"21\":1,\"26\":1,\"620\":1}}],[\"后端代码生成器\",{\"1\":{\"13\":1}}],[\"后端初始化\",{\"0\":{\"13\":1,\"586\":1}}],[\"后端\",{\"0\":{\"238\":1,\"503\":1,\"521\":1,\"640\":1},\"1\":{\"7\":1,\"251\":1,\"252\":1,\"253\":1,\"254\":1,\"257\":1,\"258\":1,\"259\":2,\"582\":1,\"641\":1,\"643\":2}}],[\"有小于0\",{\"1\":{\"821\":1}}],[\"有交集并集补集的api\",{\"1\":{\"807\":1}}],[\"有消息漏读的风险\",{\"1\":{\"794\":1}}],[\"有购买资格\",{\"1\":{\"789\":1,\"790\":1,\"796\":1}}],[\"有一个额外的线程持有锁去进行重构数据\",{\"1\":{\"757\":1}}],[\"有以下三种方式\",{\"1\":{\"749\":1}}],[\"有用户\",{\"1\":{\"742\":1}}],[\"有限的资源情况下\",{\"1\":{\"545\":1}}],[\"有任何一个标签存在就能搜索出来\",{\"1\":{\"512\":1}}],[\"有对象\",{\"1\":{\"508\":1}}],[\"有些定时任务要控制同一时间只有一个服务器能执行\",{\"1\":{\"545\":1}}],[\"有些样式样式还是需要自己引入\",{\"1\":{\"504\":1}}],[\"有些nosql数据库支持查询\",{\"1\":{\"377\":1}}],[\"有不同的计算方式\",{\"1\":{\"490\":1}}],[\"有这样的场景\",{\"1\":{\"490\":1}}],[\"有且只有一个\",{\"1\":{\"466\":1}}],[\"有序\",{\"1\":{\"465\":2}}],[\"有序集合\",{\"0\":{\"391\":1}}],[\"有序性指的是程序执行的顺序和代码中的顺序保持一致\",{\"1\":{\"158\":1}}],[\"有序性\",{\"1\":{\"134\":1,\"158\":1,\"160\":1}}],[\"有很大差异的一种数据库\",{\"1\":{\"377\":1}}],[\"有延迟时间\",{\"1\":{\"355\":1}}],[\"有没有其它的兜底方案\",{\"1\":{\"340\":1}}],[\"有安全漏洞\",{\"1\":{\"339\":1}}],[\"有了spring的配置类\",{\"1\":{\"245\":1}}],[\"有了hash值之后\",{\"1\":{\"72\":1}}],[\"有如下解决方式\",{\"1\":{\"245\":1}}],[\"有参\",{\"1\":{\"168\":1}}],[\"有参+无参\",{\"1\":{\"47\":1}}],[\"有可能在执行完第一句话的时候\",{\"1\":{\"776\":1}}],[\"有可能先判断出是自己的锁\",{\"1\":{\"549\":1}}],[\"有可能会触发回表查询\",{\"1\":{\"467\":1}}],[\"有可能造成优先级翻转或者饥饿的状态\",{\"1\":{\"151\":1}}],[\"有可能后申请的线程比先申请的线程优先获取锁\",{\"1\":{\"151\":1}}],[\"有可能处理太快\",{\"1\":{\"143\":1}}],[\"有可能被拦截\",{\"1\":{\"17\":1}}],[\"有返回值\",{\"1\":{\"143\":1}}],[\"有时限的等待\",{\"1\":{\"81\":1}}],[\"有多个指令在单个\",{\"1\":{\"81\":1}}],[\"有多个指令在多个\",{\"1\":{\"81\":1}}],[\"有下个节点的情况\",{\"1\":{\"71\":2}}],[\"有两张表\",{\"1\":{\"47\":1}}],[\"有两个字段\",{\"1\":{\"47\":1}}],[\"有哪些数据结构\",{\"1\":{\"47\":1}}],[\"有三个子线程\",{\"1\":{\"47\":1}}],[\"有自信\",{\"1\":{\"47\":1}}],[\"有什么区别\",{\"1\":{\"47\":2}}],[\"是从loglog算法派生的概率算法\",{\"1\":{\"821\":1}}],[\"是多对多的关系\",{\"1\":{\"806\":1}}],[\"是redis2\",{\"1\":{\"793\":1}}],[\"是redis中最简单的存储类型\",{\"1\":{\"383\":1}}],[\"是redis中另一种持久化机制\",{\"1\":{\"371\":1}}],[\"是因为线程1的拿锁\",{\"1\":{\"779\":1}}],[\"是预估值\",{\"1\":{\"769\":1}}],[\"是操作前读取的内存值\",{\"1\":{\"769\":1}}],[\"是并发控制机制\",{\"1\":{\"766\":1}}],[\"是自己\",{\"1\":{\"742\":1}}],[\"是自增的\",{\"1\":{\"476\":1}}],[\"是nginx配置文件\",{\"1\":{\"646\":1}}],[\"是nginx容器内的默认html根目录\",{\"1\":{\"646\":1}}],[\"是服务器上的前端文件和nginx配置文件的目录\",{\"1\":{\"646\":1}}],[\"是ant\",{\"1\":{\"610\":1}}],[\"是用来实现事务的持久性\",{\"1\":{\"475\":1}}],[\"是用于存储实际键值对的地方\",{\"1\":{\"63\":1}}],[\"是帮助小ysql高效获取数据的数据结构\",{\"1\":{\"465\":1}}],[\"是帮助mysql高效获取数据的数据结构\",{\"1\":{\"465\":1}}],[\"是不是很坑\",{\"1\":{\"412\":1}}],[\"是不是线程就立刻停止\",{\"1\":{\"155\":1}}],[\"是两种不同类型的数据库管理系统\",{\"1\":{\"377\":1}}],[\"是默认图\",{\"1\":{\"670\":1}}],[\"是默认方案\",{\"1\":{\"371\":1}}],[\"是默认的负载因子值\",{\"1\":{\"64\":1}}],[\"是默认的集合大小\",{\"1\":{\"54\":1}}],[\"是将本地系统的9000端口映射到minio容器的9000端口\",{\"1\":{\"317\":1}}],[\"是够获取自动增长的主键值\",{\"1\":{\"188\":1}}],[\"是cpu或编译器在对内存随机访问的操作中的一个同步点\",{\"1\":{\"161\":1}}],[\"是种无锁算法\",{\"1\":{\"145\":1}}],[\"是一款程序员可以嵌入他们所开发产品的组件\",{\"1\":{\"415\":1}}],[\"是一款\",{\"1\":{\"415\":1}}],[\"是一类同步屏障指令\",{\"1\":{\"161\":1}}],[\"是一种用于确保锁的有效性和持续性的机制\",{\"1\":{\"782\":1}}],[\"是一种乐观锁的实现方式\",{\"1\":{\"769\":1}}],[\"是一种乐观锁策略\",{\"1\":{\"131\":1}}],[\"是一种特殊类型的索引\",{\"1\":{\"466\":1,\"467\":1}}],[\"是一种保证多线程之间操作顺序的概念\",{\"1\":{\"159\":1}}],[\"是一种并发编程中常见的原子操作\",{\"1\":{\"131\":1}}],[\"是一个java操作redis的客户端\",{\"1\":{\"550\":1}}],[\"是一个支持定时以及周期性执行任务的线程池\",{\"1\":{\"115\":1,\"713\":1}}],[\"是一个仅包含一个线程的线程池\",{\"1\":{\"115\":1,\"713\":1}}],[\"是一个可根据需要创建新线程的线程池\",{\"1\":{\"115\":1,\"713\":1}}],[\"是一个具有固定线程数量的线程池\",{\"1\":{\"115\":1,\"713\":1}}],[\"是一个基本的\",{\"1\":{\"81\":1}}],[\"是执行把\",{\"1\":{\"120\":1,\"716\":1}}],[\"是执行当前任务的线程执行继续执行\",{\"1\":{\"120\":1,\"716\":1}}],[\"是线程安全的\",{\"1\":{\"98\":1}}],[\"是无法直接实现的\",{\"1\":{\"91\":1}}],[\"是java中用于实现同步器的抽象基类\",{\"1\":{\"136\":1}}],[\"是java中用于实现同步的关键字\",{\"1\":{\"91\":1}}],[\"是java中java\",{\"1\":{\"91\":1}}],[\"是系统独立调度的基本单位\",{\"1\":{\"81\":1}}],[\"是系统进行资源分配的基本单位\",{\"1\":{\"81\":1}}],[\"是程序执行流的最小单元\",{\"1\":{\"81\":1}}],[\"是链表\",{\"1\":{\"71\":2}}],[\"是红黑树节点\",{\"1\":{\"67\":1}}],[\"是\",{\"1\":{\"66\":1,\"98\":1,\"108\":1,\"109\":1,\"117\":2,\"142\":1,\"143\":2,\"155\":2,\"354\":1,\"509\":1,\"670\":2}}],[\"是哈希表的最大容量限制\",{\"1\":{\"64\":1}}],[\"是哈希表的初始容量\",{\"1\":{\"64\":1}}],[\"是哈希表的核心数据结构\",{\"1\":{\"63\":1}}],[\"是指通过互联网访问\",{\"1\":{\"821\":1}}],[\"是指在同一线程在外层方法获取到锁的时侯\",{\"1\":{\"152\":1}}],[\"是指在一个类中\",{\"1\":{\"47\":1}}],[\"是指多个线程获取锁的顺序并不是按照申请锁的顺序\",{\"1\":{\"151\":1}}],[\"是指多个线程按照申请锁的顺序来获取锁\",{\"1\":{\"151\":1}}],[\"是指子类重新定义父类中已有的方法\",{\"1\":{\"47\":1}}],[\"是什么\",{\"1\":{\"47\":1}}],[\"是否已经点赞\",{\"1\":{\"803\":1,\"804\":1}}],[\"是否点赞过了\",{\"1\":{\"803\":1}}],[\"是否展示在介绍上\",{\"1\":{\"670\":2}}],[\"是否需要根据坐标查询\",{\"1\":{\"817\":1}}],[\"是否需要检索\",{\"1\":{\"670\":1}}],[\"是否需要队长同意\",{\"1\":{\"556\":1}}],[\"是否有权限\",{\"1\":{\"664\":1}}],[\"是否显示\",{\"1\":{\"663\":1}}],[\"是否允许缩略\",{\"1\":{\"616\":1}}],[\"是否允许复制\",{\"1\":{\"616\":1}}],[\"是否符合要求\",{\"1\":{\"604\":1}}],[\"是否登录\",{\"1\":{\"558\":2}}],[\"是否登录的判断极其频繁\",{\"1\":{\"533\":1}}],[\"是否为父标签\",{\"1\":{\"509\":1}}],[\"是否为0\",{\"1\":{\"71\":1}}],[\"是否开启aof功能\",{\"1\":{\"371\":1}}],[\"是否还有下一个延迟时间\",{\"1\":{\"355\":1}}],[\"是否升序\",{\"1\":{\"220\":1}}],[\"是否自动构建\",{\"1\":{\"198\":1}}],[\"是否保持使用全局的\",{\"1\":{\"198\":1}}],[\"是否合法\",{\"1\":{\"27\":1}}],[\"是否删除\",{\"1\":{\"9\":2,\"25\":1,\"509\":2,\"557\":4,\"596\":2}}],[\"当然是使用我们之前学习过的set集合咯\",{\"1\":{\"807\":1}}],[\"当没有消息时最长等待时间\",{\"1\":{\"795\":1}}],[\"当队列中没有消息时rpop或lpop操作会返回null\",{\"1\":{\"792\":1}}],[\"当队列已满时\",{\"1\":{\"112\":1}}],[\"当以上判断逻辑走完之后\",{\"1\":{\"789\":1}}],[\"当用户读取数据时才去关注的人里边去读取数据\",{\"1\":{\"808\":1}}],[\"当用户下单之后\",{\"1\":{\"789\":1}}],[\"当用户开始查询redis时\",{\"1\":{\"756\":1}}],[\"当count减少到0时\",{\"1\":{\"782\":1}}],[\"当他卡顿结束后\",{\"1\":{\"779\":1}}],[\"当他写入缓存后\",{\"1\":{\"750\":1}}],[\"当再次发起查询时\",{\"1\":{\"752\":1}}],[\"当我们关注了用户后\",{\"1\":{\"808\":1}}],[\"当我们客户端访问不存在的数据时\",{\"1\":{\"752\":1}}],[\"当我们已经有了这个类的对象\",{\"1\":{\"167\":1}}],[\"当数据库发生了变化\",{\"1\":{\"750\":1}}],[\"当\",{\"1\":{\"749\":1}}],[\"当对比值成功的时候\",{\"1\":{\"703\":1}}],[\"当第一个线程执行完的时候\",{\"1\":{\"703\":1}}],[\"当第一次添加数据的时候才会初始化容量为10\",{\"1\":{\"57\":1}}],[\"当查询数据库或存储系统后\",{\"1\":{\"699\":1}}],[\"当update\",{\"1\":{\"475\":1}}],[\"当事务回滚时\",{\"1\":{\"475\":1}}],[\"当事\",{\"1\":{\"475\":1}}],[\"当跳过某一列的时候\",{\"1\":{\"470\":1}}],[\"当优化器知道每列是否包含null值时\",{\"1\":{\"469\":1}}],[\"当您需要从一幅较大的图片中截取某部分作为标注图标时\",{\"1\":{\"439\":1}}],[\"当标注显示在地图上时\",{\"1\":{\"439\":1}}],[\"当网络恢复后\",{\"1\":{\"412\":1}}],[\"当窗口关闭时\",{\"1\":{\"406\":1}}],[\"当需要存储java对象时\",{\"1\":{\"400\":1}}],[\"当需要修改对象某个字段时很不方便\",{\"1\":{\"383\":1}}],[\"当7001成为了主之后\",{\"1\":{\"373\":1}}],[\"当主进程执行写操作时\",{\"1\":{\"370\":1}}],[\"当主进程执行读操作时\",{\"1\":{\"370\":1}}],[\"当主线程结束时\",{\"1\":{\"89\":1}}],[\"当redis实例故障重启后\",{\"1\":{\"368\":1}}],[\"当rabbittemplate与mq连接超时后\",{\"1\":{\"342\":1}}],[\"当所在节点宕机\",{\"1\":{\"363\":1}}],[\"当所有参与的线程都调用了\",{\"1\":{\"108\":1}}],[\"当所有用户线程执行完毕后\",{\"1\":{\"89\":1}}],[\"当生产者发送消息的速度超过了消费者处理消息的速度\",{\"1\":{\"362\":1}}],[\"当生产者发送消息给mq后\",{\"1\":{\"343\":1}}],[\"当一个事务对数据进行更新时\",{\"1\":{\"476\":1}}],[\"当一个事务对数据行进行更新时\",{\"1\":{\"476\":2}}],[\"当一个事务需要读取数据时\",{\"1\":{\"476\":1}}],[\"当一个队列中的消息满足下列情况之一时\",{\"1\":{\"361\":1}}],[\"当一个线程成功获取锁时\",{\"1\":{\"782\":1}}],[\"当一个线程获取了悲观锁\",{\"1\":{\"767\":1}}],[\"当一个线程获取到锁时\",{\"1\":{\"91\":1}}],[\"当一个线程进入\",{\"1\":{\"91\":1}}],[\"当次数达到了以后\",{\"1\":{\"359\":1}}],[\"当业务出现异常时\",{\"1\":{\"349\":1}}],[\"当业务正常执行时则自动返回ack\",{\"1\":{\"349\":1}}],[\"当消息无法投递到任何队列时\",{\"1\":{\"361\":1}}],[\"当消息投递到mq\",{\"1\":{\"343\":1}}],[\"当消费者出现异常后\",{\"1\":{\"350\":1}}],[\"当消费者处理消息结束后\",{\"1\":{\"349\":1}}],[\"当引入filestorageservice接口时\",{\"1\":{\"319\":1}}],[\"当访问\",{\"1\":{\"263\":1}}],[\"当条件成立时才会添加这个查询条件\",{\"1\":{\"209\":1}}],[\"当全局\",{\"1\":{\"198\":1}}],[\"当读一个volatile变量时\",{\"1\":{\"160\":1}}],[\"当写一个volatile变量时\",{\"1\":{\"160\":1}}],[\"当调用park方法时\",{\"1\":{\"156\":1}}],[\"当调用wait\",{\"1\":{\"84\":1}}],[\"当执行rollback时\",{\"1\":{\"475\":1}}],[\"当执行monitorexith时\",{\"1\":{\"152\":1}}],[\"当执行monitorenterl时\",{\"1\":{\"152\":1}}],[\"当执行写操作\",{\"1\":{\"98\":1}}],[\"当1个线程请求锁获取同步状态\",{\"1\":{\"151\":1}}],[\"当采用非公平锁时\",{\"1\":{\"151\":1}}],[\"当它或当前completablefuture中的任何一个完成时\",{\"1\":{\"143\":1}}],[\"当final修饰基本数据类型变量时\",{\"1\":{\"133\":1}}],[\"当多个线程访问共享资源时\",{\"1\":{\"130\":1}}],[\"当多个事务相互持有对方需要的资源而无法释放时\",{\"1\":{\"47\":1}}],[\"当两个任务中\",{\"1\":{\"123\":1,\"719\":1}}],[\"当前页码\",{\"1\":{\"710\":1}}],[\"当前所有商品涉及到的所有分类信息\",{\"1\":{\"710\":1}}],[\"当前所有商品涉及到的所有品牌信息\",{\"1\":{\"710\":1}}],[\"当前所有商品涉及到的所有属性信息\",{\"1\":{\"710\":1}}],[\"当前聚合name\",{\"1\":{\"687\":1}}],[\"当前分组只能关联别的分组没有引用的属性\",{\"1\":{\"674\":1}}],[\"当前分组只能关联自己所属分组里面的所有属性\",{\"1\":{\"674\":1}}],[\"当前分类的id\",{\"1\":{\"674\":1}}],[\"当前激活的标签\",{\"1\":{\"518\":1}}],[\"当前类需要设置为配置类\",{\"1\":{\"263\":1}}],[\"当前类加锁\",{\"1\":{\"146\":1}}],[\"当前这个是默认值\",{\"1\":{\"201\":1,\"215\":1}}],[\"当前状态\",{\"1\":{\"186\":1}}],[\"当前实例加锁\",{\"1\":{\"146\":1}}],[\"当前completablefuture或other的计算结果\",{\"1\":{\"143\":1}}],[\"当前completablefuture完成后\",{\"1\":{\"121\":1,\"717\":1}}],[\"当前线程标示\",{\"1\":{\"780\":1}}],[\"当前线程是被阻塞的\",{\"1\":{\"342\":1}}],[\"当前线程的中断标识为tue\",{\"1\":{\"155\":1}}],[\"当前线程将自己修改的数据成功写入\",{\"1\":{\"145\":1}}],[\"当前线程\",{\"1\":{\"105\":1,\"119\":2,\"712\":3,\"715\":2}}],[\"当前线程会释放锁\",{\"1\":{\"93\":1}}],[\"当前线程a会等待threadb线程终止后threada才会继续执行\",{\"1\":{\"87\":1}}],[\"当当前的completablefuture完成时\",{\"1\":{\"121\":1,\"717\":1}}],[\"当工作队列已满\",{\"1\":{\"115\":1,\"713\":1}}],[\"当达到容量限制时\",{\"1\":{\"112\":2}}],[\"当有多个线程等待一个锁时\",{\"1\":{\"102\":1}}],[\"当线程2走到删除锁逻辑时\",{\"1\":{\"778\":1}}],[\"当线程池中的线程数超过核心线程数时\",{\"1\":{\"115\":1,\"713\":1}}],[\"当线程调用\",{\"1\":{\"108\":1}}],[\"当线程获取锁时\",{\"1\":{\"84\":1}}],[\"当线程出现资源竞争时\",{\"1\":{\"84\":1}}],[\"当超时等待时间到达后\",{\"1\":{\"84\":1}}],[\"当超出变量的作用域后\",{\"1\":{\"50\":1}}],[\"当元素数量超过初始容量与负载因子的乘积时\",{\"1\":{\"71\":1}}],[\"当链表长度大于阈值\",{\"1\":{\"70\":1}}],[\"当上述步骤完成后\",{\"1\":{\"69\":1}}],[\"当你要将键值对存储到\",{\"1\":{\"69\":1}}],[\"当键值对数量达到这个阈值时\",{\"1\":{\"63\":1}}],[\"当在一段代码块中定义一个变量时\",{\"1\":{\"50\":1}}],[\"当页面首次加载时\",{\"1\":{\"14\":1}}],[\"增强id的复杂度\",{\"1\":{\"752\":1}}],[\"增强能力\",{\"1\":{\"27\":1}}],[\"增长超过多少百分比则触发重写\",{\"1\":{\"372\":1}}],[\"增删改查\",{\"0\":{\"187\":1},\"1\":{\"557\":1}}],[\"增加拥有次数\",{\"1\":{\"782\":2}}],[\"增加了系统负载\",{\"1\":{\"701\":1}}],[\"增加了超时等待的功能\",{\"1\":{\"84\":1}}],[\"增加和修改分组\",{\"1\":{\"667\":1}}],[\"增加搜索接口\",{\"1\":{\"531\":1}}],[\"增加用户体验\",{\"1\":{\"469\":1}}],[\"增加模版存放位置\",{\"1\":{\"423\":1}}],[\"增加服务器性能\",{\"1\":{\"377\":1}}],[\"增加更多消费者\",{\"1\":{\"362\":2}}],[\"增加\",{\"0\":{\"188\":1}}],[\"增加许可证的数量\",{\"1\":{\"109\":1}}],[\"增加表列数可以使用alter\",{\"1\":{\"47\":1}}],[\"终止进程或线程\",{\"1\":{\"153\":1}}],[\"终止\",{\"1\":{\"47\":1,\"81\":1}}],[\"阻塞式等待\",{\"1\":{\"704\":1}}],[\"阻塞服务器进程\",{\"1\":{\"369\":1}}],[\"阻塞之后也有对应的唤醒方法\",{\"1\":{\"156\":1}}],[\"阻塞行为\",{\"1\":{\"143\":1}}],[\"阻塞等待结果\",{\"1\":{\"142\":1}}],[\"阻塞方法\",{\"1\":{\"112\":1}}],[\"阻塞操作\",{\"1\":{\"112\":1}}],[\"阻塞队列演示\",{\"1\":{\"112\":1}}],[\"阻塞队列\",{\"1\":{\"112\":1}}],[\"阻塞\",{\"1\":{\"47\":1,\"81\":1,\"86\":1,\"112\":2}}],[\"方向\",{\"1\":{\"508\":1}}],[\"方案2\",{\"1\":{\"432\":1}}],[\"方便后续获得当前登录信息校验登录状态\",{\"1\":{\"738\":1}}],[\"方便以后使用\",{\"1\":{\"698\":1}}],[\"方便\",{\"1\":{\"548\":1}}],[\"方便简单\",{\"1\":{\"526\":1}}],[\"方便测试\",{\"1\":{\"416\":1,\"423\":1}}],[\"方便监控和故障排查\",{\"1\":{\"27\":1}}],[\"方式三\",{\"1\":{\"184\":1,\"245\":1}}],[\"方式二\",{\"1\":{\"184\":1,\"245\":1}}],[\"方式调用的方法\",{\"1\":{\"184\":3}}],[\"方式一\",{\"1\":{\"184\":1,\"245\":1}}],[\"方式3\",{\"1\":{\"156\":1}}],[\"方式2\",{\"1\":{\"156\":1}}],[\"方式1\",{\"1\":{\"156\":1}}],[\"方式\",{\"1\":{\"81\":1}}],[\"方法不用调用\",{\"1\":{\"706\":1}}],[\"方法出口等信息\",{\"1\":{\"694\":1}}],[\"方法区也是被所有线程共享的\",{\"1\":{\"694\":1}}],[\"方法区\",{\"1\":{\"694\":1}}],[\"方法2\",{\"1\":{\"431\":1}}],[\"方法进行对象注入\",{\"1\":{\"270\":1}}],[\"方法进行线程间的等待和通知\",{\"1\":{\"91\":1}}],[\"方法需要返回string\",{\"1\":{\"261\":1}}],[\"方法实现阻塞线程和解除线程阻塞的过程\",{\"1\":{\"156\":1}}],[\"方法让线程等待\",{\"1\":{\"156\":1}}],[\"方法再次将中断标识置为true\",{\"1\":{\"155\":1}}],[\"方法会阻塞等待任务完成\",{\"1\":{\"142\":1}}],[\"方法会阻塞当前线程\",{\"1\":{\"105\":1}}],[\"方法获取任务的执行结果时\",{\"1\":{\"142\":1}}],[\"方法获取锁\",{\"1\":{\"91\":1}}],[\"方法用于比较当前值与期望值\",{\"1\":{\"155\":1}}],[\"方法用于释放许可证\",{\"1\":{\"109\":1}}],[\"方法用于获取许可证\",{\"1\":{\"109\":1}}],[\"方法用于让线程等待其他线程到达同步点\",{\"1\":{\"108\":1}}],[\"方法后\",{\"1\":{\"108\":1}}],[\"方法时\",{\"1\":{\"93\":1,\"108\":1}}],[\"方法可以响应中断\",{\"1\":{\"91\":1}}],[\"方法释放锁\",{\"1\":{\"91\":1}}],[\"方法或代码块时\",{\"1\":{\"91\":1}}],[\"方法将线程设置为守护线程\",{\"1\":{\"89\":1}}],[\"方法调用放在一个循环中\",{\"1\":{\"92\":1}}],[\"方法调用也是释放锁的\",{\"1\":{\"87\":1}}],[\"方法调用后线程处于阻塞状态\",{\"1\":{\"86\":1}}],[\"方法调用后线程只是暂时的将调度权让给别人\",{\"1\":{\"86\":1}}],[\"方法是被\",{\"1\":{\"87\":1}}],[\"方法使线程转换到runable状态\",{\"1\":{\"84\":1}}],[\"方法线程会进入到waiting状态\",{\"1\":{\"84\":1}}],[\"方法开始运行\",{\"1\":{\"84\":1}}],[\"方法比较\",{\"1\":{\"69\":2}}],[\"方法来判断任务的执行状态\",{\"1\":{\"105\":1}}],[\"方法来取消任务的执行\",{\"1\":{\"105\":1}}],[\"方法来获取计算的结果\",{\"1\":{\"105\":1}}],[\"方法来唤醒它\",{\"1\":{\"93\":1}}],[\"方法来完成的\",{\"1\":{\"69\":1}}],[\"方法来执行移除后的操作\",{\"1\":{\"67\":1}}],[\"方法来创建一个新的数组\",{\"1\":{\"56\":1}}],[\"方法的开始\",{\"1\":{\"159\":1}}],[\"方法的默认实现通常是基于对象的内存地址计算的\",{\"1\":{\"66\":1}}],[\"方法的底层实现\",{\"1\":{\"66\":1,\"67\":1}}],[\"方法内部进行了以下操作\",{\"1\":{\"66\":1,\"67\":1}}],[\"方法名\",{\"1\":{\"143\":1,\"168\":1,\"169\":1,\"170\":1}}],[\"方法名和参数列表必须完全相同\",{\"1\":{\"47\":1}}],[\"方法名相同但参数列表不同的多个方法\",{\"1\":{\"47\":1}}],[\"方法\",{\"1\":{\"47\":1,\"66\":2,\"67\":1,\"91\":1,\"93\":2,\"117\":2,\"142\":1,\"143\":2,\"155\":1,\"565\":1,\"615\":1,\"694\":1,\"770\":1}}],[\"方法和string类的valueof\",{\"1\":{\"47\":1}}],[\"最不经常使用\",{\"1\":{\"749\":1}}],[\"最近最少使用\",{\"1\":{\"749\":1}}],[\"最佳实战\",{\"1\":{\"704\":1}}],[\"最小编辑距离\",{\"1\":{\"566\":1}}],[\"最小的\",{\"1\":{\"562\":1}}],[\"最小余额\",{\"1\":{\"209\":1}}],[\"最多9张\",{\"1\":{\"801\":1}}],[\"最多创建和加入五个队伍\",{\"1\":{\"561\":1,\"574\":1}}],[\"最多创建五个队伍\",{\"1\":{\"558\":1}}],[\"最多1个结果\",{\"1\":{\"209\":1}}],[\"最简单的消息队列模型包括3个角色\",{\"1\":{\"791\":1}}],[\"最简单\",{\"1\":{\"548\":1}}],[\"最终的访问的结果不一样\",{\"1\":{\"476\":1}}],[\"最终指向的都是同一个内存地址\",{\"1\":{\"58\":1}}],[\"最新教程\",{\"1\":{\"455\":1}}],[\"最早的消息可能成为死信\",{\"1\":{\"361\":1}}],[\"最为常用的方式\",{\"1\":{\"167\":1}}],[\"最常采用的是cas算法\",{\"1\":{\"145\":1}}],[\"最典型的例子就是reentrantlock和reentrantreadwritelock都是基于aqs实现的\",{\"1\":{\"136\":1}}],[\"最大人数等搜索队伍\",{\"1\":{\"559\":1}}],[\"最大人数\",{\"1\":{\"557\":2}}],[\"最大重试次数\",{\"1\":{\"342\":1,\"350\":1}}],[\"最大余额\",{\"1\":{\"209\":1}}],[\"最大容量\",{\"1\":{\"63\":1}}],[\"最大线程数\",{\"1\":{\"47\":1,\"115\":1,\"713\":1}}],[\"最后将方法的结果放入缓存\",{\"1\":{\"706\":1}}],[\"最后将副本替换原数组\",{\"1\":{\"98\":1}}],[\"最后再安装其他依赖\",{\"1\":{\"655\":1}}],[\"最后还是释放了别人的锁\",{\"1\":{\"549\":1}}],[\"最后释放连接测试\",{\"1\":{\"395\":1}}],[\"最后\",{\"1\":{\"56\":1,\"66\":2,\"67\":1}}],[\"最坏$o\",{\"1\":{\"51\":1}}],[\"最好是将多条sql合并为一条\",{\"1\":{\"211\":1}}],[\"最好$o\",{\"1\":{\"51\":1}}],[\"最好用的markdown+最好用的图床工具\",{\"1\":{\"44\":1}}],[\"每台机器还是会都查询一次数据库\",{\"1\":{\"702\":1}}],[\"每10s续期一次\",{\"1\":{\"551\":1}}],[\"每1000条批量插入一次\",{\"1\":{\"211\":1}}],[\"每天的23点59执行\",{\"1\":{\"544\":1,\"551\":1,\"573\":1}}],[\"每天刷新所有用户的推荐\",{\"1\":{\"544\":1}}],[\"每条接口包括\",{\"1\":{\"521\":1}}],[\"每条消息设置一个唯一的标识id\",{\"1\":{\"360\":1}}],[\"每列代表一个属性\",{\"1\":{\"377\":1}}],[\"每行代表一个记录\",{\"1\":{\"377\":1}}],[\"每一个需要缓存的数据我们都来指定要放到哪个名字的缓存中\",{\"1\":{\"706\":1}}],[\"每一个1级分类\",{\"1\":{\"690\":1,\"697\":1}}],[\"每一个被锁住的对象都会和monitor关联起来\",{\"1\":{\"150\":1}}],[\"每一种类型的数据放在一起\",{\"1\":{\"680\":1}}],[\"每一行数据映射为map<string\",{\"1\":{\"524\":1}}],[\"每一次执行快照读时生成readview\",{\"1\":{\"476\":1}}],[\"每一条消息都生成一个唯一的id\",{\"1\":{\"352\":1}}],[\"每20毫秒发送一次\",{\"1\":{\"333\":1}}],[\"每页大小\",{\"1\":{\"219\":1}}],[\"每次查询完成后\",{\"1\":{\"810\":1}}],[\"每次锁被释放时\",{\"1\":{\"782\":1}}],[\"每次锁被获得时\",{\"1\":{\"782\":1}}],[\"每次更新数据库都更新缓存\",{\"1\":{\"750\":1}}],[\"每次更新就会+1\",{\"1\":{\"682\":1}}],[\"每次操作数据库\",{\"1\":{\"750\":1}}],[\"每次修改页面之后都要重新打包构建一个镜像\",{\"1\":{\"646\":1}}],[\"每次删除编辑距离值最大的那个\",{\"1\":{\"575\":1}}],[\"每次新加一个编辑器\",{\"1\":{\"491\":1}}],[\"每次都要创建writesheet\",{\"1\":{\"431\":1}}],[\"每次只能获取一条消息\",{\"1\":{\"333\":1}}],[\"每次插入键值对时\",{\"1\":{\"69\":1}}],[\"每次扩容都需要拷贝数组\",{\"1\":{\"57\":1}}],[\"每日一记\",{\"2\":{\"45\":1}}],[\"每个表存储其中一部分字段\",{\"1\":{\"730\":1}}],[\"每个环境互不影响\",{\"1\":{\"634\":1}}],[\"每个服务器都执行定时任务\",{\"1\":{\"545\":1}}],[\"每个数据库实例和表集合负责存储和处理部分数据\",{\"1\":{\"478\":1}}],[\"每个数据行都有一个版本号\",{\"1\":{\"476\":1}}],[\"每个rabbittemplate只能配置一个returncallback\",{\"1\":{\"344\":1}}],[\"每个事务都会检查这个版本号或时间戳字段\",{\"1\":{\"210\":1}}],[\"每个字段不一定全部都输入\",{\"1\":{\"185\":1}}],[\"每个线程都有自己独立的工作内存\",{\"1\":{\"158\":1}}],[\"每个线程都有一个程序计数器\",{\"1\":{\"694\":1}}],[\"每个线程都有一个相关的permit\",{\"1\":{\"156\":1}}],[\"每个线程都有一个许可\",{\"1\":{\"156\":1}}],[\"每个线程对象中都有一个中断标识位\",{\"1\":{\"155\":1}}],[\"每个线程代表一个球员\",{\"1\":{\"108\":1}}],[\"每个锁对象拥有一个锁计数器和一个指向持有该锁的线程的指针\",{\"1\":{\"152\":1}}],[\"每个对象天生都带着一个对象监视器\",{\"1\":{\"150\":1}}],[\"每个节点的地位都是一样的\",{\"1\":{\"783\":1}}],[\"每个节点代表一个等待线程\",{\"1\":{\"136\":1}}],[\"每个节点都有多个子节点\",{\"1\":{\"47\":1}}],[\"每个\",{\"1\":{\"66\":1,\"109\":1}}],[\"每个桶可以包含一个链表或红黑树\",{\"1\":{\"63\":1}}],[\"每个键都映射到一个值\",{\"1\":{\"61\":1}}],[\"每个要远程调用的主类都要\",{\"1\":{\"29\":1}}],[\"每个请求只能用一次\",{\"1\":{\"17\":1}}],[\"安装chromedriver的时候会报错\",{\"1\":{\"655\":1}}],[\"安装tomcat和nginx\",{\"1\":{\"641\":1}}],[\"安装java\",{\"1\":{\"640\":1}}],[\"安装依赖\",{\"1\":{\"639\":1}}],[\"安装依赖并运行\",{\"1\":{\"584\":1}}],[\"安装nginx服务器\",{\"0\":{\"639\":1}}],[\"安装可视化界面\",{\"1\":{\"584\":1}}],[\"安装redis\",{\"0\":{\"652\":1},\"1\":{\"378\":1}}],[\"安装\",{\"0\":{\"517\":1},\"1\":{\"317\":1}}],[\"安装教程\",{\"1\":{\"44\":1}}],[\"安全性上\",{\"1\":{\"47\":1}}],[\"安全性\",{\"1\":{\"5\":1}}],[\"发编程提⾼批量导⼊数据库的性能\",{\"1\":{\"571\":1}}],[\"发生错误时\",{\"1\":{\"475\":1}}],[\"发生变更后\",{\"1\":{\"267\":1}}],[\"发现所属分类和分组无法回显\",{\"1\":{\"673\":1}}],[\"发现没有增加功能\",{\"1\":{\"664\":1}}],[\"发现\",{\"1\":{\"658\":1}}],[\"发现需要\",{\"1\":{\"317\":1}}],[\"发现可以不管\",{\"1\":{\"44\":1}}],[\"发送验证码\",{\"1\":{\"738\":3,\"741\":1}}],[\"发送远程调用\",{\"1\":{\"688\":1}}],[\"发送请求\",{\"1\":{\"457\":2,\"532\":2}}],[\"发送给用户\",{\"1\":{\"453\":1}}],[\"发送给订阅了消息的队列\",{\"1\":{\"334\":1}}],[\"发送延迟消息\",{\"1\":{\"355\":2}}],[\"发送ack或reject\",{\"1\":{\"349\":1}}],[\"发送确认消息\",{\"1\":{\"349\":1}}],[\"发送者可靠性\",{\"0\":{\"341\":1}}],[\"发送者\",{\"1\":{\"337\":1}}],[\"发送消息到队列中\",{\"1\":{\"796\":1}}],[\"发送消息到消息队列\",{\"1\":{\"791\":1}}],[\"发送消息name=jack\",{\"1\":{\"794\":1}}],[\"发送消息时\",{\"1\":{\"361\":1}}],[\"发送消息时丢失\",{\"1\":{\"341\":1}}],[\"发送消息\",{\"1\":{\"329\":1,\"332\":1,\"333\":2,\"336\":1,\"337\":1,\"340\":1,\"355\":1,\"406\":1,\"794\":1,\"796\":1}}],[\"发送消息给运维\",{\"1\":{\"230\":2}}],[\"发送delete请求是用来做删除\",{\"1\":{\"262\":1}}],[\"发送put请求是用来做修改\",{\"1\":{\"262\":1}}],[\"发送post请求是用来做新增\",{\"1\":{\"262\":1}}],[\"发送get请求是用来做查询\",{\"1\":{\"262\":1}}],[\"发送邮件给开发人员\",{\"1\":{\"230\":2}}],[\"发布博客时进行推送\",{\"1\":{\"809\":1}}],[\"发布博客\",{\"1\":{\"801\":1}}],[\"发布探店笔记\",{\"0\":{\"801\":1}}],[\"发布订阅\",{\"1\":{\"793\":1}}],[\"发布者发布消息\",{\"1\":{\"335\":1}}],[\"发布控制\",{\"1\":{\"27\":2}}],[\"发布接口\",{\"1\":{\"21\":1}}],[\"发布\",{\"1\":{\"14\":1,\"21\":1}}],[\"遇到的问题\",{\"0\":{\"44\":1}}],[\"全称page\",{\"1\":{\"821\":1}}],[\"全称unique\",{\"1\":{\"821\":1}}],[\"全称multi\",{\"1\":{\"476\":1}}],[\"全文检索字段用match\",{\"1\":{\"685\":1}}],[\"全文检索\",{\"1\":{\"685\":1}}],[\"全部在一个函数里面\",{\"1\":{\"490\":1}}],[\"全盘扫描\",{\"1\":{\"486\":1}}],[\"全表扫描\",{\"1\":{\"486\":1}}],[\"全免费笔记软件+图床的安装与配置\",{\"1\":{\"43\":1}}],[\"全局id生成器\",{\"0\":{\"763\":1}}],[\"全局id类型为自增长\",{\"1\":{\"201\":1,\"215\":1}}],[\"全局jwt过滤器\",{\"1\":{\"728\":1}}],[\"全局响应处理\",{\"0\":{\"630\":1}}],[\"全局异常处理器\",{\"1\":{\"626\":1}}],[\"全局逻辑删除的实体字段名\",{\"1\":{\"215\":1,\"605\":1}}],[\"全局过滤\",{\"1\":{\"27\":1}}],[\"全局网关\",{\"1\":{\"27\":2}}],[\"系统也能够继续提供服务\",{\"1\":{\"700\":1}}],[\"系统未知异常\",{\"1\":{\"666\":1}}],[\"系统集成测试\",{\"1\":{\"634\":1}}],[\"系统内部异常\",{\"1\":{\"625\":1}}],[\"系统设置的删除并不是真正的删除\",{\"1\":{\"605\":1}}],[\"系统设计\",{\"2\":{\"38\":1,\"39\":1}}],[\"系统可以使用回滚段中的数据副本来恢复数据\",{\"1\":{\"476\":1}}],[\"系统会在回滚段\",{\"1\":{\"476\":1}}],[\"系统会为每个事务创建一个快照\",{\"1\":{\"476\":1}}],[\"系统会为新的数据行创建一个新版本\",{\"1\":{\"476\":2}}],[\"系统会忽略被其他事务修改的数据行\",{\"1\":{\"476\":1}}],[\"系统会根据事务的隔离级别选择合适的数据版本\",{\"1\":{\"476\":1}}],[\"系统繁忙\",{\"1\":{\"230\":1}}],[\"系统异常\",{\"1\":{\"230\":1}}],[\"系统主内存共享变量数据修改被写入的时机是不确定的\",{\"1\":{\"158\":1}}],[\"系统优化切换原则\",{\"1\":{\"143\":1}}],[\"系统架构优化\",{\"0\":{\"24\":1}}],[\"见链接\",{\"1\":{\"32\":1,\"33\":1}}],[\"优惠券id\",{\"1\":{\"764\":1,\"765\":1,\"770\":2}}],[\"优惠券信息\",{\"1\":{\"764\":1}}],[\"优惠券系统coupon\",{\"1\":{\"655\":1}}],[\"优惠卷id\",{\"1\":{\"789\":1,\"796\":1}}],[\"优惠卷的基本信息\",{\"1\":{\"764\":1}}],[\"优惠卷秒杀\",{\"0\":{\"762\":1}}],[\"优先使用配置中心的配置\",{\"1\":{\"660\":1}}],[\"优先队列耗时\",{\"1\":{\"575\":1}}],[\"优先把小表放到外边\",{\"1\":{\"487\":1}}],[\"优点\",{\"1\":{\"156\":1,\"510\":1,\"630\":1,\"752\":2,\"792\":1,\"793\":1,\"808\":4}}],[\"优点之一就是可一定程度避免死锁\",{\"1\":{\"152\":1}}],[\"优点是跨语言\",{\"1\":{\"29\":1}}],[\"优势\",{\"1\":{\"114\":1,\"730\":1}}],[\"优化方案\",{\"1\":{\"742\":1}}],[\"优化方法\",{\"1\":{\"567\":1}}],[\"优化代码\",{\"1\":{\"697\":1}}],[\"优化比例\",{\"1\":{\"575\":2}}],[\"优化阶段\",{\"1\":{\"463\":1}}],[\"优化\",{\"0\":{\"484\":1,\"538\":1},\"1\":{\"23\":1,\"567\":1}}],[\"写在主机上\",{\"1\":{\"783\":1}}],[\"写锁加锁成功\",{\"1\":{\"704\":1}}],[\"写锁可以降级为读锁\",{\"1\":{\"111\":1}}],[\"写一个测试接口用来获取\",{\"1\":{\"660\":1}}],[\"写一个接口\",{\"1\":{\"659\":1}}],[\"写个测试类测试\",{\"1\":{\"655\":1}}],[\"写小demo\",{\"1\":{\"580\":1}}],[\"写死配置\",{\"1\":{\"545\":1}}],[\"写程序\",{\"1\":{\"535\":1}}],[\"写法1\",{\"1\":{\"525\":1}}],[\"写到数据库\",{\"1\":{\"523\":1}}],[\"写接口信息的文档\",{\"1\":{\"521\":1}}],[\"写excel\",{\"0\":{\"430\":1}}],[\"写命令执行完先放入aof缓冲区\",{\"1\":{\"371\":2}}],[\"写出数据\",{\"1\":{\"171\":1}}],[\"写屏障\",{\"1\":{\"161\":1}}],[\"写入redis\",{\"1\":{\"758\":1,\"816\":1}}],[\"写入http\",{\"1\":{\"681\":1}}],[\"写入以下内容\",{\"1\":{\"660\":1}}],[\"写入到从库的中继日志relay\",{\"1\":{\"477\":1}}],[\"写入操作\",{\"1\":{\"476\":1}}],[\"写入excel\",{\"1\":{\"430\":1}}],[\"写入一条string数据\",{\"1\":{\"399\":1}}],[\"写入前会把object序列化为字节形式\",{\"1\":{\"398\":1}}],[\"写入完成\",{\"1\":{\"110\":2}}],[\"写入\",{\"1\":{\"110\":2,\"756\":1}}],[\"写操作较少的场景下\",{\"1\":{\"98\":1}}],[\"写操作相对较少的场景\",{\"1\":{\"98\":1}}],[\"写操作的复制机制\",{\"1\":{\"98\":1}}],[\"写好的索引怎么\",{\"1\":{\"47\":1}}],[\"写jav妾口\",{\"1\":{\"29\":1}}],[\"写上配置类\",{\"1\":{\"18\":1}}],[\"注册中心\",{\"1\":{\"657\":1}}],[\"注册失败\",{\"1\":{\"612\":1}}],[\"注册成功\",{\"1\":{\"612\":1}}],[\"注册按钮的字是登录\",{\"1\":{\"612\":1}}],[\"注册页面\",{\"0\":{\"612\":1}}],[\"注册逻辑\",{\"0\":{\"599\":1},\"1\":{\"612\":1}}],[\"注册\",{\"1\":{\"581\":1,\"612\":3,\"657\":1,\"738\":1}}],[\"注册时间\",{\"1\":{\"519\":1}}],[\"注册一个测试号\",{\"0\":{\"451\":1}}],[\"注册好账号\",{\"1\":{\"450\":1}}],[\"注册后在\",{\"1\":{\"201\":1}}],[\"注释\",{\"1\":{\"417\":1}}],[\"注入program\",{\"1\":{\"491\":1}}],[\"注入properties类型数据\",{\"0\":{\"293\":1}}],[\"注入引用类型数据\",{\"1\":{\"310\":1}}],[\"注入资源\",{\"0\":{\"310\":1}}],[\"注入属性\",{\"1\":{\"295\":1}}],[\"注入map类型数据\",{\"0\":{\"292\":1}}],[\"注入set类型数据\",{\"0\":{\"291\":1}}],[\"注入list类型数据\",{\"0\":{\"290\":1}}],[\"注入数组类型数据\",{\"0\":{\"289\":1}}],[\"注解管理第三方bean\",{\"0\":{\"308\":1}}],[\"注解\",{\"1\":{\"216\":1}}],[\"注解开发\",{\"0\":{\"192\":1,\"299\":1}}],[\"注解+编程式\",{\"1\":{\"29\":1}}],[\"注\",{\"1\":{\"47\":1}}],[\"注意需要更换版本\",{\"1\":{\"687\":1}}],[\"注意开启事物\",{\"1\":{\"672\":1}}],[\"注意要放在renrenfast上面\",{\"1\":{\"663\":1}}],[\"注意释放锁要写在finally中\",{\"1\":{\"551\":1}}],[\"注意事项\",{\"0\":{\"549\":1}}],[\"注意点\",{\"1\":{\"544\":1}}],[\"注意此处该注解就不能省略\",{\"1\":{\"261\":1}}],[\"注意当前类必须受spring容器控制\",{\"1\":{\"232\":1}}],[\"注意接口的返回结果变成了resultmap而不是resulttype\",{\"1\":{\"181\":1}}],[\"注意上锁之后必须要解锁\",{\"1\":{\"103\":1}}],[\"注意方法名\",{\"1\":{\"47\":1}}],[\"注意\",{\"1\":{\"29\":1,\"185\":1,\"261\":1,\"270\":1,\"412\":1,\"453\":1,\"504\":1,\"522\":1,\"681\":1,\"756\":1}}],[\"注意不要启动测试\",{\"1\":{\"18\":1}}],[\"未签到则记录为0\",{\"1\":{\"819\":1}}],[\"未点赞过则点赞数+1\",{\"1\":{\"803\":1}}],[\"未支付\",{\"1\":{\"764\":1}}],[\"未获取到锁\",{\"1\":{\"755\":1}}],[\"未登录\",{\"1\":{\"625\":1}}],[\"未登录不允许创建\",{\"1\":{\"558\":2}}],[\"未加入队伍\",{\"1\":{\"562\":1}}],[\"未过期的队伍\",{\"1\":{\"561\":1}}],[\"未过期\",{\"1\":{\"556\":1,\"561\":1,\"756\":1,\"758\":1}}],[\"未满\",{\"1\":{\"556\":1,\"561\":1}}],[\"未提交读\",{\"1\":{\"474\":1}}],[\"未找到合适的queue\",{\"1\":{\"341\":1}}],[\"未扩容\",{\"1\":{\"58\":1}}],[\"未必要使用http协议\",{\"1\":{\"28\":1}}],[\"未删除\",{\"1\":{\"9\":1,\"215\":1,\"605\":1}}],[\"供其他项目调用\",{\"1\":{\"28\":1}}],[\"环境搭建\",{\"0\":{\"650\":1}}],[\"环境id\",{\"1\":{\"178\":1}}],[\"环境\",{\"1\":{\"28\":1}}],[\"707\",{\"1\":{\"696\":1}}],[\"7003同理\",{\"1\":{\"373\":1}}],[\"7003\",{\"1\":{\"373\":2}}],[\"7002\",{\"1\":{\"373\":2}}],[\"7001\",{\"1\":{\"373\":3}}],[\"7<\",{\"1\":{\"522\":1}}],[\"7200\",{\"1\":{\"457\":1}}],[\"73\",{\"1\":{\"438\":1}}],[\"7个线程\",{\"1\":{\"108\":1}}],[\"75\",{\"1\":{\"64\":7,\"71\":1}}],[\"75f\",{\"1\":{\"63\":1}}],[\"7\",{\"0\":{\"844\":1},\"1\":{\"27\":1,\"108\":2,\"115\":2,\"395\":2,\"452\":1,\"469\":1,\"523\":2,\"558\":1,\"567\":2,\"681\":4,\"682\":1,\"688\":1,\"713\":2,\"738\":1,\"765\":1,\"770\":2}}],[\"拼接字符串\",{\"1\":{\"27\":1}}],[\"装饰\",{\"1\":{\"27\":1}}],[\"分享链接\",{\"1\":{\"824\":1}}],[\"分享队伍\",{\"1\":{\"556\":1}}],[\"分词器\",{\"0\":{\"687\":1}}],[\"分词检索\",{\"1\":{\"685\":1}}],[\"分类聚合\",{\"1\":{\"710\":1}}],[\"分类完整路径\",{\"1\":{\"673\":1}}],[\"分类id\",{\"1\":{\"672\":1}}],[\"分类\",{\"1\":{\"634\":1,\"710\":1}}],[\"分类表\",{\"1\":{\"508\":1}}],[\"分数越高\",{\"1\":{\"566\":1}}],[\"分离定时任务和主程序\",{\"1\":{\"545\":1}}],[\"分10组\",{\"1\":{\"539\":1}}],[\"分批插入\",{\"0\":{\"538\":1}}],[\"分析每一个attrs传过来的参数值\",{\"1\":{\"710\":1}}],[\"分析sql\",{\"1\":{\"486\":1}}],[\"分析源码主要从三个方面考虑\",{\"1\":{\"52\":1}}],[\"分库分表是一种数据库水平拆分\",{\"1\":{\"478\":1}}],[\"分库分表\",{\"0\":{\"478\":1},\"1\":{\"487\":1}}],[\"分组关联关系\",{\"0\":{\"674\":1}}],[\"分组名字\",{\"1\":{\"670\":1}}],[\"分组名称\",{\"1\":{\"522\":1,\"727\":1}}],[\"分组id\",{\"1\":{\"670\":1}}],[\"分组\",{\"1\":{\"469\":1,\"670\":1}}],[\"分多次\",{\"1\":{\"432\":1}}],[\"分布式系统\",{\"1\":{\"750\":1}}],[\"分布式组件\",{\"0\":{\"656\":1}}],[\"分布式\",{\"1\":{\"543\":2}}],[\"分布式session登录\",{\"0\":{\"571\":1}}],[\"分布式session\",{\"0\":{\"533\":1}}],[\"分布式缓存\",{\"0\":{\"366\":1}}],[\"分布式锁redission\",{\"0\":{\"781\":1}}],[\"分布式锁原子性问题\",{\"0\":{\"779\":1}}],[\"分布式锁的核心思想就是让大家都使用同一把锁\",{\"1\":{\"775\":1}}],[\"分布式锁来实现操作互\",{\"1\":{\"574\":1}}],[\"分布式锁实现的关键\",{\"0\":{\"546\":1}}],[\"分布式锁\",{\"0\":{\"545\":1,\"703\":1,\"775\":1,\"782\":1},\"1\":{\"360\":1,\"540\":1,\"545\":1,\"561\":1,\"567\":2,\"574\":1,\"700\":1,\"704\":1,\"775\":1}}],[\"分布式事务\",{\"1\":{\"359\":1}}],[\"分布式改造\",{\"0\":{\"28\":1}}],[\"分别修改每个配置文件的端口为7001\",{\"1\":{\"373\":1}}],[\"分别用于表现层\",{\"1\":{\"299\":1}}],[\"分别是可以传入callable和runnable接口\",{\"1\":{\"142\":1}}],[\"分别是\",{\"1\":{\"47\":1}}],[\"分别是什么\",{\"1\":{\"47\":1}}],[\"分支合并任务\",{\"1\":{\"117\":1}}],[\"分支合并池\",{\"1\":{\"117\":1}}],[\"分支合并\",{\"1\":{\"117\":1}}],[\"分页信息\",{\"1\":{\"710\":1}}],[\"分页展示队伍列表\",{\"1\":{\"559\":1}}],[\"分页去数据库查询数据\",{\"1\":{\"431\":1}}],[\"分页条件\",{\"1\":{\"220\":1}}],[\"分页结果\",{\"1\":{\"220\":1}}],[\"分页返回结果\",{\"1\":{\"220\":1}}],[\"分页插件\",{\"0\":{\"219\":1}}],[\"分页查询收邮箱\",{\"0\":{\"810\":1}}],[\"分页查询实体\",{\"1\":{\"220\":1}}],[\"分页查询\",{\"0\":{\"540\":1},\"1\":{\"208\":1,\"219\":1,\"674\":1}}],[\"分页\",{\"1\":{\"47\":1,\"710\":3,\"817\":1}}],[\"分钟\",{\"1\":{\"27\":1}}],[\"分配给其他进程或线程\",{\"1\":{\"153\":1}}],[\"分配内存管理\",{\"1\":{\"47\":1}}],[\"分配\",{\"1\":{\"22\":1}}],[\"分配签名\",{\"1\":{\"22\":1}}],[\"2^32个bit位\",{\"1\":{\"819\":1}}],[\"2版本中加入了对geo的支持\",{\"1\":{\"815\":1}}],[\"2为加载最新\",{\"1\":{\"732\":2}}],[\"280\",{\"1\":{\"696\":1}}],[\"28\",{\"1\":{\"685\":1}}],[\"289465\",{\"1\":{\"444\":1}}],[\"2be2\",{\"1\":{\"660\":1}}],[\"2种引入方式\",{\"0\":{\"551\":1}}],[\"263410154\",{\"1\":{\"533\":1}}],[\"263379\",{\"1\":{\"444\":1}}],[\"274654\",{\"1\":{\"444\":1}}],[\"27017\",{\"1\":{\"323\":2}}],[\"2层\",{\"1\":{\"444\":1}}],[\"225\",{\"1\":{\"710\":2}}],[\"22\",{\"1\":{\"655\":1}}],[\"22e11407287926b4d5b74e09\",{\"1\":{\"444\":2}}],[\"227332\",{\"1\":{\"444\":1}}],[\"222\",{\"1\":{\"143\":2,\"233\":3}}],[\"296\",{\"1\":{\"696\":1}}],[\"29\",{\"1\":{\"442\":2}}],[\"2运算\",{\"1\":{\"420\":1}}],[\"2分\",{\"1\":{\"355\":1}}],[\"255\",{\"1\":{\"670\":8,\"672\":2,\"764\":2,\"801\":2}}],[\"25\",{\"1\":{\"319\":1,\"439\":3}}],[\"256\",{\"1\":{\"9\":8,\"509\":1,\"557\":2,\"596\":2}}],[\"216ms缩短⾄\",{\"1\":{\"572\":1}}],[\"214\",{\"1\":{\"443\":1}}],[\"21892734521\",{\"1\":{\"442\":1}}],[\"21\",{\"1\":{\"240\":1,\"339\":1,\"639\":4}}],[\"2冻结\",{\"1\":{\"216\":1}}],[\"2l\",{\"1\":{\"196\":1,\"205\":1,\"207\":1}}],[\"246\",{\"1\":{\"646\":2}}],[\"24\",{\"1\":{\"196\":1,\"208\":1,\"211\":1,\"551\":2,\"781\":1}}],[\"2<\",{\"1\":{\"196\":1,\"303\":1,\"416\":1,\"429\":1,\"551\":2,\"593\":1,\"594\":1,\"781\":1,\"817\":1}}],[\"23c65c718fo651\",{\"1\":{\"665\":1}}],[\"2307519546763\",{\"1\":{\"442\":1}}],[\"23\",{\"1\":{\"168\":1,\"171\":1,\"439\":1,\"544\":1,\"551\":1,\"573\":1}}],[\"2获取指定的构造方法\",{\"1\":{\"168\":1}}],[\"2fb\",{\"1\":{\"665\":1}}],[\"2f1f2bfb43807615d23ce33c\",{\"1\":{\"444\":2}}],[\"2f\",{\"1\":{\"143\":2}}],[\"2048\",{\"1\":{\"801\":2}}],[\"20<\",{\"1\":{\"663\":1}}],[\"2088\",{\"1\":{\"523\":1}}],[\"2063\",{\"1\":{\"731\":1}}],[\"206\",{\"1\":{\"443\":1}}],[\"2017\",{\"1\":{\"415\":1}}],[\"20秒\",{\"1\":{\"355\":1}}],[\"2020\",{\"1\":{\"731\":3}}],[\"2022\",{\"1\":{\"657\":1,\"763\":1}}],[\"2023\",{\"1\":{\"211\":14,\"319\":1,\"519\":1,\"537\":1,\"538\":1,\"539\":1,\"598\":1,\"609\":1}}],[\"2024年6月14日面试\",{\"0\":{\"47\":1}}],[\"20240511101457693\",{\"1\":{\"43\":1}}],[\"20\",{\"1\":{\"115\":1,\"333\":2,\"539\":1,\"558\":2,\"567\":1,\"670\":1,\"685\":1,\"710\":1,\"713\":1}}],[\"20040\",{\"1\":{\"226\":1}}],[\"20041\",{\"1\":{\"226\":1}}],[\"20030\",{\"1\":{\"226\":1}}],[\"20031\",{\"1\":{\"226\":1}}],[\"20020\",{\"1\":{\"226\":1}}],[\"20021\",{\"1\":{\"226\":1}}],[\"2001\",{\"1\":{\"269\":1,\"270\":1,\"278\":1,\"295\":1}}],[\"20010\",{\"1\":{\"226\":1}}],[\"20011\",{\"1\":{\"226\":1}}],[\"2000\",{\"1\":{\"204\":1,\"211\":8,\"344\":1,\"670\":2,\"796\":2}}],[\"20000\",{\"1\":{\"196\":1,\"685\":1}}],[\"200\",{\"1\":{\"27\":1,\"142\":2,\"196\":1,\"205\":2,\"207\":1,\"208\":1,\"333\":1,\"418\":1,\"423\":1,\"670\":5,\"728\":2}}],[\"2\",{\"0\":{\"567\":1,\"839\":1},\"1\":{\"27\":1,\"51\":1,\"58\":2,\"71\":3,\"73\":1,\"93\":6,\"105\":1,\"112\":7,\"115\":1,\"116\":1,\"117\":1,\"119\":2,\"120\":3,\"126\":1,\"132\":3,\"134\":1,\"143\":3,\"155\":3,\"156\":4,\"168\":2,\"171\":1,\"175\":1,\"184\":1,\"190\":2,\"205\":2,\"208\":1,\"210\":3,\"211\":2,\"214\":1,\"216\":1,\"219\":2,\"220\":7,\"224\":3,\"241\":1,\"245\":1,\"261\":1,\"269\":1,\"304\":1,\"312\":2,\"313\":1,\"318\":1,\"339\":1,\"344\":1,\"352\":4,\"355\":3,\"363\":1,\"395\":1,\"396\":1,\"400\":1,\"406\":1,\"415\":2,\"416\":1,\"420\":1,\"439\":2,\"452\":4,\"469\":1,\"522\":2,\"557\":2,\"558\":2,\"562\":3,\"566\":1,\"655\":2,\"663\":1,\"665\":1,\"670\":1,\"673\":1,\"675\":2,\"682\":2,\"687\":1,\"688\":3,\"704\":2,\"705\":1,\"710\":14,\"712\":3,\"715\":2,\"716\":3,\"721\":1,\"726\":1,\"727\":1,\"728\":1,\"730\":2,\"756\":1,\"764\":3,\"765\":1,\"780\":1,\"782\":3,\"789\":2,\"796\":3,\"801\":1,\"810\":2,\"815\":2}}],[\"返回指定member的坐标\",{\"1\":{\"815\":1}}],[\"返回id\",{\"1\":{\"801\":1,\"809\":1}}],[\"返回0表示获取锁失败\",{\"1\":{\"782\":2}}],[\"返回拥有次数\",{\"1\":{\"782\":2}}],[\"返回1表示成功获取锁\",{\"1\":{\"782\":3}}],[\"返回错误或者\",{\"1\":{\"777\":1,\"790\":1}}],[\"返回订单id\",{\"1\":{\"765\":1,\"770\":2,\"789\":1,\"790\":1,\"796\":1}}],[\"返回旧数据\",{\"1\":{\"756\":1,\"758\":1}}],[\"返回数据\",{\"1\":{\"755\":1}}],[\"返回401状态码\",{\"1\":{\"739\":1,\"742\":1}}],[\"返回jwt信息\",{\"1\":{\"725\":1}}],[\"返回json集合数据\",{\"1\":{\"261\":1}}],[\"返回json对象数据\",{\"1\":{\"261\":1}}],[\"返回给前端一个设置cookie的命令\",{\"1\":{\"605\":1}}],[\"返回给前端\",{\"1\":{\"605\":1}}],[\"返回用户信息\",{\"1\":{\"604\":1}}],[\"返回\",{\"1\":{\"506\":1,\"518\":1}}],[\"返回的都是脏数据\",{\"1\":{\"756\":1}}],[\"返回的所有查询到的商品\",{\"1\":{\"710\":1}}],[\"返回的列\",{\"1\":{\"467\":1}}],[\"返回的线程池对象的弊端如下\",{\"1\":{\"115\":1}}],[\"返回消息\",{\"1\":{\"453\":1}}],[\"返回map\",{\"1\":{\"423\":1}}],[\"返回mapperscannerconfigurer对象\",{\"1\":{\"312\":1}}],[\"返回true\",{\"1\":{\"421\":1}}],[\"返回key\",{\"1\":{\"393\":1}}],[\"返回定义所哟集合的交集sunion\",{\"1\":{\"390\":1}}],[\"返回集合中所有成员scard\",{\"1\":{\"390\":1}}],[\"返回集合结果\",{\"1\":{\"209\":1}}],[\"返回nack\",{\"1\":{\"351\":1}}],[\"返回ack\",{\"1\":{\"343\":2}}],[\"返回所有集合的并集srem\",{\"1\":{\"390\":1}}],[\"返回所有成员方法对象的数组\",{\"1\":{\"170\":2}}],[\"返回所有成员变量对象的数组\",{\"1\":{\"169\":2}}],[\"返回所创建类的class对象\",{\"1\":{\"277\":1}}],[\"返回纯文本数据\",{\"1\":{\"261\":1}}],[\"返回文本数据\",{\"1\":{\"261\":1}}],[\"返回码定义code类\",{\"1\":{\"226\":1}}],[\"返回空结果\",{\"1\":{\"220\":2}}],[\"返回空分页结果\",{\"1\":{\"220\":1}}],[\"返回计数结果\",{\"1\":{\"209\":1}}],[\"返回单个成员方法对象\",{\"1\":{\"170\":2}}],[\"返回单个成员变量对象\",{\"1\":{\"169\":2}}],[\"返回被代理方法的返回值\",{\"1\":{\"165\":1}}],[\"返回值\",{\"1\":{\"143\":1,\"165\":1,\"603\":1}}],[\"返回类型\",{\"1\":{\"143\":2}}],[\"返回操作是否成功\",{\"1\":{\"131\":1}}],[\"返回新结果\",{\"1\":{\"143\":1}}],[\"返回新值\",{\"1\":{\"131\":1}}],[\"返回新的数组对象\",{\"1\":{\"71\":1}}],[\"返回一个list<string>\",{\"1\":{\"143\":1}}],[\"返回一个completablefuture<void>\",{\"1\":{\"121\":2,\"717\":2}}],[\"返回一个规范的错误码\",{\"1\":{\"27\":2}}],[\"返回结果result类设置为object\",{\"0\":{\"226\":1}}],[\"返回结果\",{\"1\":{\"22\":1,\"23\":1,\"143\":1,\"801\":1}}],[\"前缀\",{\"1\":{\"611\":1}}],[\"前缀匹配路由\",{\"1\":{\"27\":2}}],[\"前后端交互\",{\"0\":{\"610\":1}}],[\"前后端联调\",{\"1\":{\"521\":1}}],[\"前后端如何交互\",{\"1\":{\"47\":1}}],[\"前者是在内存中\",{\"1\":{\"475\":1}}],[\"前台启动的时候可以加\",{\"1\":{\"379\":1}}],[\"前台启动redis\",{\"1\":{\"378\":1}}],[\"前面加set找对应的setbookdao\",{\"1\":{\"270\":1}}],[\"前面的操作\",{\"1\":{\"159\":1}}],[\"前一个操作的结果对后一个操作是可见的\",{\"1\":{\"159\":1}}],[\"前提是能区分出来哪个标签比较重要\",{\"1\":{\"567\":1}}],[\"前提\",{\"1\":{\"152\":1}}],[\"前100\",{\"1\":{\"47\":1}}],[\"前端已实现\",{\"1\":{\"803\":1}}],[\"前端可以通过返回的订单id来判断是否下单成功\",{\"1\":{\"789\":1}}],[\"前端出现报错pubsub\",{\"1\":{\"675\":1}}],[\"前端js直接上传阿里云\",{\"1\":{\"665\":1}}],[\"前端json插件\",{\"1\":{\"523\":1}}],[\"前端代码\",{\"1\":{\"663\":1}}],[\"前端代码编写\",{\"0\":{\"609\":1}}],[\"前端安装依赖的时候会有很多报错\",{\"1\":{\"655\":1}}],[\"前端多环境\",{\"0\":{\"635\":1}}],[\"前端优化\",{\"0\":{\"629\":1}}],[\"前端接口\",{\"1\":{\"620\":1}}],[\"前端接收到后端命令后\",{\"1\":{\"605\":1}}],[\"前端定义搜索用户接口\",{\"1\":{\"616\":1}}],[\"前端再次去请求后端的时候\",{\"1\":{\"605\":1}}],[\"前端注册传的数据dto\",{\"1\":{\"599\":1}}],[\"前端和搜索结果页的卡片一致\",{\"1\":{\"534\":1}}],[\"前端整合axios\",{\"0\":{\"532\":1}}],[\"前端整合路由\",{\"0\":{\"516\":1}}],[\"前端vue\",{\"1\":{\"518\":1}}],[\"前端主页+组件\",{\"0\":{\"505\":1}}],[\"前端项目初始化\",{\"0\":{\"504\":1}}],[\"前端页面初始化\",{\"0\":{\"583\":1}}],[\"前端页面跳转传值\",{\"0\":{\"531\":1}}],[\"前端页面可以放在html中\",{\"1\":{\"426\":1}}],[\"前端页面\",{\"0\":{\"406\":1},\"1\":{\"670\":1}}],[\"前端请求\",{\"1\":{\"251\":1,\"252\":1}}],[\"前端开发\",{\"0\":{\"14\":1,\"530\":1},\"1\":{\"23\":1,\"663\":1}}],[\"前端开发需要用到后台接口\",{\"1\":{\"5\":1}}],[\"前端初始化\",{\"0\":{\"12\":1}}],[\"前端\",{\"0\":{\"237\":1,\"502\":1,\"638\":1,\"643\":1},\"1\":{\"7\":1,\"253\":1,\"254\":1,\"257\":1,\"258\":1,\"259\":2,\"508\":1,\"582\":1,\"610\":1,\"643\":2,\"741\":1}}],[\"基础知识\",{\"1\":{\"824\":1}}],[\"基础包\",{\"1\":{\"726\":1}}],[\"基础\",{\"0\":{\"462\":1}}],[\"基本类型\",{\"1\":{\"685\":1}}],[\"基本语法\",{\"1\":{\"685\":1}}],[\"基本信息\",{\"1\":{\"670\":1}}],[\"基本属性\",{\"1\":{\"670\":1}}],[\"基本概念\",{\"0\":{\"680\":1},\"1\":{\"669\":1}}],[\"基本概念说明\",{\"1\":{\"317\":1}}],[\"基本使用\",{\"0\":{\"437\":1}}],[\"基本配置\",{\"0\":{\"449\":1},\"1\":{\"201\":1}}],[\"基本上所有的方法的实现实际上都是调用了其静态内存类sync中的方法\",{\"1\":{\"135\":1}}],[\"基本功能\",{\"1\":{\"27\":1}}],[\"基于stream的消息队列\",{\"0\":{\"794\":1,\"795\":1}}],[\"基于session实现登录流程\",{\"0\":{\"738\":1}}],[\"基于pubsub顶消息队列\",{\"0\":{\"793\":1}}],[\"基于redis的持久化机制\",{\"1\":{\"792\":1}}],[\"基于routingkey\",{\"1\":{\"334\":1}}],[\"基于list实现消息队列\",{\"0\":{\"792\":1}}],[\"基于lua脚本\",{\"1\":{\"789\":1}}],[\"基于逻辑过期方式来解决缓存击穿问题\",{\"1\":{\"756\":1}}],[\"基于内存的k\",{\"1\":{\"533\":1}}],[\"基于vue的移动组件库\",{\"1\":{\"502\":1}}],[\"基于索引的等值查找\",{\"1\":{\"486\":1}}],[\"基于磁盘存储\",{\"1\":{\"362\":1}}],[\"基于mq的消息头匹配\",{\"1\":{\"334\":1}}],[\"基于basemapper中的update方法更新指南直接赋值\",{\"1\":{\"205\":1}}],[\"基于数组的阻塞队列\",{\"1\":{\"112\":1}}],[\"基于链表的阻塞队列\",{\"1\":{\"112\":1}}],[\"基于\",{\"1\":{\"14\":1}}],[\"包扫描\",{\"1\":{\"312\":1}}],[\"包含\",{\"1\":{\"815\":1}}],[\"包含秒杀信息\",{\"1\":{\"764\":1}}],[\"包含must\",{\"1\":{\"710\":1}}],[\"包含对各种数据库的集成\",{\"1\":{\"397\":1}}],[\"包含rabbitmq\",{\"1\":{\"332\":1}}],[\"包含private修饰\",{\"1\":{\"168\":2}}],[\"包含cookie\",{\"1\":{\"27\":1}}],[\"包括了锁的存在检查\",{\"1\":{\"782\":1}}],[\"包括publisher\",{\"1\":{\"343\":1}}],[\"包括父类\",{\"1\":{\"170\":1}}],[\"包括\",{\"1\":{\"155\":1,\"363\":1}}],[\"包括允许或拒绝特定条件下的请求\",{\"1\":{\"27\":1}}],[\"包\",{\"1\":{\"155\":1}}],[\"编程模式\",{\"1\":{\"657\":1}}],[\"编程式\",{\"1\":{\"27\":1}}],[\"编辑host文件加上最后一行\",{\"1\":{\"710\":1}}],[\"编辑配置\",{\"1\":{\"687\":1}}],[\"编辑配置文件完成注入\",{\"1\":{\"270\":1}}],[\"编辑距离越小说明相似度越高\",{\"1\":{\"575\":1}}],[\"编辑距离算法优化\",{\"0\":{\"575\":1}}],[\"编辑距离算法\",{\"1\":{\"566\":1}}],[\"编辑页面\",{\"0\":{\"520\":1}}],[\"编辑\",{\"1\":{\"241\":1,\"616\":1}}],[\"编写\",{\"1\":{\"642\":1}}],[\"编写一次性任务\",{\"0\":{\"536\":1}}],[\"编写配置类\",{\"0\":{\"408\":1},\"1\":{\"398\":1}}],[\"编写sql时需要遍历数组来拼接sql语句\",{\"1\":{\"190\":1}}],[\"编写接口\",{\"1\":{\"184\":1}}],[\"编写mybatis核心配置文件\",{\"1\":{\"175\":1}}],[\"编写protable表格代码\",{\"1\":{\"14\":1}}],[\"编译器和处理器为了提高执行效率\",{\"1\":{\"158\":1}}],[\"编译器和处理器常常会对指令进行重排序\",{\"1\":{\"127\":1}}],[\"实验\",{\"1\":{\"580\":1}}],[\"实测导⼊\",{\"1\":{\"571\":1}}],[\"实例工厂实例化\",{\"0\":{\"276\":1}}],[\"实体对象\",{\"1\":{\"184\":1}}],[\"实体类相关的参数\",{\"1\":{\"416\":1}}],[\"实体类中是string格式\",{\"1\":{\"217\":1}}],[\"实体类对象\",{\"1\":{\"184\":1}}],[\"实体类的属性名\",{\"1\":{\"181\":2}}],[\"实体类等\",{\"1\":{\"29\":1}}],[\"实战项目\",{\"2\":{\"41\":1,\"42\":1}}],[\"实际上并不是原子性的\",{\"1\":{\"779\":1}}],[\"实际上写入的就是旧的数据\",{\"1\":{\"750\":1}}],[\"实际执行时可能会有所不同\",{\"1\":{\"486\":1}}],[\"实际使用时根据数据库分页的总的页数来\",{\"1\":{\"431\":1}}],[\"实际使用中\",{\"1\":{\"115\":1}}],[\"实际业务场景中\",{\"1\":{\"352\":1}}],[\"实际推荐setter注入\",{\"1\":{\"286\":1}}],[\"实际是在问最左前缀法则\",{\"1\":{\"47\":1}}],[\"实际情况中是从数据库中查出\",{\"1\":{\"27\":1}}],[\"实际情况应该是去数据库中查是否已分配给用户\",{\"1\":{\"27\":1,\"29\":1}}],[\"实际调用\",{\"1\":{\"27\":1}}],[\"实现签到功能\",{\"1\":{\"819\":1}}],[\"实现附近商户功能\",{\"0\":{\"817\":1}}],[\"实现共同关注功能\",{\"1\":{\"807\":1}}],[\"实现步骤\",{\"1\":{\"803\":1}}],[\"实现异步下单功能\",{\"1\":{\"789\":1}}],[\"实现思路\",{\"0\":{\"776\":1}}],[\"实现秒杀下单\",{\"0\":{\"765\":1}}],[\"实现缓存重建\",{\"1\":{\"755\":1}}],[\"实现逻辑\",{\"1\":{\"752\":1}}],[\"实现复杂\",{\"1\":{\"752\":1}}],[\"实现最终一致\",{\"1\":{\"750\":1}}],[\"实现数据共享\",{\"1\":{\"741\":1}}],[\"实现注册方法\",{\"1\":{\"599\":1}}],[\"实现分布式锁\",{\"0\":{\"777\":1}}],[\"实现分布式\",{\"1\":{\"571\":1}}],[\"实现简单\",{\"1\":{\"512\":1,\"752\":1}}],[\"实现读写分离\",{\"1\":{\"373\":1}}],[\"实现的\",{\"1\":{\"361\":1}}],[\"实现生产者确认\",{\"0\":{\"344\":1}}],[\"实现接口完成生命周期\",{\"0\":{\"279\":1}}],[\"实现上传图片到oss\",{\"1\":{\"241\":1}}],[\"实现webmvcconfigurer接口可以简化开发\",{\"1\":{\"232\":1,\"233\":1}}],[\"实现handlerinterceptor接口\",{\"1\":{\"232\":2}}],[\"实现一个根据复杂条件查询用户的接口\",{\"1\":{\"209\":1}}],[\"实现类\",{\"1\":{\"208\":1,\"670\":1,\"751\":1,\"777\":1,\"802\":1}}],[\"实现了可见性\",{\"1\":{\"161\":1}}],[\"实现了\",{\"1\":{\"112\":1,\"142\":1}}],[\"实现查找的问题\",{\"1\":{\"47\":1}}],[\"实现\",{\"0\":{\"548\":1,\"557\":1},\"1\":{\"27\":1,\"355\":1,\"626\":1}}],[\"添加数据\",{\"1\":{\"815\":1}}],[\"添加关注记录\",{\"1\":{\"806\":1,\"807\":1}}],[\"添加商品缓存\",{\"0\":{\"747\":1}}],[\"添加拦截器设置\",{\"1\":{\"739\":1}}],[\"添加监听器\",{\"1\":{\"692\":1}}],[\"添加取样器\",{\"1\":{\"692\":1}}],[\"添加线程组\",{\"1\":{\"692\":1}}],[\"添加新的映射\",{\"1\":{\"686\":1}}],[\"添加common模块依赖\",{\"1\":{\"661\":1}}],[\"添加confirmcallback\",{\"1\":{\"344\":1}}],[\"添加选择标签组件\",{\"1\":{\"518\":1}}],[\"添加索引\",{\"0\":{\"511\":1}}],[\"添加tabbar标签栏\",{\"0\":{\"507\":1}}],[\"添加navbar导航栏\",{\"0\":{\"506\":1}}],[\"添加地图点击事件\",{\"1\":{\"439\":1}}],[\"添加折线\",{\"1\":{\"439\":1}}],[\"添加覆盖物\",{\"0\":{\"439\":1}}],[\"添加x\",{\"1\":{\"361\":1}}],[\"添加delayed属性为true\",{\"1\":{\"361\":1}}],[\"添加延迟消息属性\",{\"1\":{\"355\":1}}],[\"添加一个地理空间信息\",{\"1\":{\"815\":1}}],[\"添加一个菜单\",{\"1\":{\"663\":1}}],[\"添加一个路由\",{\"1\":{\"612\":1,\"615\":1}}],[\"添加一个标注\",{\"1\":{\"439\":1}}],[\"添加一个用户\",{\"1\":{\"330\":1}}],[\"添加一个key查看sdk帮助文档\",{\"1\":{\"240\":1}}],[\"添加sprng配置文件applicationcontext\",{\"1\":{\"269\":1}}],[\"添加需要的类\",{\"1\":{\"269\":1}}],[\"添加jar包\",{\"1\":{\"269\":1}}],[\"添加分页插件\",{\"1\":{\"219\":1,\"671\":1}}],[\"添加\",{\"1\":{\"192\":1}}],[\"添加元素put\",{\"0\":{\"66\":1}}],[\"添加元素add\",{\"0\":{\"56\":1}}],[\"添加逻辑\",{\"1\":{\"56\":1}}],[\"添加配置\",{\"1\":{\"29\":1,\"733\":1}}],[\"添加响应头\",{\"1\":{\"27\":1}}],[\"添加请求头\",{\"1\":{\"27\":1}}],[\"添加请求参数\",{\"1\":{\"27\":2}}],[\"添加依赖\",{\"1\":{\"18\":1,\"781\":1}}],[\"用0和1标示业务状态\",{\"1\":{\"819\":1}}],[\"用库存代替版本号\",{\"1\":{\"769\":1}}],[\"用红色标签\",{\"1\":{\"710\":1}}],[\"用逗号分隔\",{\"1\":{\"670\":1}}],[\"用自己图片先上传自己服务器\",{\"1\":{\"665\":1}}],[\"用了umi框架\",{\"1\":{\"635\":1}}],[\"用到了umi插件\",{\"1\":{\"610\":1}}],[\"用到的依赖\",{\"0\":{\"587\":1}}],[\"用后端springboot\",{\"1\":{\"604\":1}}],[\"用不到测试\",{\"1\":{\"585\":1}}],[\"用定时任务\",{\"1\":{\"544\":1}}],[\"用缓存\",{\"1\":{\"543\":1}}],[\"用程序去调用接口\",{\"1\":{\"523\":1}}],[\"用脚手架初始项目\",{\"1\":{\"504\":1}}],[\"用最少的命令达到相同效果\",{\"1\":{\"372\":1}}],[\"用的较少\",{\"1\":{\"334\":1}}],[\"用法为\",{\"1\":{\"421\":1}}],[\"用法\",{\"1\":{\"208\":1}}],[\"用来实现锁的获取和续约\",{\"1\":{\"782\":1}}],[\"用来查看结果\",{\"1\":{\"692\":1}}],[\"用来做乐观锁\",{\"1\":{\"682\":1}}],[\"用来做配置隔离\",{\"1\":{\"660\":1}}],[\"用来根据type获取对应的实现\",{\"1\":{\"493\":1}}],[\"用来标识实体类中的主键\",{\"1\":{\"199\":1}}],[\"用来标注表名和实体类名的对应关系\",{\"1\":{\"198\":1}}],[\"用来确定如何转发路由\",{\"1\":{\"27\":1}}],[\"用它来执行sql\",{\"1\":{\"175\":1}}],[\"用途\",{\"1\":{\"143\":1}}],[\"用于确定非常大的集合的基数\",{\"1\":{\"821\":1}}],[\"用于确定键值对在哈希表中的存储位置\",{\"1\":{\"69\":1}}],[\"用于确定键值对的位置\",{\"1\":{\"67\":1}}],[\"用于确定键值对的存储位置\",{\"1\":{\"66\":1}}],[\"用于记录当前线程执行的字节码行号\",{\"1\":{\"694\":1}}],[\"用于记录数据被修改前的信息\",{\"1\":{\"475\":1}}],[\"用于对结果进行汇总分析\",{\"1\":{\"685\":1}}],[\"用于声明这一列的类型\",{\"1\":{\"616\":1}}],[\"用于解决单一数据库服务器无法满足大规模数据存储和处理需求的问题\",{\"1\":{\"478\":1}}],[\"用于解决哈希冲突\",{\"1\":{\"63\":1}}],[\"用于读取数据时使用\",{\"1\":{\"476\":1}}],[\"用于标识数据的修改版本\",{\"1\":{\"476\":1}}],[\"用于标识数据的版本\",{\"1\":{\"210\":1}}],[\"用于在刷新脏页到磁盘\",{\"1\":{\"475\":1}}],[\"用于在多线程环境下实现对共享数据的安全操作\",{\"1\":{\"131\":1}}],[\"用于注册websocket的bean\",{\"1\":{\"408\":1}}],[\"用于将写操作追加到一个文件中\",{\"1\":{\"371\":1}}],[\"用于将指定的键\",{\"1\":{\"66\":1}}],[\"用于接收和路由成为死信的消息\",{\"1\":{\"354\":1}}],[\"用于识别不同消息\",{\"1\":{\"339\":1,\"352\":1}}],[\"用于存储线程执行方法时的局部变量\",{\"1\":{\"694\":1}}],[\"用于存储对象实例\",{\"1\":{\"694\":1}}],[\"用于存储\",{\"1\":{\"651\":3}}],[\"用于存储键值对\",{\"1\":{\"61\":1}}],[\"用于存放数据\",{\"1\":{\"323\":1}}],[\"用于产生sqlsessionfactory对象\",{\"1\":{\"312\":1}}],[\"用于封装异常信息\",{\"1\":{\"230\":2}}],[\"用于区分操作\",{\"1\":{\"226\":1}}],[\"用于满足特定类型的实体类对象绑定\",{\"1\":{\"198\":1}}],[\"用于描述在不同线程中的操作之间建立的先行发生关系\",{\"1\":{\"159\":1}}],[\"用于表示线程是否被中断\",{\"1\":{\"155\":1}}],[\"用于表示可以由\",{\"1\":{\"117\":1}}],[\"用于手动完成异步计算\",{\"1\":{\"143\":1}}],[\"用于处理多个线程或进程同时访问共享资源的情况\",{\"1\":{\"766\":1}}],[\"用于处理多个并发事务同时访问相同数据的情况\",{\"1\":{\"210\":1}}],[\"用于处理无法投递的消息\",{\"1\":{\"361\":1}}],[\"用于处理非预期的异常\",{\"1\":{\"229\":1,\"230\":1}}],[\"用于处理线程在等待某些条件时被中断的情况\",{\"1\":{\"155\":1}}],[\"用于处理异步操作\",{\"1\":{\"143\":1}}],[\"用于处理新任务的策略\",{\"1\":{\"115\":1,\"713\":1}}],[\"用于支持共享式同步器\",{\"1\":{\"136\":1}}],[\"用于管理同步状态\",{\"1\":{\"136\":1}}],[\"用于修饰变量\",{\"1\":{\"132\":1}}],[\"用于实现线程同步\",{\"1\":{\"130\":1}}],[\"用于没有返回值的任务\",{\"1\":{\"117\":1}}],[\"用于有返回值的任务\",{\"1\":{\"117\":1}}],[\"用于创建新线程的工厂\",{\"1\":{\"115\":1,\"713\":1}}],[\"用于保存等待执行的任务的阻塞队列\",{\"1\":{\"115\":1,\"713\":1}}],[\"用于指定\",{\"1\":{\"115\":1,\"713\":1}}],[\"用于方便地创建和管理线程池\",{\"1\":{\"114\":1}}],[\"用于唤醒在对应\",{\"1\":{\"93\":1}}],[\"用于迭代器的快速失败机制\",{\"1\":{\"67\":1}}],[\"用于移除\",{\"1\":{\"67\":1}}],[\"用于使对哈希表的\",{\"1\":{\"63\":1}}],[\"用arrays\",{\"1\":{\"58\":1}}],[\"用户多次打开页面\",{\"1\":{\"821\":1}}],[\"用户每访问网站的一个页面\",{\"1\":{\"821\":1}}],[\"用户每次调用接口成功\",{\"1\":{\"25\":1}}],[\"用户每次调用成功\",{\"1\":{\"25\":1}}],[\"用户签到\",{\"0\":{\"818\":1}}],[\"用户粘度很高\",{\"1\":{\"808\":1}}],[\"用户不感兴趣的内容\",{\"1\":{\"808\":1}}],[\"用户不一定感兴趣\",{\"1\":{\"808\":1}}],[\"用户不存在\",{\"1\":{\"725\":1,\"742\":1}}],[\"用户已经抢购过了\",{\"1\":{\"790\":1}}],[\"用户模拟\",{\"0\":{\"788\":1}}],[\"用户将验证码和手机号进行输入\",{\"1\":{\"738\":1}}],[\"用户在请求时候\",{\"1\":{\"738\":1}}],[\"用户在提交手机号后\",{\"1\":{\"738\":1}}],[\"用户在前端输入账户\",{\"1\":{\"599\":1}}],[\"用户注销\",{\"0\":{\"620\":1}}],[\"用户注册信息\",{\"1\":{\"599\":1}}],[\"用户注册\",{\"1\":{\"599\":1}}],[\"用户判断当前用户是不是管理员\",{\"1\":{\"615\":1}}],[\"用户脱敏\",{\"1\":{\"605\":3}}],[\"用户登录信息\",{\"1\":{\"605\":1}}],[\"用户登录\",{\"1\":{\"605\":1,\"738\":1}}],[\"用户信息脱敏\",{\"0\":{\"740\":1}}],[\"用户信息\",{\"1\":{\"603\":1}}],[\"用户中心5\",{\"0\":{\"646\":1}}],[\"用户中心4\",{\"0\":{\"633\":1}}],[\"用户中心3\",{\"0\":{\"619\":1}}],[\"用户中心2\",{\"0\":{\"602\":1}}],[\"用户中心\",{\"0\":{\"848\":1},\"2\":{\"600\":1,\"601\":1,\"617\":1,\"618\":1,\"631\":1,\"632\":1,\"644\":1,\"645\":1,\"647\":1,\"648\":1}}],[\"用户中心1\",{\"0\":{\"578\":1}}],[\"用户密码为\",{\"1\":{\"651\":1}}],[\"用户密码\",{\"1\":{\"596\":1}}],[\"用户账户\",{\"1\":{\"596\":1,\"603\":1,\"616\":1}}],[\"用户表\",{\"1\":{\"596\":1}}],[\"用户表多一列\",{\"1\":{\"510\":1}}],[\"用户校验\",{\"1\":{\"581\":1}}],[\"用户管理\",{\"1\":{\"581\":1,\"615\":2}}],[\"用户管理接口\",{\"1\":{\"208\":1}}],[\"用户关联信息\",{\"1\":{\"561\":1}}],[\"用户最多加入\",{\"1\":{\"561\":1}}],[\"用户加入队伍\",{\"0\":{\"561\":1}}],[\"用户加入了哪些队伍\",{\"1\":{\"557\":1}}],[\"用户要释放\",{\"1\":{\"549\":1}}],[\"用户类别\",{\"1\":{\"518\":1}}],[\"用户列表\",{\"1\":{\"512\":1}}],[\"用户有哪些标签\",{\"1\":{\"510\":1}}],[\"用户id\",{\"1\":{\"509\":1,\"557\":2,\"596\":1,\"599\":1,\"765\":1,\"789\":1,\"790\":3,\"796\":1,\"801\":2,\"806\":1}}],[\"用户页\",{\"1\":{\"505\":1}}],[\"用户去添加标签\",{\"1\":{\"500\":1}}],[\"用户查询条件实体\",{\"1\":{\"220\":1}}],[\"用户请求\",{\"1\":{\"220\":1}}],[\"用户地址分组\",{\"1\":{\"214\":1}}],[\"用户状态\",{\"1\":{\"209\":1,\"220\":1}}],[\"用户状态异常\",{\"1\":{\"208\":1,\"210\":1}}],[\"用户名或密码不能为空\",{\"1\":{\"607\":1}}],[\"用户名\",{\"1\":{\"332\":1,\"519\":2,\"616\":1}}],[\"用户名关键字\",{\"1\":{\"209\":1,\"220\":1}}],[\"用户名字是\",{\"1\":{\"16\":1}}],[\"用户余额不足\",{\"1\":{\"208\":1,\"210\":1}}],[\"用户线程不会自动结束\",{\"1\":{\"89\":1}}],[\"用户线程是程序的主要执行线程\",{\"1\":{\"89\":1}}],[\"用户鉴权\",{\"1\":{\"27\":2}}],[\"用户发送请求到api网关\",{\"1\":{\"27\":1}}],[\"用户接口关系表user\",{\"1\":{\"25\":1}}],[\"用户参数+密钥=>\",{\"1\":{\"17\":1}}],[\"用户的接口\",{\"1\":{\"14\":1}}],[\"用户\",{\"1\":{\"9\":1,\"557\":3,\"596\":1}}],[\"用户角色\",{\"1\":{\"9\":1}}],[\"用户简介\",{\"1\":{\"9\":1}}],[\"用户头像\",{\"1\":{\"9\":1,\"596\":1,\"616\":1}}],[\"用户昵称\",{\"1\":{\"9\":1,\"596\":1}}],[\"用户可以退出队伍\",{\"0\":{\"562\":1},\"1\":{\"556\":1}}],[\"用户可以加入队伍\",{\"1\":{\"556\":1}}],[\"用户可以创建一个队伍\",{\"1\":{\"556\":1}}],[\"用户可以申请更换签名\",{\"1\":{\"22\":1}}],[\"用户可以使用接口\",{\"1\":{\"5\":1}}],[\"用户可以开通接口调用权限\",{\"1\":{\"5\":1}}],[\"kxkqp4rqyud\",{\"1\":{\"824\":1}}],[\"km\",{\"1\":{\"815\":2}}],[\"k2\",{\"1\":{\"796\":1}}],[\"k1\",{\"1\":{\"796\":1}}],[\"kibana\",{\"1\":{\"681\":3}}],[\"kill\",{\"1\":{\"643\":1}}],[\"khtml\",{\"1\":{\"523\":1}}],[\"knife4j\",{\"1\":{\"727\":2}}],[\"knife4jconfiguration\",{\"1\":{\"522\":1}}],[\"known\",{\"1\":{\"66\":1}}],[\"know\",{\"1\":{\"53\":1}}],[\"kryo\",{\"1\":{\"512\":1}}],[\"kafka\",{\"1\":{\"327\":1}}],[\"kaifeng\",{\"1\":{\"292\":1}}],[\"keeping\",{\"1\":{\"669\":1}}],[\"keepglobalprefix\",{\"1\":{\"198\":1}}],[\"keeps\",{\"1\":{\"132\":1}}],[\"keepalivetime=10\",{\"1\":{\"721\":1}}],[\"keepalivetime\",{\"1\":{\"115\":3,\"713\":3,\"721\":1}}],[\"keyprefix\",{\"1\":{\"758\":3,\"763\":2}}],[\"keyproperty\",{\"1\":{\"188\":1}}],[\"keyproperty=\",{\"1\":{\"188\":1}}],[\"key默认自动生成\",{\"1\":{\"706\":1}}],[\"keyasstring\",{\"1\":{\"687\":2}}],[\"keyword\",{\"1\":{\"685\":1,\"686\":2,\"710\":7}}],[\"keyname\",{\"1\":{\"418\":2}}],[\"key2\",{\"1\":{\"390\":2,\"807\":2}}],[\"key1\",{\"1\":{\"390\":2}}],[\"key完全一致\",{\"1\":{\"336\":1}}],[\"key进行判断\",{\"1\":{\"336\":1}}],[\"keysuffix\",{\"1\":{\"819\":2,\"820\":2}}],[\"keys类似于文件名\",{\"1\":{\"317\":1}}],[\"keys\",{\"1\":{\"66\":1,\"393\":1,\"400\":5,\"418\":1,\"486\":1,\"703\":2,\"780\":2,\"782\":8}}],[\"keyset\",{\"1\":{\"63\":1,\"564\":1}}],[\"key=minio123\",{\"1\":{\"317\":2}}],[\"key=minio\",{\"1\":{\"317\":2}}],[\"key=\",{\"1\":{\"14\":5,\"22\":1,\"292\":3,\"293\":3,\"616\":3,\"670\":1}}],[\"key\",{\"1\":{\"9\":1,\"14\":1,\"19\":3,\"63\":1,\"66\":34,\"67\":23,\"72\":4,\"110\":12,\"143\":2,\"241\":4,\"318\":4,\"319\":8,\"338\":4,\"340\":1,\"344\":1,\"355\":4,\"383\":1,\"384\":4,\"386\":5,\"388\":4,\"390\":4,\"392\":4,\"393\":3,\"400\":2,\"418\":5,\"486\":2,\"509\":1,\"557\":2,\"596\":1,\"609\":2,\"616\":4,\"620\":1,\"664\":3,\"665\":10,\"670\":13,\"672\":1,\"673\":5,\"674\":5,\"675\":11,\"703\":2,\"706\":3,\"741\":3,\"742\":4,\"747\":8,\"751\":2,\"752\":5,\"755\":9,\"756\":5,\"758\":21,\"764\":3,\"777\":3,\"778\":4,\"780\":2,\"788\":1,\"789\":1,\"795\":6,\"801\":2,\"803\":8,\"804\":9,\"805\":3,\"806\":1,\"807\":5,\"809\":2,\"810\":4,\"816\":4,\"817\":3,\"819\":3,\"820\":4}}],[\"k\",{\"1\":{\"64\":2,\"66\":10,\"67\":6,\"690\":2,\"697\":2}}],[\"kong网关\",{\"1\":{\"27\":1}}],[\"服务注册\",{\"1\":{\"658\":1}}],[\"服务容错\",{\"1\":{\"657\":1}}],[\"服务发现\",{\"1\":{\"657\":1}}],[\"服务映射到主机上的3307端口\",{\"1\":{\"651\":1}}],[\"服务器繁忙\",{\"1\":{\"777\":1}}],[\"服务器挂了\",{\"1\":{\"776\":1}}],[\"服务器\",{\"1\":{\"582\":1}}],[\"服务器多了\",{\"1\":{\"545\":1}}],[\"服务器a登录之后\",{\"1\":{\"533\":1}}],[\"服务器向客户端发送消息\",{\"1\":{\"407\":1}}],[\"服务宕机可用来同步数据\",{\"1\":{\"475\":1}}],[\"服务间调用的重试\",{\"1\":{\"352\":1}}],[\"服务层的注入可以没有吗\",{\"1\":{\"47\":1}}],[\"服务调用项目和提供者项目尽量引入相同的依赖和配置\",{\"1\":{\"29\":1}}],[\"服务接口类必须要在同一个包下\",{\"1\":{\"29\":1}}],[\"服务提供者和消费者读取这个文件\",{\"1\":{\"29\":1}}],[\"服务提供者和消费者都去引用这个接口\",{\"1\":{\"29\":1}}],[\"服务\",{\"1\":{\"27\":1}}],[\"服务端签名直传\",{\"1\":{\"665\":1}}],[\"服务端口\",{\"1\":{\"416\":1,\"423\":1}}],[\"服务端要保存用过的随机数\",{\"1\":{\"17\":1}}],[\"服务端用一摸一样的参数和\",{\"1\":{\"17\":1}}],[\"会导致每个线程进来都会锁住\",{\"1\":{\"770\":1}}],[\"会导致程序卡死\",{\"1\":{\"156\":1}}],[\"会从cookie中携带者jsessionid到后台\",{\"1\":{\"738\":1}}],[\"会从数据所在节点传递到当前节点并返回\",{\"1\":{\"363\":1}}],[\"会校验手机号是否合法\",{\"1\":{\"738\":1}}],[\"会调用方法\",{\"1\":{\"706\":1}}],[\"会调用父类的equals和hashcode方法\",{\"1\":{\"220\":1}}],[\"会丢失请求的host信息\",{\"1\":{\"691\":1}}],[\"会报错\",{\"1\":{\"682\":1}}],[\"会被路由到http\",{\"1\":{\"663\":1}}],[\"会有点\",{\"1\":{\"510\":1}}],[\"会有一个默认值就是当前类名首字母小写\",{\"1\":{\"299\":1}}],[\"会有一些业务逻辑\",{\"1\":{\"27\":1}}],[\"会显示使用的连接方式\",{\"1\":{\"486\":1}}],[\"会影响增删改的效率\",{\"1\":{\"469\":1}}],[\"会使用本地方法栈\",{\"1\":{\"694\":1}}],[\"会使用文件缓存\",{\"1\":{\"432\":1}}],[\"会使在该锁上进行的修改对其他线程可见\",{\"1\":{\"91\":1}}],[\"会成为死信\",{\"1\":{\"354\":1}}],[\"会自动创建一个消费者\",{\"1\":{\"795\":1}}],[\"会自动将键删除\",{\"1\":{\"749\":1}}],[\"会自动生成\",{\"1\":{\"682\":1}}],[\"会自动生成一个rowid作为隐藏的聚集索引\",{\"1\":{\"466\":1}}],[\"会自动传入node\",{\"1\":{\"635\":1}}],[\"会自动返回nack\",{\"1\":{\"349\":1}}],[\"会自动终止守护线程并退出\",{\"1\":{\"89\":1}}],[\"会把数据变更记录在二进制日志文件binlog中\",{\"1\":{\"477\":1}}],[\"会把response\",{\"1\":{\"261\":1}}],[\"会把defaultcapacity\",{\"1\":{\"54\":1}}],[\"会直接将page\",{\"1\":{\"261\":1}}],[\"会执行原始controller类中要请求的方法\",{\"1\":{\"232\":1}}],[\"会出现字符串魔法值\",{\"1\":{\"206\":1}}],[\"会动态的去掉第一个条件前的\",{\"1\":{\"185\":1}}],[\"会实现这两个操作\",{\"1\":{\"136\":1}}],[\"会创建新的线程来处理新任务\",{\"1\":{\"115\":1,\"713\":1}}],[\"会抛出异常\",{\"1\":{\"112\":1,\"782\":1}}],[\"会阻塞等待\",{\"1\":{\"112\":2}}],[\"会先复制一份原数组\",{\"1\":{\"98\":1}}],[\"会保持运行\",{\"1\":{\"89\":1}}],[\"会让当前线程从\",{\"1\":{\"86\":1}}],[\"会新创建一个数组\",{\"1\":{\"71\":1}}],[\"会更新元素的数量\",{\"1\":{\"69\":1}}],[\"会根据以下情况进行处理\",{\"1\":{\"69\":1}}],[\"会通过链表或红黑树解决\",{\"1\":{\"66\":1}}],[\"会变得很麻烦\",{\"1\":{\"18\":1}}],[\"微服务\",{\"2\":{\"413\":1,\"414\":1}}],[\"微服务网关\",{\"1\":{\"27\":1}}],[\"微秒级\",{\"1\":{\"327\":1}}],[\"微信\",{\"1\":{\"764\":1}}],[\"微信公众号\",{\"2\":{\"459\":1,\"460\":1}}],[\"微信公众号开发\",{\"0\":{\"448\":1}}],[\"微信功能开发\",{\"0\":{\"456\":1}}],[\"微信想要的验证方式如下\",{\"1\":{\"452\":1}}],[\"微信消息验证\",{\"0\":{\"452\":1}}],[\"微信接入验证\",{\"1\":{\"451\":1,\"452\":1}}],[\"微信聊天\",{\"1\":{\"327\":1}}],[\"微信开放平台id\",{\"1\":{\"9\":1}}],[\"业务脚本\",{\"1\":{\"789\":1,\"796\":1}}],[\"业务代码\",{\"0\":{\"732\":1}}],[\"业务代码非常耗时\",{\"1\":{\"703\":1}}],[\"业务\",{\"1\":{\"696\":1}}],[\"业务异常\",{\"1\":{\"627\":1}}],[\"业务介绍\",{\"1\":{\"478\":1}}],[\"业务名\",{\"1\":{\"382\":1}}],[\"业务判断\",{\"1\":{\"352\":1}}],[\"业务处理成功后将消息id保存到数据库\",{\"1\":{\"352\":1}}],[\"业务状态判断\",{\"1\":{\"352\":1}}],[\"业务幂等性是指无论对一个操作执行多少次\",{\"1\":{\"352\":1}}],[\"业务幂等性\",{\"0\":{\"352\":1}}],[\"业务bean\",{\"1\":{\"245\":1}}],[\"业务层逻辑\",{\"1\":{\"747\":1}}],[\"业务层需要调用数据层的方法\",{\"1\":{\"267\":1}}],[\"业务层中使用new的方式创建的dao对象\",{\"1\":{\"267\":2}}],[\"业务层\",{\"1\":{\"267\":1,\"299\":1,\"805\":1}}],[\"业务层异常\",{\"1\":{\"230\":1}}],[\"业务层更换\",{\"1\":{\"220\":1}}],[\"业务实现\",{\"1\":{\"220\":1,\"319\":1}}],[\"业务逻辑\",{\"1\":{\"27\":1,\"208\":1,\"580\":1,\"670\":1,\"675\":1,\"747\":1,\"764\":1,\"806\":1,\"807\":1,\"809\":1,\"810\":1,\"817\":1,\"819\":1,\"820\":1}}],[\"业务网关\",{\"1\":{\"27\":1}}],[\"业务流程\",{\"0\":{\"6\":1},\"1\":{\"25\":1,\"563\":1}}],[\"灰度发布\",{\"1\":{\"27\":1}}],[\"提前缓存\",{\"1\":{\"567\":1}}],[\"提前运算出来结果\",{\"1\":{\"567\":1}}],[\"提前把所有用户给缓存\",{\"1\":{\"567\":1}}],[\"提前把数据取出来保存好\",{\"1\":{\"543\":1}}],[\"提前查\",{\"1\":{\"567\":1}}],[\"提交的参与与定义的不同这里需要转化一下\",{\"1\":{\"616\":1}}],[\"提交到后台\",{\"1\":{\"520\":1}}],[\"提交\",{\"1\":{\"237\":1,\"520\":1}}],[\"提高并发性能\",{\"1\":{\"768\":1}}],[\"提高效率\",{\"1\":{\"672\":1}}],[\"提高效率的插件\",{\"0\":{\"607\":1}}],[\"提高查询效率\",{\"1\":{\"469\":1}}],[\"提高查询性能\",{\"1\":{\"467\":1}}],[\"提高数据检索的效率\",{\"1\":{\"465\":1}}],[\"提高堆积上限\",{\"1\":{\"362\":2}}],[\"提高消费速度\",{\"1\":{\"362\":2}}],[\"提高稳定性\",{\"1\":{\"114\":1}}],[\"提高整体性能\",{\"1\":{\"114\":1}}],[\"提高了并发性\",{\"1\":{\"110\":1}}],[\"提高系统性能\",{\"1\":{\"27\":1,\"114\":1}}],[\"提出释放cpu时间片的请求\",{\"1\":{\"86\":1}}],[\"提供其他信息\",{\"1\":{\"486\":1}}],[\"提供回滚和mvcc\",{\"1\":{\"475\":1}}],[\"提供构造方法\",{\"1\":{\"285\":1}}],[\"提供setter方法\",{\"1\":{\"282\":1}}],[\"提供对应的set方法\",{\"1\":{\"270\":1}}],[\"提供了大量的分布式数据集来简化对redis的操作和使用\",{\"1\":{\"550\":1}}],[\"提供了redistemplate统一api来操作redis\",{\"1\":{\"397\":1}}],[\"提供了对不同redis客户端的整合\",{\"1\":{\"397\":1}}],[\"提供了对中断的支持\",{\"1\":{\"91\":1}}],[\"提供了多种高可用机制来确保消息队列的可靠性和稳定性\",{\"1\":{\"363\":1}}],[\"提供了三种消息确认模式\",{\"1\":{\"349\":1}}],[\"提供了一系列的原子性操作\",{\"1\":{\"155\":1}}],[\"提供了方便的线程池创建和管理方式\",{\"1\":{\"115\":1,\"713\":1}}],[\"提供了\",{\"1\":{\"114\":1,\"179\":1,\"190\":1}}],[\"提供了更灵活的锁定和解锁机制\",{\"1\":{\"91\":1}}],[\"提供了与锁关联的\",{\"1\":{\"91\":1}}],[\"提供了具体的实现\",{\"1\":{\"47\":1}}],[\"提供3个方法\",{\"1\":{\"29\":1}}],[\"提供方开发一个接口\",{\"1\":{\"28\":1}}],[\"提供一个接口\",{\"1\":{\"28\":1}}],[\"提供统一的接口文档给开发者参考\",{\"1\":{\"27\":1}}],[\"防止缓存击穿\",{\"1\":{\"755\":1}}],[\"防止内存泄漏\",{\"1\":{\"742\":1}}],[\"防止死锁\",{\"1\":{\"703\":3}}],[\"防止多个请求同时穿透\",{\"1\":{\"701\":2}}],[\"防止大量请求同时击穿\",{\"1\":{\"700\":1}}],[\"防止大量请求同时穿透到存储系统\",{\"1\":{\"699\":1}}],[\"防止大量缓存在同一时刻过期\",{\"1\":{\"700\":1}}],[\"防止频繁查询\",{\"1\":{\"699\":1}}],[\"防止数据库连接耗时\",{\"1\":{\"575\":1}}],[\"防止连接还没断开就关闭窗口\",{\"1\":{\"406\":1}}],[\"防止全表更新与删除\",{\"1\":{\"218\":1}}],[\"防止其他线程同时访问相同的数据\",{\"1\":{\"110\":1}}],[\"防止长时间的请求占用资源\",{\"1\":{\"27\":1}}],[\"防止攻击\",{\"1\":{\"5\":1}}],[\"令牌桶算法\",{\"1\":{\"27\":1}}],[\"熔断\",{\"1\":{\"27\":1,\"657\":1}}],[\"保存探店博文\",{\"1\":{\"801\":1,\"809\":1}}],[\"保存文件\",{\"1\":{\"801\":1}}],[\"保存用户\",{\"1\":{\"789\":1,\"796\":1}}],[\"保存用户信息到redis中\",{\"1\":{\"741\":1}}],[\"保存用户信息到session\",{\"1\":{\"738\":1,\"740\":1}}],[\"保存秒杀到redis\",{\"1\":{\"789\":1}}],[\"保存秒杀信息\",{\"1\":{\"764\":1,\"789\":1}}],[\"保存优惠券\",{\"1\":{\"764\":1,\"789\":1}}],[\"保存当前spu对应的所有sku信息\",{\"1\":{\"675\":1}}],[\"保存spu的积分信息\",{\"1\":{\"675\":1}}],[\"保存spu规格参数\",{\"1\":{\"675\":1}}],[\"保存spu图片集\",{\"1\":{\"675\":1}}],[\"保存spu描述图片\",{\"1\":{\"675\":1}}],[\"保存spu基本信息\",{\"1\":{\"675\":1}}],[\"保存新增商品\",{\"1\":{\"675\":1}}],[\"保存关联关系\",{\"1\":{\"673\":1}}],[\"保存基本数据\",{\"1\":{\"673\":1}}],[\"保存品牌和分类的关联关系\",{\"1\":{\"672\":1}}],[\"保存\",{\"1\":{\"666\":1,\"667\":1,\"673\":2,\"675\":1,\"682\":1}}],[\"保存成功\",{\"1\":{\"655\":1}}],[\"保存到阻塞队列\",{\"1\":{\"789\":1,\"790\":1,\"796\":1}}],[\"保存到redis\",{\"1\":{\"741\":1,\"803\":1,\"804\":1}}],[\"保存到threadlocal中\",{\"1\":{\"739\":1,\"740\":1,\"742\":1}}],[\"保存到session\",{\"1\":{\"738\":1,\"741\":1}}],[\"保存到数据库\",{\"1\":{\"738\":1}}],[\"保存到数据库然后定时重发\",{\"1\":{\"359\":1}}],[\"保存到es\",{\"1\":{\"688\":1}}],[\"保存到浏览器中\",{\"1\":{\"605\":1}}],[\"保存到队列后\",{\"1\":{\"341\":1}}],[\"保存到文件中去\",{\"1\":{\"171\":1}}],[\"保留登录页面\",{\"1\":{\"609\":1}}],[\"保留对exception类型的异常处理\",{\"1\":{\"229\":1,\"230\":1}}],[\"保持优先队列的大小不超过\",{\"1\":{\"575\":1}}],[\"保证可以读到最新数据\",{\"1\":{\"704\":1}}],[\"保证只能删除自己的锁\",{\"1\":{\"703\":1}}],[\"保证线程能够正确地执行\",{\"1\":{\"694\":1}}],[\"保证冗余字段的数据一致\",{\"1\":{\"672\":1}}],[\"保证代码是\",{\"1\":{\"634\":1}}],[\"保证了接⼝幂等性\",{\"1\":{\"574\":1}}],[\"保证了线程的可见性\",{\"1\":{\"91\":1}}],[\"保证事务在不受外部并发操作影响的独立环境下运行\",{\"1\":{\"472\":1}}],[\"保证mq的可靠性\",{\"1\":{\"341\":1}}],[\"保证不会有并发执行的情况\",{\"1\":{\"115\":1,\"713\":1}}],[\"保证安全性\",{\"1\":{\"17\":1}}],[\"保护用户隐私\",{\"1\":{\"27\":1}}],[\"对服务器压力巨大\",{\"1\":{\"808\":1}}],[\"对利用单元测试进行缓存预热\",{\"1\":{\"756\":1}}],[\"对数据库访问压力过大\",{\"1\":{\"754\":1}}],[\"对数据的访问总是会导致冲突\",{\"1\":{\"145\":1}}],[\"对文章概述数据操作的高效率不会被操作文章详情数据的低效率所拖累\",{\"1\":{\"730\":1}}],[\"对匹配的skutitle字段进行高亮显示\",{\"1\":{\"710\":1}}],[\"对项目进行优化\",{\"1\":{\"634\":1}}],[\"对应返回数据对象的属性\",{\"1\":{\"616\":1}}],[\"对应的sql语句为\",{\"1\":{\"596\":1}}],[\"对应的\",{\"1\":{\"201\":1}}],[\"对密码进行加密\",{\"1\":{\"599\":1}}],[\"对用户对查询或者修改\",{\"1\":{\"581\":1}}],[\"对接后的字符串进行sha1加密\",{\"1\":{\"452\":1}}],[\"对token\",{\"1\":{\"452\":1}}],[\"对\",{\"1\":{\"416\":1}}],[\"对指定成员分数加上增量incrementzrem\",{\"1\":{\"392\":1}}],[\"对反射中的method对象进行了再包装\",{\"1\":{\"232\":1}}],[\"对异常进行分类\",{\"1\":{\"230\":2}}],[\"对复杂的需求难以实现\",{\"1\":{\"205\":1}}],[\"对方法进行增强\",{\"1\":{\"165\":1}}],[\"对线程的中断操作\",{\"1\":{\"159\":1}}],[\"对一个volatile变量的写\",{\"1\":{\"161\":1}}],[\"对一个\",{\"1\":{\"159\":1}}],[\"对基本数据类型的读取和赋值操作\",{\"1\":{\"158\":1}}],[\"对代码进行反编译\",{\"1\":{\"147\":1}}],[\"对括号里配置的对象加锁\",{\"1\":{\"146\":1}}],[\"对计算结果进行合并\",{\"1\":{\"143\":1}}],[\"对比元数据如果一样就不进行任何操作\",{\"1\":{\"682\":1}}],[\"对比传统数据库\",{\"1\":{\"377\":1}}],[\"对比\",{\"0\":{\"757\":1},\"1\":{\"143\":1,\"795\":1}}],[\"对结果消费\",{\"1\":{\"143\":1}}],[\"对flag的修改\",{\"1\":{\"132\":1}}],[\"对于一些不常变化的数据\",{\"1\":{\"701\":1}}],[\"对于一些重要的缓存数据\",{\"1\":{\"700\":1}}],[\"对于频繁查询但不会经常变化的数据\",{\"1\":{\"699\":1}}],[\"对于\",{\"1\":{\"486\":1}}],[\"对于使用索引的查询\",{\"1\":{\"486\":1}}],[\"对于复杂查询\",{\"1\":{\"486\":1}}],[\"对于表数据量过大的查询\",{\"1\":{\"486\":1}}],[\"对于多表查询\",{\"1\":{\"486\":1}}],[\"对于聚合查询\",{\"1\":{\"486\":1}}],[\"对于简单数据类型\",{\"1\":{\"283\":1}}],[\"对于user模块的save\",{\"1\":{\"247\":1}}],[\"对于book模块的save\",{\"1\":{\"247\":1}}],[\"对于任意一个对象\",{\"1\":{\"171\":1}}],[\"对于真正的异步处理我们希望是可以通过传入回调函数\",{\"1\":{\"142\":1}}],[\"对于同步方法块\",{\"1\":{\"101\":1}}],[\"对于静态同步方法\",{\"1\":{\"101\":1}}],[\"对于普通同步方法\",{\"1\":{\"101\":1}}],[\"对象转json数据\",{\"1\":{\"261\":1}}],[\"对象终结规则\",{\"1\":{\"159\":1}}],[\"对象作为参数\",{\"1\":{\"105\":1}}],[\"对象\",{\"1\":{\"91\":2,\"101\":1,\"105\":1}}],[\"对象都有一个\",{\"1\":{\"66\":1}}],[\"对象tostring要重写\",{\"1\":{\"47\":1}}],[\"对象为装饰过的\",{\"1\":{\"27\":1}}],[\"对开发者更透明\",{\"1\":{\"28\":1}}],[\"对请求头\",{\"1\":{\"27\":1}}],[\"对请求进行一系列的处理\",{\"1\":{\"27\":1}}],[\"对请求进行限流\",{\"1\":{\"27\":1}}],[\"对请求进行限制\",{\"1\":{\"27\":1}}],[\"对返回给客户端的数据进行脱敏处理\",{\"1\":{\"27\":1}}],[\"对称加密\",{\"1\":{\"17\":1}}],[\"响应时间\",{\"1\":{\"696\":2}}],[\"响应请求\",{\"1\":{\"532\":1}}],[\"响应参数\",{\"1\":{\"521\":1}}],[\"响应pojo集合对象\",{\"1\":{\"261\":1}}],[\"响应json数据\",{\"1\":{\"261\":1}}],[\"响应页面\",{\"0\":{\"261\":1}}],[\"响应\",{\"0\":{\"260\":1}}],[\"响应对象\",{\"1\":{\"232\":1}}],[\"响应code异常\",{\"1\":{\"27\":1}}],[\"响应结果\",{\"1\":{\"27\":1}}],[\"响应日志\",{\"1\":{\"27\":1}}],[\"响应格式统一等\",{\"1\":{\"27\":1}}],[\"响应头的增删改查\",{\"1\":{\"27\":1}}],[\"响应头\",{\"1\":{\"9\":1,\"14\":1,\"22\":1,\"23\":1}}],[\"访问地址\",{\"1\":{\"726\":1}}],[\"访问localhost\",{\"1\":{\"655\":1}}],[\"访问链接\",{\"1\":{\"522\":1}}],[\"访问共享内存\",{\"1\":{\"370\":1}}],[\"访问\",{\"1\":{\"328\":1,\"681\":1}}],[\"访问路径编解码字符集\",{\"1\":{\"248\":1}}],[\"访问控制\",{\"1\":{\"27\":2}}],[\"访问服务端资源\",{\"1\":{\"27\":1}}],[\"一看当前这把锁不是属于自己\",{\"1\":{\"778\":1}}],[\"一人一单\",{\"0\":{\"770\":1},\"1\":{\"770\":3,\"789\":1,\"790\":1}}],[\"一开始压力测试没问题\",{\"1\":{\"698\":1}}],[\"一致\",{\"1\":{\"634\":1,\"778\":1,\"780\":2}}],[\"一致性\",{\"1\":{\"377\":3,\"472\":1}}],[\"一条一条处理\",{\"1\":{\"526\":1}}],[\"一条记录时\",{\"1\":{\"475\":2}}],[\"一次性要获取完整数据\",{\"1\":{\"526\":1}}],[\"一次索引扫描\",{\"1\":{\"467\":1}}],[\"一次会扩容为原来的1\",{\"1\":{\"56\":1}}],[\"一些redis命令的调用\",{\"1\":{\"782\":1}}],[\"一些nosql数据库可能牺牲acid属性以获得更高的性能和可用性\",{\"1\":{\"377\":1}}],[\"一些概念\",{\"1\":{\"268\":1}}],[\"一些特殊情况需要\",{\"1\":{\"200\":1}}],[\"一些基本概念\",{\"1\":{\"81\":1}}],[\"一句话\",{\"1\":{\"161\":1}}],[\"一部分是面向我们程序员提供的\",{\"1\":{\"159\":1}}],[\"一口气多线程异步任务同时查询\",{\"1\":{\"143\":1}}],[\"一样\",{\"1\":{\"120\":1,\"716\":1}}],[\"一旦过期时间到了\",{\"1\":{\"749\":1}}],[\"一旦出现消息堆积问题\",{\"1\":{\"347\":1}}],[\"一旦所有线程到达同步点\",{\"1\":{\"108\":1}}],[\"一旦线程执行完\",{\"1\":{\"91\":1}}],[\"一组线程互相等待彼此持有的资源\",{\"1\":{\"104\":1}}],[\"一组规则\",{\"1\":{\"27\":1}}],[\"一般的使用步骤\",{\"1\":{\"781\":1}}],[\"一般是后端或者负责人来提供\",{\"1\":{\"521\":1}}],[\"一般不建议开启\",{\"1\":{\"344\":1}}],[\"一般不需要加\",{\"1\":{\"200\":1}}],[\"一般\",{\"1\":{\"327\":4,\"508\":1}}],[\"一般设置一个字段\",{\"1\":{\"215\":1}}],[\"一般来说\",{\"1\":{\"47\":1}}],[\"一般在请求头中加新的请求头\",{\"1\":{\"27\":1}}],[\"一张订单信息表包含订单id和订单\",{\"1\":{\"47\":1}}],[\"一张用户信息表包含用户id\",{\"1\":{\"47\":1}}],[\"一个用户也可以被多个用户关注\",{\"1\":{\"806\":1}}],[\"一个用户可以关注多个用户\",{\"1\":{\"806\":1}}],[\"一个消息可以被多个消费者读取\",{\"1\":{\"794\":1}}],[\"一个人只能抢购一个优惠卷\",{\"1\":{\"770\":1}}],[\"一个属性只能被一个一个分组使用\",{\"1\":{\"674\":1}}],[\"一个分类下面有多个品牌\",{\"1\":{\"672\":1}}],[\"一个品牌可能属于多个分类\",{\"1\":{\"672\":1}}],[\"一个事务按照条件查询数据时\",{\"1\":{\"473\":1}}],[\"一个事务先后读取同一条记录\",{\"1\":{\"473\":1}}],[\"一个事务读到另外一个事务还没有提交的数据\",{\"1\":{\"473\":1}}],[\"一个控制器\",{\"1\":{\"416\":1}}],[\"一个队列的主节点可能是另一个队列的镜像节点\",{\"1\":{\"363\":1}}],[\"一个名字改了\",{\"1\":{\"286\":1}}],[\"一个bookdao对象了\",{\"1\":{\"270\":1}}],[\"一个对象的构造函数结束\",{\"1\":{\"159\":1}}],[\"一个解锁操作\",{\"1\":{\"159\":1}}],[\"一个进程或线程在等待另一个进程或线程释放资源\",{\"1\":{\"153\":1}}],[\"一个转换函数\",{\"1\":{\"143\":1}}],[\"一个线程的所有操作\",{\"1\":{\"159\":1}}],[\"一个线程的启动操作\",{\"1\":{\"159\":1}}],[\"一个线程不应该由其他线程来强制中断或停止\",{\"1\":{\"155\":1}}],[\"一个线程池\",{\"1\":{\"115\":1,\"713\":1}}],[\"一个线程持有至少一个资源\",{\"1\":{\"104\":1}}],[\"一个线程在java中的占多少内存\",{\"1\":{\"47\":1}}],[\"一个类\",{\"1\":{\"47\":1}}],[\"一个类可以实现多个接口\",{\"1\":{\"47\":1}}],[\"一层层过滤器\",{\"1\":{\"27\":1}}],[\"一定要删除maven\",{\"1\":{\"18\":1}}],[\"一定不能直接传递\",{\"1\":{\"17\":1}}],[\"以typeid为key存入同一个geo集合中即可\",{\"1\":{\"816\":1}}],[\"以确定是否已经成功获取锁\",{\"1\":{\"782\":1}}],[\"以确保消息已经被成功地发送到rabbitmq服务器\",{\"1\":{\"359\":1}}],[\"以确保在它们之间没有其他并发事务对同一数据记录进行了更改\",{\"1\":{\"210\":1}}],[\"以确保在事务中对数据的读写操作是串行的\",{\"1\":{\"110\":1}}],[\"以确保数据的原子性和一致性\",{\"1\":{\"145\":1}}],[\"以确保更好的均匀性\",{\"1\":{\"66\":1}}],[\"以上代码还是存在问题\",{\"1\":{\"770\":1}}],[\"以秒为单位\",{\"1\":{\"763\":1}}],[\"以前的重构数据的逻辑\",{\"1\":{\"756\":1}}],[\"以保证缓存数据能够及时更新\",{\"1\":{\"701\":1}}],[\"以保持适当的负载因子\",{\"1\":{\"69\":1}}],[\"以树形结构组装起来\",{\"1\":{\"663\":2}}],[\"以后已废弃\",{\"1\":{\"815\":1}}],[\"以后的查询就根据后台结果作为条件\",{\"1\":{\"810\":1}}],[\"以后使用redisson作为所有分布式锁\",{\"1\":{\"704\":1}}],[\"以后台模式运行最新版本的\",{\"1\":{\"651\":1}}],[\"以后我们想要切换的时候\",{\"1\":{\"76\":1}}],[\"以应用前端文件和nginx配置的更改\",{\"1\":{\"646\":1}}],[\"以下优化均是在用户量为100万的情况下进行\",{\"1\":{\"570\":1}}],[\"以下是一些关键的方法\",{\"1\":{\"136\":1}}],[\"以下是aqs的主要特征和组成部分\",{\"1\":{\"136\":1}}],[\"以下是\",{\"1\":{\"91\":1,\"159\":1}}],[\"以下是参数的解释\",{\"1\":{\"66\":1,\"67\":1}}],[\"以解析完成\",{\"1\":{\"525\":1}}],[\"以就业\",{\"1\":{\"508\":1}}],[\"以\",{\"1\":{\"470\":1}}],[\"以管理druid为例\",{\"1\":{\"294\":1}}],[\"以实现让java程序在各种平台下都能达到一致的内存访问效果\",{\"1\":{\"157\":1}}],[\"以实现容量的扩展\",{\"1\":{\"56\":1}}],[\"以满足各种并发场景的需求\",{\"1\":{\"136\":1}}],[\"以减少竞争\",{\"1\":{\"782\":1}}],[\"以减少搜索时间\",{\"1\":{\"70\":1}}],[\"以减少哈希冲突的概率\",{\"1\":{\"66\":1}}],[\"以用于快速失败迭代器\",{\"1\":{\"69\":1}}],[\"以找到匹配的节点\",{\"1\":{\"67\":1}}],[\"以便进行处理\",{\"1\":{\"354\":1}}],[\"以便通过该端口访问minio服务\",{\"1\":{\"317\":1}}],[\"以便稍后可以恢复或保留数据\",{\"1\":{\"215\":1}}],[\"以便在服务器重新启动时恢复数据\",{\"1\":{\"368\":1}}],[\"以便在出现异常时返回一个默认值或执行其他操作\",{\"1\":{\"143\":1}}],[\"以便在并发环境下及时检测到其他线程的修改\",{\"1\":{\"63\":1}}],[\"以便更有效地处理并发任务\",{\"1\":{\"114\":1}}],[\"以便后续的分析和处理\",{\"1\":{\"27\":1}}],[\"以及编程中的互斥锁\",{\"1\":{\"767\":1}}],[\"以及自己没有用过的\",{\"1\":{\"674\":1}}],[\"以及gateway依赖\",{\"1\":{\"661\":1}}],[\"以及mysql\",{\"1\":{\"655\":1}}],[\"以及是否存在性能问题\",{\"1\":{\"485\":1}}],[\"以及重做日志文件\",{\"1\":{\"475\":1}}],[\"以及连接池设置\",{\"1\":{\"398\":1}}],[\"以及取数据\",{\"1\":{\"395\":1}}],[\"以及其实现类\",{\"1\":{\"114\":1}}],[\"以及指定索引位置是否存在节点\",{\"1\":{\"67\":1}}],[\"以及默认的加载因子\",{\"1\":{\"63\":1}}],[\"以及请求方法是否匹配\",{\"1\":{\"27\":1,\"29\":1}}],[\"以及可视化接口的调用情况\",{\"1\":{\"5\":1}}],[\"以避免过载和性能下降\",{\"1\":{\"27\":1}}],[\"以防止死锁等问题\",{\"1\":{\"91\":1}}],[\"以防止系统崩溃\",{\"1\":{\"27\":1}}],[\"以防止恶意或异常请求\",{\"1\":{\"27\":1}}],[\"以平衡负载并提高系统的可用性和性能\",{\"1\":{\"27\":1}}],[\"缓存工具封装\",{\"0\":{\"758\":1}}],[\"缓存null值\",{\"1\":{\"752\":1}}],[\"缓存空对象\",{\"1\":{\"752\":1}}],[\"缓存空数据spring\",{\"1\":{\"706\":1}}],[\"缓存还是更新缓存\",{\"1\":{\"750\":1}}],[\"缓存调用者在更新完数据库后再去更新缓存\",{\"1\":{\"750\":1}}],[\"缓存不一致解决方案\",{\"0\":{\"750\":1}}],[\"缓存更新是redis为了节约内存\",{\"1\":{\"749\":1}}],[\"缓存更新策略\",{\"0\":{\"748\":1}}],[\"缓存可以大大降低用户访问并发量带来的服务器读写压力\",{\"1\":{\"746\":1}}],[\"缓存名字\",{\"1\":{\"706\":1}}],[\"缓存数据存储于代码中\",{\"1\":{\"746\":1}}],[\"缓存数据一致性\",{\"0\":{\"705\":1}}],[\"缓存数据的周期\",{\"1\":{\"544\":1}}],[\"缓存数据的工厂\",{\"1\":{\"27\":1}}],[\"缓存中有数据\",{\"1\":{\"702\":1,\"747\":2,\"752\":1,\"755\":1}}],[\"缓存中没有数据\",{\"1\":{\"698\":1,\"747\":2,\"751\":1,\"752\":1}}],[\"缓存预加载\",{\"1\":{\"701\":1}}],[\"缓存预热任务\",{\"1\":{\"544\":1}}],[\"缓存预热的意义\",{\"1\":{\"544\":1}}],[\"缓存预热\",{\"1\":{\"544\":1}}],[\"缓存击穿问题也叫热点key问题\",{\"1\":{\"754\":1}}],[\"缓存击穿是指某个缓存键对应的数据在缓存中不存在\",{\"1\":{\"701\":1}}],[\"缓存击穿\",{\"0\":{\"701\":1,\"754\":1},\"1\":{\"706\":1}}],[\"缓存雪崩是指在同一时段大量的缓存key同时失效或者redis服务宕机\",{\"1\":{\"753\":1}}],[\"缓存雪崩是指缓存中大量的缓存数据在同一时间失效或过期\",{\"1\":{\"700\":1}}],[\"缓存雪崩\",{\"0\":{\"700\":1,\"753\":1},\"1\":{\"706\":1}}],[\"缓存穿透是指客户端请求的数据在缓存中和数据库中都不存在\",{\"1\":{\"752\":1}}],[\"缓存穿透是指在缓存中找不到需要的数据\",{\"1\":{\"699\":1}}],[\"缓存穿透检测\",{\"1\":{\"701\":1}}],[\"缓存穿透\",{\"0\":{\"699\":1,\"752\":1},\"1\":{\"706\":1,\"752\":1}}],[\"缓存⾸⻚⾼频访问的⽤户信息列表\",{\"1\":{\"572\":1}}],[\"缓存的数据来自于数据库\",{\"1\":{\"750\":1}}],[\"缓存的所有数据都有过期时间\",{\"1\":{\"705\":1}}],[\"缓存的异步加载机制可以在缓存失效时\",{\"1\":{\"700\":1}}],[\"缓存的时候只给重要客户\",{\"1\":{\"573\":1}}],[\"缓存的空间不能太大\",{\"1\":{\"544\":1}}],[\"缓存的实现\",{\"1\":{\"543\":1}}],[\"缓存线程池\",{\"1\":{\"115\":1,\"713\":1}}],[\"缓存\",{\"1\":{\"27\":1,\"540\":1,\"567\":1,\"696\":1,\"749\":1,\"750\":1,\"756\":1}}],[\"域\",{\"1\":{\"27\":1}}],[\"跨域\",{\"1\":{\"27\":1}}],[\"鉴权\",{\"1\":{\"27\":1}}],[\"只记录1次\",{\"1\":{\"821\":1}}],[\"只支持单消费者\",{\"1\":{\"792\":1}}],[\"只可以重新创建\",{\"1\":{\"686\":1}}],[\"只可以读\",{\"1\":{\"373\":1}}],[\"只返回聚合结果\",{\"1\":{\"685\":1}}],[\"只关心balance和firstname字段的值\",{\"1\":{\"685\":1}}],[\"只允许制定的整数\",{\"1\":{\"668\":1}}],[\"只查需要的数据\",{\"1\":{\"567\":1}}],[\"只保留分数最高的几个用户\",{\"1\":{\"567\":1}}],[\"只新增查询条件\",{\"1\":{\"565\":1}}],[\"只用取\",{\"1\":{\"562\":1}}],[\"只用一个线程处理\",{\"1\":{\"142\":1}}],[\"只剩一人\",{\"1\":{\"562\":1}}],[\"只抢一次\",{\"1\":{\"551\":1}}],[\"只对单个jvm有效\",{\"1\":{\"545\":1}}],[\"只在一个服务器运行定时任务\",{\"1\":{\"545\":1}}],[\"只有所有的服务器都写入成功\",{\"1\":{\"783\":1}}],[\"只有等到新开的线程2把重建数据构建完后\",{\"1\":{\"756\":1}}],[\"只有管理员或者队伍的创建者可以修改\",{\"1\":{\"560\":1}}],[\"只有管理员才能查看加密还有非公开的房间\",{\"1\":{\"559\":1}}],[\"只有抢到锁的服务器才能执行业务逻辑\",{\"1\":{\"545\":1}}],[\"只有在key不存在时才设置\",{\"1\":{\"384\":1}}],[\"只有1可以接受\",{\"1\":{\"336\":1}}],[\"只有队列的routingkey与消息的\",{\"1\":{\"336\":1}}],[\"只有被拦截后才能交给springmvc来处理请求\",{\"1\":{\"245\":1}}],[\"只不过routingkey可以使用通配符\",{\"1\":{\"334\":1}}],[\"只负责转发消息\",{\"1\":{\"334\":1}}],[\"只会拼接一次\",{\"1\":{\"190\":2}}],[\"只会增加一个凭证\",{\"1\":{\"156\":1}}],[\"只因你太美\",{\"1\":{\"165\":1}}],[\"只是在更新数据的时候去判断\",{\"1\":{\"145\":1}}],[\"只能一个人一个人的来访问数据库\",{\"1\":{\"755\":1}}],[\"只能加入未满\",{\"1\":{\"561\":1}}],[\"只能修改自己创建的队伍\",{\"1\":{\"560\":1}}],[\"只能查看公开的队伍\",{\"1\":{\"559\":1}}],[\"只能释放自己的锁\",{\"1\":{\"551\":1,\"561\":1,\"573\":1,\"574\":1}}],[\"只能拿public的\",{\"1\":{\"169\":2,\"170\":2}}],[\"只能public修饰\",{\"1\":{\"168\":2}}],[\"只能通过阻塞或轮询的方式得到任务的结果\",{\"1\":{\"142\":1}}],[\"只能等待\",{\"1\":{\"104\":1}}],[\"只要这种逻辑可以完成\",{\"1\":{\"789\":1}}],[\"只要有一个节点拿不到\",{\"1\":{\"783\":1}}],[\"只要有一个任务完成\",{\"1\":{\"124\":1,\"720\":1}}],[\"只要大家使用的是同一把锁\",{\"1\":{\"775\":1}}],[\"只要我扣减库存时的库存和之前我查询到的库存是一样的\",{\"1\":{\"769\":1}}],[\"只要哈希思想\",{\"1\":{\"752\":1}}],[\"只要是同一把锁\",{\"1\":{\"702\":1}}],[\"只要开启这个功能即可\",{\"1\":{\"352\":1}}],[\"只要和用户传的一致\",{\"1\":{\"17\":1}}],[\"只需要拿到我们关注用户的信息\",{\"1\":{\"808\":1}}],[\"只需要维护num个数据即可\",{\"1\":{\"575\":1}}],[\"只需要把上面的arraylist换成vector即可\",{\"1\":{\"96\":1}}],[\"只需两个future\",{\"1\":{\"122\":1,\"718\":1}}],[\"只需更新值\",{\"1\":{\"66\":1}}],[\"只拥有一点在运行中必不可少的资源\",{\"1\":{\"81\":1}}],[\"只存在于单个项目中\",{\"1\":{\"26\":1}}],[\"正准备删除锁\",{\"1\":{\"779\":1}}],[\"正确\",{\"1\":{\"725\":1}}],[\"正式环境\",{\"1\":{\"634\":1}}],[\"正式数据库\",{\"1\":{\"634\":1}}],[\"正向代理\",{\"1\":{\"611\":1}}],[\"正在请求bank索引中的文档\",{\"1\":{\"685\":1}}],[\"正在跳舞\",{\"1\":{\"165\":1}}],[\"正在唱\",{\"1\":{\"165\":1}}],[\"正在添加\",{\"1\":{\"14\":1}}],[\"正常访问\",{\"1\":{\"317\":1}}],[\"正常+无锁块要求\",{\"1\":{\"156\":1}}],[\"正常\",{\"1\":{\"25\":1,\"83\":1,\"216\":2,\"220\":1,\"596\":2,\"801\":1}}],[\"总页码\",{\"1\":{\"710\":1}}],[\"总页数\",{\"1\":{\"220\":1}}],[\"总记录数\",{\"1\":{\"710\":1}}],[\"总是会出现publish错误\",{\"1\":{\"675\":1}}],[\"总用户多\",{\"1\":{\"544\":1}}],[\"总时间\",{\"1\":{\"537\":1,\"538\":1,\"539\":1}}],[\"总条数\",{\"1\":{\"220\":1}}],[\"总结解决办法\",{\"1\":{\"752\":1}}],[\"总结为\",{\"1\":{\"359\":1}}],[\"总结如下\",{\"1\":{\"343\":1}}],[\"总结\",{\"1\":{\"120\":1,\"143\":1,\"156\":1,\"716\":1}}],[\"总调用次数\",{\"1\":{\"25\":1}}],[\"总数\",{\"1\":{\"22\":1}}],[\"插值\",{\"1\":{\"417\":1}}],[\"插件功能\",{\"0\":{\"218\":1}}],[\"插件的配置\",{\"1\":{\"14\":1}}],[\"插入用户=>队伍关系到关系表\",{\"1\":{\"558\":2,\"561\":1,\"574\":1}}],[\"插入队伍信息到队伍表\",{\"1\":{\"558\":2}}],[\"插入一个成员smembers\",{\"1\":{\"390\":1}}],[\"插入到头部\",{\"1\":{\"388\":1}}],[\"插入\",{\"1\":{\"51\":1}}],[\"插入数据\",{\"1\":{\"22\":1,\"599\":1}}],[\"8ouajxfvgux\",{\"1\":{\"824\":1}}],[\"81\",{\"1\":{\"821\":1}}],[\"8101\",{\"1\":{\"14\":2}}],[\"893729\",{\"1\":{\"815\":2}}],[\"8g\",{\"1\":{\"710\":1}}],[\"8寸\",{\"1\":{\"710\":1}}],[\"832\",{\"1\":{\"696\":1}}],[\"865275\",{\"1\":{\"815\":2}}],[\"86400\",{\"1\":{\"533\":1}}],[\"86f\",{\"1\":{\"418\":1,\"423\":1}}],[\"88\",{\"1\":{\"661\":2,\"663\":1,\"691\":1}}],[\"8881\",{\"1\":{\"416\":1,\"423\":1}}],[\"8848\",{\"1\":{\"29\":2,\"658\":1,\"660\":2,\"663\":1,\"728\":2}}],[\"80\",{\"1\":{\"426\":4,\"643\":4,\"646\":3,\"691\":3}}],[\"8080\",{\"1\":{\"406\":1,\"450\":1,\"522\":1,\"532\":1,\"595\":1,\"611\":3,\"643\":2,\"646\":1,\"663\":1}}],[\"8000\",{\"1\":{\"611\":2,\"612\":1}}],[\"800\",{\"1\":{\"89\":1}}],[\"8<\",{\"1\":{\"248\":1,\"655\":1}}],[\"84118是test程序\",{\"1\":{\"104\":1}}],[\"84118\",{\"1\":{\"104\":1}}],[\"8在解决哈希冲突时有了较大的变化\",{\"1\":{\"70\":1}}],[\"8\",{\"0\":{\"845\":1},\"1\":{\"22\":1,\"27\":2,\"56\":1,\"175\":2,\"211\":1,\"224\":1,\"248\":1,\"259\":1,\"269\":1,\"270\":1,\"278\":1,\"295\":1,\"328\":2,\"347\":1,\"355\":1,\"359\":1,\"396\":2,\"398\":2,\"406\":1,\"416\":1,\"438\":1,\"451\":3,\"452\":1,\"512\":1,\"523\":1,\"640\":1,\"643\":1,\"655\":2,\"661\":1,\"663\":1,\"665\":1,\"710\":1,\"738\":1}}],[\"322287\",{\"1\":{\"815\":2}}],[\"32bit\",{\"1\":{\"763\":1}}],[\"32\",{\"1\":{\"558\":1,\"763\":1}}],[\"344808\",{\"1\":{\"444\":1}}],[\"344453\",{\"1\":{\"444\":1}}],[\"3eda5f5002bdd6fc40afe6d9\",{\"1\":{\"444\":2}}],[\"378248\",{\"1\":{\"815\":2}}],[\"375\",{\"1\":{\"696\":1}}],[\"37\",{\"1\":{\"443\":1}}],[\"397904\",{\"1\":{\"815\":2}}],[\"399\",{\"1\":{\"439\":1}}],[\"39\",{\"1\":{\"438\":1,\"439\":4,\"443\":1,\"444\":1,\"815\":8}}],[\"361以上\",{\"1\":{\"695\":1}}],[\"361511\",{\"1\":{\"444\":1}}],[\"3600\",{\"1\":{\"663\":1}}],[\"36\",{\"1\":{\"406\":1,\"523\":2}}],[\"3小时后过期\",{\"1\":{\"400\":1}}],[\"3次失败后消息被删除\",{\"1\":{\"350\":1}}],[\"3<\",{\"1\":{\"241\":1,\"453\":1}}],[\"336\",{\"1\":{\"696\":1}}],[\"33625\",{\"1\":{\"317\":1}}],[\"33<\",{\"1\":{\"655\":1}}],[\"3307\",{\"1\":{\"651\":2,\"655\":2}}],[\"3306\",{\"1\":{\"211\":1,\"224\":1,\"294\":1,\"295\":1,\"309\":2,\"310\":2,\"595\":1,\"651\":2}}],[\"339303\",{\"1\":{\"445\":1}}],[\"333\",{\"1\":{\"143\":1}}],[\"3l\",{\"1\":{\"196\":1}}],[\"3个停车位\",{\"1\":{\"109\":1}}],[\"31bit\",{\"1\":{\"763\":1}}],[\"31\",{\"1\":{\"71\":2}}],[\"30<\",{\"1\":{\"429\":1}}],[\"30分分别设置延迟消息\",{\"1\":{\"355\":1}}],[\"30秒\",{\"1\":{\"355\":1}}],[\"300\",{\"1\":{\"110\":4,\"142\":2,\"763\":2}}],[\"30000\",{\"1\":{\"551\":1,\"561\":1,\"573\":1,\"574\":1,\"704\":3}}],[\"3000\",{\"1\":{\"91\":5}}],[\"30\",{\"1\":{\"63\":1,\"95\":1,\"99\":1,\"100\":1,\"115\":1,\"169\":1,\"170\":1,\"665\":1,\"670\":1,\"687\":1,\"703\":6,\"713\":1}}],[\"3\",{\"0\":{\"840\":1},\"1\":{\"22\":1,\"27\":1,\"51\":1,\"58\":2,\"93\":3,\"101\":1,\"109\":1,\"116\":1,\"134\":1,\"142\":1,\"143\":2,\"171\":1,\"174\":1,\"175\":5,\"176\":1,\"184\":1,\"190\":2,\"196\":2,\"198\":2,\"211\":2,\"214\":1,\"215\":2,\"220\":2,\"224\":1,\"241\":4,\"303\":1,\"312\":1,\"328\":2,\"342\":1,\"350\":1,\"352\":1,\"355\":3,\"363\":1,\"395\":1,\"396\":1,\"400\":2,\"415\":1,\"416\":1,\"418\":1,\"429\":1,\"439\":1,\"452\":2,\"469\":1,\"525\":1,\"551\":1,\"558\":3,\"567\":1,\"584\":1,\"594\":1,\"605\":2,\"643\":1,\"661\":1,\"675\":2,\"685\":2,\"688\":1,\"710\":4,\"721\":1,\"730\":1,\"738\":1,\"756\":1,\"764\":3,\"765\":1,\"780\":1,\"796\":1}}],[\"如set\",{\"1\":{\"782\":1}}],[\"如设置一个临时的占位值\",{\"1\":{\"701\":1}}],[\"如类的结构\",{\"1\":{\"694\":1}}],[\"如重启\",{\"1\":{\"682\":1}}],[\"如上面的魅海蓝\",{\"1\":{\"670\":1}}],[\"如上图中的\",{\"1\":{\"199\":1}}],[\"如iphone\",{\"1\":{\"669\":2}}],[\"如dev\",{\"1\":{\"660\":1}}],[\"如必须使用一定要以小表为驱动\",{\"1\":{\"487\":1}}],[\"如使用临时表\",{\"1\":{\"486\":1}}],[\"如一个事务获取了一个数据行的排他锁\",{\"1\":{\"476\":1}}],[\"如图\",{\"1\":{\"470\":1}}],[\"如大数据\",{\"1\":{\"377\":1}}],[\"如金融系统\",{\"1\":{\"377\":1}}],[\"如文档\",{\"1\":{\"377\":1}}],[\"如获取请求头的content\",{\"1\":{\"232\":1}}],[\"如数组\",{\"1\":{\"190\":1}}],[\"如取消一个耗时操作\",{\"1\":{\"155\":1}}],[\"如按顺序分配资源\",{\"1\":{\"153\":1}}],[\"如reentrantreadwritelock\",{\"1\":{\"136\":1}}],[\"如reentrantlock\",{\"1\":{\"136\":2}}],[\"如\",{\"1\":{\"114\":1,\"670\":1}}],[\"如内存\",{\"1\":{\"114\":1}}],[\"如添加\",{\"1\":{\"98\":1}}],[\"如迭代器\",{\"1\":{\"63\":1}}],[\"如容量\",{\"1\":{\"63\":1}}],[\"如何得到本月到今天为止的所有签到数据\",{\"1\":{\"820\":1}}],[\"如何保证缓存与数据库的操作的同时成功和失败\",{\"1\":{\"750\":1}}],[\"如何保证线程安全\",{\"1\":{\"47\":1}}],[\"如何知道是哪个用户\",{\"0\":{\"605\":1}}],[\"如何定位慢查询\",{\"0\":{\"485\":1}}],[\"如何准确的实现在下单后第30分钟去检查支付状态呢\",{\"1\":{\"353\":1}}],[\"如何给消息添加唯一id\",{\"1\":{\"352\":1}}],[\"如何解决\",{\"0\":{\"362\":1},\"1\":{\"267\":1,\"304\":1}}],[\"如何判断是否成功\",{\"1\":{\"188\":1}}],[\"如何停止中断中的线程\",{\"1\":{\"155\":1}}],[\"如何实现数组和list之间的转换\",{\"1\":{\"58\":1}}],[\"如何实现的\",{\"1\":{\"47\":1}}],[\"如何查询\",{\"1\":{\"47\":1}}],[\"如何理解继承和多态\",{\"1\":{\"47\":1}}],[\"如何理解面向对象\",{\"1\":{\"47\":1}}],[\"如何使用使用重写举个例子\",{\"1\":{\"47\":1}}],[\"如何分析\",{\"0\":{\"486\":1}}],[\"如何分组查询\",{\"1\":{\"47\":1}}],[\"如何分页\",{\"1\":{\"47\":1}}],[\"如何在每次调用接口的时候统计次数\",{\"1\":{\"26\":1}}],[\"如请求参数处理\",{\"1\":{\"27\":1}}],[\"如果算法不精准\",{\"1\":{\"808\":1}}],[\"如果抢购成功\",{\"1\":{\"789\":1}}],[\"如果set集合中没有这条记录\",{\"1\":{\"789\":1}}],[\"如果set集合中没有这条数据\",{\"1\":{\"789\":1}}],[\"如果充足\",{\"1\":{\"789\":1}}],[\"如果等待超过一定时间仍然无法获取锁\",{\"1\":{\"782\":1}}],[\"如果持有这把锁的人再次持有这把锁\",{\"1\":{\"782\":1}}],[\"如果属于自己\",{\"1\":{\"778\":1}}],[\"如果插入key成功\",{\"1\":{\"775\":1}}],[\"如果你在方法内部加锁\",{\"1\":{\"770\":1}}],[\"如果你执行第一个任务的时候\",{\"1\":{\"143\":1}}],[\"如果我们直接使用userid\",{\"1\":{\"770\":1}}],[\"如果预估值\",{\"1\":{\"769\":1}}],[\"如果过期\",{\"1\":{\"756\":1}}],[\"如果从缓存没有查询到数据\",{\"1\":{\"755\":1}}],[\"如果布隆过滤器判断存在\",{\"1\":{\"752\":1}}],[\"如果大量的请求同时过来访问这种不存在的数据\",{\"1\":{\"752\":1}}],[\"如果缓存未命中\",{\"1\":{\"751\":1}}],[\"如果缓存数据不存在\",{\"1\":{\"747\":1}}],[\"如果缓存数据存在\",{\"1\":{\"747\":1}}],[\"如果缓存中没有\",{\"1\":{\"706\":1}}],[\"如果缓存中有\",{\"1\":{\"706\":1}}],[\"如果访问不需要拦截的路径\",{\"1\":{\"742\":1}}],[\"如果用户不存在\",{\"1\":{\"738\":1}}],[\"如果用户传入的值和老的一致\",{\"1\":{\"560\":1}}],[\"如果一致则释放锁\",{\"1\":{\"780\":1}}],[\"如果一致\",{\"1\":{\"738\":1}}],[\"如果一个用户疯狂点击\",{\"1\":{\"561\":1}}],[\"如果一个队列中的消息ttl结束仍未消费\",{\"1\":{\"361\":1}}],[\"如果一个队列中的消息已经成为死信\",{\"1\":{\"354\":1}}],[\"如果一个一个新增\",{\"1\":{\"211\":1}}],[\"如果一个操作\",{\"1\":{\"159\":1}}],[\"如果一个线程实例a执行了threadb\",{\"1\":{\"87\":1}}],[\"如果手机号合法\",{\"1\":{\"738\":1}}],[\"如果指定了过期时间\",{\"1\":{\"704\":1}}],[\"如果业务超长\",{\"1\":{\"704\":1}}],[\"如果业务中包含事务\",{\"1\":{\"350\":1}}],[\"如果批量错误\",{\"1\":{\"688\":1}}],[\"如果版本不一致可以修改\",{\"1\":{\"687\":1}}],[\"如果相符\",{\"1\":{\"769\":1}}],[\"如果相同不会有什么操作\",{\"1\":{\"682\":1}}],[\"如果相等则设置新值\",{\"1\":{\"155\":1}}],[\"如果categoryid为0\",{\"1\":{\"670\":1}}],[\"如果配置中心和配置文件配置相同的项\",{\"1\":{\"660\":1}}],[\"如果失败去设置用户错误信息\",{\"1\":{\"612\":1}}],[\"如果队伍有多个人\",{\"1\":{\"562\":1}}],[\"如果队伍只有一个人\",{\"1\":{\"562\":1}}],[\"如果队伍\",{\"1\":{\"562\":1}}],[\"如果队列不在该节点\",{\"1\":{\"363\":1}}],[\"如果队列为空\",{\"1\":{\"112\":1}}],[\"如果队列已满\",{\"1\":{\"112\":1}}],[\"如果加入的队伍是加密的\",{\"1\":{\"561\":1}}],[\"如果加了该注入\",{\"1\":{\"261\":1}}],[\"如果方法还没执行完\",{\"1\":{\"551\":1}}],[\"如果方法执行时间过长\",{\"1\":{\"549\":1}}],[\"如果参数可以分析\",{\"1\":{\"512\":1}}],[\"如果这样ifelse写的话\",{\"1\":{\"491\":1}}],[\"如果这个数据不存在\",{\"1\":{\"752\":1}}],[\"如果这个数据已经被其它线程更新\",{\"1\":{\"145\":1}}],[\"如果这个数据没有被更新\",{\"1\":{\"145\":1}}],[\"如果这个位置是空的\",{\"1\":{\"69\":1}}],[\"如果该字段显示为null\",{\"1\":{\"486\":1}}],[\"如果该变量存在\",{\"1\":{\"421\":1}}],[\"如果适用\",{\"1\":{\"486\":1}}],[\"如果查询涉及多个表\",{\"1\":{\"486\":1}}],[\"如果查询条件不满足索引的最左前缀原则\",{\"1\":{\"470\":1}}],[\"如果事务需要回滚\",{\"1\":{\"476\":1}}],[\"如果索引列不能存储null值\",{\"1\":{\"469\":1}}],[\"如果表没有主键\",{\"1\":{\"466\":1}}],[\"如果之前执行过相同的查询\",{\"1\":{\"463\":1}}],[\"如果之前已经存在相同的键\",{\"1\":{\"66\":1}}],[\"如果写到不同的sheet\",{\"1\":{\"431\":1}}],[\"如果写上面的了\",{\"1\":{\"179\":1}}],[\"如果时间大于0会有缓存不方便进行模板测试\",{\"1\":{\"416\":1,\"423\":1}}],[\"如果不充足\",{\"1\":{\"789\":1}}],[\"如果不是\",{\"1\":{\"752\":1}}],[\"如果不一致则什么都不做\",{\"1\":{\"780\":1}}],[\"如果不一致\",{\"1\":{\"738\":1}}],[\"如果不合法\",{\"1\":{\"738\":1}}],[\"如果不指定\",{\"1\":{\"682\":1}}],[\"如果不可以分析\",{\"1\":{\"512\":1}}],[\"如果不存在\",{\"1\":{\"701\":1}}],[\"如果不存在主键\",{\"1\":{\"466\":1}}],[\"如果不存在则设置\",{\"1\":{\"400\":1}}],[\"如果不加synchronized会报错\",{\"1\":{\"156\":1}}],[\"如果value是一个java对象\",{\"1\":{\"382\":1}}],[\"如果在更新时发现数据已经被其他线程修改\",{\"1\":{\"768\":1}}],[\"如果在白名单中\",{\"1\":{\"612\":1}}],[\"如果在主从同步完成前\",{\"1\":{\"363\":1}}],[\"如果在最大长度范围内\",{\"1\":{\"71\":1}}],[\"如果消费者不存在\",{\"1\":{\"795\":1}}],[\"如果消费者再次执行依然出错\",{\"1\":{\"350\":1}}],[\"如果消息依然失败\",{\"1\":{\"359\":1}}],[\"如果rabbitmq服务器没有收到消息或者消息发送失败\",{\"1\":{\"359\":1}}],[\"如果提前发现订单已经支付\",{\"1\":{\"355\":1}}],[\"如果发现数据不存在\",{\"1\":{\"699\":1}}],[\"如果发现未支付\",{\"1\":{\"353\":1}}],[\"如果发现订单已经支付\",{\"1\":{\"352\":1}}],[\"如果发送失败\",{\"1\":{\"340\":1}}],[\"如果下次又收到相同消息\",{\"1\":{\"352\":1}}],[\"如果mysql选择了其中一个索引来执行查询\",{\"1\":{\"486\":1}}],[\"如果mq通知失败\",{\"1\":{\"340\":1}}],[\"如果mapper接口名称和sql映射文件名称相同\",{\"1\":{\"176\":1}}],[\"如果找不到包\",{\"1\":{\"303\":1}}],[\"如果找到了匹配的节点\",{\"1\":{\"67\":1}}],[\"如果找到链表的末尾\",{\"1\":{\"66\":1}}],[\"如果数据库的使用场景读的操作比较多的时候\",{\"1\":{\"487\":1}}],[\"如果数据层的实现类发生变化\",{\"1\":{\"267\":1}}],[\"如果数据被修改\",{\"1\":{\"110\":1}}],[\"如果省略了\",{\"1\":{\"261\":1}}],[\"如果post请求出现中文乱码\",{\"1\":{\"248\":1}}],[\"如果get请求参数中有中文\",{\"1\":{\"248\":1}}],[\"如果需要上传时设置存储类型和访问权限\",{\"1\":{\"241\":1}}],[\"如果需要匹配值\",{\"1\":{\"67\":1}}],[\"如果未指定本地路径\",{\"1\":{\"241\":1,\"665\":1}}],[\"如果返回的列中没有创建索引\",{\"1\":{\"467\":1}}],[\"如果返回false\",{\"1\":{\"232\":1}}],[\"如果返回true\",{\"1\":{\"232\":1}}],[\"如果把info改为对象类型\",{\"1\":{\"217\":1}}],[\"如果把lock\",{\"1\":{\"156\":1}}],[\"如果想要得到最佳性能\",{\"1\":{\"211\":1}}],[\"如果余额不同\",{\"1\":{\"210\":1}}],[\"如果扣减后余额为0\",{\"1\":{\"210\":1}}],[\"如果您在\",{\"1\":{\"201\":1}}],[\"如果设置\",{\"1\":{\"198\":1}}],[\"如果java的实体类和数据库里的字段不一致\",{\"1\":{\"180\":1}}],[\"如果无凭证\",{\"1\":{\"156\":1}}],[\"如果notify在wait前面\",{\"1\":{\"156\":1}}],[\"如果线程挂掉\",{\"1\":{\"551\":1}}],[\"如果线程处于被阻塞状态\",{\"1\":{\"155\":1}}],[\"如果线程处于正常活动状态\",{\"1\":{\"155\":1}}],[\"如果线程池中的线程都在执行任务\",{\"1\":{\"115\":2,\"713\":2}}],[\"如果锁的拥有者无法续租\",{\"1\":{\"782\":1}}],[\"如果锁的拥有者能够定期执行续租操作\",{\"1\":{\"782\":1}}],[\"如果锁的拥有者在持续时间内没有续租锁\",{\"1\":{\"782\":1}}],[\"如果锁已经被其他线程拥有\",{\"1\":{\"782\":1}}],[\"如果锁已经被其他线程占用\",{\"1\":{\"91\":1}}],[\"如果锁存在\",{\"1\":{\"782\":1}}],[\"如果锁不存在\",{\"1\":{\"782\":1}}],[\"如果锁对象的持有线程是当前线程\",{\"1\":{\"152\":1}}],[\"如果目标锁对象的计数器为零\",{\"1\":{\"152\":1}}],[\"如果计算过程中出现异常\",{\"1\":{\"143\":1}}],[\"如果计算尚未完成\",{\"1\":{\"105\":1}}],[\"如果此completablefuture尚未完成\",{\"1\":{\"143\":1}}],[\"如果异步计算已经完成\",{\"1\":{\"143\":1}}],[\"如果任务尚未完成\",{\"1\":{\"142\":1}}],[\"如果任务足够小\",{\"1\":{\"117\":1}}],[\"如果成功则返回true\",{\"1\":{\"136\":2}}],[\"如果flag没有被声明为volatile\",{\"1\":{\"132\":1}}],[\"如果出现冲突了怎么办\",{\"1\":{\"131\":1}}],[\"如果a线程的写操作a与b线程的读操作b之间存在happens\",{\"1\":{\"128\":1}}],[\"如果有人插入成功\",{\"1\":{\"775\":1}}],[\"如果有session信息\",{\"1\":{\"738\":1}}],[\"如果有100万消息堆积在mq\",{\"0\":{\"362\":1}}],[\"如果有\",{\"1\":{\"287\":1}}],[\"如果有多个并发事务同时尝试更新同一条数据\",{\"1\":{\"210\":1}}],[\"如果有凭证\",{\"1\":{\"156\":1}}],[\"如果有等待的线程\",{\"1\":{\"109\":1}}],[\"如果有可用的许可证则立即返回\",{\"1\":{\"109\":1}}],[\"如果另一个线程请求该资源\",{\"1\":{\"104\":1}}],[\"如果追求更好的性能\",{\"1\":{\"102\":1}}],[\"如果对线程获取锁的顺序有特定的要求\",{\"1\":{\"102\":1}}],[\"如果其他线程想要中断正在等待锁的线程\",{\"1\":{\"91\":1}}],[\"如果还有任何用户线程在运行\",{\"1\":{\"89\":1}}],[\"如果直接调用run\",{\"1\":{\"83\":1}}],[\"如果e不为空\",{\"1\":{\"71\":1}}],[\"如果高位尾为null\",{\"1\":{\"71\":1}}],[\"如果低位尾为null\",{\"1\":{\"71\":1}}],[\"如果oldcap<0\",{\"1\":{\"71\":1}}],[\"如果是一级评论\",{\"1\":{\"801\":1}}],[\"如果是0\",{\"1\":{\"789\":1}}],[\"如果是当前线程\",{\"1\":{\"782\":1}}],[\"如果是null\",{\"1\":{\"752\":1}}],[\"如果是production环境\",{\"1\":{\"635\":1}}],[\"如果是无需登录的页面\",{\"1\":{\"613\":1}}],[\"如果是加密\",{\"1\":{\"558\":2}}],[\"如果是队长退出队伍\",{\"1\":{\"562\":1}}],[\"如果是队长\",{\"1\":{\"556\":1,\"562\":1}}],[\"如果是字符串类型的字段\",{\"1\":{\"469\":1}}],[\"如果是消息处理或校验异常\",{\"1\":{\"349\":1}}],[\"如果是业务异常\",{\"1\":{\"349\":1}}],[\"如果是链表\",{\"1\":{\"71\":1}}],[\"如果是红黑树\",{\"1\":{\"71\":1}}],[\"如果是首次初始化\",{\"1\":{\"71\":1}}],[\"如果是\",{\"1\":{\"71\":1,\"73\":1,\"710\":1}}],[\"如果当前用户已经点赞\",{\"1\":{\"803\":1}}],[\"如果当前内存中的值与期望值相等\",{\"1\":{\"131\":1}}],[\"如果当前数组为null的时候\",{\"1\":{\"71\":1}}],[\"如果当前节点是红黑树节点\",{\"1\":{\"66\":1}}],[\"如果新键与已有键不同\",{\"1\":{\"69\":1}}],[\"如果新键与已有键相同\",{\"1\":{\"69\":1}}],[\"如果确定位置不为空\",{\"1\":{\"69\":1}}],[\"如果存海量数据\",{\"1\":{\"816\":1}}],[\"如果存在则作为查询条件\",{\"1\":{\"559\":1}}],[\"如果存在主键\",{\"1\":{\"466\":1}}],[\"如果存在这个键的映射\",{\"1\":{\"67\":1}}],[\"如果存储位置已经有值\",{\"1\":{\"66\":1}}],[\"如果达到阈值\",{\"1\":{\"66\":1}}],[\"如果匹配\",{\"1\":{\"66\":1,\"67\":1}}],[\"如果哈希冲突发生\",{\"1\":{\"66\":1}}],[\"如果没有卡过自动释放锁的时间点\",{\"1\":{\"778\":1}}],[\"如果没有过期\",{\"1\":{\"756\":1}}],[\"如果没有命中则直接返回空数据\",{\"1\":{\"756\":1}}],[\"如果没有获得到\",{\"1\":{\"755\":1}}],[\"如果没有session信息\",{\"1\":{\"738\":1}}],[\"如果没有登录\",{\"1\":{\"612\":1}}],[\"如果没有匹配的用户\",{\"1\":{\"566\":1}}],[\"如果没有回报404错误\",{\"1\":{\"261\":1}}],[\"如果没有输入status\",{\"1\":{\"185\":1}}],[\"如果没有executorservice线程池\",{\"1\":{\"143\":1}}],[\"如果没有适当的同步机制\",{\"1\":{\"130\":1}}],[\"如果没有映射与该键\",{\"1\":{\"67\":1}}],[\"如果没有\",{\"1\":{\"66\":1,\"71\":1}}],[\"如果为tue\",{\"1\":{\"155\":1}}],[\"如果为\",{\"1\":{\"66\":2,\"67\":2}}],[\"如果初始容量为负数\",{\"1\":{\"64\":1}}],[\"如果初始容量为负数或负载因子为非正数\",{\"1\":{\"64\":1}}],[\"如果\",{\"1\":{\"63\":1,\"67\":2,\"159\":1}}],[\"如果修改了list内容\",{\"1\":{\"58\":1}}],[\"如果修改了数组内容\",{\"1\":{\"58\":1}}],[\"如果要方便获取\",{\"1\":{\"217\":1}}],[\"如果要添加元素长度大于当前底层elementdata的长度了\",{\"1\":{\"56\":1}}],[\"如果要查询数据表中创建时间的最新数据\",{\"1\":{\"47\":1}}],[\"如果值大于0\",{\"1\":{\"54\":1}}],[\"如果每个团队都要开发自己的模拟接口\",{\"1\":{\"26\":1}}],[\"如果客户每次都要写这么多代码\",{\"1\":{\"18\":1}}],[\"如下图的标题\",{\"1\":{\"670\":1}}],[\"如下操作\",{\"1\":{\"598\":1}}],[\"如下进行增删改查操作\",{\"1\":{\"262\":1}}],[\"如下\",{\"1\":{\"22\":1,\"451\":1,\"475\":1,\"742\":1,\"752\":1}}],[\"$host\",{\"1\":{\"691\":1,\"697\":1}}],[\"$http\",{\"1\":{\"663\":2}}],[\"$emit来传递事件\",{\"1\":{\"670\":1}}],[\"$emit\",{\"1\":{\"670\":1}}],[\"$uri\",{\"1\":{\"643\":1,\"646\":1}}],[\"$o\",{\"1\":{\"51\":1}}],[\"$\",{\"1\":{\"22\":1,\"51\":5,\"182\":2,\"207\":1,\"224\":4,\"295\":4,\"307\":1,\"312\":4,\"416\":3,\"417\":1,\"418\":4,\"420\":4,\"421\":1,\"422\":7,\"507\":1,\"534\":1,\"660\":2,\"663\":3,\"665\":4,\"666\":1,\"667\":1,\"794\":1}}],[\"`do\",{\"1\":{\"630\":1}}],[\"`register\",{\"1\":{\"612\":1}}],[\"`routes\",{\"1\":{\"517\":1}}],[\"`$\",{\"1\":{\"534\":1}}],[\"`请输入$\",{\"1\":{\"520\":1}}],[\"`标签\",{\"1\":{\"507\":1}}],[\"````\",{\"1\":{\"200\":1}}],[\"`\",{\"1\":{\"22\":2,\"507\":1,\"520\":1,\"534\":1,\"612\":1,\"630\":1}}],[\"5寸\",{\"1\":{\"710\":1}}],[\"54\",{\"1\":{\"567\":1}}],[\"5px\",{\"1\":{\"534\":2}}],[\"537\",{\"1\":{\"523\":2}}],[\"551822\",{\"1\":{\"444\":1}}],[\"51601\",{\"1\":{\"728\":1}}],[\"5165c94b870f3ec5d92f289b\",{\"1\":{\"444\":2}}],[\"51801\",{\"1\":{\"726\":1,\"727\":1}}],[\"51122528418454\",{\"1\":{\"523\":1}}],[\"512\",{\"1\":{\"9\":3,\"558\":1,\"596\":2}}],[\"59\",{\"1\":{\"544\":1,\"551\":1,\"573\":1}}],[\"599251\",{\"1\":{\"444\":1}}],[\"59l\",{\"1\":{\"215\":1}}],[\"57\",{\"1\":{\"523\":1}}],[\"57908428837437\",{\"1\":{\"442\":1}}],[\"575429778924\",{\"1\":{\"442\":1}}],[\"5运算\",{\"1\":{\"420\":1}}],[\"5601\",{\"1\":{\"681\":2}}],[\"56\",{\"1\":{\"430\":1}}],[\"5672\",{\"1\":{\"328\":2,\"332\":1,\"340\":1}}],[\"56bac0\",{\"1\":{\"201\":1}}],[\"5以后的版本已经处理了中文乱码的问题\",{\"1\":{\"248\":1}}],[\"5<\",{\"1\":{\"175\":1}}],[\"501\",{\"1\":{\"696\":1}}],[\"504\",{\"1\":{\"691\":1}}],[\"503\",{\"1\":{\"691\":1}}],[\"502\",{\"1\":{\"691\":1}}],[\"50x\",{\"1\":{\"691\":3}}],[\"50\",{\"1\":{\"115\":2,\"151\":1,\"319\":1,\"333\":1,\"710\":3,\"713\":2,\"755\":1}}],[\"50000\",{\"1\":{\"625\":1}}],[\"5000\",{\"1\":{\"355\":1,\"539\":1,\"817\":1}}],[\"500\",{\"1\":{\"89\":1,\"142\":3,\"691\":1,\"710\":2,\"763\":1}}],[\"5倍\",{\"1\":{\"56\":1,\"57\":1}}],[\"5l\",{\"1\":{\"27\":1,\"196\":4}}],[\"5\",{\"0\":{\"842\":1},\"1\":{\"22\":3,\"27\":1,\"56\":1,\"58\":1,\"93\":2,\"100\":1,\"110\":4,\"116\":1,\"171\":1,\"175\":1,\"184\":1,\"196\":1,\"224\":1,\"312\":1,\"355\":1,\"409\":1,\"420\":6,\"432\":1,\"438\":1,\"439\":1,\"452\":1,\"469\":1,\"523\":1,\"558\":3,\"561\":2,\"567\":2,\"574\":1,\"594\":1,\"616\":1,\"643\":1,\"675\":6,\"688\":1,\"704\":1,\"710\":6,\"721\":1,\"738\":1,\"764\":1,\"765\":1,\"769\":1,\"770\":2,\"776\":1,\"777\":1,\"790\":1}}],[\"申请签名\",{\"0\":{\"22\":1}}],[\"查数据库\",{\"1\":{\"805\":1}}],[\"查到这个一级分类的二级分类\",{\"1\":{\"690\":1,\"697\":1}}],[\"查年龄分布和这个年龄的平均薪资\",{\"1\":{\"685\":1}}],[\"查出剩余结果\",{\"1\":{\"702\":1}}],[\"查出当前spuid对应的所有sku信息\",{\"1\":{\"688\":1}}],[\"查出所有1级分类\",{\"1\":{\"690\":1,\"697\":1}}],[\"查出所有年龄分布\",{\"1\":{\"685\":1}}],[\"查出所有分类\",{\"1\":{\"663\":1}}],[\"查出所有分类以及子分类\",{\"1\":{\"663\":2}}],[\"查出来\",{\"1\":{\"540\":1}}],[\"查关系表拿到这100个用户的所有标签id\",{\"1\":{\"510\":1}}],[\"查不到\",{\"1\":{\"467\":1}}],[\"查找bit数组中指定范围内第一个0或1出现的位置\",{\"1\":{\"819\":1}}],[\"查找trylockinner方法\",{\"1\":{\"782\":1}}],[\"查找使用了索引\",{\"1\":{\"486\":2}}],[\"查找所有符合给定模式的keyexists\",{\"1\":{\"393\":1}}],[\"查找位置\",{\"1\":{\"69\":1}}],[\"查完淘宝查天猫\",{\"1\":{\"143\":1}}],[\"查完京东查淘宝\",{\"1\":{\"143\":1}}],[\"查看探店笔记\",{\"0\":{\"802\":1}}],[\"查看文章概述与文章详情互不影响\",{\"1\":{\"730\":1}}],[\"查看所有的索引\",{\"1\":{\"682\":1}}],[\"查看所有节点\",{\"1\":{\"682\":1}}],[\"查看主节点信息\",{\"1\":{\"682\":1}}],[\"查看es健康状况\",{\"1\":{\"682\":1}}],[\"查看日志\",{\"1\":{\"643\":1}}],[\"查看进程\",{\"1\":{\"643\":1}}],[\"查看nginx进程\",{\"1\":{\"639\":1}}],[\"查看端口占用\",{\"1\":{\"639\":1}}],[\"查看运行\",{\"1\":{\"639\":1}}],[\"查看是否安装好\",{\"1\":{\"639\":1}}],[\"查看\",{\"1\":{\"616\":1}}],[\"查看慢查询日志文件\",{\"1\":{\"485\":1}}],[\"查看信息\",{\"1\":{\"378\":1}}],[\"查看安装信息\",{\"1\":{\"378\":1}}],[\"查看保存在哪里\",{\"1\":{\"369\":1}}],[\"查看本机有多少java\",{\"1\":{\"76\":1}}],[\"查看接口文档\",{\"0\":{\"22\":1},\"1\":{\"22\":2,\"23\":1}}],[\"查询redis\",{\"1\":{\"817\":1}}],[\"查询店铺信息\",{\"1\":{\"816\":1}}],[\"查询店铺数据\",{\"1\":{\"756\":1}}],[\"查询并展示推送的blog信息\",{\"1\":{\"810\":1}}],[\"查询所有粉丝\",{\"1\":{\"809\":1}}],[\"查询收件箱\",{\"1\":{\"810\":1}}],[\"查询收件箱数据时\",{\"1\":{\"809\":1}}],[\"查询收货地址\",{\"1\":{\"214\":1}}],[\"查询是否关注\",{\"1\":{\"806\":1}}],[\"查询top5点赞用户\",{\"1\":{\"805\":1}}],[\"查询优惠卷\",{\"1\":{\"765\":1}}],[\"查询后将数据写入redis\",{\"1\":{\"755\":1}}],[\"查询null数据\",{\"1\":{\"706\":1}}],[\"查询数据库再更新缓存\",{\"1\":{\"750\":1}}],[\"查询数据库之前先查询缓存\",{\"1\":{\"747\":1}}],[\"查询数据库\",{\"1\":{\"698\":1,\"758\":1}}],[\"查询品牌和分类的名字信息\",{\"1\":{\"688\":1}}],[\"查询库存系统是否有库存\",{\"1\":{\"688\":1}}],[\"查询当前sku的所有可以被用来检索的规格属性\",{\"1\":{\"688\":1}}],[\"查询文档get\",{\"1\":{\"682\":1}}],[\"查询指定分类里的所有品牌信息\",{\"1\":{\"675\":2}}],[\"查询分组\",{\"1\":{\"673\":1}}],[\"查询分类\",{\"1\":{\"673\":1}}],[\"查询代码\",{\"1\":{\"673\":1}}],[\"查询详细名字\",{\"1\":{\"672\":1}}],[\"查询完整路径\",{\"1\":{\"670\":1}}],[\"查询可能要用到的数据\",{\"1\":{\"567\":1}}],[\"查询队伍是否存在\",{\"1\":{\"560\":1}}],[\"查询队伍和已加入队伍成员信息\",{\"1\":{\"559\":1}}],[\"查询队伍列表\",{\"0\":{\"559\":1}}],[\"查询灵活\",{\"1\":{\"510\":1}}],[\"查询方便\",{\"1\":{\"510\":1}}],[\"查询系统中的表\",{\"1\":{\"486\":1}}],[\"查询条件\",{\"1\":{\"710\":1}}],[\"查询条件不满足索引最左前缀原则\",{\"1\":{\"470\":1}}],[\"查询条件如下\",{\"1\":{\"209\":1}}],[\"查询时\",{\"1\":{\"469\":1}}],[\"查询语句可能会被查询缓存命中\",{\"1\":{\"463\":1}}],[\"查询语言\",{\"1\":{\"377\":1}}],[\"查询缓存\",{\"1\":{\"463\":1}}],[\"查询支付服务\",{\"1\":{\"355\":1}}],[\"查询订单\",{\"1\":{\"352\":1,\"355\":1}}],[\"查询用户表格\",{\"0\":{\"614\":1}}],[\"查询用户是否存在\",{\"1\":{\"605\":1}}],[\"查询用户列表\",{\"1\":{\"510\":1}}],[\"查询用户\",{\"1\":{\"214\":1,\"608\":1,\"738\":1,\"741\":1,\"802\":1,\"803\":2}}],[\"查询用户的同时返回用户收货地址列表\",{\"1\":{\"214\":1}}],[\"查询集合结果\",{\"1\":{\"208\":1}}],[\"查询单个结果\",{\"1\":{\"208\":1}}],[\"查询出名字中带o的\",{\"1\":{\"204\":1}}],[\"查询同步状态是否被当前线程独占\",{\"1\":{\"136\":1}}],[\"查询$o\",{\"1\":{\"51\":1}}],[\"查询\",{\"1\":{\"51\":1,\"192\":1,\"220\":2,\"817\":1,\"819\":1}}],[\"查询age\",{\"1\":{\"47\":1}}],[\"查询参数\",{\"1\":{\"27\":1}}],[\"查询表格完整代码如下\",{\"1\":{\"616\":1}}],[\"查询表格\",{\"1\":{\"14\":1}}],[\"仅在事务中第一次执行快照读时生成readview\",{\"1\":{\"476\":1}}],[\"仅此而已\",{\"1\":{\"155\":1}}],[\"仅仅是将线程的中断标志设置为\",{\"1\":{\"155\":1}}],[\"仅本人或管理员可修改\",{\"1\":{\"21\":2}}],[\"仅管理员可以查询\",{\"1\":{\"608\":1}}],[\"仅管理员可见\",{\"1\":{\"581\":1}}],[\"仅管理员\",{\"1\":{\"21\":1}}],[\"判断字段blog类的islike属性\",{\"1\":{\"803\":1}}],[\"判断结果是否为0\",{\"1\":{\"789\":1,\"790\":1,\"796\":1}}],[\"判断用户是否下单\",{\"1\":{\"789\":1,\"796\":1}}],[\"判断库存是否充足\",{\"1\":{\"789\":1,\"796\":1}}],[\"判断库存是否充足只需要导redis中去根据key找对应的value是否大于0即可\",{\"1\":{\"789\":1}}],[\"判断秒杀库存\",{\"1\":{\"789\":1}}],[\"判断秒杀是否开始\",{\"1\":{\"765\":1}}],[\"判断获取锁成功\",{\"1\":{\"781\":1}}],[\"判断命中是否为空\",{\"1\":{\"758\":1}}],[\"判断命中的是否是\",{\"1\":{\"752\":1,\"755\":1}}],[\"判断value中的过期时间是否满足\",{\"1\":{\"756\":1}}],[\"判断这个value是否是null\",{\"1\":{\"752\":1}}],[\"判断某个键是否存在于缓存中\",{\"1\":{\"701\":1}}],[\"判断是\",{\"1\":{\"806\":1,\"807\":1}}],[\"判断是不是管理员\",{\"1\":{\"608\":1}}],[\"判断是否获取成功\",{\"1\":{\"796\":2}}],[\"判断是否获得到了锁\",{\"1\":{\"755\":1}}],[\"判断是否与指定的标示\",{\"1\":{\"780\":1}}],[\"判断是否与当前线程标示一致\",{\"1\":{\"778\":1}}],[\"判断是否还有库存\",{\"1\":{\"765\":1}}],[\"判断是否还有剩余延迟时间\",{\"1\":{\"355\":1}}],[\"判断是否已经结束\",{\"1\":{\"765\":1}}],[\"判断是否过期\",{\"1\":{\"756\":1,\"758\":1}}],[\"判断是否命中\",{\"1\":{\"756\":1}}],[\"判断是否按照关键字搜索\",{\"1\":{\"710\":1}}],[\"判断是否有下个节点\",{\"1\":{\"71\":1}}],[\"判断是否存在\",{\"1\":{\"21\":2,\"23\":1,\"758\":1}}],[\"判断左边值是否小于等于右边值\",{\"1\":{\"420\":1}}],[\"判断左边值是否小于右边值\",{\"1\":{\"420\":1}}],[\"判断左边值是否大于等于右边值\",{\"1\":{\"420\":1}}],[\"判断左边值是否大于右边值\",{\"1\":{\"420\":1}}],[\"判断两个值是否不等\",{\"1\":{\"420\":1}}],[\"判断两个值是否相等\",{\"1\":{\"420\":1}}],[\"判断名称为小红的数据字体显示为红色\",{\"1\":{\"419\":1}}],[\"判断状态\",{\"1\":{\"355\":1}}],[\"判断订单状态\",{\"1\":{\"352\":1}}],[\"判断线程是否被中断并清除当前中断状态\",{\"1\":{\"155\":1}}],[\"判断规则\",{\"1\":{\"145\":1}}],[\"判断任务状态\",{\"1\":{\"105\":1}}],[\"判断当前用户\",{\"1\":{\"803\":1,\"804\":1}}],[\"判断当前登录用户是否点赞过\",{\"1\":{\"803\":2}}],[\"判断当前浏览器是否支持websocket\",{\"1\":{\"406\":1}}],[\"判断当前下标为j的数组如果不为空的话赋值个e\",{\"1\":{\"71\":1}}],[\"判断当前数组长度是否大于最大数组长度\",{\"1\":{\"71\":1}}],[\"判断不为空证明不是初始化数组\",{\"1\":{\"71\":1}}],[\"判断新容量和新阈值是否大于最大容量\",{\"1\":{\"71\":1}}],[\"判断数组容量是否大于0\",{\"1\":{\"71\":1}}],[\"判断有没有建起\",{\"1\":{\"47\":1}}],[\"判断ak\",{\"1\":{\"27\":1}}],[\"判断\",{\"1\":{\"26\":1,\"27\":1,\"71\":1,\"92\":1,\"93\":3}}],[\"判断该接口是否可以调用\",{\"1\":{\"21\":1}}],[\"判断接口是否可用\",{\"1\":{\"21\":1}}],[\"再次传递到后台\",{\"1\":{\"810\":1}}],[\"再次点击则取消点赞\",{\"1\":{\"803\":1}}],[\"再次投递\",{\"1\":{\"350\":1}}],[\"再在后台开一个线程\",{\"1\":{\"789\":1}}],[\"再检查小键表示的锁的拥有者是不是当前线程\",{\"1\":{\"782\":1}}],[\"再执行get\",{\"1\":{\"780\":2}}],[\"再释放锁\",{\"1\":{\"755\":1}}],[\"再去进行查询\",{\"1\":{\"755\":1}}],[\"再去缓存中确定是否有数据\",{\"1\":{\"702\":1}}],[\"再将其放入到redis中\",{\"1\":{\"752\":1}}],[\"再删除缓存\",{\"1\":{\"750\":1,\"751\":2}}],[\"再添加进入缓存\",{\"1\":{\"750\":1}}],[\"再添加一个拦截器\",{\"1\":{\"742\":1}}],[\"再添加一个分类维护菜单\",{\"1\":{\"663\":1}}],[\"再查询数据库\",{\"1\":{\"747\":1}}],[\"再新加一句话\",{\"1\":{\"675\":1}}],[\"再让其他模块添加这个依赖\",{\"1\":{\"655\":1}}],[\"再导入sql文件\",{\"1\":{\"654\":1}}],[\"再来一个小的单元测试\",{\"1\":{\"598\":1}}],[\"再根据标签id去查标签表\",{\"1\":{\"510\":1}}],[\"再重新发送给消费者\",{\"1\":{\"350\":1}}],[\"再看有没有手动指定排序字段\",{\"1\":{\"220\":1}}],[\"再读取数据库时\",{\"1\":{\"217\":1}}],[\"再努力就是\",{\"1\":{\"145\":1}}],[\"再加载yml\",{\"1\":{\"47\":1}}],[\"再慢慢调整比重\",{\"1\":{\"27\":1}}],[\"再启动测试\",{\"1\":{\"19\":1}}],[\"再开发一个client来调用这些接口\",{\"1\":{\"16\":1}}],[\"测试得到结果\",{\"1\":{\"788\":1}}],[\"测试是否有效\",{\"1\":{\"763\":1}}],[\"测试数据\",{\"1\":{\"682\":1}}],[\"测试结果\",{\"1\":{\"666\":1}}],[\"测试配置路由规则\",{\"1\":{\"661\":1}}],[\"测试配置coupon模块\",{\"1\":{\"660\":1}}],[\"测试环境\",{\"1\":{\"634\":1}}],[\"测试生成的代码是否可行\",{\"1\":{\"598\":1}}],[\"测试用的\",{\"1\":{\"585\":1}}],[\"测试十万条\",{\"1\":{\"538\":1}}],[\"测试成功\",{\"1\":{\"409\":1,\"608\":1}}],[\"测试写入一个pojo类\",{\"1\":{\"399\":1}}],[\"测试发现\",{\"1\":{\"350\":1}}],[\"测试发送\",{\"1\":{\"339\":1}}],[\"测试代码\",{\"1\":{\"347\":1}}],[\"测试类\",{\"1\":{\"165\":1,\"816\":1}}],[\"测试当前线程是否已被中断2将当前线程的中断状态清零并重新设为fase\",{\"1\":{\"155\":1}}],[\"测试completablefuture\",{\"1\":{\"143\":1}}],[\"测试调用\",{\"1\":{\"23\":1}}],[\"测试\",{\"1\":{\"19\":1,\"110\":1,\"175\":1,\"184\":3,\"196\":1,\"208\":1,\"219\":1,\"312\":1,\"313\":1,\"344\":1,\"399\":1,\"491\":1,\"533\":1,\"551\":1,\"580\":1,\"634\":2,\"665\":1,\"687\":1,\"698\":1}}],[\"测试sdk是否可用\",{\"0\":{\"19\":1}}],[\"将指定member的坐标转为hash字符串形式并返回\",{\"1\":{\"815\":1}}],[\"将多个bitmap的结果做位运算\",{\"1\":{\"819\":1}}],[\"将多个消费者划分到一个组中\",{\"1\":{\"795\":1}}],[\"将多个参数封装成一个\",{\"1\":{\"184\":1}}],[\"将优惠券id和用户id封装后存入阻塞队列\",{\"1\":{\"789\":1}}],[\"将优惠券信息保存到redis中\",{\"1\":{\"789\":1}}],[\"将value取出\",{\"1\":{\"756\":1}}],[\"将空数据写入缓存\",{\"1\":{\"752\":1,\"755\":1}}],[\"将缓存与数据库放在一个事物里面\",{\"1\":{\"750\":1}}],[\"将缓存数据分布在不同的缓存层级中\",{\"1\":{\"700\":1}}],[\"将hash数据转为userdto\",{\"1\":{\"742\":1}}],[\"将user对象转为hashmap存储\",{\"1\":{\"741\":1,\"788\":1}}],[\"将请求的地址url里面的当前置空\",{\"1\":{\"710\":1}}],[\"将配置文件中的所有配置都生效\",{\"1\":{\"706\":1}}],[\"将配置文件拷贝到每一个文件夹下面\",{\"1\":{\"373\":1}}],[\"将序列化后存储redis\",{\"1\":{\"706\":1}}],[\"将要删除锁的时候\",{\"1\":{\"703\":1}}],[\"将前端页面放在自己挂载的nginx\",{\"1\":{\"697\":1}}],[\"将下载好的文件放到自己电脑挂载的plugins目录下面\",{\"1\":{\"687\":1}}],[\"将下一个元素置空\",{\"1\":{\"71\":2}}],[\"将上面两个表关联起来\",{\"1\":{\"670\":1}}],[\"将上面代码更换restful风格如下\",{\"1\":{\"262\":1}}],[\"将生成的main文件夹复制到项目中\",{\"1\":{\"655\":1}}],[\"将父级pom文件里面设置\",{\"1\":{\"653\":1}}],[\"将主机上的\",{\"1\":{\"651\":3}}],[\"将容器内部的3306端口映射到主机的3307端口\",{\"1\":{\"651\":1}}],[\"将容器内的配置文件拷贝到当前目录\",{\"1\":{\"426\":1}}],[\"将构建好的jar包上传到服务器\",{\"1\":{\"640\":1}}],[\"将写好的代码打包为jar包\",{\"1\":{\"636\":1}}],[\"将两种方法进行测试比较\",{\"1\":{\"575\":1}}],[\"将两个对象模型数据存放到list集合中\",{\"1\":{\"418\":1,\"423\":1}}],[\"将接⼝响应时⻓从\",{\"1\":{\"572\":1}}],[\"将一个表的字段分散到多个表中\",{\"1\":{\"730\":1}}],[\"将一个库的数据拆分到多个库中\",{\"1\":{\"478\":1}}],[\"将一个大任务拆分成多个小任务\",{\"1\":{\"117\":1}}],[\"将改变反映它自己的数据\",{\"1\":{\"477\":1}}],[\"将使用第一个唯一\",{\"1\":{\"466\":1}}],[\"将符合条件的结果返回给客户端\",{\"1\":{\"463\":1}}],[\"将查询中的符号扩展为实际的列\",{\"1\":{\"463\":1}}],[\"将查找这个位置\",{\"1\":{\"69\":1}}],[\"将字节转化为十六进制字符串\",{\"1\":{\"452\":1}}],[\"将字节数组转化我16进制字符串\",{\"1\":{\"452\":1}}],[\"将加密后的字符串与signature进行对比\",{\"1\":{\"452\":1}}],[\"将排序后的结果拼成一个字符串\",{\"1\":{\"452\":1}}],[\"将三个参数字符串拼接成一个字符串进行sha1加密\",{\"1\":{\"452\":1}}],[\"将token\",{\"1\":{\"452\":1}}],[\"将标注添加到地图中\",{\"1\":{\"439\":1}}],[\"将key设置为valuehget\",{\"1\":{\"386\":1}}],[\"将这个文件\",{\"1\":{\"371\":1}}],[\"将消息显示在网页上\",{\"1\":{\"406\":1}}],[\"将消息投递到异常交换机\",{\"1\":{\"359\":1}}],[\"将消息发送到一个\",{\"1\":{\"354\":1}}],[\"将消息交给所有绑定到交换机的队列\",{\"1\":{\"334\":1}}],[\"将失败消息投递到指定的交换机\",{\"1\":{\"351\":1}}],[\"将renrenfast中的跨域配置注释掉\",{\"1\":{\"663\":1}}],[\"将red改为blue\",{\"1\":{\"336\":1}}],[\"将requesterrorconfig\",{\"1\":{\"14\":1}}],[\"将交换机与消息队列绑定\",{\"1\":{\"329\":1}}],[\"将方法的返回值制作为spring管理的一个bean对象\",{\"1\":{\"309\":1}}],[\"将首字母大写\",{\"1\":{\"270\":1}}],[\"将业务层代码的new去掉\",{\"1\":{\"267\":1}}],[\"将其中修改为\",{\"1\":{\"262\":1}}],[\"将其访问路径设置http\",{\"1\":{\"247\":2}}],[\"将其设计为controller\",{\"1\":{\"244\":1}}],[\"将文件存储在服务器的磁盘目录中\",{\"1\":{\"239\":1}}],[\"将mybatisplus分页结果转为\",{\"1\":{\"220\":2}}],[\"将map集合作为接口的方法参数\",{\"1\":{\"184\":1}}],[\"将该实体对象作为接口的方法参数\",{\"1\":{\"184\":1}}],[\"将执行提供的runnable操作\",{\"1\":{\"121\":1,\"717\":1}}],[\"将执行提供的consumer函数\",{\"1\":{\"121\":1,\"717\":1}}],[\"将执行提供的函数\",{\"1\":{\"121\":1,\"717\":1}}],[\"将小任务的执行结果合并成大任务的结果\",{\"1\":{\"117\":1}}],[\"将小任务提交给\",{\"1\":{\"117\":1}}],[\"将元素添加到队列\",{\"1\":{\"112\":1}}],[\"将java版本都设置进去\",{\"1\":{\"76\":1}}],[\"将高位头放入新数组的\",{\"1\":{\"71\":1}}],[\"将低位头放入新数组的原下标位置\",{\"1\":{\"71\":1}}],[\"将数据库表中的数据导入到redis中去\",{\"1\":{\"816\":1}}],[\"将数据库结果写入缓存\",{\"1\":{\"751\":1}}],[\"将数据写入缓存\",{\"1\":{\"747\":2,\"751\":1,\"752\":1,\"755\":1}}],[\"将数据发送给es进行保存\",{\"1\":{\"688\":1}}],[\"将数据与索引分开存储\",{\"1\":{\"466\":1}}],[\"将数据存储与索引放到了一块\",{\"1\":{\"466\":1}}],[\"将数据放入next节点\",{\"1\":{\"71\":2}}],[\"将数组位置置空\",{\"1\":{\"71\":1}}],[\"将数组转为list\",{\"1\":{\"58\":1}}],[\"将e值放入高位头\",{\"1\":{\"71\":1}}],[\"将e值放入低位头\",{\"1\":{\"71\":1}}],[\"将elementdata赋值为成员变量里的empty\",{\"1\":{\"54\":1}}],[\"将阈值和扩容因子都设置为默认值\",{\"1\":{\"71\":1}}],[\"将扩容阈值直接设置为int类型的最大数值并直接返回\",{\"1\":{\"71\":1}}],[\"将链表转化为红黑树\",{\"1\":{\"70\":1}}],[\"将链表转换为红黑树\",{\"1\":{\"66\":1}}],[\"将节点从链表中移除\",{\"1\":{\"67\":1}}],[\"将新节点插入到链表末尾\",{\"1\":{\"66\":1}}],[\"将原始哈希码和经过位移的哈希码合并在一起\",{\"1\":{\"66\":1}}],[\"将\",{\"1\":{\"66\":1}}],[\"将抛出illegalargumentexception异常\",{\"1\":{\"64\":2}}],[\"将list转为数组\",{\"1\":{\"58\":1}}],[\"将旧数组中的元素复制到新数组中\",{\"1\":{\"56\":1}}],[\"将collection对象转换成数组\",{\"1\":{\"54\":1}}],[\"将无参构造覆盖\",{\"1\":{\"47\":1}}],[\"将secretkey换为错误的secret\",{\"1\":{\"19\":1}}],[\"将之前的内容复制到新的sdk模块\",{\"1\":{\"18\":1}}],[\"客户端与mysql服务器建立连接\",{\"1\":{\"463\":1}}],[\"客户端发送过来的消息\",{\"1\":{\"407\":1}}],[\"客户端发起请求\",{\"1\":{\"27\":1}}],[\"客户端\",{\"1\":{\"407\":1,\"657\":1}}],[\"客户端工具\",{\"0\":{\"381\":1}}],[\"客户端无法直接修改\",{\"1\":{\"47\":1}}],[\"客户端sdk\",{\"1\":{\"28\":1}}],[\"客户端sdk开发\",{\"0\":{\"18\":1}}],[\"客户端地址\",{\"1\":{\"27\":1}}],[\"客户端配置\",{\"1\":{\"18\":2}}],[\"的误差\",{\"1\":{\"821\":1}}],[\"的bit值\",{\"1\":{\"819\":1}}],[\"的体验\",{\"1\":{\"808\":1}}],[\"的id\",{\"1\":{\"805\":2}}],[\"的tomcat服务器上面\",{\"1\":{\"741\":1}}],[\"的任意数字\",{\"1\":{\"738\":1}}],[\"的任务\",{\"1\":{\"120\":1,\"716\":1}}],[\"的商品\",{\"1\":{\"710\":3}}],[\"的skutitle字段\",{\"1\":{\"710\":1}}],[\"的配置文件\",{\"1\":{\"651\":1}}],[\"的数据文件\",{\"1\":{\"651\":1}}],[\"的日志文件\",{\"1\":{\"651\":1}}],[\"的功能可能需要这个\",{\"1\":{\"611\":1}}],[\"的参数\",{\"1\":{\"607\":1}}],[\"的⼀些额外字符串\",{\"1\":{\"571\":1}}],[\"的内存用完时\",{\"1\":{\"749\":1}}],[\"的内存并便于单字段的修改\",{\"1\":{\"571\":1}}],[\"的内存占用会比较高\",{\"1\":{\"98\":1}}],[\"的用户就不用放进去了\",{\"1\":{\"567\":1}}],[\"的情况\",{\"1\":{\"549\":1}}],[\"的情况下\",{\"1\":{\"92\":1}}],[\"的缩写\",{\"1\":{\"517\":1}}],[\"的策略\",{\"1\":{\"478\":1}}],[\"的原则\",{\"0\":{\"469\":1}}],[\"的影响\",{\"1\":{\"450\":1}}],[\"的封装工具库\",{\"1\":{\"416\":1}}],[\"的通用工具\",{\"1\":{\"415\":1}}],[\"的信息\",{\"1\":{\"407\":1}}],[\"的时候默认是按照id顺序\",{\"1\":{\"805\":1}}],[\"的时候使用通配符\",{\"1\":{\"337\":1}}],[\"的时间单位\",{\"1\":{\"115\":1,\"713\":1}}],[\"的两个参数分别是\",{\"1\":{\"219\":1}}],[\"的两个子类\",{\"1\":{\"117\":1}}],[\"的预编译模式\",{\"1\":{\"211\":1}}],[\"的批处理确实是基于\",{\"1\":{\"211\":1}}],[\"的自动构建与注入\",{\"1\":{\"198\":1}}],[\"的值\",{\"1\":{\"198\":1,\"819\":1}}],[\"的概念来做到阻塞和唤醒线程的功能\",{\"1\":{\"156\":1}}],[\"的办法\",{\"1\":{\"156\":1}}],[\"的操作是原子的\",{\"1\":{\"155\":1}}],[\"的等待队列算法\",{\"1\":{\"136\":1}}],[\"的理解\",{\"1\":{\"135\":1}}],[\"的结果\",{\"1\":{\"122\":1,\"718\":1}}],[\"的返回结果\",{\"1\":{\"122\":1,\"718\":1}}],[\"的方式调用的\",{\"1\":{\"770\":1}}],[\"的方式实现\",{\"1\":{\"559\":1}}],[\"的方式处理异步计算的结果\",{\"1\":{\"143\":1}}],[\"的方式\",{\"1\":{\"115\":1}}],[\"的实现是线程安全的\",{\"1\":{\"112\":1}}],[\"的特点是可以循环使用\",{\"1\":{\"108\":1}}],[\"的迭代器是弱一致性的\",{\"1\":{\"98\":1}}],[\"的性能优势会体现出来\",{\"1\":{\"98\":1}}],[\"的读操作是非常高效的\",{\"1\":{\"98\":1}}],[\"的一些规则\",{\"1\":{\"159\":1}}],[\"的一些主要特点和使用方法\",{\"1\":{\"91\":1}}],[\"的一个线程安全的变体\",{\"1\":{\"98\":1}}],[\"的使用相对简单\",{\"1\":{\"91\":1}}],[\"的灵活性和功能强大\",{\"1\":{\"91\":1}}],[\"的工作原理是使用锁\",{\"1\":{\"91\":1}}],[\"的元素留在原来位置\",{\"1\":{\"73\":1}}],[\"的\",{\"1\":{\"73\":1,\"91\":1,\"198\":1,\"651\":1}}],[\"的映射\",{\"1\":{\"67\":1}}],[\"的高\",{\"1\":{\"66\":1}}],[\"的二进制表示向右移动\",{\"1\":{\"66\":1}}],[\"的速度\",{\"1\":{\"47\":1}}],[\"的请求进行转发\",{\"1\":{\"27\":2}}],[\"的流量\",{\"1\":{\"27\":1}}],[\"的xml文件中的build内容\",{\"1\":{\"18\":1}}],[\"的规范生成serve\",{\"1\":{\"14\":1}}],[\"这两个参数第一次会由前端来指定\",{\"1\":{\"810\":1}}],[\"这两个注解刚好就在这个包中\",{\"1\":{\"303\":1}}],[\"这把锁加锁的逻辑需要写入到每一个主丛节点上\",{\"1\":{\"783\":1}}],[\"这包括了重试次数和重试间隔的控制\",{\"1\":{\"782\":1}}],[\"这可以防止键被过早删除\",{\"1\":{\"749\":1}}],[\"这可能导致程序在获取结果时被阻塞\",{\"1\":{\"142\":1}}],[\"这可能涉及到遍历链表或红黑树\",{\"1\":{\"67\":1}}],[\"这通常是通过向锁存储中更新锁的时间戳或其他信息来实现的\",{\"1\":{\"782\":1}}],[\"这通常是通过调用键的\",{\"1\":{\"69\":1}}],[\"这通常发生在请求的键值对在存储系统中不存在\",{\"1\":{\"699\":1}}],[\"这时其他线程\",{\"1\":{\"778\":1}}],[\"这时就可以修改属性来\",{\"1\":{\"612\":1}}],[\"这时候别人进来了\",{\"1\":{\"703\":1}}],[\"这时候先去下载链接中的这个chromedriver\",{\"1\":{\"655\":1}}],[\"这时候\",{\"1\":{\"412\":1}}],[\"这时候就需要交给spring来做了\",{\"1\":{\"267\":1}}],[\"这次插入了1000条数据\",{\"1\":{\"538\":1}}],[\"这边都要进行修改\",{\"1\":{\"491\":1}}],[\"这意味着余额最高的文档将排在前面\",{\"1\":{\"685\":1}}],[\"这意味着索引只能有效利用查询条件的最左边部分\",{\"1\":{\"470\":1}}],[\"这意味着在迭代期间对集合的修改不会被迭代器所感知\",{\"1\":{\"98\":1}}],[\"这在生产环境意味着什么就不用多说了吧\",{\"1\":{\"412\":1}}],[\"这会带来额外的内存开销\",{\"1\":{\"399\":1}}],[\"这会导致消息积压\",{\"1\":{\"347\":1}}],[\"这会非常麻烦\",{\"1\":{\"217\":1}}],[\"这就是删锁时的原子性问题\",{\"1\":{\"779\":1}}],[\"这就是误删别人锁的情况说明\",{\"1\":{\"778\":1}}],[\"这就是分布式锁的核心思路\",{\"1\":{\"775\":1}}],[\"这就是消息堆积问题\",{\"1\":{\"362\":1}}],[\"这就是乐观锁的核心思想\",{\"1\":{\"210\":1}}],[\"这就导致与数据库不符\",{\"1\":{\"200\":1}}],[\"这就导致无限循环了\",{\"1\":{\"155\":1}}],[\"这段代码使用了一个条件\",{\"1\":{\"210\":1}}],[\"这三个条件中的一个\",{\"1\":{\"186\":1}}],[\"这三个变量分别是\",{\"1\":{\"63\":1}}],[\"这确保了对\",{\"1\":{\"159\":1}}],[\"这确保了锁的释放对于随后获取该锁的线程是可见的\",{\"1\":{\"159\":1}}],[\"这些请求就都会访问到数据库\",{\"1\":{\"752\":1}}],[\"这些请求都会打到数据库\",{\"1\":{\"752\":1}}],[\"这些分组的关联属性\",{\"1\":{\"674\":1}}],[\"这些信息\",{\"1\":{\"670\":1}}],[\"这些把前端也通过打包的方式进行构建\",{\"1\":{\"646\":1}}],[\"这些数据结构以某种方式引用\",{\"1\":{\"465\":1}}],[\"这些数据库通常更自由灵活\",{\"1\":{\"377\":1}}],[\"这些操作是不可中断的\",{\"1\":{\"155\":1}}],[\"这些永远在互相等待的进程称为死锁进程\",{\"1\":{\"153\":1}}],[\"这些线程池实现都是通过\",{\"1\":{\"115\":1,\"713\":1}}],[\"这里指定刚才生成token的位置\",{\"1\":{\"788\":1}}],[\"这里指定controller扫描包路径\",{\"1\":{\"522\":1,\"727\":1}}],[\"这里是插入数据\",{\"1\":{\"770\":1}}],[\"这里选择使用哈希存储\",{\"1\":{\"741\":1}}],[\"这里选择第二种方式\",{\"1\":{\"665\":1}}],[\"这里使用mapper做\",{\"1\":{\"672\":1}}],[\"这里使用spring\",{\"1\":{\"657\":1}}],[\"这里还设置了两个冗余字段\",{\"1\":{\"672\":1}}],[\"这里的构造方法是为了注入stringredistemplate\",{\"1\":{\"742\":1}}],[\"这里的冗余字段也需要进行更改\",{\"1\":{\"672\":1}}],[\"这里的\",{\"1\":{\"670\":1}}],[\"这里的url需要填写刚才内网穿透的地址\",{\"1\":{\"451\":1}}],[\"这里和上面刚好相反\",{\"1\":{\"663\":1}}],[\"这里发送请求会直接发送到8080端口\",{\"1\":{\"663\":1}}],[\"这里发送普通消息他调用的接口是一开始填的\",{\"1\":{\"453\":1}}],[\"这里为\",{\"1\":{\"651\":1}}],[\"这里封装了一个用户脱敏的函数\",{\"1\":{\"608\":1}}],[\"这里注意\",{\"1\":{\"605\":1}}],[\"这里注意必须指定sheetno\",{\"1\":{\"431\":1}}],[\"这里默认每次会读取100条数据\",{\"1\":{\"525\":1}}],[\"这里可能包含一些提示\",{\"1\":{\"486\":1}}],[\"这里可以去数据库查询每一页的数据\",{\"1\":{\"431\":1}}],[\"这里最终会写到5个sheet里面\",{\"1\":{\"431\":1}}],[\"这里我调用了五次\",{\"1\":{\"431\":1}}],[\"这里\",{\"1\":{\"431\":1,\"526\":1}}],[\"这里有两个关键字\",{\"1\":{\"377\":1}}],[\"这里改为false\",{\"1\":{\"350\":1}}],[\"这里去掉了new\",{\"1\":{\"267\":1}}],[\"这里在删除时需要携带路径参数\",{\"1\":{\"262\":1}}],[\"这里不仅可以用list\",{\"1\":{\"209\":1}}],[\"这里类似排队买票\",{\"1\":{\"151\":1}}],[\"这里应该从数据库查\",{\"1\":{\"17\":1}}],[\"这种思路就称为位图\",{\"1\":{\"819\":1}}],[\"这种方案巧妙在于\",{\"1\":{\"756\":1}}],[\"这种方式加锁\",{\"1\":{\"770\":1}}],[\"这种方式优点在于节约内存空间\",{\"1\":{\"752\":1}}],[\"这种方式可以防止某些线程长时间等待而不被公平地获得锁\",{\"1\":{\"102\":1}}],[\"这种分词器只能对英文有用\",{\"1\":{\"687\":1}}],[\"这种额外的查询操作被称为回表查询\",{\"1\":{\"466\":1}}],[\"这种在容器中建立bean与bean之间的依赖关系的整个过程\",{\"1\":{\"268\":1}}],[\"这种批处理方式可以减少与数据库的通信次数\",{\"1\":{\"211\":1}}],[\"这种非原子性的操作\",{\"1\":{\"158\":1}}],[\"这种情况被称为虚假唤醒\",{\"1\":{\"92\":1}}],[\"这使得线程间的协作更加灵活\",{\"1\":{\"91\":1}}],[\"这样我们就用极小的空间\",{\"1\":{\"819\":1}}],[\"这样的操作\",{\"1\":{\"789\":1}}],[\"这样的处理方式让写的同学更加明确线程池的运行规则\",{\"1\":{\"115\":1}}],[\"这样数据不就一直占用我们内存了吗\",{\"1\":{\"756\":1}}],[\"这样缓存永远不会生效\",{\"1\":{\"752\":1}}],[\"这样设置过期时间\",{\"1\":{\"703\":1}}],[\"这样写的问题是\",{\"1\":{\"703\":1}}],[\"这样可以防止多个请求同时穿透到底层存储系统\",{\"1\":{\"701\":1}}],[\"这样可以减少对底层系统的冲击\",{\"1\":{\"701\":1}}],[\"这样可以在缓存层面快速拦截掉那些明显不存在于存储系统中的请求\",{\"1\":{\"699\":1}}],[\"这样可以确保写操作不会影响到正在进行的读操作\",{\"1\":{\"98\":1}}],[\"这样还是会存在多个方法同时执行\",{\"1\":{\"549\":1}}],[\"这样其实还是ifelse\",{\"1\":{\"491\":1}}],[\"这样即便支付服务的mq通知失败\",{\"1\":{\"352\":1}}],[\"这样即使线程在没有被通知的情况下被唤醒\",{\"1\":{\"92\":1}}],[\"这样两个消费者接收到的消息数量是相同的\",{\"1\":{\"333\":1}}],[\"这样做会报错\",{\"1\":{\"254\":1}}],[\"这样做的好处就是controller可以处理多个请求\",{\"1\":{\"244\":1}}],[\"这样太麻烦了\",{\"1\":{\"247\":1}}],[\"这样就反转了控制数据层对象的创建权\",{\"1\":{\"268\":1}}],[\"这样就不用再写springmvcsupport类了\",{\"1\":{\"232\":1}}],[\"这样就实现了动态查询条件效果了\",{\"1\":{\"209\":1}}],[\"这样就可以在这些数据结构上实现高级查找算法这种数据结构就是索引\",{\"1\":{\"465\":1}}],[\"这样就可以在接收到消息时检验订单支付状态\",{\"1\":{\"355\":1}}],[\"这样就可以在不修改原始方法的情况下\",{\"1\":{\"165\":1}}],[\"这样就可以访问私有构造方法了\",{\"1\":{\"168\":1}}],[\"这样就可以切换成功了\",{\"1\":{\"76\":1}}],[\"这样也存在问题\",{\"1\":{\"185\":1}}],[\"这样\",{\"1\":{\"142\":1,\"752\":1,\"782\":1}}],[\"这样会导致耦合\",{\"1\":{\"286\":1}}],[\"这样会导致它们都无法继续执行\",{\"1\":{\"47\":1}}],[\"这样会存在问题\",{\"1\":{\"107\":1}}],[\"这部分通过异或操作\",{\"1\":{\"66\":1}}],[\"这部分执行位移操作\",{\"1\":{\"66\":1}}],[\"这部分计算对象的原始哈希码\",{\"1\":{\"66\":1}}],[\"这是计算balance字段的平均值的聚合\",{\"1\":{\"685\":1}}],[\"这是计算age字段的平均值的聚合\",{\"1\":{\"685\":1}}],[\"这是一个名为ageagg的聚合\",{\"1\":{\"685\":1}}],[\"这是一种基于链表的队列\",{\"1\":{\"136\":1}}],[\"这是聚合部分\",{\"1\":{\"685\":1}}],[\"这是elasticsearch中执行搜索操作的基本语法\",{\"1\":{\"685\":1}}],[\"这是接口文档工具\",{\"1\":{\"585\":1}}],[\"这是根据where条件和表的统计信息估算的\",{\"1\":{\"486\":1}}],[\"这是mysql优化器根据统计信息估算的值\",{\"1\":{\"486\":1}}],[\"这是查询中每个操作的标识符\",{\"1\":{\"486\":1}}],[\"这是我提供的后端接口\",{\"1\":{\"451\":1}}],[\"这是来自服务端的消息\",{\"1\":{\"409\":1}}],[\"这是乐观锁的关键条件\",{\"1\":{\"210\":1}}],[\"这是为了确保我们只更新指定用户的记录\",{\"1\":{\"210\":1}}],[\"这是在告诉mp我们的调用结果需要是一个list集合\",{\"1\":{\"209\":1}}],[\"这是公平的\",{\"1\":{\"151\":1}}],[\"这是thenrun的异步版本\",{\"1\":{\"121\":1,\"717\":1}}],[\"这是异步版本的thenaccept\",{\"1\":{\"121\":1,\"717\":1}}],[\"这是异步版本的thenapply\",{\"1\":{\"121\":1,\"717\":1}}],[\"这是具有自定义executor执行器的异步版本\",{\"1\":{\"121\":3,\"717\":3}}],[\"这是\",{\"1\":{\"66\":2,\"67\":2,\"159\":1}}],[\"这是哈希表的桶数\",{\"1\":{\"64\":1}}],[\"这是因为springboot2\",{\"1\":{\"698\":1}}],[\"这是因为nginx在代理给网关的时候\",{\"1\":{\"691\":1}}],[\"这是因为没有权限\",{\"1\":{\"664\":1}}],[\"这是因为ren\",{\"1\":{\"663\":1}}],[\"这是因为\",{\"1\":{\"66\":1}}],[\"这是因为在反序列化时\",{\"1\":{\"63\":1}}],[\"这是因为b+树是一种平衡树\",{\"1\":{\"47\":1}}],[\"这类哈希表的实现中\",{\"1\":{\"63\":1}}],[\"这\",{\"1\":{\"47\":1}}],[\"这个值会作为下一次查询的条件\",{\"1\":{\"810\":1}}],[\"这个需求\",{\"1\":{\"808\":1}}],[\"这个用户发了动态\",{\"1\":{\"808\":1}}],[\"这个持续时间通常是一个较短的时间段\",{\"1\":{\"782\":1}}],[\"这个机制的目的是防止因为锁持有者在持有锁期间发生故障或长时间处理任务而导致锁无法释放的情况\",{\"1\":{\"782\":1}}],[\"这个机制可以用于在获取锁失败时\",{\"1\":{\"782\":1}}],[\"这个lua脚本实现了锁的获取逻辑\",{\"1\":{\"782\":1}}],[\"这个lua脚本的作用是\",{\"1\":{\"782\":1}}],[\"这个过期时间并不会直接作用于redis\",{\"1\":{\"756\":1}}],[\"这个过程就是回表\",{\"1\":{\"466\":1}}],[\"这个请求会去访问redis\",{\"1\":{\"752\":1}}],[\"这个数据穿透了缓存\",{\"1\":{\"752\":1}}],[\"这个操作缓存的动作实际上只有最后一次是生效的\",{\"1\":{\"750\":1}}],[\"这个操作将低位和高位信息混合在一起\",{\"1\":{\"66\":1}}],[\"这个拦截器不会生效\",{\"1\":{\"742\":1}}],[\"这个参数表示不返回文档\",{\"1\":{\"685\":1}}],[\"这个参数用于指定返回结果中包含的字段\",{\"1\":{\"685\":1}}],[\"这个参数定义了返回的文档数量\",{\"1\":{\"685\":1}}],[\"这个参数指定了从搜索结果的第几条文档开始返回\",{\"1\":{\"685\":1}}],[\"这个部分用于对结果进行排序\",{\"1\":{\"685\":1}}],[\"这个查询部分指定了搜索的条件\",{\"1\":{\"685\":1}}],[\"这个每一条数据解析都会来调用\",{\"1\":{\"525\":1}}],[\"这个时候不需要加配置文件\",{\"1\":{\"379\":1}}],[\"这个命令执行后会开启独立进程完成rdb\",{\"1\":{\"369\":1}}],[\"这个行为成为pageout\",{\"1\":{\"347\":1}}],[\"这个配置类如何能被spring配置类加载到\",{\"1\":{\"309\":1}}],[\"这个凭证最多只有1个\",{\"1\":{\"156\":1}}],[\"这个方法是用来尝试获取锁的核心逻辑\",{\"1\":{\"782\":1}}],[\"这个方法是redlock分布式锁的内部实现\",{\"1\":{\"782\":1}}],[\"这个方法是从常量池中拿到数据\",{\"1\":{\"770\":1}}],[\"这个方法不行\",{\"1\":{\"450\":1}}],[\"这个方法可以用于实现一些有条件的更新操作\",{\"1\":{\"155\":1}}],[\"这个方法做了两件事\",{\"1\":{\"155\":1}}],[\"这个方法表示当当前的completablefuture完成时\",{\"1\":{\"121\":1,\"717\":1}}],[\"这个队列通常是一个双向链表\",{\"1\":{\"136\":1}}],[\"这个任务继续提交给线程池来进行执行\",{\"1\":{\"120\":1,\"716\":1}}],[\"这个哈希码通常是根据对象的内部状态计算的\",{\"1\":{\"66\":1}}],[\"这个构造函数使用默认的负载因子\",{\"1\":{\"64\":1}}],[\"这个构造函数允许你创建一个新的hashmap\",{\"1\":{\"64\":1}}],[\"这个构造函数允许指定初始容量\",{\"1\":{\"64\":1}}],[\"这个构造函数创建一个空的hashmap\",{\"1\":{\"64\":1}}],[\"这个构造函数用于创建一个空的hashmap\",{\"1\":{\"64\":1}}],[\"这个字段存储了哈希表的负载因子\",{\"1\":{\"63\":1}}],[\"这个字段存储下一次需要调整哈希表大小的阈值\",{\"1\":{\"63\":1}}],[\"这个字段用于记录结构性修改的次数\",{\"1\":{\"63\":1}}],[\"这个字段用于存储哈希表中键值对的数量\",{\"1\":{\"63\":1}}],[\"这个字段用于缓存entryset\",{\"1\":{\"63\":1}}],[\"这个你可以每天去牛客上面做一场面试题\",{\"1\":{\"44\":1}}],[\"这个函数会在组件挂载后执行一次\",{\"1\":{\"22\":1}}],[\"这个插件\",{\"1\":{\"18\":1}}],[\"yd2l8xtgwua\",{\"1\":{\"824\":1}}],[\"yqj\",{\"1\":{\"665\":1}}],[\"yum\",{\"1\":{\"639\":2,\"640\":1}}],[\"yunfeidog\",{\"1\":{\"44\":1,\"609\":2}}],[\"yunfei<\",{\"1\":{\"19\":1}}],[\"yunfeiapiinterfaceapplicationtests\",{\"1\":{\"19\":1}}],[\"yunfeiapi\",{\"1\":{\"18\":1,\"19\":1}}],[\"yunfeiapiclientsdk\",{\"1\":{\"18\":1,\"21\":2,\"23\":2}}],[\"yunfeiapiclientconfig\",{\"1\":{\"18\":2}}],[\"yunfeiapiclient\",{\"1\":{\"16\":3,\"17\":1,\"18\":3,\"19\":4,\"21\":1,\"23\":2}}],[\"yunfei\",{\"1\":{\"14\":1,\"16\":5,\"18\":1,\"19\":2,\"21\":2,\"23\":2,\"27\":3,\"29\":2,\"32\":1,\"33\":1,\"455\":1,\"522\":2,\"539\":4,\"544\":3,\"551\":2,\"595\":1,\"599\":2,\"623\":1,\"624\":1,\"625\":1,\"627\":2,\"628\":4}}],[\"yarn\",{\"1\":{\"504\":3,\"517\":1,\"532\":1,\"584\":3,\"585\":1}}],[\"yfjpvb\",{\"1\":{\"451\":1}}],[\"yes\",{\"1\":{\"371\":1}}],[\"yellow\",{\"1\":{\"338\":2}}],[\"yet\",{\"1\":{\"81\":1,\"681\":1}}],[\"yyyymm\",{\"1\":{\"819\":1,\"820\":1}}],[\"yyyy\",{\"1\":{\"259\":6,\"319\":2,\"665\":1,\"675\":1,\"763\":1}}],[\"y\",{\"1\":{\"143\":2,\"442\":1,\"443\":1,\"639\":2,\"640\":1,\"817\":6}}],[\"your\",{\"1\":{\"241\":1,\"635\":1,\"665\":2}}],[\"you\",{\"1\":{\"142\":1}}],[\"yield作用\",{\"1\":{\"86\":1}}],[\"yield与sleep\",{\"0\":{\"86\":1}}],[\"yml文件\",{\"1\":{\"636\":1,\"660\":1,\"681\":1}}],[\"yml\",{\"1\":{\"522\":1,\"533\":1,\"595\":1,\"681\":2,\"728\":2}}],[\"yml两种格式\",{\"1\":{\"47\":1}}],[\"yml中写配置\",{\"1\":{\"18\":1}}],[\"就拿到了5\",{\"1\":{\"809\":1}}],[\"就拿到了这把锁\",{\"1\":{\"778\":1}}],[\"就意味着我们是一定可以下单完成的\",{\"1\":{\"789\":1}}],[\"就意味着没有人在中间修改过库存\",{\"1\":{\"769\":1}}],[\"就保证了加锁的可靠性\",{\"1\":{\"783\":1}}],[\"就实现了cas自旋锁\",{\"1\":{\"769\":1}}],[\"就可能存在哈希冲突\",{\"1\":{\"752\":1}}],[\"就可以实现滚动分页了\",{\"1\":{\"809\":1}}],[\"就可以从undo\",{\"1\":{\"475\":1}}],[\"就可以编写并发安全的程序了\",{\"1\":{\"159\":1}}],[\"就可以名正言顺的凭证消费\",{\"1\":{\"156\":1}}],[\"就不好\",{\"1\":{\"741\":1}}],[\"就不会给当前锁续期\",{\"1\":{\"704\":1}}],[\"就不用update\",{\"1\":{\"560\":1}}],[\"就不用在try\",{\"1\":{\"230\":1}}],[\"就能锁住所有的线程\",{\"1\":{\"702\":1}}],[\"就能继续运行就是异步\",{\"1\":{\"81\":1}}],[\"就是连续签到天数\",{\"1\":{\"820\":1}}],[\"就是在redis中并没有存储type\",{\"1\":{\"816\":1}}],[\"就是6\",{\"1\":{\"809\":1}}],[\"就是咱们的sortedset\",{\"1\":{\"804\":1}}],[\"就是一个被高并发访问并且缓存重建业务较复杂的key突然失效了\",{\"1\":{\"754\":1}}],[\"就是当品牌名字或者分类名字变化的时候\",{\"1\":{\"672\":1}}],[\"就是分组表里的attr\",{\"1\":{\"670\":1}}],[\"就用服务器url\",{\"1\":{\"635\":1}}],[\"就帮你重置redis锁的过期时间\",{\"1\":{\"551\":1}}],[\"就抢锁失败\",{\"1\":{\"547\":1}}],[\"就从服务列表里剔除他\",{\"1\":{\"412\":1}}],[\"就执行\",{\"1\":{\"369\":1}}],[\"就增加了lazy\",{\"1\":{\"347\":1}}],[\"就必须从3个方面入手\",{\"1\":{\"341\":1}}],[\"就必须把该指令之前所有写入指令执行完毕才能继续往下执行\",{\"1\":{\"161\":1}}],[\"就必须阻塞等待凭证可用\",{\"1\":{\"156\":1}}],[\"就需要用到分布式锁\",{\"1\":{\"771\":1}}],[\"就需要用到寻址公式\",{\"1\":{\"51\":1}}],[\"就需要搭建主从集群\",{\"1\":{\"373\":1}}],[\"就需要在业务层new数据层的对象\",{\"1\":{\"267\":1}}],[\"就需要在写入数据库时手动转为string\",{\"1\":{\"217\":1}}],[\"就需要额外的同步手段来保证其原子性\",{\"1\":{\"158\":1}}],[\"就会写很多分数据到粉丝那边去\",{\"1\":{\"808\":1}}],[\"就会放弃本次更新\",{\"1\":{\"768\":1}}],[\"就会出现一致性问题\",{\"1\":{\"750\":1}}],[\"就会出现空指针异常\",{\"1\":{\"267\":1}}],[\"就会变化\",{\"1\":{\"682\":1}}],[\"就会修改这个数据\",{\"1\":{\"682\":1}}],[\"就会导致队列中的消息堆积\",{\"1\":{\"362\":1}}],[\"就会导致数据出现了不一致\",{\"1\":{\"340\":1}}],[\"就会报错\",{\"1\":{\"304\":1}}],[\"就会产生死锁\",{\"1\":{\"153\":2}}],[\"就会触发fn函数的执行\",{\"1\":{\"143\":1}}],[\"就变成普通的启动了\",{\"1\":{\"83\":1}}],[\"就很方便的去计算当前key的在数组中存储的下标\",{\"1\":{\"72\":1}}],[\"就重新计算在新数组中的下标并放进去\",{\"1\":{\"71\":1}}],[\"就相当于1\",{\"1\":{\"56\":1}}],[\"就绪\",{\"1\":{\"47\":1}}],[\"就跟调用自己的代码一样简单\",{\"1\":{\"18\":1}}],[\"就表示一致\",{\"1\":{\"17\":1}}],[\"因此最大上限是512m\",{\"1\":{\"819\":1}}],[\"因此不能采用传统的分页模式\",{\"1\":{\"809\":1}}],[\"因此采用timeline的模式\",{\"1\":{\"808\":1}}],[\"因此这里应该使用brpop或者blpop来实现阻塞效果\",{\"1\":{\"792\":1}}],[\"因此抢锁和设置过期时间应该是一个原子操作\",{\"1\":{\"703\":1}}],[\"因此还需要去修改代码\",{\"1\":{\"672\":1}}],[\"因此数据行的存储顺序与索引的顺序一致\",{\"1\":{\"466\":1}}],[\"因此我们想要这两个操作同时执行\",{\"1\":{\"776\":1}}],[\"因此我们要做到让这个字段为空的时候不展示给前端\",{\"1\":{\"670\":1}}],[\"因此我们需要用子组件给父组件传递数据\",{\"1\":{\"670\":1}}],[\"因此我们推荐使用jedis连接池代替jedis的直连方式\",{\"1\":{\"396\":1}}],[\"因此我们可以在配置类中统一设置\",{\"1\":{\"344\":1}}],[\"因此具备与hashset类似的\",{\"1\":{\"389\":1}}],[\"因此消息投递后立即被删除\",{\"1\":{\"359\":1}}],[\"因此如果没有任何队列与exchange绑定\",{\"1\":{\"334\":1}}],[\"因此需要全局id生成器\",{\"1\":{\"762\":1}}],[\"因此需要修改后端\",{\"1\":{\"670\":1}}],[\"因此需要使用网关进行处理\",{\"1\":{\"663\":1}}],[\"因此需要在这个文件夹下面创建一个my\",{\"1\":{\"651\":1}}],[\"因此需要进行更改如下\",{\"1\":{\"232\":1}}],[\"因此需要写sdk\",{\"1\":{\"18\":1}}],[\"因此避免了注入addressservice\",{\"1\":{\"214\":1}}],[\"因此重排序时\",{\"1\":{\"161\":1}}],[\"因此可以在多线程环境下安全地使用它\",{\"1\":{\"155\":1}}],[\"因此可能会阻塞当前线程\",{\"1\":{\"143\":1}}],[\"因此基本数据类型变量不能被改变\",{\"1\":{\"133\":1}}],[\"因此在这个过程中rabbitmq不会再处理新的消息\",{\"1\":{\"347\":1}}],[\"因此在读取数据时就会加锁\",{\"1\":{\"110\":1}}],[\"因此在读取数据时不加锁\",{\"1\":{\"110\":1}}],[\"因此在使用时需要更加小心\",{\"1\":{\"91\":1}}],[\"因此\",{\"1\":{\"98\":1,\"131\":1,\"145\":1,\"155\":1,\"355\":1,\"467\":1}}],[\"因此写操作的性能相对较低\",{\"1\":{\"98\":1}}],[\"因此写操作的性能会比较低\",{\"1\":{\"98\":1}}],[\"因此其设计考虑了磁盘i\",{\"1\":{\"47\":1}}],[\"因此后台需要\",{\"1\":{\"19\":1}}],[\"因为赵六在读信息时\",{\"1\":{\"808\":1}}],[\"因为你调用的方法\",{\"1\":{\"770\":1}}],[\"因为如果锁的力度\",{\"1\":{\"770\":1}}],[\"因为如果顺序反了\",{\"1\":{\"750\":1}}],[\"因为仅仅只需要加一把锁而已\",{\"1\":{\"757\":1}}],[\"因为此时会让查询的性能从并行变成了串行\",{\"1\":{\"755\":1}}],[\"因为此文件夹是用来测试的\",{\"1\":{\"585\":1}}],[\"因为锁能实现互斥性\",{\"1\":{\"755\":1}}],[\"因为elasticsearch使用0\",{\"1\":{\"685\":1}}],[\"因为代码中有报错\",{\"1\":{\"655\":1}}],[\"因为这是procomponents里面写死的组件这里我们查看源码进行修改\",{\"1\":{\"612\":1}}],[\"因为用户信息读取\",{\"1\":{\"533\":1}}],[\"因为consul的健康检查机制是consul主动发\",{\"1\":{\"412\":1}}],[\"因为也是一个hash表\",{\"1\":{\"389\":1}}],[\"因为是记录命令\",{\"1\":{\"372\":1}}],[\"因为可能会出现重试\",{\"1\":{\"352\":1}}],[\"因为接口是无法创建对象的\",{\"1\":{\"299\":1}}],[\"因为接口无法创建对象\",{\"1\":{\"272\":1}}],[\"因为接口调用需要访问10002接口开放的接口\",{\"1\":{\"19\":1}}],[\"因为synchronized是在两台不同的jvm里面\",{\"1\":{\"771\":1}}],[\"因为sortedset的可排序特性\",{\"1\":{\"391\":1}}],[\"因为service运行需要依赖dao对象\",{\"1\":{\"268\":1}}],[\"因为session数据存储在服务器端\",{\"1\":{\"47\":1}}],[\"因为springmvc会将list看做是pojo对象\",{\"1\":{\"254\":1}}],[\"因为post适合上传大文件\",{\"1\":{\"237\":1}}],[\"因为不会自动续期\",{\"1\":{\"704\":1}}],[\"因为不会导致线程频繁地切换和竞争\",{\"1\":{\"102\":1}}],[\"因为不需要在整个事务期间锁定数据记录\",{\"1\":{\"210\":1}}],[\"因为映射配置文件是xml类型的问题\",{\"1\":{\"183\":1}}],[\"因为凭证的数量最多为1\",{\"1\":{\"156\":1}}],[\"因为unpark获得了一个凭证之后再调用park方法\",{\"1\":{\"156\":1}}],[\"因为它阻止了多个线程同时访问资源\",{\"1\":{\"767\":1}}],[\"因为它无法感知到thread\",{\"1\":{\"132\":1}}],[\"因为它不需要加锁\",{\"1\":{\"98\":1}}],[\"因为多个事务可能需要等待同一表的锁\",{\"1\":{\"110\":1}}],[\"因为vector的源码里面加了synchronized关键字\",{\"1\":{\"96\":1}}],[\"因为\",{\"1\":{\"63\":1,\"742\":1,\"805\":1}}],[\"因为底层是进行了数组拷贝\",{\"1\":{\"58\":1}}],[\"因为底层是使用的arrays类中的一个内部类arraylist来构造的集合\",{\"1\":{\"58\":1}}],[\"因为元素需要后移\",{\"1\":{\"51\":1}}],[\"因为没有主类了\",{\"1\":{\"18\":1}}],[\"因为ant\",{\"1\":{\"14\":1}}],[\"42803\",{\"1\":{\"815\":2}}],[\"425\",{\"1\":{\"439\":1}}],[\"4cdc0a65426e\",{\"1\":{\"660\":1}}],[\"44c0\",{\"1\":{\"660\":1}}],[\"48\",{\"1\":{\"616\":1}}],[\"48px\",{\"1\":{\"519\":1}}],[\"489532\",{\"1\":{\"444\":1}}],[\"452562\",{\"1\":{\"445\":1}}],[\"45秒\",{\"1\":{\"355\":1}}],[\"47503\",{\"1\":{\"444\":1}}],[\"47<\",{\"1\":{\"224\":1,\"294\":1,\"312\":1}}],[\"41338370\",{\"1\":{\"443\":1}}],[\"401\",{\"1\":{\"739\":1,\"742\":1}}],[\"40101\",{\"1\":{\"625\":1}}],[\"40100\",{\"1\":{\"625\":1,\"630\":1}}],[\"400\",{\"1\":{\"616\":1,\"666\":1}}],[\"40001\",{\"1\":{\"625\":1}}],[\"40000\",{\"1\":{\"625\":1}}],[\"4000\",{\"1\":{\"91\":3}}],[\"40\",{\"1\":{\"444\":9,\"646\":2}}],[\"405\",{\"1\":{\"439\":1}}],[\"404\",{\"1\":{\"438\":1,\"439\":1,\"612\":1,\"615\":1,\"691\":2,\"830\":1}}],[\"4的用户的余额\",{\"1\":{\"205\":1}}],[\"4l\",{\"1\":{\"196\":1,\"205\":1,\"207\":1}}],[\"46<\",{\"1\":{\"175\":1}}],[\"43ms\",{\"1\":{\"572\":1}}],[\"43\",{\"1\":{\"143\":1}}],[\"4\",{\"0\":{\"841\":1},\"1\":{\"17\":1,\"22\":1,\"27\":1,\"63\":1,\"175\":1,\"184\":1,\"205\":1,\"208\":1,\"211\":1,\"355\":3,\"415\":1,\"452\":2,\"453\":1,\"469\":1,\"517\":1,\"558\":2,\"567\":1,\"599\":3,\"605\":2,\"655\":1,\"670\":2,\"675\":2,\"682\":1,\"688\":1,\"710\":2,\"721\":1,\"738\":1,\"764\":1,\"765\":1,\"780\":1,\"805\":1}}],[\"在指定范围内搜索member\",{\"1\":{\"815\":1}}],[\"在个人主页的\",{\"1\":{\"810\":1}}],[\"在保存blog到数据库的同时\",{\"1\":{\"809\":1}}],[\"在博主个人页面展示出当前用户与博主的共同关注呢\",{\"1\":{\"807\":1}}],[\"在探店笔记的详情页面\",{\"1\":{\"804\":1}}],[\"在认定有抢购资格后\",{\"1\":{\"796\":1}}],[\"在锁的持续时间内\",{\"1\":{\"782\":1}}],[\"在锁的重试机制中\",{\"1\":{\"782\":1}}],[\"在获取锁的过程中\",{\"1\":{\"782\":1}}],[\"在获取锁时存入线程标示\",{\"1\":{\"778\":1}}],[\"在trylockinner方法中\",{\"1\":{\"782\":1}}],[\"在thread\",{\"1\":{\"140\":1}}],[\"在redission的源码中\",{\"1\":{\"782\":1}}],[\"在redisson中\",{\"1\":{\"782\":1}}],[\"在response\",{\"1\":{\"451\":1}}],[\"在resources目录下面创建validationmessages\",{\"1\":{\"668\":1}}],[\"在resources\",{\"1\":{\"416\":1}}],[\"在resources下面\",{\"1\":{\"269\":1}}],[\"在resourcs目录下面创建一个\",{\"1\":{\"18\":1}}],[\"在lock锁中\",{\"1\":{\"782\":1}}],[\"在释放锁时先获取锁中的线程标示\",{\"1\":{\"778\":1}}],[\"在业务层增加方法\",{\"1\":{\"756\":1}}],[\"在两个线程并发来访问时\",{\"1\":{\"750\":1}}],[\"在每个attrid下再聚合attrname\",{\"1\":{\"710\":1}}],[\"在每个attrid下按照attrvalue聚合\",{\"1\":{\"710\":1}}],[\"在每个接口调用后统计次数+1\",{\"1\":{\"26\":1}}],[\"在getdatafromdb中如果出现异常\",{\"1\":{\"703\":1}}],[\"在gulimall\",{\"1\":{\"691\":1}}],[\"在高并发情况下吗\",{\"1\":{\"702\":1}}],[\"在高并发环境下\",{\"1\":{\"151\":1}}],[\"在缓存层面可以添加一些检测机制\",{\"1\":{\"701\":1}}],[\"在缓存失效时\",{\"1\":{\"700\":1,\"701\":1}}],[\"在系统启动时或数据更新时\",{\"1\":{\"699\":1,\"701\":1}}],[\"在系统负载过高或出现故障时\",{\"1\":{\"27\":1}}],[\"在使用乐观锁过程中假设100个线程同时都拿到了100的库存\",{\"1\":{\"769\":1}}],[\"在使用nio\",{\"1\":{\"694\":1}}],[\"在使用jni\",{\"1\":{\"694\":1}}],[\"在使用联合索引时\",{\"1\":{\"470\":1}}],[\"在总配置nginx\",{\"1\":{\"691\":1}}],[\"在heima\",{\"1\":{\"726\":2,\"728\":1}}],[\"在html\",{\"1\":{\"687\":1}}],[\"在hashmap中\",{\"1\":{\"61\":1}}],[\"在哪个类型\",{\"1\":{\"682\":1}}],[\"在哪个索引\",{\"1\":{\"682\":1}}],[\"在index索引中\",{\"1\":{\"680\":1}}],[\"在interface模块中加入sdk依赖\",{\"1\":{\"19\":1}}],[\"在父组件中\",{\"1\":{\"670\":1}}],[\"在右侧能查出对应的内容\",{\"1\":{\"670\":1}}],[\"在set集合中\",{\"1\":{\"807\":1}}],[\"在sku中仍然可以调整\",{\"1\":{\"670\":1}}],[\"在springconfig中扫描bookdao\",{\"1\":{\"310\":1}}],[\"在springconfig中扫描到的包为\",{\"1\":{\"245\":1}}],[\"在spring的配置类上添加包扫描\",{\"1\":{\"309\":1}}],[\"在springmvcconfig中扫描到的包为\",{\"1\":{\"245\":1}}],[\"在实体类上面加注解\",{\"1\":{\"666\":1,\"668\":1}}],[\"在控制器上面加注解refreshscope\",{\"1\":{\"660\":1}}],[\"在配置文件中输入这些值\",{\"1\":{\"721\":1}}],[\"在配置文件中添加配置\",{\"1\":{\"19\":1}}],[\"在配置列表中创建配置\",{\"1\":{\"660\":1}}],[\"在coupon模块下面创建一个bootstrap\",{\"1\":{\"660\":1}}],[\"在membercontroller中进行远程调用\",{\"1\":{\"659\":1}}],[\"在member模块进行远程调用\",{\"1\":{\"659\":1}}],[\"在mysql配置文件中启用慢查询日志\",{\"1\":{\"485\":1}}],[\"在mysql中\",{\"0\":{\"485\":1}}],[\"在启动类上面加注解enablediscoveryclient\",{\"1\":{\"658\":1}}],[\"在其他模块如coupon中\",{\"1\":{\"658\":1}}],[\"在其他模块中使用\",{\"1\":{\"319\":1}}],[\"在容器内\",{\"1\":{\"646\":1}}],[\"在服务器上的\",{\"1\":{\"646\":1}}],[\"在自己的请求里面添加请求前缀\",{\"1\":{\"635\":1}}],[\"在application\",{\"1\":{\"660\":1}}],[\"在app\",{\"1\":{\"612\":1}}],[\"在请求头中带着cookie去请求\",{\"1\":{\"605\":1}}],[\"在端口为8080的页面进行登录\",{\"1\":{\"533\":1}}],[\"在读取文件时绑定监听器\",{\"1\":{\"526\":1}}],[\"在读取时\",{\"1\":{\"476\":1}}],[\"在内存中判断\",{\"1\":{\"512\":1}}],[\"在分布式系统和分布式锁中\",{\"1\":{\"782\":1}}],[\"在分布式系统和消息队列中\",{\"1\":{\"352\":1}}],[\"在分布式情况下\",{\"1\":{\"702\":1}}],[\"在分库分表中\",{\"1\":{\"478\":1}}],[\"在聚簇索引中\",{\"1\":{\"466\":1}}],[\"在数据量比较大时\",{\"1\":{\"468\":1}}],[\"在数据之外\",{\"1\":{\"465\":1}}],[\"在数据库中查询出来这个数据后\",{\"1\":{\"752\":1}}],[\"在数据库中\",{\"1\":{\"47\":1}}],[\"在网关配置文件中配置路由规则\",{\"1\":{\"663\":1}}],[\"在网关项目中就可以进行调用了\",{\"1\":{\"29\":1}}],[\"在网站里面配置要映射的端口\",{\"1\":{\"450\":1}}],[\"在此情况下\",{\"1\":{\"412\":1}}],[\"在key存在时删除keyexpire\",{\"1\":{\"393\":1}}],[\"在后台启动redis\",{\"1\":{\"379\":1}}],[\"在后台进行持久化\",{\"1\":{\"369\":1}}],[\"在后台默默地守护一些系统服务\",{\"1\":{\"89\":1}}],[\"在声明队列的时候只要指定这个是仲裁队列即可\",{\"1\":{\"363\":1}}],[\"在声明队列的时候可以设置属性x\",{\"1\":{\"362\":1}}],[\"在生产环境下\",{\"1\":{\"363\":2}}],[\"在消费者内开启线程池加快消息处理速度\",{\"1\":{\"362\":2}}],[\"在消费者出现异常时利用本地重试\",{\"1\":{\"359\":1}}],[\"在一些隔离级别下\",{\"1\":{\"476\":1}}],[\"在一段时间以后才执行的任务\",{\"1\":{\"353\":1}}],[\"在一个线程中\",{\"1\":{\"159\":1}}],[\"在一个线程中等待\",{\"1\":{\"91\":1}}],[\"在收到确认消息后才会从队列中删除该消息\",{\"1\":{\"349\":1}}],[\"在开启确认机制的情况下\",{\"1\":{\"343\":1}}],[\"在绑定队列和交换机时\",{\"1\":{\"338\":1}}],[\"在本地创建一个挂载目录\",{\"1\":{\"323\":1}}],[\"在销毁方法之前执行\",{\"1\":{\"303\":1}}],[\"在bookdaoimpl类上添加\",{\"1\":{\"299\":1}}],[\"在bookdao的bean标签中使用<property>进行注入\",{\"1\":{\"288\":1}}],[\"在方法上面添加\",{\"1\":{\"309\":1}}],[\"在方法的形参前添加\",{\"1\":{\"262\":1}}],[\"在方法中定义的一些基本类型的变量和对象的引用变量都在方法的栈内存中分配\",{\"1\":{\"50\":1}}],[\"在项目中是写在yml文件里面\",{\"1\":{\"241\":1}}],[\"在项目目录页面建立一个readme\",{\"1\":{\"1\":1}}],[\"在查询缓存时\",{\"1\":{\"701\":1}}],[\"在查询前添加explain关键字\",{\"1\":{\"485\":1}}],[\"在查询地址时\",{\"1\":{\"214\":1}}],[\"在查询时只能选择\",{\"1\":{\"186\":1}}],[\"在代码中\",{\"1\":{\"210\":1}}],[\"在进行数据更新时\",{\"1\":{\"210\":1}}],[\"在进入该线程的内层方法会自动获取锁\",{\"1\":{\"152\":1}}],[\"在映射配置文件中就需要使用\",{\"1\":{\"184\":1}}],[\"在映射配置文件中的\",{\"1\":{\"179\":1}}],[\"在核心配置文件的\",{\"1\":{\"178\":1}}],[\"在别的线程中调用当前线程对象的interrupt方法\",{\"1\":{\"155\":1}}],[\"在目标锁对象的计数器不为零的情况下\",{\"1\":{\"152\":1}}],[\"在jdbcconfig方法里面加参数\",{\"1\":{\"310\":1}}],[\"在jva中没有办法立即停止一条线程\",{\"1\":{\"155\":1}}],[\"在jva中是通过使用无锁编程来实现\",{\"1\":{\"145\":1}}],[\"在java的内建锁\",{\"1\":{\"782\":1}}],[\"在java8中\",{\"1\":{\"143\":1}}],[\"在java中\",{\"1\":{\"103\":1,\"130\":1}}],[\"在java中定义数组\",{\"1\":{\"51\":1}}],[\"在java中设计查询出\",{\"1\":{\"47\":1}}],[\"在java中有哪些实现\",{\"1\":{\"47\":1}}],[\"在java里面还有什么实现方式\",{\"1\":{\"47\":1}}],[\"在对数据进行任何操作之前\",{\"1\":{\"145\":1}}],[\"在上述代码中\",{\"1\":{\"220\":1}}],[\"在上述例子中\",{\"1\":{\"132\":1}}],[\"在上一阶段完成后对结果进行转换\",{\"1\":{\"143\":1}}],[\"在上一阶段完成后对结果进行处理\",{\"1\":{\"143\":1}}],[\"在上一阶段完成后执行一个runnable\",{\"1\":{\"143\":1}}],[\"在future结束时自动调用该回调函数\",{\"1\":{\"142\":1}}],[\"在执行业务逻辑过程中\",{\"1\":{\"779\":1}}],[\"在执行程序时\",{\"1\":{\"127\":1}}],[\"在执行任务时\",{\"1\":{\"115\":2,\"713\":2}}],[\"在并发编程中主要需要解决两个问题\",{\"1\":{\"126\":1}}],[\"在多开\",{\"1\":{\"115\":1,\"713\":1}}],[\"在创建线程池后\",{\"1\":{\"114\":1}}],[\"在创建时可以指定初始容量和负载因子\",{\"1\":{\"71\":1}}],[\"在乐观锁的思想中\",{\"1\":{\"110\":1}}],[\"在构造方法之后执行\",{\"1\":{\"303\":1}}],[\"在构造时传入\",{\"1\":{\"105\":1}}],[\"在构造函数中\",{\"1\":{\"91\":1}}],[\"在非公平锁中\",{\"1\":{\"102\":1}}],[\"在公平锁中\",{\"1\":{\"102\":1}}],[\"在公共模块中编写接口yunfei\",{\"1\":{\"29\":1}}],[\"在调用方法前后进行额外的处理\",{\"1\":{\"626\":1}}],[\"在调用\",{\"1\":{\"93\":1,\"142\":1}}],[\"在资源类创建属性和操作方法\",{\"1\":{\"92\":1}}],[\"在另一个线程中通知\",{\"1\":{\"91\":1}}],[\"在同一时刻\",{\"1\":{\"81\":2}}],[\"在确定了存储位置之后\",{\"1\":{\"69\":1}}],[\"在这里\",{\"1\":{\"685\":3}}],[\"在这里面\",{\"1\":{\"583\":1}}],[\"在这个异常处理类里面可以返回result给前端\",{\"1\":{\"229\":1}}],[\"在这个集合的构造器中\",{\"1\":{\"58\":1}}],[\"在这种机制下\",{\"1\":{\"210\":1}}],[\"在这种情况下\",{\"1\":{\"69\":1}}],[\"在这些构造函数中\",{\"1\":{\"64\":1}}],[\"在\",{\"1\":{\"63\":1,\"158\":3,\"178\":1,\"317\":1,\"415\":1,\"749\":1}}],[\"在栈内存中指向的堆内存数组的首地址\",{\"1\":{\"51\":1}}],[\"在堆中分配的内存\",{\"1\":{\"50\":1}}],[\"在yunfei\",{\"1\":{\"29\":1}}],[\"在注册的时候分配用户的accesskey\",{\"1\":{\"22\":1}}],[\"在线程切换时\",{\"1\":{\"694\":1}}],[\"在线聊天室\",{\"0\":{\"32\":1}}],[\"在线调试后端\",{\"1\":{\"23\":1}}],[\"在线调试\",{\"0\":{\"23\":1}}],[\"在线测试\",{\"1\":{\"22\":1,\"23\":1,\"521\":1}}],[\"在线接口开放平台\",{\"1\":{\"22\":1}}],[\"在将改项目进行打包install到本地\",{\"1\":{\"18\":1}}],[\"在发起请求的代码中\",{\"1\":{\"17\":1}}],[\"校验通过\",{\"1\":{\"738\":1,\"741\":1}}],[\"校验验证码\",{\"1\":{\"738\":1}}],[\"校验手机号\",{\"1\":{\"738\":1,\"741\":1}}],[\"校验\",{\"1\":{\"738\":1,\"741\":1}}],[\"校验密码是否输入正确\",{\"1\":{\"604\":1}}],[\"校验用户的账户\",{\"1\":{\"599\":1,\"604\":1}}],[\"校验用户最多创建五个队伍\",{\"1\":{\"558\":2}}],[\"校验码\",{\"1\":{\"599\":1}}],[\"校验你是不是队伍的队长\",{\"1\":{\"563\":1}}],[\"校验我是否已加入队伍\",{\"1\":{\"562\":1}}],[\"校验队伍是否存在\",{\"1\":{\"562\":1,\"563\":1}}],[\"校验请求参数\",{\"1\":{\"562\":1,\"563\":1}}],[\"校验信息\",{\"1\":{\"558\":2}}],[\"校验的工具类\",{\"1\":{\"452\":1}}],[\"校验流程如下\",{\"1\":{\"452\":1}}],[\"校验接口是否存在\",{\"1\":{\"21\":1}}],[\"校验时间戳是否过期\",{\"1\":{\"17\":1}}],[\"校验签名\",{\"1\":{\"17\":1,\"452\":1}}],[\"加强用户权限校验\",{\"1\":{\"752\":1}}],[\"加随机时间spring\",{\"1\":{\"706\":1}}],[\"加上分布式的读写锁\",{\"1\":{\"705\":1}}],[\"加过期时间\",{\"1\":{\"549\":1}}],[\"加一个关联表\",{\"1\":{\"510\":1}}],[\"加入缓存\",{\"1\":{\"698\":1}}],[\"加入common模块依赖\",{\"1\":{\"655\":1}}],[\"加入父级maven\",{\"1\":{\"655\":1}}],[\"加入时间\",{\"1\":{\"557\":2}}],[\"加入队伍锁\",{\"0\":{\"574\":1}}],[\"加入队伍\",{\"1\":{\"500\":1,\"561\":1}}],[\"加入元素\",{\"1\":{\"56\":1}}],[\"加密房间必须要设置密码\",{\"1\":{\"560\":1}}],[\"加密\",{\"1\":{\"452\":1,\"556\":1,\"557\":2,\"599\":1}}],[\"加密方式\",{\"1\":{\"17\":1}}],[\"加\",{\"1\":{\"391\":1}}],[\"加锁的业务只要运行完成\",{\"1\":{\"704\":1}}],[\"加锁失败\",{\"1\":{\"703\":5}}],[\"加锁成功\",{\"1\":{\"703\":4,\"704\":1}}],[\"加锁\",{\"1\":{\"110\":2,\"567\":1,\"706\":1}}],[\"加载nginx配置\",{\"1\":{\"771\":1}}],[\"加载最新\",{\"1\":{\"731\":1}}],[\"加载更多\",{\"1\":{\"731\":1}}],[\"加载配置文件\",{\"1\":{\"313\":1}}],[\"加载配置文件初始化容器\",{\"1\":{\"301\":1}}],[\"加载配置类\",{\"1\":{\"313\":1}}],[\"加载配置类初始化容器\",{\"1\":{\"301\":1}}],[\"加载properties文件\",{\"1\":{\"295\":1}}],[\"加载到同一个环境中\",{\"1\":{\"245\":1}}],[\"加载指定配置类\",{\"1\":{\"245\":1}}],[\"加载springmvc配置类\",{\"1\":{\"224\":1,\"245\":1}}],[\"加载spring配置类\",{\"1\":{\"224\":1,\"245\":1}}],[\"加载sql映射文件\",{\"1\":{\"175\":1,\"176\":1}}],[\"加载mybatis的核心配置文件\",{\"1\":{\"175\":1}}],[\"加载因子\",{\"1\":{\"63\":1}}],[\"加载顺序\",{\"1\":{\"47\":1}}],[\"加1之后足够存下下一个数据\",{\"1\":{\"56\":1}}],[\"加timestamp时间戳\",{\"1\":{\"17\":1}}],[\"加nonce随机数\",{\"1\":{\"17\":1}}],[\"怎么对所有用户匹配\",{\"0\":{\"567\":1}}],[\"怎么保证同一时间只有一个服务器能抢到锁\",{\"1\":{\"547\":1}}],[\"怎么做\",{\"1\":{\"521\":1,\"545\":1}}],[\"怎么查询所有标签\",{\"1\":{\"509\":1}}],[\"怎么把标签进行分类\",{\"1\":{\"500\":1,\"508\":1}}],[\"怎么改\",{\"1\":{\"451\":1}}],[\"怎么办呢\",{\"1\":{\"267\":1}}],[\"怎么关闭一个运行中的线程\",{\"1\":{\"47\":1}}],[\"怎么给进程\",{\"1\":{\"47\":1}}],[\"怎么解决线程安全问题答全面\",{\"1\":{\"47\":1}}],[\"怎么序列化\",{\"1\":{\"47\":1}}],[\"怎么获取前端参数\",{\"1\":{\"47\":1}}],[\"怎么调用其他项目的方法\",{\"1\":{\"28\":1}}],[\"怎么防止请求重放\",{\"1\":{\"17\":1}}],[\"怎么知道这个签名对不对\",{\"1\":{\"17\":1}}],[\"怎么实现\",{\"1\":{\"17\":1}}],[\"签到统计\",{\"0\":{\"820\":1}}],[\"签到记录为1\",{\"1\":{\"819\":1}}],[\"签名\",{\"1\":{\"451\":1,\"452\":2}}],[\"签名工具类\",{\"1\":{\"17\":1}}],[\"签名算法\",{\"1\":{\"17\":1}}],[\"签发签名\",{\"1\":{\"17\":1}}],[\"不支持数据持久化\",{\"1\":{\"793\":1}}],[\"不支持中断\",{\"1\":{\"91\":1}}],[\"不受限于jvm内存上限\",{\"1\":{\"792\":1}}],[\"不受影响\",{\"1\":{\"155\":1,\"369\":1}}],[\"不足\",{\"1\":{\"789\":1,\"796\":1}}],[\"不断从阻塞队列中获取信息\",{\"1\":{\"789\":1}}],[\"不一致\",{\"1\":{\"780\":1}}],[\"不让线程进行\",{\"1\":{\"775\":1}}],[\"不查询数据库\",{\"1\":{\"756\":1}}],[\"不存在\",{\"1\":{\"739\":1,\"742\":1,\"758\":1}}],[\"不符合\",{\"1\":{\"738\":2,\"741\":2}}],[\"不符合软件设计的开闭原则\",{\"1\":{\"491\":1}}],[\"不使用续期\",{\"1\":{\"704\":1}}],[\"不使用redis进行缓存\",{\"1\":{\"572\":1}}],[\"不增加\",{\"1\":{\"682\":1}}],[\"不指定\",{\"1\":{\"682\":1}}],[\"不是\",{\"1\":{\"742\":1}}],[\"不是jvm内部的一部分\",{\"1\":{\"694\":1}}],[\"不是默认图\",{\"1\":{\"670\":1}}],[\"不是使用传统的悲观锁\",{\"1\":{\"210\":1}}],[\"不显示\",{\"1\":{\"663\":1,\"666\":1,\"667\":1,\"668\":1}}],[\"不方便动态的修改页面\",{\"1\":{\"646\":1}}],[\"不然前端感受到异常\",{\"1\":{\"626\":1}}],[\"不然会打印地址\",{\"1\":{\"47\":1}}],[\"不执行\",{\"1\":{\"613\":1}}],[\"不适用于经常更新的数据\",{\"1\":{\"567\":1}}],[\"不做内容筛选\",{\"1\":{\"808\":1}}],[\"不做任何处理\",{\"1\":{\"612\":1}}],[\"不做运算\",{\"1\":{\"567\":1}}],[\"不做修改\",{\"1\":{\"565\":1}}],[\"不做处理\",{\"1\":{\"349\":1}}],[\"不展示已过期的队伍\",{\"1\":{\"559\":2}}],[\"不展示过期的队伍\",{\"1\":{\"556\":1}}],[\"不认识该用户\",{\"1\":{\"533\":1}}],[\"不确定表头\",{\"1\":{\"524\":1}}],[\"不用临时拉取\",{\"1\":{\"808\":1}}],[\"不用担心业务时间长\",{\"1\":{\"704\":1}}],[\"不用再查数据库了\",{\"1\":{\"540\":1}}],[\"不用额外写一个demodatalistener\",{\"1\":{\"525\":1}}],[\"不用新建关联表\",{\"1\":{\"510\":1}}],[\"不用跳表\",{\"1\":{\"47\":1}}],[\"不可重复读\",{\"1\":{\"473\":1,\"474\":1}}],[\"不可解密\",{\"1\":{\"17\":1}}],[\"不要用分类\",{\"1\":{\"508\":1}}],[\"不要用了\",{\"1\":{\"450\":1}}],[\"不要在索引列上进行运算操作\",{\"1\":{\"470\":2}}],[\"不要在服务器之间直接传递\",{\"1\":{\"17\":1}}],[\"不过可以把结果存储到一个指定的key\",{\"1\":{\"815\":1}}],[\"不过\",{\"1\":{\"399\":1}}],[\"不幂等场景\",{\"1\":{\"352\":1}}],[\"不建议使用\",{\"1\":{\"349\":1}}],[\"不处理\",{\"1\":{\"349\":1}}],[\"不处理异常情况\",{\"1\":{\"143\":1}}],[\"不具备存储消息的能力\",{\"1\":{\"334\":1}}],[\"不具备自动释放锁的特性\",{\"1\":{\"91\":1}}],[\"不知道用到了哪些配置\",{\"1\":{\"309\":1}}],[\"不推荐\",{\"1\":{\"309\":1,\"548\":1}}],[\"不区分spring与springmvc的环境\",{\"1\":{\"245\":1}}],[\"不加\",{\"1\":{\"261\":1}}],[\"不加默认是去找页面\",{\"1\":{\"245\":1}}],[\"不加锁的特点能够使其读操作的性能大幅提升\",{\"1\":{\"145\":1}}],[\"不加锁\",{\"1\":{\"110\":1}}],[\"不允许把内存屏障之后的指令重排序到内存屏障之前\",{\"1\":{\"161\":1}}],[\"不返回结果\",{\"1\":{\"143\":1}}],[\"不能使用\",{\"1\":{\"698\":1}}],[\"不能使用索\",{\"1\":{\"470\":1}}],[\"不能使用索引\",{\"1\":{\"470\":1}}],[\"不能加入自己的队伍\",{\"1\":{\"561\":1}}],[\"不能单独进行使用\",{\"1\":{\"415\":1}}],[\"不能重复下单\",{\"1\":{\"789\":1,\"790\":1,\"796\":1}}],[\"不能重复加入已加入的队伍\",{\"1\":{\"561\":3,\"574\":2}}],[\"不能重复\",{\"1\":{\"239\":1}}],[\"不能获取父类\",{\"1\":{\"170\":1}}],[\"不能越级\",{\"1\":{\"158\":1}}],[\"不能直接从主内存中读写\",{\"1\":{\"158\":1}}],[\"不能放行\",{\"1\":{\"156\":1}}],[\"不能对基本数据类型变量重新赋值\",{\"1\":{\"133\":1}}],[\"不能随便一个人调用\",{\"1\":{\"17\":1}}],[\"不能随便调用\",{\"1\":{\"5\":1}}],[\"不同用户看到的数据不同\",{\"1\":{\"544\":1}}],[\"不同的项目框架都有不同的配置文件\",{\"1\":{\"635\":1}}],[\"不同的隔离级别快照读是不一样的\",{\"1\":{\"476\":1}}],[\"不同的是\",{\"1\":{\"98\":1}}],[\"不同线程之间也无法直接访问其他线程的工作内存中的变量\",{\"1\":{\"158\":1}}],[\"不同线程之间也无法直接访问对方工作内存中的变量\",{\"1\":{\"158\":1}}],[\"不同\",{\"1\":{\"108\":1}}],[\"不同对象的哈希码可能不同\",{\"1\":{\"66\":1}}],[\"不会有缺失\",{\"1\":{\"808\":1}}],[\"不会重新调整顺序\",{\"1\":{\"487\":1}}],[\"不会阻塞服务器的正常操作\",{\"1\":{\"369\":1}}],[\"不会执行更新操作\",{\"1\":{\"210\":1}}],[\"不会因为之前已经获取过还没释放而阻塞\",{\"1\":{\"152\":1}}],[\"不会等待异步线程\",{\"1\":{\"143\":1}}],[\"不会抛出异常\",{\"1\":{\"112\":2}}],[\"不会退出\",{\"1\":{\"89\":1}}],[\"不会释放对象锁\",{\"1\":{\"86\":1}}],[\"不会释放锁\",{\"1\":{\"86\":1}}],[\"不会增加新的键值对数量\",{\"1\":{\"69\":1}}],[\"不会替代已存在的值\",{\"1\":{\"66\":1}}],[\"不需要坐标查询\",{\"1\":{\"817\":1}}],[\"不需要\",{\"1\":{\"670\":1}}],[\"不需要在每个接口请求中都去写相同的逻辑\",{\"1\":{\"630\":1}}],[\"不需要回表查询数据\",{\"1\":{\"486\":1}}],[\"不需要全表扫描\",{\"1\":{\"465\":1}}],[\"不需要固定的模式\",{\"1\":{\"377\":1}}],[\"不需要额外的配置\",{\"1\":{\"363\":1}}],[\"不需要获取\",{\"1\":{\"122\":1,\"718\":1}}],[\"不需要等待结果返回\",{\"1\":{\"81\":1}}],[\"不需要插入新节点\",{\"1\":{\"66\":1}}],[\"不需要被序列化和反序列化\",{\"1\":{\"63\":1}}],[\"不被标记为\",{\"1\":{\"63\":1}}],[\"不实用readme\",{\"0\":{\"40\":1}}],[\"不和业务逻辑绑定\",{\"1\":{\"27\":1}}],[\"密钥\",{\"1\":{\"17\":2}}],[\"密码和确认密码必须一致\",{\"1\":{\"599\":1}}],[\"密码进行\",{\"1\":{\"599\":1}}],[\"密码不能明文存储\",{\"1\":{\"599\":1}}],[\"密码不少于四位\",{\"1\":{\"599\":1,\"604\":1}}],[\"密码错误\",{\"1\":{\"561\":1,\"574\":1}}],[\"密码设置不正确\",{\"1\":{\"558\":1}}],[\"密码\",{\"1\":{\"9\":1,\"332\":1,\"557\":2,\"596\":1,\"599\":2,\"603\":1,\"604\":1}}],[\"本次查询的最大数量\",{\"1\":{\"795\":1}}],[\"本次迭代获取到的元素\",{\"1\":{\"190\":1}}],[\"本来应该去查询数据库\",{\"1\":{\"754\":1}}],[\"本身是一种抽象的概念并不真实存在它仅仅描述的是一组约定或规范\",{\"1\":{\"157\":1}}],[\"本地锁只会锁住这台机器\",{\"1\":{\"702\":1}}],[\"本地锁\",{\"1\":{\"702\":1}}],[\"本地方法栈\",{\"1\":{\"694\":1}}],[\"本地环境\",{\"1\":{\"634\":1}}],[\"本地日志\",{\"1\":{\"634\":1}}],[\"本地开发\",{\"1\":{\"634\":1}}],[\"本地开发时使用\",{\"1\":{\"14\":1}}],[\"本地缓存\",{\"1\":{\"543\":1}}],[\"本地存储\",{\"0\":{\"239\":1}}],[\"本地运行命令\",{\"1\":{\"44\":1}}],[\"本质上是一个方法对象\",{\"1\":{\"232\":1}}],[\"本质上是一个对象锁\",{\"1\":{\"87\":1}}],[\"本质\",{\"1\":{\"17\":1}}],[\"需要建立一张关系表\",{\"1\":{\"806\":1}}],[\"需要编写代码获取1000个用户的token\",{\"1\":{\"788\":1}}],[\"需要下载\",{\"1\":{\"695\":1}}],[\"需要安装中文分词器ik\",{\"1\":{\"687\":1}}],[\"需要先判断是否存在\",{\"1\":{\"673\":1}}],[\"需要配置mybatis\",{\"1\":{\"663\":1}}],[\"需要配置过滤器\",{\"1\":{\"248\":1}}],[\"需要解决\",{\"1\":{\"663\":1}}],[\"需要改一下启动参数\",{\"1\":{\"643\":1}}],[\"需要修改为root\",{\"1\":{\"639\":1}}],[\"需要修改onpagechange和fetchuserinfo函数\",{\"1\":{\"612\":1}}],[\"需要web服务器\",{\"1\":{\"638\":1}}],[\"需要对接口的\",{\"1\":{\"630\":1}}],[\"需要对数据进行排序\",{\"1\":{\"468\":1}}],[\"需要向后端发送请求\",{\"1\":{\"610\":1}}],[\"需要\",{\"1\":{\"571\":1,\"670\":1}}],[\"需要加一把分布式锁\",{\"1\":{\"561\":1}}],[\"需要增加配置application\",{\"1\":{\"522\":1}}],[\"需要的数据都在索引列中能找到\",{\"1\":{\"486\":1}}],[\"需要的构造函数\",{\"1\":{\"208\":1}}],[\"需要指定\",{\"1\":{\"682\":1}}],[\"需要指定读用哪个class去读\",{\"1\":{\"526\":1}}],[\"需要指定大图的偏移位置\",{\"1\":{\"439\":1}}],[\"需要指定容量\",{\"1\":{\"112\":1}}],[\"需要数据的时候\",{\"1\":{\"371\":1}}],[\"需要在业务代码结束后\",{\"1\":{\"359\":1}}],[\"需要等待rabbitmq服务器的确认消息\",{\"1\":{\"359\":1}}],[\"需要等待结果返回\",{\"1\":{\"81\":1}}],[\"需要取消订单\",{\"1\":{\"355\":1}}],[\"需要重发延迟消息\",{\"1\":{\"355\":1}}],[\"需要重新尝试\",{\"1\":{\"110\":1}}],[\"需要自己在业务代码中调用api\",{\"1\":{\"349\":1}}],[\"需要通过配置文件来开启\",{\"1\":{\"343\":1}}],[\"需要用到bookdao对象\",{\"1\":{\"310\":1}}],[\"需要按名称注入\",{\"1\":{\"287\":1}}],[\"需要注入属性的类中对应属性的setter方法不能省略\",{\"1\":{\"287\":1}}],[\"需要把dao对象交给service\",{\"1\":{\"268\":1}}],[\"需要把老数组中的数据挪动到新的数组中\",{\"1\":{\"71\":1}}],[\"需要依赖\",{\"1\":{\"261\":1}}],[\"需要进行修改\",{\"1\":{\"805\":1}}],[\"需要进行缓存重建\",{\"1\":{\"756\":1,\"758\":1}}],[\"需要进行日期格式的转换\",{\"1\":{\"259\":1}}],[\"需要进行该配置\",{\"1\":{\"201\":1}}],[\"需要保证spring\",{\"1\":{\"229\":1}}],[\"需要排除的属性名\",{\"1\":{\"198\":1}}],[\"需要给每个条件前都加上\",{\"1\":{\"185\":1}}],[\"需要判断是否存在\",{\"1\":{\"185\":1}}],[\"需要传入一个id\",{\"1\":{\"182\":1}}],[\"需要被调用的线程自己进行配合才行\",{\"1\":{\"155\":1}}],[\"需要程序员显式地获取和释放锁\",{\"1\":{\"152\":1}}],[\"需要处理异常\",{\"1\":{\"143\":1}}],[\"需要实现\",{\"1\":{\"117\":2}}],[\"需要手动调用\",{\"1\":{\"91\":1}}],[\"需要谨慎使用\",{\"1\":{\"91\":1,\"110\":1}}],[\"需要根据键是否已存在来决定是否替代值\",{\"1\":{\"66\":1}}],[\"需要考虑具体的应用场景和操作频率\",{\"1\":{\"47\":1}}],[\"需要使用\",{\"1\":{\"14\":1,\"250\":1}}],[\"需求说明\",{\"1\":{\"143\":1}}],[\"需求\",{\"1\":{\"47\":1,\"165\":1,\"205\":1,\"214\":1,\"756\":1,\"789\":1,\"796\":1,\"803\":1,\"807\":1,\"809\":1,\"810\":1}}],[\"需求分析=>\",{\"1\":{\"580\":1}}],[\"需求分析\",{\"0\":{\"8\":1,\"500\":1,\"556\":1,\"581\":1}}],[\"+hello\",{\"1\":{\"698\":1}}],[\"+数据\",{\"1\":{\"682\":1}}],[\"+文件名\",{\"1\":{\"640\":1}}],[\"+$\",{\"1\":{\"599\":2,\"605\":1}}],[\"+umi\",{\"1\":{\"582\":1}}],[\"+user\",{\"1\":{\"251\":1,\"252\":1,\"257\":1,\"262\":1}}],[\"+username\",{\"1\":{\"250\":2}}],[\"+ls\",{\"1\":{\"551\":1}}],[\"+list\",{\"1\":{\"258\":1,\"551\":1}}],[\"+likes\",{\"1\":{\"256\":1}}],[\"+ant\",{\"1\":{\"582\":1}}],[\"+ak\",{\"1\":{\"443\":1}}],[\"+age\",{\"1\":{\"248\":1,\"250\":2}}],[\"+=\",{\"1\":{\"406\":1,\"452\":1,\"566\":1}}],[\"+clientid\",{\"1\":{\"406\":1}}],[\"+contenttype\",{\"1\":{\"232\":1}}],[\"+date2\",{\"1\":{\"259\":1}}],[\"+date1\",{\"1\":{\"259\":2}}],[\"+date\",{\"1\":{\"259\":4}}],[\"+name\",{\"1\":{\"248\":2,\"262\":1}}],[\"+name1\",{\"1\":{\"27\":1}}],[\"+newfilename\",{\"1\":{\"239\":1}}],[\"+methodname\",{\"1\":{\"232\":1}}],[\"+res\",{\"1\":{\"143\":1}}],[\"+e\",{\"1\":{\"143\":1}}],[\"+i\",{\"1\":{\"83\":3}}],[\"++j\",{\"1\":{\"71\":1}}],[\"++size\",{\"1\":{\"66\":1}}],[\"++modcount\",{\"1\":{\"66\":1,\"67\":1}}],[\"++bincount\",{\"1\":{\"66\":1}}],[\"+\",{\"1\":{\"14\":1,\"16\":3,\"17\":2,\"22\":8,\"23\":2,\"26\":1,\"27\":11,\"43\":2,\"51\":1,\"54\":1,\"56\":5,\"64\":2,\"71\":1,\"73\":1,\"83\":5,\"88\":2,\"91\":10,\"92\":4,\"93\":12,\"98\":1,\"103\":3,\"104\":4,\"105\":3,\"107\":4,\"108\":1,\"109\":2,\"110\":24,\"117\":4,\"119\":5,\"120\":9,\"132\":1,\"142\":5,\"143\":23,\"151\":4,\"165\":3,\"171\":2,\"184\":4,\"196\":1,\"211\":5,\"219\":2,\"220\":1,\"239\":1,\"241\":15,\"253\":1,\"254\":2,\"262\":10,\"283\":3,\"286\":3,\"288\":5,\"307\":1,\"319\":2,\"332\":2,\"333\":7,\"335\":4,\"336\":4,\"337\":4,\"338\":8,\"339\":2,\"395\":2,\"399\":2,\"400\":1,\"406\":1,\"407\":6,\"409\":1,\"420\":1,\"430\":10,\"431\":6,\"432\":5,\"433\":1,\"439\":6,\"442\":1,\"444\":1,\"445\":2,\"457\":7,\"525\":1,\"537\":1,\"538\":1,\"539\":2,\"561\":1,\"566\":9,\"571\":1,\"574\":1,\"599\":2,\"605\":1,\"628\":1,\"655\":1,\"665\":21,\"687\":6,\"696\":1,\"698\":1,\"704\":3,\"706\":1,\"710\":4,\"712\":7,\"715\":5,\"716\":9,\"725\":1,\"733\":1,\"738\":1,\"741\":3,\"742\":1,\"747\":1,\"751\":1,\"752\":1,\"755\":3,\"756\":3,\"758\":3,\"763\":5,\"769\":1,\"777\":3,\"778\":6,\"780\":2,\"781\":2,\"788\":3,\"789\":1,\"790\":2,\"803\":2,\"804\":2,\"805\":3,\"807\":3,\"809\":1,\"810\":4,\"816\":1,\"817\":3,\"819\":2,\"820\":2}}],[\"|grep\",{\"1\":{\"639\":1}}],[\"|\",{\"1\":{\"14\":1,\"613\":1,\"615\":1,\"763\":1}}],[\"||\",{\"1\":{\"14\":3,\"21\":2,\"23\":1,\"26\":1,\"27\":1,\"64\":1,\"66\":4,\"67\":4,\"210\":1,\"220\":2,\"352\":1,\"355\":1,\"457\":1,\"558\":4,\"560\":1,\"561\":1,\"562\":1,\"566\":1,\"574\":1,\"575\":2,\"599\":1,\"608\":1,\"616\":1,\"620\":1,\"664\":2,\"675\":1,\"728\":1,\"732\":2,\"738\":1,\"741\":1,\"796\":2,\"805\":1,\"807\":1,\"810\":1,\"817\":1,\"820\":2}}],[\"<1\",{\"1\":{\"765\":1}}],[\"<exclusion>\",{\"1\":{\"698\":1}}],[\"<exclusions>\",{\"1\":{\"698\":1}}],[\"<elasticsearch\",{\"1\":{\"687\":1}}],[\"<el\",{\"1\":{\"663\":1,\"670\":1}}],[\"<entry\",{\"1\":{\"292\":3}}],[\"<environment\",{\"1\":{\"175\":2,\"178\":2}}],[\"<environments\",{\"1\":{\"175\":1,\"178\":1}}],[\"<lombok\",{\"1\":{\"663\":1}}],[\"<li>\",{\"1\":{\"81\":8}}],[\"<list>\",{\"1\":{\"290\":1}}],[\"<list\",{\"1\":{\"22\":3}}],[\"<name>gulimall<\",{\"1\":{\"653\":1}}],[\"<githuboutlined\",{\"1\":{\"609\":1}}],[\"<groupid>redis\",{\"1\":{\"395\":1,\"698\":1}}],[\"<groupid>io\",{\"1\":{\"318\":1,\"698\":1,\"726\":2,\"728\":1,\"817\":1}}],[\"<groupid>javax\",{\"1\":{\"224\":1,\"241\":2,\"245\":1,\"303\":1,\"655\":1}}],[\"<groupid>junit<\",{\"1\":{\"175\":1,\"224\":1,\"313\":1}}],[\"<groupid>mysql<\",{\"1\":{\"175\":1,\"224\":1,\"294\":1,\"312\":1}}],[\"<groupid>commons\",{\"1\":{\"655\":1}}],[\"<groupid>com\",{\"1\":{\"19\":1,\"29\":2,\"196\":1,\"224\":2,\"241\":1,\"256\":1,\"294\":1,\"312\":1,\"319\":1,\"339\":1,\"398\":1,\"429\":1,\"453\":1,\"512\":1,\"522\":1,\"524\":1,\"591\":1,\"594\":1,\"653\":1,\"655\":3,\"657\":1,\"658\":1,\"660\":1,\"661\":1,\"663\":1,\"665\":2,\"727\":1,\"728\":2,\"733\":1}}],[\"<groupid>org\",{\"1\":{\"18\":1,\"27\":1,\"29\":2,\"175\":1,\"196\":1,\"224\":6,\"241\":1,\"245\":2,\"248\":1,\"269\":1,\"312\":4,\"313\":1,\"318\":2,\"332\":1,\"340\":1,\"395\":1,\"398\":2,\"405\":1,\"416\":5,\"429\":1,\"453\":1,\"533\":2,\"551\":2,\"588\":1,\"589\":1,\"590\":1,\"592\":1,\"593\":1,\"599\":1,\"655\":2,\"657\":1,\"659\":1,\"661\":1,\"663\":1,\"687\":1,\"690\":2,\"698\":2,\"704\":1,\"706\":1,\"728\":1,\"733\":1,\"770\":1,\"781\":1,\"817\":1}}],[\"<r\",{\"1\":{\"758\":2}}],[\"<relativepath><\",{\"1\":{\"663\":1}}],[\"<result\",{\"1\":{\"181\":2}}],[\"<resultmap\",{\"1\":{\"181\":1}}],[\"<router\",{\"1\":{\"518\":1}}],[\"<或者lt\",{\"1\":{\"420\":1}}],[\"<h2>商品分类<\",{\"1\":{\"663\":1}}],[\"<hr>\",{\"1\":{\"416\":2,\"418\":2,\"420\":1}}],[\"<head>\",{\"1\":{\"406\":1,\"416\":1,\"438\":1}}],[\"<html>\",{\"1\":{\"406\":1,\"416\":1,\"438\":1}}],[\"<b\",{\"1\":{\"710\":2}}],[\"<b>算数运算符<\",{\"1\":{\"420\":1}}],[\"<b>map数据的展示\",{\"1\":{\"418\":1}}],[\"<b>展示list中的stu数据\",{\"1\":{\"418\":1}}],[\"<b>对象student中的数据展示\",{\"1\":{\"416\":1}}],[\"<b>普通文本\",{\"1\":{\"416\":1}}],[\"<br>\",{\"1\":{\"416\":1,\"418\":2}}],[\"<br\",{\"1\":{\"406\":1,\"416\":1,\"418\":9,\"420\":5}}],[\"<body>\",{\"1\":{\"406\":1,\"416\":1,\"438\":1}}],[\"<bean\",{\"1\":{\"269\":2,\"270\":3,\"272\":1,\"275\":1,\"276\":2,\"277\":1,\"278\":1,\"282\":3,\"283\":1,\"285\":1,\"286\":3,\"287\":3,\"294\":1,\"295\":1,\"299\":1}}],[\"<beans\",{\"1\":{\"269\":1,\"270\":1,\"278\":1,\"295\":1}}],[\"<build>\",{\"1\":{\"224\":1,\"245\":1,\"248\":1}}],[\"<button\",{\"1\":{\"14\":3,\"22\":1,\"23\":1,\"406\":2}}],[\"<vanimage\",{\"1\":{\"519\":1}}],[\"<van\",{\"1\":{\"506\":2,\"507\":4,\"518\":12,\"519\":8,\"520\":3,\"534\":3}}],[\"<value>chuanzhihui<\",{\"1\":{\"290\":1}}],[\"<value>boxuegu<\",{\"1\":{\"290\":1,\"291\":2}}],[\"<value>itheima<\",{\"1\":{\"290\":1,\"291\":1}}],[\"<value>itcast<\",{\"1\":{\"290\":1,\"291\":1}}],[\"<value>300<\",{\"1\":{\"289\":1}}],[\"<value>200<\",{\"1\":{\"289\":1}}],[\"<value>100<\",{\"1\":{\"289\":1}}],[\"<v\",{\"1\":{\"220\":3}}],[\"<v>\",{\"1\":{\"220\":3}}],[\"<version>6\",{\"1\":{\"817\":1}}],[\"<version>$\",{\"1\":{\"655\":1,\"657\":1}}],[\"<version>8\",{\"1\":{\"655\":1}}],[\"<version>7\",{\"1\":{\"318\":1,\"687\":1}}],[\"<version>1\",{\"1\":{\"224\":2,\"241\":1,\"294\":1,\"303\":1,\"312\":2,\"319\":1,\"416\":1,\"429\":1,\"453\":1,\"655\":1,\"733\":1}}],[\"<version>4\",{\"1\":{\"175\":1,\"224\":1,\"313\":1,\"655\":1}}],[\"<version>5\",{\"1\":{\"175\":1,\"224\":4,\"245\":1,\"269\":1,\"294\":1,\"312\":3,\"313\":1,\"395\":1}}],[\"<version>2\",{\"1\":{\"29\":2,\"196\":1,\"224\":2,\"241\":2,\"245\":1,\"248\":1,\"256\":1,\"339\":1,\"453\":1,\"512\":1,\"522\":1,\"657\":1,\"663\":1,\"665\":1,\"817\":1}}],[\"<version>3\",{\"1\":{\"29\":2,\"175\":1,\"196\":1,\"224\":2,\"241\":1,\"245\":1,\"312\":1,\"395\":1,\"429\":1,\"524\":1,\"551\":2,\"593\":1,\"594\":1,\"655\":2,\"665\":1,\"704\":1,\"781\":1}}],[\"<version>0\",{\"1\":{\"19\":1,\"653\":1,\"655\":1,\"661\":1,\"663\":1}}],[\"<foreach\",{\"1\":{\"190\":1,\"674\":1}}],[\"<form\",{\"1\":{\"22\":3,\"23\":3,\"237\":1}}],[\"<when\",{\"1\":{\"186\":3}}],[\"<where>\",{\"1\":{\"185\":1,\"186\":1}}],[\"<image\",{\"1\":{\"616\":1}}],[\"<img\",{\"1\":{\"609\":1,\"616\":1}}],[\"<if\",{\"1\":{\"185\":6,\"191\":5}}],[\"<index\",{\"1\":{\"507\":1}}],[\"<insert\",{\"1\":{\"188\":2}}],[\"<include\",{\"1\":{\"180\":1}}],[\"<input\",{\"1\":{\"22\":1,\"23\":1,\"237\":4,\"406\":1}}],[\"<可以使用\",{\"1\":{\"183\":1}}],[\"<style\",{\"1\":{\"438\":1,\"534\":1,\"663\":1}}],[\"<script>\",{\"1\":{\"438\":1,\"663\":1}}],[\"<script\",{\"1\":{\"406\":1,\"438\":1,\"519\":1,\"520\":1,\"534\":1}}],[\"<scope>import<\",{\"1\":{\"657\":2}}],[\"<scope>runtime<\",{\"1\":{\"589\":1,\"591\":1}}],[\"<scope>provided<\",{\"1\":{\"224\":1,\"245\":1,\"655\":1}}],[\"<scope>test<\",{\"1\":{\"175\":1,\"224\":1,\"313\":1,\"395\":1}}],[\"<segment>\",{\"1\":{\"663\":3,\"665\":1}}],[\"<set>\",{\"1\":{\"191\":1,\"291\":1}}],[\"<select\",{\"1\":{\"175\":1,\"179\":1,\"180\":2,\"181\":1,\"182\":3,\"184\":1,\"185\":2,\"186\":1}}],[\"<sql\",{\"1\":{\"180\":1}}],[\"<meta\",{\"1\":{\"406\":1,\"416\":1,\"438\":2}}],[\"<map>\",{\"1\":{\"292\":1}}],[\"<mapper\",{\"1\":{\"175\":2,\"176\":1,\"179\":1}}],[\"<mappers>\",{\"1\":{\"175\":1,\"176\":1}}],[\"<module>renren\",{\"1\":{\"655\":3}}],[\"<module>gulimall\",{\"1\":{\"653\":5,\"655\":10}}],[\"<modules>\",{\"1\":{\"653\":1,\"655\":2}}],[\"<modal\",{\"1\":{\"14\":2}}],[\"<money\",{\"1\":{\"208\":1}}],[\"<user\",{\"1\":{\"534\":1}}],[\"<uriencoding>utf\",{\"1\":{\"248\":1}}],[\"<update\",{\"1\":{\"191\":1,\"207\":1,\"672\":1}}],[\"<u\",{\"1\":{\"122\":3,\"718\":3}}],[\"<u>\",{\"1\":{\"119\":2,\"121\":3,\"122\":3,\"143\":1,\"715\":2,\"717\":3,\"718\":3}}],[\"<ul>\",{\"1\":{\"81\":2}}],[\"<<\",{\"1\":{\"63\":2,\"71\":3,\"763\":1}}],[\"<type>pom<\",{\"1\":{\"657\":2}}],[\"<typealiases>\",{\"1\":{\"175\":1,\"179\":1}}],[\"<tabledropdown\",{\"1\":{\"616\":1}}],[\"<table>\",{\"1\":{\"418\":2}}],[\"<team\",{\"1\":{\"507\":1}}],[\"<template>\",{\"1\":{\"519\":1,\"520\":1,\"534\":1,\"663\":1}}],[\"<template\",{\"1\":{\"506\":1,\"507\":2,\"518\":2,\"534\":2}}],[\"<td>$\",{\"1\":{\"418\":8,\"419\":8}}],[\"<td>钱包<\",{\"1\":{\"418\":2}}],[\"<td>年龄<\",{\"1\":{\"418\":2}}],[\"<td>姓名<\",{\"1\":{\"418\":2}}],[\"<td>序号<\",{\"1\":{\"418\":2}}],[\"<tr\",{\"1\":{\"419\":1}}],[\"<tr>\",{\"1\":{\"418\":3,\"419\":1}}],[\"<transactionmanager\",{\"1\":{\"175\":2,\"178\":2}}],[\"<title>baidu\",{\"1\":{\"438\":1}}],[\"<title>hello\",{\"1\":{\"416\":1}}],[\"<title>websocket\",{\"1\":{\"406\":1}}],[\"<tt>null<\",{\"1\":{\"66\":3,\"67\":3}}],[\"<tt>key<\",{\"1\":{\"66\":3,\"67\":3}}],[\"<tt>map<\",{\"1\":{\"64\":2}}],[\"<tt>hashmap<\",{\"1\":{\"64\":5}}],[\"<tt>true<\",{\"1\":{\"56\":1}}],[\"<t>\",{\"1\":{\"58\":2,\"220\":4,\"355\":1,\"624\":1}}],[\"<div>\",{\"1\":{\"616\":1,\"663\":1}}],[\"<div\",{\"1\":{\"406\":1,\"438\":1,\"507\":1,\"518\":1,\"520\":1}}],[\"<divider\",{\"1\":{\"22\":2,\"23\":2}}],[\"<datasource\",{\"1\":{\"175\":2,\"178\":2}}],[\"<description>聚合服务<\",{\"1\":{\"653\":1}}],[\"<descriptions\",{\"1\":{\"22\":10,\"23\":10}}],[\"<delete\",{\"1\":{\"189\":1,\"190\":1,\"674\":1}}],[\"<dependencymanagement>\",{\"1\":{\"657\":1}}],[\"<dependency>\",{\"1\":{\"18\":1,\"19\":1,\"27\":1,\"29\":4,\"175\":3,\"196\":2,\"224\":10,\"241\":4,\"245\":2,\"256\":1,\"269\":1,\"294\":2,\"303\":1,\"312\":6,\"313\":2,\"318\":3,\"319\":1,\"332\":1,\"339\":1,\"340\":1,\"395\":2,\"398\":3,\"405\":1,\"416\":5,\"429\":2,\"453\":2,\"512\":1,\"522\":1,\"524\":1,\"533\":2,\"551\":2,\"588\":1,\"589\":1,\"590\":1,\"591\":1,\"592\":1,\"593\":1,\"594\":1,\"599\":1,\"655\":7,\"657\":2,\"658\":1,\"659\":1,\"660\":1,\"661\":2,\"663\":1,\"665\":2,\"687\":1,\"690\":2,\"698\":3,\"704\":1,\"706\":1,\"726\":2,\"727\":1,\"728\":4,\"733\":2,\"770\":1,\"781\":1,\"817\":2}}],[\"<dependencies>\",{\"1\":{\"175\":1,\"224\":1,\"245\":1,\"269\":1,\"312\":1,\"318\":1,\"416\":1,\"657\":1,\"728\":1,\"733\":1}}],[\"<>接口不存在<\",{\"1\":{\"22\":1,\"23\":1}}],[\"<categoryentity>\",{\"1\":{\"670\":1}}],[\"<category\",{\"1\":{\"670\":1}}],[\"<card\",{\"1\":{\"22\":2,\"23\":2}}],[\"<card>\",{\"1\":{\"22\":1,\"23\":1}}],[\"<context\",{\"1\":{\"295\":1,\"299\":1}}],[\"<constructor\",{\"1\":{\"285\":1,\"286\":6}}],[\"<configuration>\",{\"1\":{\"175\":1,\"224\":1,\"245\":1,\"248\":1}}],[\"<choose><\",{\"1\":{\"186\":1}}],[\"<createmodal\",{\"1\":{\"14\":1}}],[\"<=或者lte\",{\"1\":{\"420\":1}}],[\"<=\",{\"1\":{\"21\":2,\"23\":1,\"26\":2,\"63\":1,\"64\":1,\"117\":2,\"211\":2,\"220\":2,\"560\":1,\"710\":1,\"732\":2,\"789\":1,\"796\":1,\"817\":1}}],[\"<optional>true<\",{\"1\":{\"18\":1,\"588\":1,\"589\":1,\"590\":1,\"690\":1}}],[\"<port>80<\",{\"1\":{\"224\":1,\"245\":1,\"248\":1}}],[\"<plugin>\",{\"1\":{\"224\":1,\"245\":1,\"248\":1}}],[\"<plugins>\",{\"1\":{\"224\":1,\"245\":1,\"248\":1}}],[\"<plusoutlined\",{\"1\":{\"14\":1}}],[\"<prop\",{\"1\":{\"293\":3}}],[\"<props>\",{\"1\":{\"293\":1}}],[\"<property\",{\"1\":{\"175\":8,\"178\":8,\"270\":1,\"282\":2,\"283\":2,\"287\":1,\"289\":1,\"290\":1,\"291\":1,\"292\":1,\"293\":1,\"294\":4,\"295\":4}}],[\"<protable\",{\"1\":{\"14\":2}}],[\"<protable<api\",{\"1\":{\"14\":1,\"616\":1}}],[\"<parent>\",{\"1\":{\"663\":1}}],[\"<packaging>pom<\",{\"1\":{\"653\":1}}],[\"<package\",{\"1\":{\"175\":1,\"176\":1,\"179\":1}}],[\"<pageheaderwrapper>\",{\"1\":{\"615\":1}}],[\"<pagecontainer\",{\"1\":{\"22\":2,\"23\":1}}],[\"<path>\",{\"1\":{\"224\":1,\"245\":1,\"248\":1}}],[\"<p>\",{\"1\":{\"165\":1,\"220\":3}}],[\"<p>a\",{\"1\":{\"81\":1}}],[\"<\",{\"1\":{\"14\":7,\"18\":1,\"19\":1,\"22\":21,\"23\":18,\"27\":2,\"29\":6,\"56\":2,\"58\":1,\"64\":1,\"71\":4,\"81\":6,\"83\":3,\"91\":6,\"92\":2,\"93\":6,\"95\":1,\"99\":1,\"100\":1,\"107\":2,\"108\":1,\"109\":2,\"110\":4,\"151\":3,\"175\":25,\"176\":4,\"178\":7,\"179\":4,\"180\":3,\"181\":3,\"182\":3,\"183\":1,\"184\":1,\"185\":9,\"186\":6,\"188\":2,\"189\":1,\"190\":2,\"191\":7,\"196\":7,\"207\":1,\"210\":1,\"224\":22,\"237\":1,\"241\":5,\"245\":8,\"248\":6,\"256\":1,\"269\":5,\"270\":6,\"278\":2,\"282\":1,\"283\":1,\"285\":1,\"286\":3,\"287\":3,\"289\":2,\"290\":2,\"291\":2,\"292\":2,\"293\":2,\"294\":4,\"295\":3,\"303\":1,\"312\":7,\"313\":2,\"318\":4,\"319\":1,\"332\":2,\"333\":1,\"339\":1,\"340\":1,\"347\":1,\"395\":4,\"398\":6,\"405\":1,\"406\":6,\"416\":15,\"417\":2,\"418\":22,\"419\":15,\"422\":2,\"429\":2,\"430\":2,\"431\":1,\"432\":1,\"438\":7,\"452\":1,\"453\":2,\"506\":2,\"507\":4,\"512\":2,\"518\":7,\"519\":3,\"520\":5,\"522\":1,\"524\":1,\"533\":2,\"534\":7,\"537\":1,\"538\":1,\"539\":1,\"551\":2,\"558\":2,\"562\":1,\"566\":5,\"575\":3,\"588\":1,\"589\":1,\"590\":1,\"591\":1,\"592\":1,\"593\":1,\"594\":1,\"599\":5,\"605\":2,\"608\":1,\"615\":1,\"616\":3,\"653\":1,\"655\":12,\"657\":5,\"658\":2,\"659\":1,\"660\":2,\"661\":2,\"663\":6,\"665\":2,\"670\":1,\"672\":1,\"674\":2,\"687\":1,\"690\":4,\"698\":7,\"704\":2,\"706\":1,\"710\":2,\"726\":2,\"727\":1,\"728\":5,\"731\":2,\"733\":3,\"763\":2,\"770\":1,\"781\":1,\"788\":1,\"817\":2}}],[\"<aparticlecontent>lambdaquery\",{\"1\":{\"733\":1}}],[\"<array>\",{\"1\":{\"289\":1}}],[\"<artifactid>lettuce\",{\"1\":{\"698\":1,\"817\":1}}],[\"<artifactid>lombok<\",{\"1\":{\"416\":1,\"429\":1,\"588\":1,\"655\":1}}],[\"<artifactid>elasticsearch\",{\"1\":{\"687\":1}}],[\"<artifactid>easyexcel<\",{\"1\":{\"429\":1,\"524\":1}}],[\"<artifactid>httpcore<\",{\"1\":{\"655\":1}}],[\"<artifactid>heima\",{\"1\":{\"319\":1,\"733\":1}}],[\"<artifactid>gulimall\",{\"1\":{\"655\":1,\"661\":1,\"663\":1}}],[\"<artifactid>gulimall<\",{\"1\":{\"653\":1}}],[\"<artifactid>gson<\",{\"1\":{\"512\":1}}],[\"<artifactid>redisson<\",{\"1\":{\"551\":1,\"704\":1,\"781\":1}}],[\"<artifactid>redisson\",{\"1\":{\"551\":1}}],[\"<artifactid>knife4j\",{\"1\":{\"522\":1,\"727\":1}}],[\"<artifactid>xstream<\",{\"1\":{\"453\":1}}],[\"<artifactid>commons\",{\"1\":{\"398\":1,\"416\":1,\"599\":1,\"655\":1}}],[\"<artifactid>minio<\",{\"1\":{\"318\":1}}],[\"<artifactid>mybatis\",{\"1\":{\"196\":2,\"224\":1,\"312\":1,\"593\":1,\"594\":1,\"655\":1}}],[\"<artifactid>mybatis<\",{\"1\":{\"175\":1,\"224\":1,\"312\":1}}],[\"<artifactid>mysql\",{\"1\":{\"175\":1,\"224\":1,\"294\":1,\"312\":1,\"591\":1,\"655\":1}}],[\"<artifactid>aspectjweaver<\",{\"1\":{\"770\":1}}],[\"<artifactid>activation<\",{\"1\":{\"241\":1}}],[\"<artifactid>aliyun\",{\"1\":{\"241\":1,\"665\":1}}],[\"<artifactid>tomcat7\",{\"1\":{\"224\":1,\"245\":1,\"248\":1}}],[\"<artifactid>jjwt<\",{\"1\":{\"728\":1}}],[\"<artifactid>junit\",{\"1\":{\"395\":1}}],[\"<artifactid>junit<\",{\"1\":{\"175\":1,\"224\":1,\"313\":1}}],[\"<artifactid>jedis<\",{\"1\":{\"395\":1,\"698\":1}}],[\"<artifactid>jaxb\",{\"1\":{\"241\":2}}],[\"<artifactid>jackson\",{\"1\":{\"224\":1,\"256\":1,\"339\":1,\"398\":1}}],[\"<artifactid>javax\",{\"1\":{\"224\":1,\"245\":1,\"303\":1,\"655\":1}}],[\"<artifactid>dom4j<\",{\"1\":{\"453\":1}}],[\"<artifactid>druid<\",{\"1\":{\"224\":1,\"294\":1,\"312\":1}}],[\"<artifactid>dubbo<\",{\"1\":{\"29\":2}}],[\"<artifactid>nacos\",{\"1\":{\"29\":2}}],[\"<artifactid>yunfeiapi\",{\"1\":{\"19\":1}}],[\"<artifactid>springfox\",{\"1\":{\"726\":2}}],[\"<artifactid>spring\",{\"1\":{\"18\":1,\"27\":1,\"224\":3,\"245\":1,\"269\":1,\"312\":2,\"313\":1,\"318\":2,\"332\":1,\"340\":1,\"398\":1,\"405\":1,\"416\":3,\"533\":2,\"589\":1,\"590\":1,\"592\":1,\"657\":2,\"658\":1,\"659\":1,\"660\":1,\"661\":1,\"663\":1,\"665\":1,\"690\":2,\"698\":2,\"706\":1,\"728\":3,\"733\":1,\"817\":1}}],[\"<a\",{\"1\":{\"14\":2,\"22\":2,\"418\":3,\"616\":2}}],[\">sms\",{\"1\":{\"675\":1}}],[\">联系我<\",{\"1\":{\"534\":1}}],[\">选择标签<\",{\"1\":{\"518\":1}}],[\">请选择标签<\",{\"1\":{\"518\":1}}],[\">已选标签<\",{\"1\":{\"518\":1}}],[\">个人<\",{\"1\":{\"507\":1,\"518\":1}}],[\">队伍<\",{\"1\":{\"507\":1,\"518\":1}}],[\">主页<\",{\"1\":{\"507\":1,\"518\":1}}],[\">考虑邮件发送方式\",{\"1\":{\"505\":1}}],[\">或者gt\",{\"1\":{\"420\":1}}],[\">遍历map中两个学生信息\",{\"1\":{\"418\":1}}],[\">方式二\",{\"1\":{\"418\":1}}],[\">方式一\",{\"1\":{\"418\":1}}],[\">ftl指令<\",{\"1\":{\"417\":1}}],[\">关闭连接<\",{\"1\":{\"406\":1}}],[\">发送消息<\",{\"1\":{\"406\":1}}],[\">kaifeng<\",{\"1\":{\"293\":1}}],[\">henan<\",{\"1\":{\"293\":1}}],[\">china<\",{\"1\":{\"293\":1}}],[\"><br\",{\"1\":{\"418\":1,\"420\":1}}],[\"><br>\",{\"1\":{\"237\":3}}],[\"><\",{\"1\":{\"186\":3,\"438\":2,\"663\":1,\"670\":1}}],[\">抢到了车位\",{\"1\":{\"109\":1}}],[\">>>=\",{\"1\":{\"820\":1}}],[\">>>\",{\"1\":{\"66\":3,\"72\":1,\"452\":1}}],[\">>\",{\"1\":{\"56\":2}}],[\">=或者gte\",{\"1\":{\"420\":1}}],[\">=\",{\"1\":{\"27\":1,\"66\":1,\"71\":2,\"558\":1,\"561\":1,\"574\":1}}],[\">查看<\",{\"1\":{\"22\":1}}],[\">\",{\"1\":{\"14\":12,\"22\":27,\"23\":21,\"27\":2,\"29\":2,\"54\":1,\"56\":3,\"58\":1,\"64\":1,\"66\":1,\"67\":1,\"71\":3,\"83\":1,\"87\":3,\"91\":8,\"92\":2,\"93\":3,\"95\":1,\"99\":1,\"100\":1,\"103\":2,\"104\":2,\"107\":2,\"108\":2,\"109\":1,\"110\":4,\"119\":2,\"120\":5,\"122\":3,\"124\":2,\"132\":2,\"142\":5,\"143\":32,\"151\":4,\"152\":3,\"153\":2,\"155\":5,\"156\":6,\"168\":5,\"170\":2,\"175\":30,\"176\":5,\"178\":17,\"179\":4,\"180\":4,\"181\":5,\"182\":3,\"183\":1,\"184\":1,\"185\":8,\"186\":5,\"188\":2,\"189\":1,\"190\":2,\"191\":6,\"196\":5,\"204\":1,\"207\":1,\"220\":1,\"224\":8,\"237\":2,\"241\":1,\"245\":2,\"248\":5,\"261\":2,\"269\":5,\"270\":9,\"272\":1,\"275\":1,\"276\":2,\"277\":2,\"278\":3,\"282\":6,\"283\":3,\"285\":2,\"286\":9,\"287\":6,\"289\":1,\"290\":1,\"291\":1,\"292\":4,\"293\":1,\"294\":6,\"295\":8,\"299\":2,\"301\":1,\"319\":1,\"332\":1,\"355\":2,\"395\":2,\"398\":3,\"406\":5,\"416\":5,\"417\":2,\"418\":15,\"419\":4,\"420\":5,\"422\":2,\"433\":1,\"438\":3,\"457\":1,\"506\":2,\"507\":6,\"512\":2,\"518\":8,\"519\":10,\"520\":5,\"534\":5,\"539\":1,\"549\":1,\"558\":5,\"559\":6,\"561\":2,\"562\":1,\"566\":3,\"574\":2,\"575\":5,\"599\":1,\"608\":1,\"609\":2,\"611\":1,\"612\":1,\"613\":1,\"616\":7,\"655\":2,\"658\":1,\"660\":1,\"661\":1,\"663\":7,\"666\":2,\"668\":1,\"670\":2,\"672\":1,\"673\":3,\"674\":5,\"675\":12,\"688\":4,\"690\":6,\"697\":5,\"698\":2,\"704\":1,\"710\":7,\"715\":2,\"716\":5,\"718\":3,\"720\":2,\"721\":5,\"731\":1,\"741\":1,\"756\":1,\"758\":1,\"763\":1,\"770\":3,\"788\":1,\"790\":1,\"796\":2,\"803\":1,\"805\":2,\"806\":1,\"807\":1,\"810\":1,\"817\":1}}],[\"操作包括三个参数\",{\"1\":{\"769\":1}}],[\"操作锁\",{\"1\":{\"755\":1}}],[\"操作数栈\",{\"1\":{\"694\":1}}],[\"操作总会将数据重新保存并增加\",{\"1\":{\"682\":1}}],[\"操作的字段建立索引\",{\"1\":{\"469\":1}}],[\"操作主要包含三个步骤\",{\"1\":{\"131\":1}}],[\"操作会比较内存位置的当前值和预期值\",{\"1\":{\"769\":1}}],[\"操作会对比源文档数据\",{\"1\":{\"682\":1}}],[\"操作会释放一个许可证\",{\"1\":{\"109\":1}}],[\"操作会消耗一个许可证\",{\"1\":{\"109\":1}}],[\"操作系统的进程管理\",{\"1\":{\"47\":1}}],[\"操作失败\",{\"1\":{\"22\":1,\"23\":1,\"769\":1}}],[\"操作\",{\"1\":{\"14\":1,\"369\":1,\"616\":1,\"819\":1}}],[\"状态码枚举\",{\"1\":{\"666\":1}}],[\"状态码\",{\"1\":{\"226\":1}}],[\"状态\",{\"1\":{\"14\":1,\"86\":1,\"508\":1,\"616\":1,\"801\":1}}],[\"jconsole和jvisualvm\",{\"0\":{\"695\":1}}],[\"jmeter设置\",{\"1\":{\"788\":1}}],[\"jmeter\",{\"1\":{\"692\":1}}],[\"jmeter官网\",{\"1\":{\"692\":1}}],[\"jmm会把该线程对应的本地内存设置为无效\",{\"1\":{\"160\":1}}],[\"jmm会把该线程对应的本地内存中的共享变量值立即刷新回主内存中\",{\"1\":{\"160\":1}}],[\"jmm在不影响程序执行结果的前提下对其不做要求\",{\"1\":{\"159\":1}}],[\"jmm的设计分为两部分\",{\"1\":{\"159\":1}}],[\"jmm的关键技术点都是围绕多线程的原子性\",{\"1\":{\"157\":1}}],[\"jmm规范三大特性\",{\"0\":{\"158\":1}}],[\"jmm可以通过happens\",{\"1\":{\"128\":1}}],[\"jmm\",{\"1\":{\"126\":2,\"157\":1,\"158\":1,\"159\":1}}],[\"jmm内存模型\",{\"0\":{\"126\":1}}],[\"j<\",{\"1\":{\"591\":1,\"655\":1}}],[\"jest\",{\"1\":{\"585\":1}}],[\"jedis=\",{\"1\":{\"396\":1}}],[\"jedispoolconfig\",{\"1\":{\"396\":2}}],[\"jedispool\",{\"1\":{\"396\":5}}],[\"jedisconnectionfactory\",{\"1\":{\"396\":2}}],[\"jedis本身是线程不安全的\",{\"1\":{\"396\":1}}],[\"jedis\",{\"1\":{\"395\":13,\"396\":5}}],[\"john\",{\"1\":{\"682\":6}}],[\"job\",{\"1\":{\"544\":1}}],[\"jointeam\",{\"1\":{\"561\":1,\"574\":1}}],[\"jointime\",{\"1\":{\"557\":2}}],[\"join或right\",{\"1\":{\"487\":1}}],[\"join等状态\",{\"1\":{\"155\":1}}],[\"join分支合并框架\",{\"0\":{\"117\":1}}],[\"join\",{\"0\":{\"87\":1},\"1\":{\"81\":6,\"84\":2,\"87\":4,\"117\":8,\"143\":4,\"487\":3,\"539\":1,\"561\":1,\"574\":1,\"675\":1,\"731\":1,\"805\":1,\"810\":1,\"817\":1}}],[\"j++\",{\"1\":{\"539\":1,\"566\":2}}],[\"jwt缺点\",{\"1\":{\"533\":1}}],[\"jjmc\",{\"1\":{\"352\":3}}],[\"jpg\",{\"1\":{\"319\":2,\"665\":4}}],[\"jane\",{\"1\":{\"682\":1}}],[\"jar\",{\"1\":{\"636\":2,\"640\":3,\"643\":2}}],[\"jaxb<\",{\"1\":{\"241\":1}}],[\"jackson依赖\",{\"1\":{\"398\":1}}],[\"jackson2jsonmessageconverter\",{\"1\":{\"339\":5,\"340\":2,\"352\":2}}],[\"jackson\",{\"1\":{\"224\":2,\"256\":1,\"339\":1,\"398\":1,\"512\":1,\"675\":1}}],[\"jacksontypehandler\",{\"1\":{\"217\":2}}],[\"jack\",{\"1\":{\"204\":2,\"780\":2,\"794\":1}}],[\"java高级\",{\"0\":{\"839\":1}}],[\"java基础\",{\"0\":{\"837\":1}}],[\"java核心技术\",{\"1\":{\"824\":2}}],[\"java项目的方式\",{\"1\":{\"586\":1}}],[\"java+spring+springmvc+mybati+mybatisplus+springboot+mysql\",{\"1\":{\"582\":1}}],[\"java+springboot框架\",{\"1\":{\"503\":1}}],[\"java实现锁\",{\"1\":{\"545\":1}}],[\"java内存缓存\",{\"1\":{\"543\":1}}],[\"java内存模型java\",{\"1\":{\"157\":1}}],[\"java内存模型之jmm\",{\"0\":{\"157\":1}}],[\"java内存模型\",{\"1\":{\"126\":1}}],[\"java8\",{\"1\":{\"512\":1,\"695\":1}}],[\"java地图基础api\",{\"0\":{\"436\":1}}],[\"javax\",{\"1\":{\"407\":6,\"539\":1,\"544\":1,\"551\":1,\"655\":2}}],[\"javascript\",{\"1\":{\"406\":1,\"438\":1,\"643\":3,\"646\":3}}],[\"javascript和jquery的区别\",{\"1\":{\"47\":1}}],[\"java9以上需要添加下面依赖\",{\"1\":{\"241\":1}}],[\"java代码\",{\"1\":{\"205\":1,\"207\":1}}],[\"java<\",{\"1\":{\"175\":1,\"224\":1,\"294\":1,\"312\":1}}],[\"java通过什么方式来保证代理的样子\",{\"1\":{\"165\":1}}],[\"java没有给中断增加任何语法\",{\"1\":{\"155\":1}}],[\"java提供了一种用于停止线程的协商机制一一中断\",{\"1\":{\"155\":1}}],[\"javap\",{\"1\":{\"147\":1}}],[\"java原子类中的递增操作就通过cas自旋实现的\",{\"1\":{\"145\":1}}],[\"javavm\",{\"1\":{\"140\":1}}],[\"java对应的源码就是thread\",{\"1\":{\"140\":1}}],[\"java开启一个线程的源码\",{\"1\":{\"140\":1}}],[\"java虚拟机则需将锁对象的计数器减1\",{\"1\":{\"152\":1}}],[\"java虚拟机会将该锁对象的持有线程设置为当前线程\",{\"1\":{\"152\":1}}],[\"java虚拟机\",{\"1\":{\"89\":1,\"694\":1}}],[\"java多版本切换\",{\"0\":{\"76\":1}}],[\"javadoc\",{\"1\":{\"63\":1}}],[\"java的hashmap是一种基于哈希表实现的数据结构\",{\"1\":{\"61\":1}}],[\"java的hashmap和linkedmap有什么区别\",{\"1\":{\"47\":1}}],[\"java会自动释放掉为该变量所分配的内存空间\",{\"1\":{\"50\":1}}],[\"java就在栈内存中为这个变量分配内存空间\",{\"1\":{\"50\":1}}],[\"java集合\",{\"0\":{\"50\":1,\"61\":1}}],[\"java中的\",{\"1\":{\"102\":2}}],[\"java中的通信机制\",{\"1\":{\"81\":1}}],[\"java中线程的开启\",{\"1\":{\"47\":1}}],[\"java中object对象转换为string的方法有两种\",{\"1\":{\"47\":1}}],[\"java中object对象转string的方法有几种\",{\"1\":{\"47\":1}}],[\"java怎么实现在学生表\",{\"1\":{\"47\":1}}],[\"java线程的五种状态包括新建\",{\"1\":{\"47\":1}}],[\"java线程的5种状态\",{\"1\":{\"47\":1}}],[\"java线程池的参数包括核心线程数\",{\"1\":{\"47\":1}}],[\"java线程池参数\",{\"1\":{\"47\":1}}],[\"java有哪些设计模式\",{\"1\":{\"47\":1}}],[\"java有八种基本数据类型\",{\"1\":{\"47\":1}}],[\"java有几种基本数据类型\",{\"1\":{\"47\":1}}],[\"java\",{\"0\":{\"838\":1,\"840\":1},\"1\":{\"7\":1,\"66\":1,\"76\":1,\"81\":1,\"91\":1,\"93\":3,\"98\":1,\"104\":1,\"108\":1,\"109\":1,\"110\":8,\"112\":5,\"114\":2,\"117\":5,\"140\":1,\"141\":1,\"142\":2,\"143\":1,\"151\":1,\"152\":3,\"155\":3,\"157\":1,\"158\":3,\"159\":1,\"165\":1,\"241\":1,\"286\":1,\"327\":3,\"407\":3,\"409\":2,\"416\":1,\"430\":6,\"500\":1,\"508\":1,\"510\":1,\"539\":3,\"543\":1,\"544\":2,\"551\":2,\"623\":1,\"636\":1,\"640\":3,\"643\":1,\"655\":1,\"665\":2,\"681\":1,\"694\":1,\"742\":1,\"758\":5},\"2\":{\"59\":1,\"60\":1,\"74\":1,\"75\":1,\"77\":1,\"78\":1,\"137\":1,\"138\":1,\"162\":1,\"163\":1,\"172\":1,\"173\":1,\"193\":1,\"194\":1,\"221\":1,\"222\":1,\"234\":1,\"235\":1,\"242\":1,\"243\":1,\"264\":1,\"265\":1,\"314\":1,\"315\":1,\"401\":1,\"402\":1,\"410\":1,\"411\":1,\"413\":1,\"414\":1,\"427\":1,\"428\":1,\"434\":1,\"435\":1,\"446\":1,\"447\":1,\"494\":1,\"495\":1}}],[\"jvisualvm在高版本的java\",{\"1\":{\"695\":1}}],[\"jva内存模型的重排规则会要求java编译器在生成jvm指令时插入特定的内存屏障指令\",{\"1\":{\"161\":1}}],[\"jvm内存模型中的其他重要概念包括\",{\"1\":{\"694\":1}}],[\"jvm内存模型\",{\"0\":{\"694\":1}}],[\"jvm规范中试图定义一种java内存模型\",{\"1\":{\"157\":1}}],[\"jvm\",{\"1\":{\"89\":2,\"140\":4,\"152\":1,\"694\":1}}],[\"jdbc配置类\",{\"1\":{\"224\":1}}],[\"jdbcconfig\",{\"1\":{\"224\":3,\"309\":4,\"310\":3,\"312\":3}}],[\"jdbc<\",{\"1\":{\"224\":1,\"312\":1}}],[\"jdbc\",{\"1\":{\"175\":6,\"178\":6,\"211\":2,\"224\":12,\"294\":2,\"295\":10,\"306\":1,\"309\":4,\"310\":4,\"312\":6,\"595\":2,\"655\":4}}],[\"jd\",{\"1\":{\"143\":2}}],[\"jdk\",{\"1\":{\"140\":1,\"643\":1}}],[\"jdk8+\",{\"1\":{\"525\":1}}],[\"jdk8\",{\"1\":{\"140\":1}}],[\"jdk1\",{\"1\":{\"70\":1}}],[\"jit线程就可以理解守护线程\",{\"1\":{\"89\":1}}],[\"juejin\",{\"1\":{\"821\":1}}],[\"jumped\",{\"1\":{\"687\":1}}],[\"jupiter\",{\"1\":{\"539\":2,\"551\":1}}],[\"jupiter<\",{\"1\":{\"395\":2}}],[\"junit4\",{\"1\":{\"655\":1}}],[\"junit\",{\"1\":{\"175\":1,\"395\":1,\"539\":2,\"551\":1,\"655\":2}}],[\"juc锁\",{\"1\":{\"702\":1}}],[\"juc\",{\"2\":{\"162\":1,\"163\":1}}],[\"juc强大的辅助类\",{\"0\":{\"106\":1}}],[\"juc是java\",{\"1\":{\"80\":1}}],[\"juc概述\",{\"0\":{\"80\":1}}],[\"juc并发编程与源码分析\",{\"0\":{\"139\":1}}],[\"juc并发编程\",{\"0\":{\"79\":1},\"2\":{\"137\":1,\"138\":1}}],[\"just\",{\"1\":{\"66\":1}}],[\"j\",{\"1\":{\"71\":7,\"539\":2,\"566\":11}}],[\"js中\",{\"1\":{\"675\":1}}],[\"jsr303分组校验\",{\"0\":{\"667\":1}}],[\"js文件\",{\"1\":{\"585\":1}}],[\"js\",{\"1\":{\"263\":2,\"675\":2,\"733\":5}}],[\"jsp\",{\"1\":{\"261\":1,\"415\":2}}],[\"jsp当字符串返回前端\",{\"1\":{\"261\":1}}],[\"jsp和servlet的区别\",{\"1\":{\"47\":1}}],[\"js是单线程的\",{\"1\":{\"47\":1}}],[\"jsonwebtoken<\",{\"1\":{\"728\":1}}],[\"jsonstring\",{\"1\":{\"687\":2,\"688\":2,\"698\":2,\"702\":2}}],[\"jsoninclude\",{\"1\":{\"670\":4}}],[\"json序列化库\",{\"1\":{\"512\":1}}],[\"jsonobject\",{\"1\":{\"457\":4,\"756\":1,\"758\":2}}],[\"jsonuser\",{\"1\":{\"400\":2}}],[\"jsonutil\",{\"1\":{\"16\":1,\"17\":1,\"457\":1,\"747\":4,\"751\":1,\"752\":2,\"755\":2,\"756\":3,\"758\":6}}],[\"json格式的数据\",{\"1\":{\"603\":1}}],[\"json格式化工具\",{\"1\":{\"400\":1}}],[\"json格式数据传输\",{\"0\":{\"255\":1}}],[\"json对象数组\",{\"0\":{\"258\":1}}],[\"json对象数据\",{\"0\":{\"257\":1}}],[\"json普通数组\",{\"0\":{\"256\":1}}],[\"json类型处理器\",{\"0\":{\"217\":1}}],[\"jsonvalue\",{\"1\":{\"216\":1}}],[\"json\",{\"1\":{\"16\":2,\"17\":3,\"256\":2,\"257\":2,\"258\":2,\"261\":2,\"397\":1,\"523\":1,\"532\":1,\"571\":1,\"585\":1,\"630\":1,\"643\":1,\"646\":1,\"664\":1,\"682\":1,\"687\":3,\"688\":2,\"690\":2,\"698\":2,\"702\":2,\"710\":1,\"733\":1,\"758\":5}}],[\"jsoncode\",{\"1\":{\"14\":3}}],[\"rpush\",{\"1\":{\"792\":1}}],[\"rpop\",{\"1\":{\"792\":1}}],[\"rpc向远程服务器发送请求时\",{\"1\":{\"28\":1}}],[\"rpc远程调用\",{\"1\":{\"28\":1}}],[\"rpc\",{\"1\":{\"28\":1,\"33\":1}}],[\"rsemaphore\",{\"1\":{\"704\":2}}],[\"rspargs\",{\"1\":{\"27\":2}}],[\"r<list<skuhasstockvo>>\",{\"1\":{\"688\":1}}],[\"r1\",{\"1\":{\"675\":2,\"758\":2}}],[\"ribbon\",{\"1\":{\"657\":1}}],[\"right>\",{\"1\":{\"506\":1,\"518\":1}}],[\"right=\",{\"1\":{\"506\":1,\"518\":1}}],[\"rightpop\",{\"1\":{\"400\":1}}],[\"right\",{\"1\":{\"56\":1,\"487\":1,\"506\":1,\"518\":1,\"534\":1}}],[\"rl2\",{\"1\":{\"665\":1}}],[\"rlock\",{\"1\":{\"551\":1,\"561\":1,\"573\":1,\"574\":1,\"704\":10,\"781\":2,\"790\":1}}],[\"rlist<string>\",{\"1\":{\"551\":1}}],[\"rlist\",{\"1\":{\"551\":1}}],[\"rreadwritelock\",{\"1\":{\"704\":2}}],[\"rr\",{\"1\":{\"476\":1}}],[\"rfz\",{\"1\":{\"665\":1}}],[\"rf\",{\"1\":{\"380\":1}}],[\"rmi\",{\"1\":{\"643\":1}}],[\"rm\",{\"1\":{\"380\":1}}],[\"rdbms\",{\"1\":{\"377\":1}}],[\"rdb原理\",{\"0\":{\"370\":1}}],[\"rdb\",{\"1\":{\"368\":1,\"370\":1}}],[\"rdb持久化\",{\"0\":{\"368\":1},\"1\":{\"367\":1}}],[\"rcountdownlatch\",{\"1\":{\"704\":2}}],[\"rc\",{\"1\":{\"319\":3,\"476\":1}}],[\"r\",{\"1\":{\"143\":1,\"317\":1,\"659\":7,\"660\":2,\"663\":4,\"665\":2,\"666\":7,\"667\":4,\"670\":4,\"672\":2,\"673\":2,\"674\":4,\"675\":10,\"688\":9,\"710\":4,\"758\":12,\"789\":3,\"790\":3,\"796\":3}}],[\"r>\",{\"1\":{\"143\":1,\"758\":2}}],[\"rwlock\",{\"1\":{\"110\":5}}],[\"race\",{\"1\":{\"766\":1}}],[\"raft\",{\"1\":{\"363\":1}}],[\"rabbitlistener\",{\"1\":{\"332\":1,\"333\":2,\"335\":2,\"336\":2,\"337\":2,\"338\":4,\"339\":1,\"340\":1,\"347\":1,\"355\":2}}],[\"rabbittemplate\",{\"1\":{\"332\":3,\"333\":1,\"335\":1,\"336\":1,\"337\":1,\"339\":1,\"340\":1,\"344\":6,\"347\":1,\"351\":6,\"355\":4}}],[\"rabbit\",{\"1\":{\"327\":1}}],[\"rabbitmq等等\",{\"1\":{\"791\":1}}],[\"rabbitmq的高可用机制有了解过嘛\",{\"0\":{\"363\":1}}],[\"rabbitmq的内存占用就会越来越高\",{\"1\":{\"347\":1}}],[\"rabbitmq中死信交换机\",{\"0\":{\"361\":1}}],[\"rabbitmq会重新投递消息\",{\"1\":{\"360\":1}}],[\"rabbitmq会重试投递消息\",{\"1\":{\"360\":1}}],[\"rabbitmq会将接收到的信息保存在内存中以降低消息收发的延迟\",{\"1\":{\"347\":1}}],[\"rabbitmq消息的重复消费问题如何解决\",{\"0\":{\"360\":1}}],[\"rabbitmq消息队列笔记\",{\"0\":{\"326\":1}}],[\"rabbitmq支持消费者确认机制\",{\"1\":{\"359\":1}}],[\"rabbitmq如何保证消息不丢失\",{\"0\":{\"359\":1}}],[\"rabbitmq面试题\",{\"0\":{\"358\":1}}],[\"rabbitmq需要再次投递消息\",{\"1\":{\"349\":1}}],[\"rabbitmq从队列中删除该消息\",{\"1\":{\"349\":2}}],[\"rabbitmq提供了消费者确认机制\",{\"1\":{\"349\":1}}],[\"rabbitmq提供了生产者消息确认机制\",{\"1\":{\"343\":1}}],[\"rabbitmq高级\",{\"0\":{\"340\":1}}],[\"rabbitmq基础\",{\"0\":{\"327\":1}}],[\"rabbitmq\",{\"1\":{\"326\":1,\"327\":1,\"328\":4,\"332\":1,\"333\":1,\"340\":1,\"342\":1,\"344\":1,\"348\":1,\"349\":5,\"350\":1,\"351\":1,\"354\":1,\"355\":4,\"361\":1,\"363\":1},\"2\":{\"356\":1,\"357\":1,\"364\":1,\"365\":1}}],[\"rawtypes\",{\"1\":{\"71\":1}}],[\"rangequery\",{\"1\":{\"710\":6}}],[\"rangequerybuilder\",{\"1\":{\"710\":1}}],[\"range子句过滤skuprice在0到6500之间的商品\",{\"1\":{\"710\":1}}],[\"range为5\",{\"1\":{\"665\":1}}],[\"range\",{\"1\":{\"400\":2,\"486\":3,\"665\":1,\"685\":1,\"710\":1,\"805\":1}}],[\"rangecheckforadd\",{\"1\":{\"56\":1}}],[\"randomstring\",{\"1\":{\"738\":1,\"788\":1}}],[\"randomnumber\",{\"1\":{\"143\":1}}],[\"randomnumbers\",{\"1\":{\"17\":1,\"22\":2,\"738\":1,\"741\":1,\"788\":1}}],[\"randomuuid\",{\"1\":{\"100\":1,\"239\":1,\"241\":1,\"344\":1,\"698\":1,\"703\":2,\"704\":1,\"741\":1,\"778\":1,\"788\":1}}],[\"randomutil\",{\"1\":{\"17\":1,\"22\":2,\"738\":2,\"741\":1,\"788\":2}}],[\"random\",{\"1\":{\"99\":1,\"143\":1,\"406\":1}}],[\"ro\",{\"1\":{\"819\":1}}],[\"rose\",{\"1\":{\"780\":3}}],[\"road\",{\"1\":{\"685\":4}}],[\"rollbackfor\",{\"1\":{\"558\":1,\"562\":1}}],[\"role\",{\"1\":{\"323\":1,\"608\":1}}],[\"roles\",{\"1\":{\"323\":1}}],[\"round\",{\"1\":{\"520\":1}}],[\"routing\",{\"1\":{\"336\":1,\"355\":2}}],[\"route>\",{\"1\":{\"518\":1}}],[\"router\",{\"1\":{\"516\":1,\"517\":5,\"519\":3,\"520\":1,\"531\":1}}],[\"route\",{\"1\":{\"27\":2,\"520\":5,\"531\":2,\"661\":2,\"663\":5,\"665\":1,\"710\":2,\"721\":1}}],[\"routes`\",{\"1\":{\"517\":1}}],[\"routes\",{\"1\":{\"27\":2,\"517\":2,\"612\":1,\"615\":1,\"661\":1,\"663\":1,\"728\":1}}],[\"rocketmq\",{\"1\":{\"327\":1}}],[\"root\",{\"1\":{\"175\":2,\"178\":2,\"211\":1,\"294\":2,\"309\":4,\"310\":3,\"317\":4,\"323\":1,\"453\":2,\"595\":1,\"639\":1,\"643\":2,\"646\":1,\"651\":3,\"655\":2,\"663\":2,\"691\":3,\"697\":1}}],[\"row>\",{\"1\":{\"518\":1}}],[\"rows\",{\"1\":{\"486\":1}}],[\"rowselection=\",{\"1\":{\"14\":1}}],[\"row\",{\"1\":{\"110\":1,\"518\":1,\"764\":3,\"801\":2,\"806\":1}}],[\"rowkey=\",{\"1\":{\"14\":1,\"616\":1}}],[\"runwith\",{\"1\":{\"224\":1,\"313\":1,\"423\":1,\"655\":2}}],[\"runafterbothasync\",{\"1\":{\"122\":2,\"718\":2}}],[\"runafterboth\",{\"1\":{\"122\":2,\"718\":2}}],[\"runasync没有返回值\",{\"1\":{\"119\":1,\"715\":1}}],[\"runasync\",{\"1\":{\"119\":4,\"143\":2,\"539\":1,\"715\":4,\"721\":1}}],[\"runtime<\",{\"1\":{\"241\":1}}],[\"runtime\",{\"1\":{\"58\":1,\"140\":1,\"668\":1}}],[\"runtimeexceptionhandler\",{\"1\":{\"628\":1}}],[\"runtimeexception\",{\"1\":{\"17\":1,\"87\":1,\"88\":1,\"89\":2,\"104\":2,\"110\":2,\"143\":3,\"208\":2,\"210\":2,\"230\":2,\"319\":2,\"453\":1,\"544\":1,\"551\":2,\"573\":2,\"607\":3,\"627\":1,\"628\":3,\"704\":3,\"710\":1,\"755\":1,\"756\":1,\"758\":1,\"788\":1,\"801\":1}}],[\"runner\",{\"1\":{\"655\":1}}],[\"running\",{\"1\":{\"47\":1,\"86\":1,\"142\":2,\"143\":3,\"155\":3}}],[\"runnable01\",{\"1\":{\"712\":6}}],[\"runnablefuture\",{\"1\":{\"142\":2}}],[\"runnable\",{\"1\":{\"47\":1,\"81\":3,\"83\":2,\"89\":1,\"105\":1,\"108\":1,\"119\":4,\"121\":3,\"122\":3,\"142\":9,\"143\":2,\"712\":1,\"715\":4,\"717\":3,\"718\":3,\"763\":1,\"790\":1,\"796\":1}}],[\"run\",{\"1\":{\"44\":1,\"83\":3,\"88\":2,\"89\":1,\"143\":1,\"317\":2,\"323\":1,\"328\":1,\"426\":2,\"635\":2,\"642\":1,\"643\":5,\"646\":1,\"651\":1,\"652\":1,\"655\":1,\"658\":1,\"659\":1,\"661\":1,\"681\":2,\"706\":1,\"712\":2,\"770\":1,\"790\":1,\"796\":1}}],[\"rulelistitem\",{\"1\":{\"14\":1}}],[\"rules\",{\"1\":{\"14\":1,\"764\":1}}],[\"rebuild\",{\"1\":{\"756\":2,\"758\":2}}],[\"reindex\",{\"1\":{\"686\":1}}],[\"reverserangebyscorewithscores\",{\"1\":{\"810\":1}}],[\"reverse\",{\"1\":{\"670\":1}}],[\"regexutils\",{\"1\":{\"738\":2,\"741\":2}}],[\"regexp\",{\"1\":{\"666\":1,\"667\":1}}],[\"region=北京\",{\"1\":{\"444\":1}}],[\"registercorsconfiguration\",{\"1\":{\"663\":1}}],[\"registerparams\",{\"1\":{\"612\":1}}],[\"register发现会重定向到login\",{\"1\":{\"612\":1}}],[\"registershutdownhook\",{\"1\":{\"278\":1}}],[\"register\",{\"1\":{\"245\":3,\"607\":1,\"612\":4}}],[\"registry\",{\"1\":{\"29\":4,\"232\":7,\"233\":3,\"263\":5,\"663\":2,\"739\":2,\"742\":3}}],[\"ren\",{\"1\":{\"663\":1}}],[\"renren\",{\"1\":{\"655\":3,\"663\":6}}],[\"renrenio\",{\"1\":{\"655\":3}}],[\"renderoptions\",{\"1\":{\"440\":1}}],[\"renderitem=\",{\"1\":{\"22\":1}}],[\"render\",{\"1\":{\"14\":1,\"616\":2}}],[\"rewritepath=\",{\"1\":{\"663\":3,\"665\":1}}],[\"rewrite\",{\"1\":{\"372\":2}}],[\"rewritebatchedstatements=true\",{\"1\":{\"211\":1}}],[\"reject或basic\",{\"1\":{\"361\":1}}],[\"rejectanddontrequeuerecoverer\",{\"1\":{\"351\":1}}],[\"reject\",{\"1\":{\"349\":1,\"350\":1,\"354\":1,\"532\":2}}],[\"rejected\",{\"1\":{\"241\":1,\"665\":2}}],[\"rejectedexecutionhandler\",{\"1\":{\"115\":2,\"713\":2}}],[\"retention\",{\"1\":{\"668\":1}}],[\"retry\",{\"1\":{\"342\":1,\"350\":1,\"351\":1}}],[\"returnscallback\",{\"1\":{\"344\":1}}],[\"returns\",{\"1\":{\"344\":1}}],[\"return机制\",{\"1\":{\"343\":1,\"344\":1}}],[\"return返回异常信息\",{\"1\":{\"343\":1}}],[\"return两种\",{\"1\":{\"343\":1}}],[\"returntype\",{\"1\":{\"170\":1}}],[\"returnedmessage\",{\"1\":{\"344\":2}}],[\"returned\",{\"1\":{\"54\":1,\"344\":6}}],[\"return\",{\"1\":{\"14\":11,\"16\":6,\"17\":3,\"18\":1,\"21\":4,\"22\":6,\"23\":5,\"26\":1,\"27\":17,\"29\":2,\"56\":3,\"58\":3,\"66\":7,\"67\":6,\"71\":2,\"72\":1,\"83\":1,\"96\":1,\"98\":1,\"105\":1,\"117\":1,\"119\":1,\"120\":8,\"121\":9,\"122\":9,\"142\":7,\"143\":20,\"165\":3,\"208\":2,\"209\":2,\"211\":1,\"214\":4,\"219\":1,\"220\":18,\"224\":18,\"229\":1,\"230\":5,\"232\":4,\"233\":1,\"239\":1,\"241\":2,\"245\":10,\"247\":4,\"248\":6,\"250\":2,\"251\":1,\"252\":1,\"253\":1,\"254\":2,\"256\":1,\"257\":1,\"258\":1,\"259\":4,\"261\":4,\"262\":13,\"275\":1,\"276\":1,\"277\":2,\"309\":2,\"310\":3,\"312\":3,\"319\":12,\"338\":12,\"339\":1,\"340\":1,\"347\":1,\"351\":8,\"352\":2,\"355\":9,\"359\":2,\"396\":1,\"399\":1,\"408\":1,\"416\":1,\"418\":1,\"423\":1,\"430\":11,\"451\":2,\"452\":7,\"453\":5,\"454\":1,\"455\":1,\"457\":3,\"491\":1,\"493\":2,\"512\":8,\"518\":3,\"522\":1,\"531\":1,\"532\":6,\"534\":1,\"540\":1,\"544\":2,\"551\":1,\"558\":1,\"559\":2,\"560\":1,\"561\":1,\"562\":2,\"564\":1,\"565\":1,\"566\":3,\"574\":1,\"575\":3,\"599\":10,\"605\":7,\"607\":2,\"608\":9,\"612\":4,\"613\":6,\"615\":2,\"616\":5,\"620\":4,\"624\":4,\"625\":3,\"627\":2,\"628\":2,\"630\":4,\"659\":2,\"660\":1,\"663\":12,\"664\":2,\"665\":1,\"666\":6,\"667\":2,\"668\":1,\"670\":6,\"671\":1,\"672\":1,\"673\":4,\"674\":4,\"675\":10,\"687\":1,\"688\":9,\"690\":6,\"696\":1,\"697\":6,\"698\":2,\"702\":2,\"703\":12,\"704\":9,\"706\":2,\"710\":5,\"712\":1,\"715\":1,\"716\":8,\"717\":9,\"718\":9,\"721\":3,\"725\":4,\"726\":2,\"727\":2,\"728\":7,\"732\":4,\"738\":6,\"739\":2,\"740\":2,\"741\":5,\"742\":5,\"747\":9,\"751\":6,\"752\":4,\"755\":7,\"756\":3,\"758\":12,\"763\":1,\"764\":2,\"765\":6,\"769\":1,\"770\":9,\"777\":5,\"778\":1,\"780\":3,\"781\":1,\"782\":4,\"788\":1,\"789\":5,\"790\":5,\"796\":5,\"801\":2,\"802\":3,\"803\":4,\"804\":1,\"805\":6,\"806\":4,\"807\":5,\"809\":2,\"810\":3,\"817\":6,\"819\":2,\"820\":4}}],[\"repeatedwrite\",{\"1\":{\"431\":1}}],[\"republishmessagerecoverer\",{\"1\":{\"351\":5}}],[\"repository\",{\"1\":{\"299\":1,\"302\":1,\"303\":1,\"304\":2,\"307\":2}}],[\"reponsebody\",{\"1\":{\"262\":1}}],[\"replaced\",{\"1\":{\"66\":1}}],[\"replace\",{\"1\":{\"54\":1,\"319\":2,\"630\":1,\"710\":4}}],[\"refund\",{\"1\":{\"764\":1}}],[\"refreshtokeninterceptor\",{\"1\":{\"742\":4}}],[\"refreshscope\",{\"1\":{\"660\":1}}],[\"referer\",{\"1\":{\"523\":1}}],[\"reference\",{\"1\":{\"240\":1,\"661\":1,\"665\":1}}],[\"ref\",{\"1\":{\"486\":6,\"507\":1,\"518\":4,\"520\":2}}],[\"ref是指向spring的ioc容器中的另一个bean对象的\",{\"1\":{\"283\":1}}],[\"ref=\",{\"1\":{\"270\":2,\"282\":3,\"285\":1,\"287\":1,\"670\":1}}],[\"ref属性表示参照哪一个bean\",{\"1\":{\"270\":1}}],[\"refid=\",{\"1\":{\"180\":1}}],[\"remainbalance\",{\"1\":{\"210\":3}}],[\"removing\",{\"1\":{\"67\":1}}],[\"removeuser\",{\"1\":{\"740\":1,\"742\":1}}],[\"removeattribute\",{\"1\":{\"620\":1}}],[\"removenextdelay\",{\"1\":{\"355\":2}}],[\"removenode\",{\"1\":{\"67\":3}}],[\"removeobject\",{\"1\":{\"319\":1}}],[\"removeobjectargs\",{\"1\":{\"319\":4}}],[\"removebyid\",{\"1\":{\"208\":2,\"215\":1,\"562\":1,\"608\":1}}],[\"removetreenode\",{\"1\":{\"67\":1}}],[\"remove\",{\"1\":{\"67\":6,\"112\":4,\"208\":1,\"319\":1,\"355\":1,\"400\":2,\"407\":1,\"562\":1,\"585\":1,\"740\":1,\"803\":1,\"804\":1,\"806\":1,\"807\":2}}],[\"removed\",{\"1\":{\"67\":1}}],[\"removes\",{\"1\":{\"67\":1}}],[\"recently\",{\"1\":{\"749\":1}}],[\"receivemessage\",{\"1\":{\"453\":1}}],[\"receiving\",{\"1\":{\"453\":1}}],[\"recommenduser\",{\"1\":{\"534\":1,\"540\":1,\"544\":1}}],[\"recommend\",{\"1\":{\"534\":1,\"540\":1,\"544\":5,\"551\":1,\"573\":1}}],[\"records\",{\"1\":{\"14\":1,\"22\":1,\"219\":2,\"220\":11,\"803\":3}}],[\"record<string\",{\"1\":{\"14\":2}}],[\"record\",{\"1\":{\"14\":7,\"616\":6,\"796\":6}}],[\"recursiveaction\",{\"1\":{\"117\":4}}],[\"recursivetask<integer>\",{\"1\":{\"117\":1}}],[\"recursivetask<v>\",{\"1\":{\"117\":1}}],[\"recursivetask\",{\"1\":{\"117\":4}}],[\"reentrantreadwritelock\",{\"1\":{\"110\":2,\"111\":4}}],[\"reentrantreadwritelock读写锁\",{\"0\":{\"110\":1}}],[\"reentrantlock实现了lock接口\",{\"1\":{\"135\":1}}],[\"reentrantlock\",{\"1\":{\"91\":17,\"93\":2,\"102\":6,\"103\":2,\"135\":1,\"151\":6,\"152\":2,\"156\":1}}],[\"reentrantlock锁实现\",{\"1\":{\"91\":1}}],[\"reenter\",{\"1\":{\"81\":1}}],[\"reload\",{\"1\":{\"616\":1,\"639\":2,\"646\":1,\"771\":1}}],[\"rel=\",{\"1\":{\"616\":1}}],[\"relationbrandslist\",{\"1\":{\"675\":1}}],[\"relationdao\",{\"1\":{\"673\":6,\"674\":2}}],[\"relationentity\",{\"1\":{\"672\":4,\"673\":9}}],[\"relation\",{\"1\":{\"670\":1,\"672\":2,\"674\":3}}],[\"relational\",{\"1\":{\"368\":1}}],[\"relativepath>\",{\"1\":{\"663\":1}}],[\"related\",{\"1\":{\"66\":1,\"67\":1}}],[\"releases\",{\"1\":{\"355\":1,\"687\":1}}],[\"release<\",{\"1\":{\"224\":3,\"245\":1,\"269\":1,\"312\":2,\"313\":1,\"657\":1,\"663\":1,\"665\":1,\"817\":1}}],[\"released\",{\"1\":{\"156\":2}}],[\"release\",{\"1\":{\"27\":1,\"109\":3,\"136\":1,\"643\":1,\"704\":1}}],[\"rehash\",{\"1\":{\"63\":1}}],[\"redxis中保存的值是\",{\"1\":{\"698\":1}}],[\"reduction\",{\"1\":{\"675\":1}}],[\"reduce\",{\"1\":{\"66\":1}}],[\"redo\",{\"1\":{\"475\":5}}],[\"redo日志\",{\"1\":{\"47\":1}}],[\"red\",{\"1\":{\"336\":1,\"338\":4,\"344\":1,\"419\":1,\"710\":2}}],[\"redisgeocommands\",{\"1\":{\"816\":1,\"817\":1}}],[\"redis还是力不从心\",{\"1\":{\"816\":1}}],[\"redis在3\",{\"1\":{\"815\":1}}],[\"redis会自动生成id\",{\"1\":{\"794\":1}}],[\"redis优化秒杀\",{\"0\":{\"789\":1}}],[\"redis分布式锁误删\",{\"0\":{\"778\":1}}],[\"redis作为分布式锁是非常常见的一种使用方式\",{\"1\":{\"775\":1}}],[\"redisidworker\",{\"1\":{\"763\":5,\"765\":3,\"770\":2,\"789\":1,\"790\":1,\"796\":1}}],[\"redisdata\",{\"1\":{\"756\":12,\"758\":11}}],[\"redisdemoapplicationtests\",{\"1\":{\"399\":1}}],[\"redisproperties\",{\"1\":{\"706\":7}}],[\"rediscacheconfiguration\",{\"1\":{\"706\":4}}],[\"redisconstants\",{\"1\":{\"751\":1,\"752\":2,\"755\":2,\"756\":1,\"758\":5,\"817\":1}}],[\"redisconnectionfactory\",{\"1\":{\"399\":3}}],[\"redisconfigurationtest\",{\"1\":{\"400\":1}}],[\"redisconfig\",{\"1\":{\"399\":1}}],[\"redisaddress\",{\"1\":{\"551\":2}}],[\"redission提出来了mutilock锁\",{\"1\":{\"783\":1}}],[\"redission锁的mutilock原理\",{\"0\":{\"783\":1}}],[\"redission锁重试机制\",{\"1\":{\"782\":1}}],[\"redission通过redisson客户端与redis服务器进行交互\",{\"1\":{\"782\":1}}],[\"redission的锁重试机制是通过org\",{\"1\":{\"782\":1}}],[\"redission可重入锁原理\",{\"0\":{\"782\":1}}],[\"redissionclient\",{\"1\":{\"781\":1}}],[\"redisserializationcontext\",{\"1\":{\"706\":2}}],[\"redisserializer\",{\"1\":{\"399\":2}}],[\"redisson等一些分布式锁实现库使用了看门狗机制来支持锁的续租\",{\"1\":{\"782\":1}}],[\"redisson提供了重试机制来处理获取分布式锁时的竞争条件\",{\"1\":{\"782\":1}}],[\"redisson是一个在redis的基础上实现的java驻内存数据网格\",{\"1\":{\"781\":1}}],[\"redisson有看门狗机制\",{\"1\":{\"704\":1}}],[\"redisson中提供的续期机制\",{\"1\":{\"551\":1}}],[\"redissontest\",{\"1\":{\"551\":1}}],[\"redissonconfig\",{\"1\":{\"551\":1,\"781\":1}}],[\"redissonclient\",{\"1\":{\"551\":11,\"561\":1,\"573\":3,\"574\":1,\"704\":9,\"781\":5,\"790\":1}}],[\"redisson配置类\",{\"1\":{\"551\":1}}],[\"redissonredlock类中的trylockinner方法实现的\",{\"1\":{\"782\":1}}],[\"redissonreactiveclient\",{\"1\":{\"551\":1}}],[\"redissonrxclient\",{\"1\":{\"551\":1}}],[\"redisson\",{\"0\":{\"704\":1},\"1\":{\"551\":11,\"574\":1,\"703\":1,\"704\":4,\"781\":1,\"782\":1}}],[\"redisson<\",{\"1\":{\"551\":2,\"704\":1,\"781\":1}}],[\"redisson实现分布式锁\",{\"0\":{\"550\":1}}],[\"redis+lua脚本实现\",{\"1\":{\"549\":1}}],[\"redis实现\",{\"1\":{\"548\":1}}],[\"rediskey1\",{\"1\":{\"551\":2,\"573\":2}}],[\"rediskey\",{\"1\":{\"544\":3,\"551\":2,\"573\":2}}],[\"rediskey=string\",{\"1\":{\"544\":2}}],[\"redis缓存首页高频访问用户\",{\"0\":{\"572\":1}}],[\"redis缓存预热\",{\"0\":{\"544\":1}}],[\"redis缓存\",{\"0\":{\"698\":1},\"1\":{\"500\":1,\"503\":1}}],[\"redis缓存消息持久化有没有了解\",{\"1\":{\"47\":1}}],[\"redistemplate<>\",{\"1\":{\"399\":1}}],[\"redistemplate<string\",{\"1\":{\"399\":2,\"544\":1,\"573\":1}}],[\"redistemplate\",{\"1\":{\"399\":7,\"400\":11,\"544\":4,\"551\":1,\"573\":2}}],[\"redistemplate可以接收任意object作为值写入redis\",{\"1\":{\"398\":1}}],[\"redis<\",{\"1\":{\"398\":1,\"533\":2,\"698\":2,\"817\":1}}],[\"redis依赖\",{\"1\":{\"398\":1}}],[\"redis的list数据结构是一个双向链表\",{\"1\":{\"792\":1}}],[\"redis的value中\",{\"1\":{\"756\":1}}],[\"redis的java客户端jedis\",{\"0\":{\"394\":1}}],[\"redis的sortedset是一个可排序的set集合\",{\"1\":{\"391\":1}}],[\"redis的set结构与java中的hashset类似\",{\"1\":{\"389\":1}}],[\"redis的持久化方式\",{\"1\":{\"47\":1}}],[\"redis是键值对结构\",{\"1\":{\"382\":1}}],[\"redis是一种键值型的nosql数据库\",{\"1\":{\"377\":1}}],[\"redis中是利用string类型数据结构实现bitmap\",{\"1\":{\"819\":1}}],[\"redis中数据\",{\"1\":{\"756\":1}}],[\"redis中的hll是基于string结构实现的\",{\"1\":{\"821\":1}}],[\"redis中的geo\",{\"1\":{\"816\":1}}],[\"redis中的list类型与java中的linkedlist类似\",{\"1\":{\"387\":1}}],[\"redis中的数据结构\",{\"0\":{\"382\":1}}],[\"redis中存储的数据都是以key\",{\"1\":{\"377\":1}}],[\"redis介绍\",{\"0\":{\"377\":1}}],[\"redis\",{\"1\":{\"373\":3,\"377\":1,\"378\":8,\"379\":5,\"381\":1,\"397\":1,\"398\":1,\"533\":4,\"543\":1,\"544\":5,\"545\":1,\"551\":3,\"571\":1,\"572\":2,\"652\":15,\"698\":1,\"702\":1,\"703\":2,\"706\":4,\"749\":4,\"756\":1,\"758\":1,\"775\":1,\"780\":6,\"781\":1,\"782\":8,\"789\":4,\"796\":5},\"2\":{\"374\":1,\"375\":1,\"401\":1,\"402\":1}}],[\"redis主从集群\",{\"0\":{\"373\":1}}],[\"redis停机时\",{\"1\":{\"369\":1}}],[\"redis持久化有两种方案\",{\"1\":{\"367\":1}}],[\"redis持久化\",{\"0\":{\"367\":1}}],[\"redis内存优化\",{\"1\":{\"47\":1}}],[\"redislimithandler\",{\"1\":{\"27\":1}}],[\"redirect\",{\"1\":{\"14\":1,\"612\":1,\"630\":1,\"691\":1}}],[\"real\",{\"1\":{\"635\":1}}],[\"reason\",{\"1\":{\"241\":1,\"665\":2}}],[\"reasonably\",{\"1\":{\"66\":1}}],[\"readoffset\",{\"1\":{\"796\":2}}],[\"ready\",{\"1\":{\"681\":1}}],[\"readme\",{\"1\":{\"657\":1}}],[\"readlistener<ikun>\",{\"1\":{\"525\":1}}],[\"readlock\",{\"1\":{\"111\":7,\"704\":1}}],[\"readview解决的是一个事务查询选择版本的问题\",{\"1\":{\"476\":1}}],[\"readview\",{\"1\":{\"476\":1}}],[\"readvalue\",{\"1\":{\"400\":1,\"704\":1}}],[\"reader\",{\"1\":{\"453\":2}}],[\"readuserhomefile\",{\"1\":{\"430\":1}}],[\"readfile\",{\"1\":{\"430\":1}}],[\"readwriteanydatabase\",{\"1\":{\"323\":1}}],[\"readwritelock\",{\"1\":{\"110\":2}}],[\"readpath\",{\"1\":{\"319\":2,\"733\":1}}],[\"read\",{\"1\":{\"27\":1,\"319\":1,\"433\":1,\"453\":1,\"525\":1,\"526\":1,\"704\":1,\"750\":1,\"796\":2}}],[\"readablebytecount\",{\"1\":{\"27\":1}}],[\"react版zent\",{\"1\":{\"502\":1}}],[\"reactor\",{\"1\":{\"27\":1}}],[\"reacttext\",{\"1\":{\"14\":1}}],[\"react\",{\"1\":{\"7\":1,\"14\":3,\"22\":2,\"23\":1,\"615\":1,\"616\":1}}],[\"requesconfig是一个配置\",{\"1\":{\"610\":1}}],[\"requestoptions\",{\"1\":{\"687\":3}}],[\"request<record<string\",{\"1\":{\"620\":1}}],[\"request<api\",{\"1\":{\"616\":1}}],[\"requesthandlerselectors\",{\"1\":{\"522\":2,\"726\":1,\"727\":2}}],[\"requestheader\",{\"1\":{\"9\":1,\"14\":1,\"22\":1,\"23\":1}}],[\"requestmethod\",{\"1\":{\"262\":3}}],[\"requestmapping的value属性\",{\"1\":{\"262\":1}}],[\"requestmapping\",{\"1\":{\"16\":1,\"208\":1,\"224\":1,\"245\":1,\"247\":6,\"248\":2,\"250\":2,\"251\":1,\"252\":1,\"253\":1,\"254\":2,\"256\":1,\"257\":1,\"258\":1,\"259\":4,\"261\":4,\"262\":9,\"451\":1,\"607\":1,\"659\":6,\"660\":3,\"663\":2,\"665\":1,\"666\":1,\"667\":2,\"670\":1,\"673\":1,\"675\":2,\"688\":1,\"806\":1}}],[\"requestpaam\",{\"1\":{\"250\":1}}],[\"requestparam注解映射到对应名称的集合对象中作为数据\",{\"1\":{\"254\":2}}],[\"requestparam注解\",{\"1\":{\"250\":1,\"254\":1}}],[\"requestparam\",{\"1\":{\"16\":1,\"208\":1,\"214\":1,\"254\":1,\"531\":1,\"670\":1,\"672\":1,\"674\":1,\"675\":2,\"801\":1,\"810\":2,\"817\":4}}],[\"requestparams\",{\"1\":{\"14\":1,\"22\":1,\"23\":1}}],[\"requested\",{\"1\":{\"56\":1}}],[\"requestbody注解将外部传递的json数组数据映射到形参的集合对象中作为数据\",{\"1\":{\"256\":1}}],[\"requestbody\",{\"1\":{\"16\":1,\"17\":1,\"21\":2,\"23\":1,\"208\":1,\"224\":2,\"256\":2,\"257\":1,\"258\":1,\"262\":4,\"607\":2,\"663\":1,\"666\":1,\"667\":2,\"673\":1,\"674\":1,\"675\":1,\"688\":1,\"704\":1,\"751\":1,\"764\":1,\"801\":1}}],[\"request=\",{\"1\":{\"14\":1,\"616\":1}}],[\"requestconfig\",{\"1\":{\"14\":2}}],[\"requestlibpath\",{\"1\":{\"14\":1}}],[\"request\",{\"1\":{\"7\":1,\"14\":1,\"16\":3,\"17\":6,\"21\":4,\"23\":3,\"27\":11,\"232\":8,\"233\":3,\"238\":1,\"241\":2,\"453\":4,\"532\":6,\"534\":1,\"540\":1,\"544\":2,\"564\":2,\"565\":2,\"605\":5,\"607\":2,\"608\":6,\"610\":1,\"613\":2,\"620\":5,\"630\":9,\"635\":1,\"665\":4,\"710\":2,\"728\":4,\"739\":2,\"742\":4}}],[\"requirespermissions\",{\"1\":{\"663\":1,\"666\":1,\"667\":2,\"670\":2,\"672\":1,\"673\":1,\"675\":2}}],[\"requirepass\",{\"1\":{\"379\":1}}],[\"requiredargsconstructor\",{\"1\":{\"208\":1,\"355\":1}}],[\"required\",{\"1\":{\"14\":1,\"531\":1,\"817\":2}}],[\"respmap\",{\"1\":{\"665\":10}}],[\"responseresult\",{\"1\":{\"725\":5,\"732\":4}}],[\"responsebody注解和\",{\"1\":{\"261\":1}}],[\"responsebody\",{\"1\":{\"245\":1,\"247\":4,\"248\":2,\"250\":2,\"251\":1,\"252\":1,\"253\":1,\"254\":2,\"256\":1,\"257\":1,\"258\":1,\"259\":4,\"261\":5,\"262\":8,\"690\":1,\"704\":7}}],[\"response\",{\"1\":{\"27\":14,\"232\":7,\"233\":3,\"241\":1,\"261\":1,\"451\":2,\"532\":5,\"630\":4,\"665\":2,\"710\":7,\"728\":8,\"739\":2,\"742\":4}}],[\"responseheader\",{\"1\":{\"9\":1,\"14\":1,\"22\":1,\"23\":1}}],[\"resolve\",{\"1\":{\"651\":1}}],[\"resolvers\",{\"1\":{\"504\":1}}],[\"resolver\",{\"1\":{\"504\":2}}],[\"resourcehandlerregistry\",{\"1\":{\"232\":1,\"263\":1}}],[\"resource=\",{\"1\":{\"175\":1,\"176\":1}}],[\"resources下创建一个jdbc\",{\"1\":{\"295\":1}}],[\"resources\",{\"1\":{\"81\":1,\"175\":1,\"184\":1,\"298\":2,\"525\":1,\"682\":1,\"788\":1}}],[\"resource\",{\"1\":{\"19\":1,\"175\":2,\"184\":2,\"208\":2,\"298\":1,\"539\":3,\"544\":3,\"551\":3,\"573\":2,\"607\":1,\"665\":1,\"742\":1,\"747\":2,\"756\":1,\"763\":1,\"765\":3,\"781\":1,\"788\":2,\"806\":1}}],[\"restclient\",{\"1\":{\"687\":1}}],[\"restcontrolleradvice\",{\"1\":{\"229\":1,\"230\":1,\"628\":2,\"666\":1}}],[\"restcontrolleradvice用于标识当前类为rest风格对应的异常处理器\",{\"1\":{\"229\":1,\"230\":1}}],[\"restcontroller\",{\"1\":{\"16\":1,\"208\":1,\"224\":1,\"262\":1,\"451\":1,\"607\":1,\"659\":2,\"660\":2,\"665\":1,\"688\":1,\"806\":1}}],[\"resthighlevelclient\",{\"1\":{\"687\":3,\"688\":3,\"710\":3}}],[\"restart\",{\"1\":{\"651\":1}}],[\"restart=always\",{\"1\":{\"317\":2,\"652\":1}}],[\"restful\",{\"1\":{\"522\":2}}],[\"rest\",{\"1\":{\"327\":1,\"687\":1}}],[\"rest风格\",{\"0\":{\"262\":1}}],[\"resume都己经被废弃了\",{\"1\":{\"155\":1}}],[\"result<>\",{\"1\":{\"624\":1}}],[\"result<t>\",{\"1\":{\"623\":1,\"624\":1,\"630\":1}}],[\"result<list<teamuservo>>\",{\"1\":{\"564\":1,\"565\":1}}],[\"result<list<user>>\",{\"1\":{\"531\":1,\"534\":1}}],[\"result<page<user>>\",{\"1\":{\"540\":1,\"544\":1}}],[\"results\",{\"1\":{\"444\":1}}],[\"result=\",{\"1\":{\"395\":1}}],[\"resultmap\",{\"1\":{\"198\":5}}],[\"resultmap=\",{\"1\":{\"181\":1,\"182\":3,\"184\":1,\"185\":2,\"186\":1}}],[\"resultmap>\",{\"1\":{\"181\":1}}],[\"resulttype\",{\"1\":{\"179\":1}}],[\"resulttype=\",{\"1\":{\"175\":1,\"179\":1,\"180\":2}}],[\"result2\",{\"1\":{\"120\":2,\"716\":2}}],[\"resultutils\",{\"1\":{\"21\":2,\"23\":1,\"531\":1,\"534\":1,\"540\":1,\"544\":2,\"564\":1,\"565\":1,\"624\":1,\"628\":3}}],[\"result\",{\"1\":{\"16\":2,\"19\":2,\"21\":4,\"56\":1,\"110\":4,\"117\":7,\"120\":3,\"142\":6,\"143\":11,\"165\":2,\"181\":1,\"226\":4,\"229\":2,\"230\":6,\"239\":2,\"241\":3,\"344\":3,\"395\":2,\"409\":5,\"442\":1,\"444\":1,\"457\":5,\"562\":2,\"598\":2,\"599\":2,\"623\":4,\"624\":6,\"628\":3,\"665\":4,\"666\":3,\"698\":2,\"702\":2,\"710\":3,\"716\":3,\"728\":3,\"738\":7,\"740\":1,\"741\":7,\"747\":10,\"751\":6,\"752\":5,\"758\":6,\"764\":2,\"765\":7,\"770\":9,\"777\":1,\"789\":5,\"790\":5,\"796\":5,\"801\":4,\"802\":4,\"803\":7,\"804\":2,\"805\":5,\"806\":6,\"807\":10,\"809\":5,\"810\":4,\"817\":9,\"819\":3,\"820\":9}}],[\"resize\",{\"1\":{\"63\":1,\"66\":2,\"70\":1,\"71\":1}}],[\"resized\",{\"1\":{\"63\":1}}],[\"resilience4j<\",{\"1\":{\"27\":1}}],[\"reserve\",{\"1\":{\"56\":1}}],[\"res\",{\"1\":{\"14\":11,\"16\":9,\"17\":3,\"22\":7,\"23\":4,\"120\":2,\"143\":9,\"452\":2,\"454\":2,\"630\":6,\"663\":2,\"716\":2,\"721\":7,\"817\":3}}],[\"主机会将数据同步给从机\",{\"1\":{\"783\":1}}],[\"主分片重新分配\",{\"1\":{\"682\":1}}],[\"主程序\",{\"1\":{\"525\":1}}],[\"主动更新通常是通过在访问键时重新设置过期时间来实现的\",{\"1\":{\"749\":1}}],[\"主动更新\",{\"1\":{\"749\":1}}],[\"主动搜索\",{\"1\":{\"500\":1}}],[\"主动去关闭websocket连接\",{\"1\":{\"406\":1}}],[\"主查询\",{\"1\":{\"486\":1}}],[\"主节点做写\",{\"1\":{\"373\":1}}],[\"主从复制\",{\"1\":{\"487\":1}}],[\"主从同步\",{\"0\":{\"477\":1}}],[\"主从同步基于rft协议\",{\"1\":{\"363\":1}}],[\"主从分离\",{\"1\":{\"373\":1}}],[\"主进程可以持续处理用户请求\",{\"1\":{\"369\":1}}],[\"主就已经宕机\",{\"1\":{\"363\":1}}],[\"主宕机后\",{\"1\":{\"363\":1}}],[\"主线程就去做其他事情了\",{\"1\":{\"141\":1}}],[\"主类开启\",{\"1\":{\"29\":1}}],[\"主键索引查询或唯一索引查询\",{\"1\":{\"486\":1}}],[\"主键索引就是聚集索引\",{\"1\":{\"466\":1}}],[\"主键\",{\"1\":{\"25\":1,\"509\":1,\"557\":2,\"596\":1,\"764\":2,\"801\":2,\"806\":1}}],[\"主键id\",{\"1\":{\"9\":1}}],[\"主页推荐\",{\"0\":{\"534\":1}}],[\"主页搜索框=>搜索页=>搜索结果页\",{\"1\":{\"505\":1}}],[\"主页\",{\"1\":{\"22\":1,\"505\":1}}],[\"主页接口浏览页面\",{\"1\":{\"22\":1}}],[\"主要原因是在于我们对key设置了过期时间\",{\"1\":{\"756\":1}}],[\"主要花在数据库链接上\",{\"1\":{\"537\":1}}],[\"主要依赖于数据库记录中的隐式字段\",{\"1\":{\"476\":1}}],[\"主要是配置接口信息\",{\"1\":{\"451\":1}}],[\"主要是交换机\",{\"1\":{\"359\":1}}],[\"主要扫描的是项目中的accountserviceimpl类\",{\"1\":{\"312\":1}}],[\"主要特点和用法包括\",{\"1\":{\"155\":1}}],[\"主要有两个构造函数\",{\"1\":{\"142\":1}}],[\"主要用于读取配置文件\",{\"1\":{\"590\":1}}],[\"主要用于热更新\",{\"1\":{\"589\":1}}],[\"主要用于修饰实例变量\",{\"1\":{\"155\":1}}],[\"主要用于多线程编程\",{\"1\":{\"132\":1}}],[\"主要用于解决多线程环境下的并发问题\",{\"1\":{\"91\":1}}],[\"主要包括以下几个核心组件\",{\"1\":{\"117\":1}}],[\"主要作用\",{\"1\":{\"105\":1}}],[\"主要作用就是使原来的hash值更加均匀\",{\"1\":{\"72\":1}}],[\"主要围绕线程安全的\",{\"1\":{\"47\":1}}],[\"主要介绍自己在项目中所完成的功能\",{\"1\":{\"47\":1}}],[\"主要区别在于\",{\"1\":{\"47\":1}}],[\"主要提供模拟接口\",{\"1\":{\"16\":1}}],[\"主要修改request请求参数类型以及返回值类型要对应\",{\"1\":{\"14\":1}}],[\"lpop来实现\",{\"1\":{\"792\":1}}],[\"lpush\",{\"1\":{\"388\":1,\"792\":1}}],[\"lfu\",{\"1\":{\"749\":1}}],[\"lru\",{\"1\":{\"749\":1}}],[\"l\",{\"1\":{\"696\":2,\"706\":2}}],[\"ls\",{\"1\":{\"551\":1,\"639\":1}}],[\"ls=new\",{\"1\":{\"551\":1}}],[\"lnglattomercator\",{\"1\":{\"439\":1}}],[\"lng\",{\"1\":{\"439\":2,\"444\":10}}],[\"lua\",{\"1\":{\"780\":1,\"789\":1}}],[\"lua脚本如下\",{\"1\":{\"780\":1}}],[\"lua脚本可以编写多条redis命令\",{\"1\":{\"780\":1}}],[\"lua脚本解决多条命令原子性问题\",{\"0\":{\"780\":1}}],[\"lua脚本\",{\"1\":{\"548\":1,\"782\":1}}],[\"lushuaiyin\",{\"1\":{\"412\":1}}],[\"lucy\",{\"1\":{\"196\":1,\"208\":1}}],[\"lte\",{\"1\":{\"685\":1,\"710\":3}}],[\"lt\",{\"1\":{\"183\":1}}],[\"l命令\",{\"1\":{\"104\":1}}],[\"lesser\",{\"1\":{\"728\":1}}],[\"left=\",{\"1\":{\"506\":1,\"518\":1}}],[\"left\",{\"1\":{\"487\":1,\"506\":2,\"518\":4,\"566\":5,\"731\":1}}],[\"leftpush\",{\"1\":{\"400\":1}}],[\"leftpushall\",{\"1\":{\"400\":1}}],[\"leftnum\",{\"1\":{\"25\":1,\"26\":3}}],[\"lettuce<\",{\"1\":{\"698\":1,\"817\":1}}],[\"lettucel的bug导致nettyi堆外内存溢出\",{\"1\":{\"698\":1}}],[\"lettuce\",{\"1\":{\"398\":1}}],[\"lettuce和jedis\",{\"1\":{\"397\":1}}],[\"letter\",{\"1\":{\"354\":3,\"361\":1}}],[\"leadnews\",{\"1\":{\"318\":3,\"319\":2,\"726\":3,\"728\":4,\"733\":3}}],[\"least\",{\"1\":{\"56\":1,\"749\":2}}],[\"le\",{\"1\":{\"209\":2,\"675\":1}}],[\"len\",{\"1\":{\"98\":3,\"486\":1}}],[\"length===0\",{\"1\":{\"518\":1}}],[\"length\",{\"1\":{\"53\":1,\"54\":1,\"56\":2,\"58\":2,\"63\":2,\"66\":2,\"67\":1,\"71\":1,\"98\":1,\"409\":3,\"452\":1,\"558\":3,\"599\":3,\"605\":2,\"643\":1,\"646\":1,\"665\":2,\"710\":3}}],[\"level3\",{\"1\":{\"690\":3,\"697\":3}}],[\"level3catelog\",{\"1\":{\"690\":3,\"697\":3}}],[\"level2\",{\"1\":{\"690\":5,\"697\":5}}],[\"level1categories\",{\"1\":{\"690\":2,\"697\":2}}],[\"level1menu\",{\"1\":{\"663\":1}}],[\"level\",{\"1\":{\"27\":1,\"643\":1,\"646\":1,\"687\":1,\"696\":1}}],[\"lbs\",{\"1\":{\"443\":1,\"444\":1,\"445\":1}}],[\"lbsapi\",{\"1\":{\"439\":1}}],[\"lbsyun\",{\"1\":{\"436\":1,\"438\":1,\"442\":1}}],[\"lb\",{\"1\":{\"27\":1,\"663\":3,\"665\":1,\"710\":2,\"721\":1,\"728\":1}}],[\"labuladong的算法小抄\",{\"1\":{\"824\":1}}],[\"label\",{\"1\":{\"663\":1}}],[\"label=\",{\"1\":{\"22\":10,\"23\":10,\"520\":1}}],[\"labelwidth\",{\"1\":{\"14\":1,\"616\":1}}],[\"ladder\",{\"1\":{\"675\":1}}],[\"layout\",{\"1\":{\"612\":1}}],[\"layout=\",{\"1\":{\"22\":1,\"23\":1}}],[\"latitude\",{\"1\":{\"815\":1,\"816\":1}}],[\"lat\",{\"1\":{\"439\":2,\"444\":10}}],[\"latlng\",{\"1\":{\"439\":4}}],[\"latest\",{\"1\":{\"426\":2,\"646\":1,\"651\":2}}],[\"lastid\",{\"1\":{\"810\":2}}],[\"lastindexof\",{\"1\":{\"239\":1,\"241\":1}}],[\"lastconsumed\",{\"1\":{\"796\":1}}],[\"last\",{\"1\":{\"350\":1,\"562\":1,\"805\":1,\"810\":1,\"817\":1}}],[\"lazy\",{\"1\":{\"347\":6,\"687\":1}}],[\"lazyqueue\",{\"1\":{\"347\":1}}],[\"lazyqueue持久化\",{\"0\":{\"347\":1}}],[\"lambdaupdatewrapper<attrattrgrouprelationentity>\",{\"1\":{\"673\":1}}],[\"lambdaupdatewrapper<>\",{\"1\":{\"672\":1}}],[\"lambdaupdatewrapper<categorybrandrelationentity>\",{\"1\":{\"672\":1}}],[\"lambdaupdate\",{\"1\":{\"210\":1,\"352\":1}}],[\"lambdaquery\",{\"1\":{\"209\":1,\"214\":2,\"220\":2,\"725\":1}}],[\"lambdaquerywrapper<categoryentity>\",{\"1\":{\"690\":2,\"696\":1,\"706\":1}}],[\"lambdaquerywrapper<categorybrandrelationentity>\",{\"1\":{\"672\":1}}],[\"lambdaquerywrapper<skuinfoentity>\",{\"1\":{\"675\":1}}],[\"lambdaquerywrapper<spuinfoentity>\",{\"1\":{\"675\":1}}],[\"lambdaquerywrapper<attrattrgrouprelationentity>\",{\"1\":{\"673\":3,\"674\":1}}],[\"lambdaquerywrapper<attrentity>\",{\"1\":{\"673\":1,\"674\":2}}],[\"lambdaquerywrapper<attrgroupentity>\",{\"1\":{\"670\":2,\"674\":1}}],[\"lambdaquerywrapper<brandentity>\",{\"1\":{\"655\":1}}],[\"lambdaquerywrapper<>\",{\"1\":{\"206\":1,\"655\":1,\"672\":1,\"673\":1,\"675\":2}}],[\"lambdaquerywrapper<user>\",{\"1\":{\"206\":1,\"209\":1}}],[\"lambdaquerywrapper\",{\"0\":{\"206\":1},\"1\":{\"655\":1}}],[\"lambda\",{\"1\":{\"209\":1}}],[\"lane\",{\"1\":{\"685\":2}}],[\"landin\",{\"1\":{\"136\":1}}],[\"lang<\",{\"1\":{\"655\":2}}],[\"lang3<\",{\"1\":{\"599\":1}}],[\"lang库进行非空校验\",{\"1\":{\"599\":1}}],[\"lang=\",{\"1\":{\"519\":1,\"520\":1,\"534\":1,\"663\":1}}],[\"language\",{\"1\":{\"377\":1,\"523\":1}}],[\"lang\",{\"1\":{\"112\":1,\"140\":1,\"286\":1,\"655\":1}}],[\"large\",{\"1\":{\"66\":1}}],[\"larger\",{\"1\":{\"56\":1}}],[\"lib\",{\"1\":{\"485\":1,\"651\":3}}],[\"library\",{\"1\":{\"380\":1}}],[\"libexec\",{\"1\":{\"76\":1}}],[\"live=60000\",{\"1\":{\"706\":2}}],[\"live\",{\"1\":{\"361\":1,\"749\":1}}],[\"license\",{\"1\":{\"316\":1}}],[\"like=like\",{\"1\":{\"803\":1}}],[\"like=like+1\",{\"1\":{\"803\":1}}],[\"likeblog\",{\"1\":{\"803\":1,\"804\":1}}],[\"liked=liked\",{\"1\":{\"804\":1}}],[\"liked=liked+1\",{\"1\":{\"804\":1}}],[\"liked\",{\"1\":{\"801\":2,\"803\":3,\"804\":2,\"805\":1}}],[\"likes\",{\"1\":{\"253\":3,\"254\":6,\"256\":1,\"805\":1}}],[\"like\",{\"1\":{\"184\":2,\"185\":6,\"186\":2,\"204\":2,\"206\":1,\"209\":2,\"220\":2,\"512\":1,\"523\":1,\"559\":4,\"608\":1,\"670\":2,\"673\":1,\"674\":1,\"675\":2}}],[\"li>\",{\"1\":{\"81\":8}}],[\"limit\",{\"1\":{\"56\":1,\"468\":1,\"562\":1,\"566\":1,\"575\":1,\"731\":4,\"810\":1,\"817\":1}}],[\"linkedblockingdeque<>\",{\"1\":{\"721\":1}}],[\"linkedblockingqueue\",{\"1\":{\"112\":1}}],[\"linkedhashmap<string\",{\"1\":{\"665\":1}}],[\"linkedlist\",{\"1\":{\"47\":1}}],[\"link\",{\"1\":{\"56\":1,\"81\":9,\"519\":8}}],[\"linux命令速查手册\",{\"1\":{\"824\":1}}],[\"linux基本操作\",{\"1\":{\"47\":1}}],[\"linux常用命令\",{\"1\":{\"47\":1}}],[\"linux中查看进程号可以使用命令ps或者pgrep\",{\"1\":{\"47\":1}}],[\"linux中查看内存使用情况可以使用命令free\",{\"1\":{\"47\":1}}],[\"linux查看进程号\",{\"1\":{\"47\":1}}],[\"linux的内存使用情况查看\",{\"1\":{\"47\":1}}],[\"line\",{\"1\":{\"22\":1}}],[\"list却可以\",{\"1\":{\"691\":1}}],[\"listcategorybyid\",{\"1\":{\"670\":1}}],[\"listvalue\",{\"1\":{\"668\":5}}],[\"listvalueconstraintvalidator\",{\"1\":{\"668\":2}}],[\"listwithtree\",{\"1\":{\"663\":3}}],[\"listsheight\",{\"1\":{\"616\":1}}],[\"list排序耗时\",{\"1\":{\"575\":1}}],[\"listteam\",{\"1\":{\"565\":1}}],[\"listteams\",{\"1\":{\"559\":1,\"564\":1,\"565\":1}}],[\"listmycreateteams\",{\"1\":{\"565\":1}}],[\"listmyjointeams\",{\"1\":{\"564\":1}}],[\"listmap\",{\"1\":{\"564\":2}}],[\"list=\",{\"1\":{\"534\":1}}],[\"list=new\",{\"1\":{\"58\":1}}],[\"listfill\",{\"1\":{\"432\":1}}],[\"listutils\",{\"1\":{\"430\":2}}],[\"listoperations\",{\"1\":{\"400\":7}}],[\"listening\",{\"1\":{\"691\":2}}],[\"listen\",{\"1\":{\"643\":1,\"646\":1,\"691\":2}}],[\"listenordercheckdelaymessage\",{\"1\":{\"355\":1}}],[\"listenorderpay\",{\"1\":{\"340\":1}}],[\"listendelaymessage\",{\"1\":{\"355\":1}}],[\"listendirectqueue4\",{\"1\":{\"338\":1}}],[\"listendirectqueue3\",{\"1\":{\"338\":1}}],[\"listendirectqueue2\",{\"1\":{\"336\":1}}],[\"listendirectqueue1\",{\"1\":{\"336\":1}}],[\"listenlazyqueue\",{\"1\":{\"347\":1}}],[\"listenablefuturecallback<correlationdata\",{\"1\":{\"344\":1}}],[\"listentopicqueue4\",{\"1\":{\"338\":1}}],[\"listentopicqueue3\",{\"1\":{\"338\":1}}],[\"listentopicqueue2\",{\"1\":{\"337\":1}}],[\"listentopicqueue1\",{\"1\":{\"337\":1}}],[\"listenfanoutqueue2\",{\"1\":{\"335\":1}}],[\"listenfanoutqueue1\",{\"1\":{\"335\":1}}],[\"listener\",{\"1\":{\"333\":1,\"349\":1,\"350\":1,\"351\":1}}],[\"listenworkqueue2\",{\"1\":{\"333\":1}}],[\"listenworkqueue1\",{\"1\":{\"333\":1}}],[\"listensimplequeuemessage\",{\"1\":{\"332\":1,\"339\":1}}],[\"list>\",{\"1\":{\"290\":1,\"418\":2,\"419\":1}}],[\"listpage\",{\"1\":{\"710\":1}}],[\"listparamforjson\",{\"1\":{\"256\":2}}],[\"listparam\",{\"1\":{\"254\":4}}],[\"listpojoparamforjson\",{\"1\":{\"258\":2}}],[\"listbyids\",{\"1\":{\"208\":2,\"214\":1,\"805\":1,\"807\":1}}],[\"list集合线程不安全\",{\"1\":{\"95\":1}}],[\"list用toarray转数组后\",{\"1\":{\"58\":1}}],[\"list受影响\",{\"1\":{\"58\":1}}],[\"list扩容几次\",{\"1\":{\"58\":1}}],[\"list转数组\",{\"1\":{\"47\":1}}],[\"list分支有哪些\",{\"1\":{\"47\":2}}],[\"list<georesult<redisgeocommands\",{\"1\":{\"817\":1}}],[\"list<redisgeocommands\",{\"1\":{\"816\":1}}],[\"list<\",{\"1\":{\"810\":1}}],[\"list<follow>\",{\"1\":{\"809\":1}}],[\"list<maprecord<string\",{\"1\":{\"796\":2}}],[\"list<shop>>\",{\"1\":{\"816\":2}}],[\"list<shop>\",{\"1\":{\"816\":2,\"817\":1}}],[\"list<shoptype>\",{\"1\":{\"747\":2}}],[\"list<spuitemattrgroupvo>\",{\"1\":{\"721\":1}}],[\"list<searchresult\",{\"1\":{\"710\":4}}],[\"list<skuesmodel>\",{\"1\":{\"688\":3,\"710\":1}}],[\"list<skuesmodel\",{\"1\":{\"688\":1}}],[\"list<skuitemsaleattrvo>\",{\"1\":{\"721\":1}}],[\"list<skuinfoentity>\",{\"1\":{\"688\":1}}],[\"list<skuimagesentity>\",{\"1\":{\"675\":1,\"721\":1}}],[\"list<skusaleattrvalueentity>\",{\"1\":{\"675\":1}}],[\"list<skus>\",{\"1\":{\"675\":1}}],[\"list<student>\",{\"1\":{\"418\":1,\"423\":1}}],[\"list<string>\",{\"1\":{\"27\":1,\"58\":1,\"95\":1,\"97\":1,\"98\":1,\"143\":2,\"254\":2,\"256\":1,\"288\":1,\"430\":1,\"512\":3,\"531\":1,\"551\":1,\"566\":4,\"575\":4,\"675\":2,\"688\":1,\"710\":1}}],[\"list<catelog2vo\",{\"1\":{\"690\":1,\"697\":1}}],[\"list<catelog2vo>\",{\"1\":{\"690\":1,\"697\":1}}],[\"list<catelog2vo>>>\",{\"1\":{\"698\":1,\"702\":1}}],[\"list<catelog2vo>>\",{\"1\":{\"690\":4,\"697\":2,\"698\":3,\"702\":2,\"703\":10,\"704\":2}}],[\"list<categorybrandrelationentity>\",{\"1\":{\"672\":1}}],[\"list<categoryentity>\",{\"1\":{\"663\":7,\"690\":3,\"696\":2,\"697\":7,\"706\":2}}],[\"list<completablefuture<void>>\",{\"1\":{\"539\":1}}],[\"list<productattrvalueentity>\",{\"1\":{\"675\":1,\"688\":1}}],[\"list<pair<user\",{\"1\":{\"566\":2,\"575\":2}}],[\"list<p>\",{\"1\":{\"220\":2}}],[\"list<team>\",{\"1\":{\"559\":1}}],[\"list<teamuservo>\",{\"1\":{\"559\":2,\"564\":1,\"565\":1}}],[\"list<t>\",{\"1\":{\"58\":1,\"220\":1}}],[\"list<ikun>\",{\"1\":{\"526\":1}}],[\"list<integer>\",{\"1\":{\"208\":1,\"710\":1}}],[\"list<aparticle>\",{\"1\":{\"732\":2}}],[\"list<attr>\",{\"1\":{\"675\":1}}],[\"list<attrgroupentity>\",{\"1\":{\"674\":1}}],[\"list<attrattrgrouprelationentity>\",{\"1\":{\"674\":3}}],[\"list<attrrespvo>\",{\"1\":{\"673\":1}}],[\"list<attrentity>\",{\"1\":{\"673\":1}}],[\"list<article>\",{\"1\":{\"455\":1}}],[\"list<addressvo>>\",{\"1\":{\"214\":1}}],[\"list<addressvo>\",{\"1\":{\"214\":1}}],[\"list<address>\",{\"1\":{\"214\":2,\"215\":1}}],[\"list<element>\",{\"1\":{\"453\":1}}],[\"list<demodata>\",{\"1\":{\"430\":2,\"431\":1}}],[\"list<blog>\",{\"1\":{\"803\":1,\"810\":1}}],[\"list<baseattrs>\",{\"1\":{\"675\":1}}],[\"list<brandvo>\",{\"1\":{\"675\":1}}],[\"list<brandentity>\",{\"1\":{\"655\":1,\"675\":1}}],[\"list<brand>\",{\"1\":{\"184\":6}}],[\"list<book>\",{\"1\":{\"224\":3}}],[\"list<v>\",{\"1\":{\"220\":3}}],[\"list<userdto>\",{\"1\":{\"805\":2,\"807\":1}}],[\"list<userteam>>\",{\"1\":{\"564\":1}}],[\"list<userteam>\",{\"1\":{\"562\":1,\"564\":1}}],[\"list<uservo>\",{\"1\":{\"208\":1,\"209\":2,\"214\":1,\"220\":1}}],[\"list<user>>\",{\"1\":{\"566\":1,\"575\":1}}],[\"list<user>\",{\"1\":{\"175\":1,\"176\":2,\"196\":1,\"204\":1,\"206\":1,\"208\":2,\"209\":2,\"211\":1,\"214\":1,\"219\":1,\"220\":1,\"258\":1,\"261\":2,\"512\":7,\"531\":1,\"534\":2,\"538\":1,\"539\":1,\"566\":3,\"575\":11,\"608\":2}}],[\"list<long>\",{\"1\":{\"205\":1,\"207\":1,\"208\":1,\"214\":2,\"355\":2,\"544\":1,\"564\":1,\"566\":1,\"573\":1,\"575\":2,\"670\":4,\"674\":2,\"688\":3,\"805\":2,\"807\":1,\"810\":1,\"820\":1}}],[\"list<netmall>\",{\"1\":{\"143\":3}}],[\"list<object>\",{\"1\":{\"27\":1}}],[\"listinterfaceinfobypageusingget\",{\"1\":{\"14\":1,\"22\":1}}],[\"list\",{\"1\":{\"14\":1,\"22\":4,\"27\":2,\"54\":5,\"56\":3,\"58\":3,\"95\":3,\"97\":1,\"98\":1,\"140\":1,\"143\":6,\"196\":1,\"205\":1,\"207\":1,\"208\":2,\"209\":5,\"211\":4,\"214\":5,\"215\":1,\"220\":4,\"254\":2,\"256\":3,\"258\":4,\"288\":2,\"290\":1,\"318\":4,\"319\":3,\"400\":9,\"418\":5,\"419\":1,\"423\":2,\"430\":5,\"531\":1,\"534\":2,\"539\":1,\"544\":1,\"551\":6,\"559\":1,\"562\":1,\"564\":1,\"566\":5,\"575\":7,\"608\":1,\"613\":1,\"655\":4,\"659\":2,\"663\":2,\"670\":3,\"672\":3,\"673\":2,\"675\":4,\"710\":3,\"747\":2,\"796\":8,\"805\":1,\"809\":1,\"810\":2,\"816\":3,\"817\":6}}],[\"loli\",{\"1\":{\"519\":1,\"537\":1,\"538\":1,\"539\":1,\"598\":1,\"609\":1}}],[\"lombok\",{\"0\":{\"588\":1},\"1\":{\"416\":1,\"544\":1,\"551\":1,\"623\":1,\"628\":1,\"663\":1,\"758\":1}}],[\"loop\",{\"1\":{\"93\":6}}],[\"lockowner\",{\"1\":{\"782\":3}}],[\"lockobject\",{\"1\":{\"130\":1}}],[\"lockexists\",{\"1\":{\"782\":2}}],[\"lockkey\",{\"1\":{\"755\":3,\"756\":3,\"758\":3}}],[\"lockdoor\",{\"1\":{\"704\":2}}],[\"lockvalue\",{\"1\":{\"703\":2}}],[\"lock==a\",{\"1\":{\"549\":1}}],[\"lock=new\",{\"1\":{\"151\":3}}],[\"lock锁接口的实现类\",{\"1\":{\"135\":1}}],[\"lock锁的api如下\",{\"1\":{\"135\":1}}],[\"lock体系\",{\"0\":{\"135\":1}}],[\"locking\",{\"1\":{\"110\":2,\"766\":2}}],[\"lockinterruptibly\",{\"1\":{\"91\":1}}],[\"lock显示实现\",{\"1\":{\"103\":1}}],[\"locks\",{\"1\":{\"91\":1,\"93\":3,\"110\":2,\"151\":1}}],[\"locks包下的一种可重入锁\",{\"1\":{\"91\":1}}],[\"locksupport和每个使用它的线程都有一个许可\",{\"1\":{\"156\":1}}],[\"locksupport提供park\",{\"1\":{\"156\":1}}],[\"locksupporti调用的unsafe中的native代码\",{\"1\":{\"156\":1}}],[\"locksupport是一个线程阻塞工具类\",{\"1\":{\"156\":1}}],[\"locksupport是用来创建锁和其他同步类的基本线程阻塞原语\",{\"1\":{\"156\":1}}],[\"locksupport类使用了一种名为permit\",{\"1\":{\"156\":1}}],[\"locksupport类可以阻塞当前线程以及唤醒指定被阻塞的线程\",{\"1\":{\"156\":1}}],[\"locksupport照样支持\",{\"1\":{\"156\":1}}],[\"locksupport与线程中断\",{\"0\":{\"154\":1}}],[\"locksupport\",{\"0\":{\"156\":1},\"1\":{\"81\":6,\"84\":3,\"156\":2}}],[\"lock接口\",{\"0\":{\"90\":1}}],[\"lock\",{\"1\":{\"81\":2,\"84\":1,\"91\":24,\"93\":15,\"98\":1,\"102\":2,\"103\":8,\"110\":4,\"111\":5,\"135\":5,\"151\":7,\"152\":20,\"156\":13,\"158\":1,\"549\":1,\"551\":5,\"561\":4,\"573\":5,\"574\":4,\"702\":1,\"703\":24,\"704\":20,\"755\":1,\"756\":1,\"758\":1,\"776\":3,\"777\":4,\"778\":1,\"781\":7,\"790\":5}}],[\"localstorage\",{\"1\":{\"616\":1}}],[\"localsearch\",{\"1\":{\"440\":1}}],[\"local\",{\"1\":{\"440\":2,\"639\":3,\"643\":1,\"780\":1,\"782\":3,\"789\":4,\"796\":5}}],[\"localtime\",{\"1\":{\"333\":2}}],[\"localpath\",{\"1\":{\"241\":2,\"665\":1}}],[\"localdatetime\",{\"1\":{\"196\":2,\"208\":2,\"211\":1,\"352\":2,\"409\":2,\"756\":4,\"758\":4,\"763\":4,\"765\":2,\"819\":2,\"820\":2}}],[\"localhost\",{\"1\":{\"14\":2,\"16\":3,\"17\":1,\"27\":9,\"29\":2,\"224\":1,\"247\":2,\"248\":2,\"250\":1,\"259\":3,\"262\":2,\"294\":1,\"309\":2,\"310\":2,\"318\":3,\"319\":3,\"328\":1,\"340\":1,\"379\":1,\"395\":1,\"396\":2,\"398\":1,\"406\":1,\"485\":1,\"522\":1,\"532\":1,\"533\":1,\"595\":1,\"611\":5,\"612\":1,\"634\":2,\"655\":2,\"658\":1,\"660\":2,\"661\":2,\"663\":3,\"681\":1,\"682\":5,\"698\":1,\"704\":1,\"726\":1,\"727\":1,\"733\":4,\"781\":1}}],[\"location=\",{\"1\":{\"295\":1}}],[\"locations=\",{\"1\":{\"313\":1}}],[\"locations\",{\"1\":{\"201\":2,\"215\":1,\"655\":1}}],[\"location\",{\"1\":{\"14\":3,\"443\":1,\"444\":10,\"612\":4,\"613\":1,\"630\":1,\"643\":1,\"646\":2,\"691\":7,\"697\":2,\"816\":3}}],[\"lotail\",{\"1\":{\"71\":6}}],[\"lohead\",{\"1\":{\"71\":3}}],[\"lossage\",{\"1\":{\"66\":1}}],[\"lower\",{\"1\":{\"66\":1}}],[\"loadshopdata\",{\"1\":{\"816\":1}}],[\"loadarticlelist\",{\"1\":{\"732\":2}}],[\"loadtype\",{\"1\":{\"732\":6}}],[\"loader\",{\"1\":{\"423\":1}}],[\"loadfactor\",{\"1\":{\"63\":2,\"64\":11,\"71\":2}}],[\"load\",{\"1\":{\"63\":4,\"64\":11,\"71\":1,\"161\":1,\"732\":8}}],[\"loaddata\",{\"1\":{\"22\":5,\"23\":2}}],[\"loading=\",{\"1\":{\"22\":2,\"23\":1}}],[\"loading\",{\"1\":{\"14\":1,\"22\":3,\"23\":1,\"613\":1}}],[\"longitude\",{\"1\":{\"815\":1,\"816\":1}}],[\"longvalue\",{\"1\":{\"710\":3,\"725\":1,\"810\":1}}],[\"long>>\",{\"1\":{\"566\":2,\"575\":3}}],[\"long等\",{\"1\":{\"158\":1}}],[\"long\",{\"1\":{\"21\":2,\"23\":1,\"26\":2,\"27\":6,\"29\":2,\"47\":1,\"81\":2,\"84\":3,\"87\":3,\"112\":2,\"115\":1,\"142\":4,\"143\":1,\"208\":5,\"210\":1,\"211\":4,\"214\":1,\"219\":2,\"220\":4,\"340\":1,\"352\":2,\"355\":3,\"400\":1,\"431\":2,\"453\":2,\"457\":3,\"544\":1,\"551\":1,\"558\":3,\"559\":3,\"560\":1,\"561\":5,\"562\":5,\"566\":3,\"573\":1,\"574\":5,\"575\":18,\"599\":3,\"607\":2,\"608\":1,\"613\":1,\"665\":2,\"666\":2,\"667\":2,\"670\":9,\"672\":6,\"673\":6,\"674\":3,\"675\":1,\"688\":3,\"696\":1,\"697\":1,\"703\":1,\"706\":1,\"710\":12,\"713\":1,\"721\":3,\"747\":2,\"751\":1,\"752\":1,\"755\":1,\"756\":3,\"758\":6,\"763\":9,\"765\":4,\"770\":9,\"777\":5,\"778\":1,\"780\":1,\"789\":5,\"790\":6,\"796\":4,\"802\":3,\"803\":4,\"804\":3,\"805\":4,\"806\":6,\"807\":6,\"809\":1,\"810\":7,\"816\":1,\"817\":1,\"819\":1,\"820\":2}}],[\"log参数为1来启用\",{\"1\":{\"485\":1}}],[\"log日志\",{\"1\":{\"476\":1}}],[\"log保证了事务的原子性和一致性\",{\"1\":{\"475\":1}}],[\"log保证了事务的持久性\",{\"1\":{\"475\":1}}],[\"log区别\",{\"1\":{\"475\":1}}],[\"log中的逻辑记录读取到相应的内容并进行回滚\",{\"1\":{\"475\":1}}],[\"log中会记录一条对应的insert记录\",{\"1\":{\"475\":1}}],[\"log记录物理日志不一样\",{\"1\":{\"475\":1}}],[\"log和redo\",{\"0\":{\"475\":1},\"1\":{\"475\":1}}],[\"logo不能为空\",{\"1\":{\"667\":1}}],[\"logo必须是一个合法的url地址\",{\"1\":{\"666\":1,\"667\":1}}],[\"logout\",{\"1\":{\"620\":6}}],[\"logo=\",{\"1\":{\"609\":1}}],[\"logo\",{\"1\":{\"455\":1,\"609\":3,\"616\":2,\"666\":1,\"667\":1}}],[\"logs\",{\"1\":{\"426\":1,\"643\":1}}],[\"logic\",{\"1\":{\"215\":3,\"605\":3,\"663\":2}}],[\"logininterceptor\",{\"1\":{\"739\":2,\"742\":2}}],[\"loginform\",{\"1\":{\"738\":3,\"741\":3}}],[\"loginformdto\",{\"1\":{\"738\":1,\"741\":1}}],[\"logindto\",{\"1\":{\"725\":6}}],[\"loginparams\",{\"1\":{\"609\":1}}],[\"loginpath\",{\"1\":{\"14\":1,\"612\":3,\"613\":1}}],[\"login\",{\"1\":{\"558\":1,\"605\":3,\"607\":1,\"608\":1,\"611\":2,\"612\":4,\"613\":1,\"620\":1,\"625\":1,\"630\":1,\"725\":3,\"728\":2,\"738\":1,\"739\":1,\"741\":6,\"742\":3,\"788\":4}}],[\"loginuservo\",{\"1\":{\"14\":1}}],[\"loginuser\",{\"1\":{\"14\":4,\"23\":3,\"544\":2,\"558\":5,\"560\":3,\"561\":2,\"562\":2,\"564\":2,\"565\":2,\"566\":3,\"574\":2,\"575\":10}}],[\"logn更小\",{\"1\":{\"47\":2}}],[\"logging\",{\"1\":{\"27\":1,\"696\":1}}],[\"log\",{\"0\":{\"475\":1},\"1\":{\"14\":5,\"27\":13,\"47\":2,\"239\":2,\"241\":2,\"319\":4,\"340\":1,\"344\":5,\"347\":1,\"355\":1,\"426\":1,\"451\":1,\"452\":1,\"453\":2,\"454\":1,\"475\":7,\"476\":1,\"477\":1,\"485\":2,\"520\":2,\"532\":2,\"544\":2,\"559\":1,\"575\":2,\"605\":1,\"616\":3,\"628\":2,\"630\":1,\"651\":6,\"663\":1,\"666\":1,\"670\":3,\"675\":2,\"688\":3,\"691\":6,\"710\":1,\"738\":1,\"741\":1,\"790\":3,\"796\":2,\"801\":1}}],[\"wxutils\",{\"1\":{\"452\":2}}],[\"wxcontroller\",{\"1\":{\"451\":1}}],[\"wx\",{\"1\":{\"451\":2,\"453\":1,\"523\":2}}],[\"ws\",{\"1\":{\"406\":2,\"407\":1}}],[\"w3\",{\"1\":{\"269\":1,\"270\":1,\"278\":1,\"295\":1}}],[\"wwwroot\",{\"1\":{\"646\":4}}],[\"www\",{\"1\":{\"201\":1,\"269\":4,\"270\":4,\"278\":4,\"295\":7,\"317\":1,\"326\":1,\"522\":1,\"646\":4,\"661\":2,\"663\":2,\"801\":1,\"824\":12}}],[\"warefeignservice\",{\"1\":{\"688\":1}}],[\"ware<\",{\"1\":{\"653\":1,\"655\":2}}],[\"way\",{\"1\":{\"66\":1}}],[\"was\",{\"1\":{\"66\":1,\"67\":1,\"71\":1,\"241\":1,\"665\":2}}],[\"waittime设置为0\",{\"1\":{\"551\":1}}],[\"waiting状态时可以通过object\",{\"1\":{\"84\":1}}],[\"waiting状态\",{\"1\":{\"84\":1}}],[\"waiting\",{\"1\":{\"81\":15,\"86\":1,\"142\":1,\"156\":2}}],[\"wait\",{\"1\":{\"47\":1,\"81\":7,\"87\":3,\"91\":1,\"92\":3,\"104\":2,\"136\":1,\"155\":1,\"156\":1,\"398\":1}}],[\"woodcock\",{\"1\":{\"450\":1}}],[\"wordutils\",{\"1\":{\"454\":1}}],[\"word\",{\"1\":{\"454\":2}}],[\"words\",{\"1\":{\"56\":1}}],[\"worker\",{\"1\":{\"646\":1}}],[\"workdir\",{\"1\":{\"642\":1,\"643\":2}}],[\"workqueues模式\",{\"0\":{\"333\":1}}],[\"workqueue\",{\"1\":{\"115\":2,\"713\":2}}],[\"work\",{\"1\":{\"114\":1,\"333\":3}}],[\"world\",{\"1\":{\"83\":1,\"142\":1,\"143\":2,\"416\":1,\"698\":1}}],[\"would\",{\"1\":{\"66\":1}}],[\"woshinibaba\",{\"1\":{\"19\":1}}],[\"wiki\",{\"1\":{\"704\":1}}],[\"width=\",{\"1\":{\"616\":2}}],[\"width\",{\"1\":{\"616\":1}}],[\"win\",{\"1\":{\"56\":1}}],[\"window\",{\"1\":{\"14\":1,\"406\":2}}],[\"will\",{\"1\":{\"53\":1,\"66\":1,\"140\":1,\"142\":3}}],[\"withdist\",{\"1\":{\"815\":1}}],[\"withtemplate\",{\"1\":{\"432\":1}}],[\"withscores\",{\"1\":{\"392\":1}}],[\"withbody\",{\"1\":{\"347\":1,\"359\":1}}],[\"with\",{\"1\":{\"53\":1,\"54\":3,\"63\":1,\"64\":5,\"66\":5,\"67\":2,\"81\":6,\"241\":2,\"338\":4,\"351\":2,\"639\":3,\"665\":4,\"691\":1}}],[\"where>\",{\"1\":{\"185\":1,\"186\":1}}],[\"where\",{\"1\":{\"182\":3,\"184\":1,\"185\":2,\"189\":1,\"190\":2,\"191\":1,\"192\":1,\"204\":2,\"205\":1,\"208\":1,\"224\":3,\"352\":1,\"468\":1,\"469\":1,\"486\":1,\"670\":1,\"672\":1,\"674\":1,\"731\":3,\"809\":1}}],[\"when>\",{\"1\":{\"186\":3}}],[\"whencompleteasync\",{\"1\":{\"120\":4,\"716\":4}}],[\"whencomplete\",{\"1\":{\"120\":5,\"143\":2,\"716\":5}}],[\"whencomplete回调\",{\"1\":{\"120\":1,\"716\":1}}],[\"when\",{\"1\":{\"53\":2,\"63\":2}}],[\"whole\",{\"1\":{\"66\":1}}],[\"whose\",{\"1\":{\"54\":1,\"64\":1,\"67\":1}}],[\"while中的var1+var2\",{\"1\":{\"769\":1}}],[\"while\",{\"1\":{\"67\":2,\"71\":1,\"87\":2,\"88\":2,\"89\":1,\"92\":1,\"93\":3,\"132\":1,\"142\":1,\"155\":3,\"241\":1,\"319\":1,\"539\":1,\"561\":1,\"574\":1,\"665\":2,\"769\":1,\"790\":1,\"796\":2,\"820\":1}}],[\"which\",{\"1\":{\"53\":1,\"56\":1,\"63\":1,\"66\":1,\"81\":1,\"241\":2,\"665\":4}}],[\"whitelist\",{\"1\":{\"612\":2}}],[\"white\",{\"1\":{\"14\":1,\"27\":2,\"613\":1}}],[\"weight\",{\"1\":{\"670\":1}}],[\"weixin\",{\"1\":{\"449\":1,\"450\":1,\"451\":1,\"453\":1,\"457\":3,\"458\":1}}],[\"wechat\",{\"1\":{\"451\":1}}],[\"well\",{\"1\":{\"66\":1}}],[\"we\",{\"1\":{\"53\":1,\"63\":1,\"66\":3}}],[\"webflux\",{\"1\":{\"657\":1}}],[\"webp\",{\"1\":{\"519\":1,\"537\":1,\"538\":1,\"539\":1,\"598\":1,\"609\":1}}],[\"website\",{\"1\":{\"682\":4}}],[\"webservice\",{\"1\":{\"444\":1,\"445\":1}}],[\"websockettask\",{\"1\":{\"409\":1}}],[\"websocketconfiguration\",{\"1\":{\"408\":1}}],[\"websocket配置类\",{\"1\":{\"408\":1}}],[\"websocketserver\",{\"1\":{\"407\":1,\"409\":4}}],[\"websocket服务\",{\"1\":{\"407\":1}}],[\"websocket<\",{\"1\":{\"405\":1}}],[\"websocket是基于tcp的一种新的网络协议\",{\"1\":{\"403\":1}}],[\"websocket\",{\"0\":{\"403\":1},\"1\":{\"406\":12,\"407\":7,\"409\":1},\"2\":{\"410\":1,\"411\":1}}],[\"webapi使用\",{\"0\":{\"441\":1}}],[\"webapplicationcontext\",{\"1\":{\"245\":4}}],[\"web<\",{\"1\":{\"318\":1,\"416\":1,\"592\":1}}],[\"web层主要由servlet来处理\",{\"1\":{\"244\":1}}],[\"webmvcconfigurer\",{\"1\":{\"232\":1,\"233\":1,\"663\":1,\"739\":1,\"742\":1}}],[\"webmvcconfigurationsupport\",{\"1\":{\"232\":1,\"263\":1}}],[\"webmvc<\",{\"1\":{\"224\":1,\"245\":1}}],[\"web项目入口配置类\",{\"1\":{\"224\":1}}],[\"web\",{\"0\":{\"592\":1,\"840\":1},\"1\":{\"27\":1,\"408\":1,\"522\":1,\"628\":2,\"643\":1,\"659\":1,\"696\":1,\"727\":1}}],[\"writer\",{\"1\":{\"788\":5}}],[\"writersheet\",{\"1\":{\"431\":1,\"432\":1}}],[\"writevalue\",{\"1\":{\"704\":3}}],[\"writevalueasstring\",{\"1\":{\"400\":1}}],[\"writesheet\",{\"1\":{\"431\":3,\"432\":3}}],[\"write技术\",{\"1\":{\"370\":1}}],[\"write\",{\"1\":{\"171\":1,\"319\":1,\"430\":1,\"431\":2,\"432\":1,\"704\":1,\"750\":2,\"788\":1}}],[\"writelock\",{\"1\":{\"110\":4,\"111\":7,\"704\":1}}],[\"writewith\",{\"1\":{\"27\":3}}],[\"wrappers\",{\"1\":{\"733\":1}}],[\"wrapper\",{\"1\":{\"207\":5,\"209\":2,\"559\":4,\"655\":3,\"670\":4,\"672\":6,\"673\":4,\"674\":4,\"675\":13}}],[\"wrappercol=\",{\"1\":{\"22\":1,\"23\":1}}],[\"wrap\",{\"1\":{\"27\":1}}],[\"请先登录\",{\"1\":{\"630\":1}}],[\"请在创建表时使用not\",{\"1\":{\"469\":1}}],[\"请原样返回echostr参数内容\",{\"1\":{\"452\":1}}],[\"请讲返回微信服务器的respose的content\",{\"1\":{\"451\":1}}],[\"请参考以下示例代码\",{\"1\":{\"241\":1}}],[\"请确保已设置环境变量oss\",{\"1\":{\"241\":1,\"665\":1}}],[\"请稍后再试\",{\"1\":{\"230\":1}}],[\"请重试\",{\"1\":{\"14\":1,\"612\":1}}],[\"请求的过程\",{\"1\":{\"696\":1}}],[\"请求的模拟接口是否存在\",{\"1\":{\"27\":2}}],[\"请求体\",{\"1\":{\"603\":1}}],[\"请求发到服务器b\",{\"1\":{\"533\":1}}],[\"请求格式\",{\"1\":{\"521\":1}}],[\"请求数多或业务累积大\",{\"1\":{\"478\":1}}],[\"请求方式检索\",{\"1\":{\"684\":1}}],[\"请求方式为post\",{\"1\":{\"262\":1}}],[\"请求方法\",{\"1\":{\"14\":1,\"22\":1,\"23\":1,\"27\":1,\"29\":1}}],[\"请求与响应\",{\"0\":{\"246\":1}}],[\"请求对象\",{\"1\":{\"232\":1}}],[\"请求\",{\"1\":{\"220\":1,\"250\":1,\"453\":1}}],[\"请求来源地址\",{\"1\":{\"27\":2}}],[\"请求路径更改为\",{\"1\":{\"262\":1}}],[\"请求路径\",{\"1\":{\"27\":1,\"29\":1}}],[\"请求唯一标识\",{\"1\":{\"27\":1}}],[\"请求转发\",{\"1\":{\"27\":1}}],[\"请求日志\",{\"1\":{\"27\":2}}],[\"请求日志等\",{\"1\":{\"27\":1}}],[\"请求类别\",{\"1\":{\"27\":1}}],[\"请求类型\",{\"1\":{\"9\":1}}],[\"请求地址\",{\"1\":{\"22\":1,\"23\":1}}],[\"请求成功\",{\"1\":{\"22\":1,\"23\":1}}],[\"请求失败\",{\"1\":{\"22\":2,\"23\":1}}],[\"请求参数为空\",{\"1\":{\"625\":1}}],[\"请求参数错误\",{\"1\":{\"625\":1}}],[\"请求参数很长时不建议用get\",{\"1\":{\"603\":1}}],[\"请求参数是否为空\",{\"1\":{\"558\":2}}],[\"请求参数key的名称要和pojo中属性的名称一致\",{\"1\":{\"251\":1}}],[\"请求参数与形参对象中的属性对应即可完成参数传递\",{\"1\":{\"251\":1,\"252\":1}}],[\"请求参数的类型\",{\"1\":{\"23\":1}}],[\"请求参数\",{\"0\":{\"248\":1},\"1\":{\"14\":1,\"22\":2,\"23\":2,\"27\":2,\"29\":1,\"521\":1,\"562\":1,\"563\":1}}],[\"请求头\",{\"1\":{\"9\":1,\"14\":1,\"22\":1,\"23\":1,\"27\":1}}],[\"e9ag9zbwtcs\",{\"1\":{\"824\":1}}],[\"eureka停止维护\",{\"1\":{\"657\":1}}],[\"ef\",{\"1\":{\"639\":1}}],[\"e2e文件夹\",{\"1\":{\"585\":1}}],[\"ehcache\",{\"1\":{\"543\":1}}],[\"edg\",{\"1\":{\"523\":1}}],[\"edge\",{\"1\":{\"523\":1}}],[\"editable=\",{\"1\":{\"616\":1}}],[\"editable\",{\"1\":{\"616\":1}}],[\"edituser\",{\"1\":{\"520\":5}}],[\"edit\",{\"1\":{\"519\":1}}],[\"editname\",{\"1\":{\"519\":2,\"520\":4}}],[\"editkey\",{\"1\":{\"519\":2,\"520\":3}}],[\"employee\",{\"1\":{\"686\":1}}],[\"emptylist\",{\"1\":{\"214\":1,\"220\":2,\"789\":1,\"790\":1,\"796\":1,\"805\":1,\"807\":1}}],[\"empty\",{\"1\":{\"53\":9,\"54\":7,\"64\":3,\"220\":3,\"523\":1,\"670\":2,\"796\":2}}],[\"email=hyf1844025705\",{\"1\":{\"655\":1}}],[\"email\",{\"1\":{\"518\":1,\"519\":4,\"596\":2,\"616\":1,\"655\":1,\"685\":1,\"686\":1}}],[\"eclipse\",{\"1\":{\"491\":4,\"493\":4}}],[\"echostr\",{\"1\":{\"451\":5,\"452\":5}}],[\"e6ff32edf4232929fda778a3\",{\"1\":{\"444\":1}}],[\"earlier\",{\"1\":{\"728\":1}}],[\"earth\",{\"1\":{\"439\":2}}],[\"easyexcel\",{\"0\":{\"524\":1},\"1\":{\"429\":1,\"430\":2,\"431\":2,\"432\":2,\"433\":1,\"524\":1,\"525\":1,\"526\":1},\"2\":{\"435\":1}}],[\"easy\",{\"0\":{\"429\":1},\"1\":{\"571\":1},\"2\":{\"434\":1}}],[\"eat\",{\"1\":{\"170\":10}}],[\"etc\",{\"1\":{\"379\":2,\"426\":2,\"639\":1,\"643\":2,\"646\":3,\"651\":3,\"652\":2}}],[\"evibktrcfex\",{\"1\":{\"824\":1}}],[\"evict\",{\"1\":{\"66\":5,\"706\":1}}],[\"evpxjq55lxn\",{\"1\":{\"824\":1}}],[\"eval等\",{\"1\":{\"782\":1}}],[\"eval\",{\"1\":{\"422\":1}}],[\"eveyday\",{\"0\":{\"834\":1}}],[\"events\",{\"1\":{\"646\":1}}],[\"event\",{\"1\":{\"406\":2}}],[\"everysec\",{\"1\":{\"371\":1}}],[\"everyone\",{\"1\":{\"335\":1}}],[\"erp系统等\",{\"1\":{\"377\":1}}],[\"erlang\",{\"1\":{\"327\":1}}],[\"err\",{\"1\":{\"226\":4,\"230\":1,\"333\":1}}],[\"errorresult\",{\"1\":{\"725\":2}}],[\"errormessageconfig\",{\"1\":{\"351\":1}}],[\"errormessageexchange\",{\"1\":{\"351\":6}}],[\"errorbinding\",{\"1\":{\"351\":2}}],[\"errorqueue\",{\"1\":{\"351\":6}}],[\"errorcode\",{\"1\":{\"21\":5,\"23\":3,\"26\":1}}],[\"error\",{\"1\":{\"14\":8,\"21\":5,\"22\":11,\"23\":11,\"26\":1,\"27\":8,\"241\":4,\"319\":8,\"340\":1,\"344\":2,\"351\":10,\"406\":1,\"452\":1,\"512\":1,\"531\":1,\"532\":5,\"544\":2,\"558\":10,\"559\":1,\"560\":4,\"561\":8,\"562\":4,\"564\":1,\"565\":1,\"574\":8,\"612\":5,\"613\":1,\"624\":3,\"625\":3,\"628\":5,\"630\":2,\"665\":8,\"666\":4,\"675\":2,\"688\":5,\"691\":3,\"696\":2,\"725\":1,\"790\":3,\"796\":2}}],[\"ew\",{\"1\":{\"207\":2}}],[\"e==null\",{\"1\":{\"143\":1}}],[\"esconstant\",{\"1\":{\"688\":1,\"710\":6}}],[\"esmodels\",{\"1\":{\"710\":3}}],[\"esmodel\",{\"1\":{\"688\":14,\"710\":3}}],[\"esrestclient\",{\"1\":{\"687\":1}}],[\"es目录下面创建fenci\",{\"1\":{\"687\":1}}],[\"es之间的数据同步\",{\"1\":{\"359\":1}}],[\"es\",{\"1\":{\"98\":6,\"681\":1,\"763\":2}}],[\"eslint\",{\"1\":{\"22\":2}}],[\"either\",{\"1\":{\"63\":1}}],[\"e>\",{\"1\":{\"54\":1}}],[\"elasticsavecontroller\",{\"1\":{\"688\":2}}],[\"elasticsearchcontroller\",{\"1\":{\"688\":1}}],[\"elasticsearch整合springboot\",{\"1\":{\"687\":1}}],[\"elasticsearch\",{\"1\":{\"681\":13,\"682\":1,\"687\":3}}],[\"elasticsearch全文检索\",{\"0\":{\"679\":1}}],[\"elastic\",{\"1\":{\"682\":1}}],[\"el\",{\"1\":{\"663\":1,\"670\":1}}],[\"ellipsis\",{\"1\":{\"616\":1}}],[\"elementcount\",{\"1\":{\"96\":1}}],[\"elements\",{\"1\":{\"53\":2,\"54\":2,\"56\":2,\"453\":3}}],[\"element\",{\"1\":{\"53\":2,\"56\":9,\"112\":2,\"453\":5}}],[\"elementdata赋值为elementdata\",{\"1\":{\"54\":1}}],[\"elementdata\",{\"1\":{\"53\":6,\"54\":10,\"56\":10,\"58\":2,\"96\":1}}],[\"else\",{\"1\":{\"14\":2,\"27\":1,\"54\":4,\"66\":3,\"67\":5,\"71\":8,\"87\":2,\"117\":1,\"120\":1,\"142\":1,\"143\":1,\"165\":1,\"220\":1,\"344\":1,\"406\":1,\"409\":2,\"419\":1,\"430\":1,\"491\":1,\"507\":1,\"562\":1,\"612\":1,\"630\":1,\"673\":1,\"688\":3,\"703\":6,\"710\":3,\"716\":1,\"803\":1,\"804\":1,\"806\":1,\"807\":1,\"810\":1,\"820\":1}}],[\"e\",{\"1\":{\"27\":8,\"56\":5,\"63\":1,\"66\":11,\"67\":11,\"71\":18,\"83\":2,\"87\":2,\"88\":2,\"89\":4,\"92\":4,\"93\":6,\"96\":3,\"98\":3,\"104\":4,\"108\":2,\"109\":2,\"110\":8,\"112\":12,\"120\":5,\"142\":14,\"143\":13,\"153\":4,\"156\":4,\"211\":4,\"317\":4,\"319\":6,\"328\":2,\"340\":2,\"400\":2,\"407\":2,\"439\":5,\"452\":3,\"453\":2,\"544\":4,\"551\":4,\"561\":1,\"567\":1,\"573\":4,\"574\":1,\"628\":9,\"651\":2,\"665\":2,\"666\":3,\"675\":2,\"681\":3,\"688\":4,\"703\":2,\"704\":6,\"710\":5,\"716\":5,\"728\":1,\"755\":2,\"756\":2,\"758\":2,\"788\":2,\"790\":2,\"796\":4,\"801\":2}}],[\"equiv=\",{\"1\":{\"438\":1}}],[\"equal\",{\"1\":{\"67\":1}}],[\"equalsandhashcode\",{\"1\":{\"220\":1,\"430\":1}}],[\"equals\",{\"1\":{\"17\":1,\"27\":2,\"66\":2,\"67\":3,\"69\":2,\"165\":2,\"452\":1,\"491\":2,\"558\":1,\"559\":1,\"560\":1,\"561\":3,\"566\":2,\"574\":3,\"575\":2,\"599\":1,\"663\":2,\"675\":2,\"697\":1,\"703\":1,\"710\":1,\"725\":1,\"732\":4,\"738\":1,\"741\":1,\"752\":1,\"755\":1,\"778\":1}}],[\"eq\",{\"1\":{\"26\":2,\"204\":1,\"209\":2,\"210\":2,\"214\":1,\"220\":2,\"352\":2,\"486\":2,\"558\":1,\"559\":4,\"561\":3,\"562\":1,\"564\":1,\"574\":3,\"599\":1,\"605\":2,\"655\":1,\"670\":2,\"672\":2,\"673\":6,\"674\":4,\"675\":7,\"690\":2,\"696\":1,\"706\":1,\"725\":1,\"733\":1,\"738\":1,\"741\":1,\"765\":1,\"769\":3,\"770\":8,\"790\":3,\"803\":2,\"804\":2,\"806\":4,\"807\":2,\"809\":1,\"817\":1}}],[\"env===\",{\"1\":{\"635\":1}}],[\"env==production参数\",{\"1\":{\"635\":1}}],[\"env\",{\"1\":{\"635\":1}}],[\"environmentvariablecredentialsprovider\",{\"1\":{\"241\":1}}],[\"environment\",{\"1\":{\"178\":1}}],[\"environment>\",{\"1\":{\"175\":2,\"178\":2}}],[\"environments>=\",{\"1\":{\"178\":1}}],[\"environments>\",{\"1\":{\"175\":1}}],[\"environments\",{\"1\":{\"175\":1,\"178\":2}}],[\"enhanced\",{\"1\":{\"450\":1}}],[\"en\",{\"1\":{\"175\":2,\"523\":3}}],[\"encode\",{\"1\":{\"710\":4}}],[\"encodedpolicy\",{\"1\":{\"665\":2}}],[\"encoding=\",{\"1\":{\"175\":2,\"269\":1,\"270\":1,\"278\":1,\"295\":1}}],[\"encountered\",{\"1\":{\"241\":1,\"665\":2}}],[\"enctype=\",{\"1\":{\"237\":2}}],[\"encryptpassword\",{\"1\":{\"22\":1,\"599\":3,\"605\":2,\"725\":2}}],[\"entries\",{\"1\":{\"742\":1}}],[\"entry\",{\"1\":{\"816\":3}}],[\"entry<long\",{\"1\":{\"816\":1}}],[\"entry<k\",{\"1\":{\"63\":2}}],[\"entryttl\",{\"1\":{\"706\":1}}],[\"entrypoint\",{\"1\":{\"642\":1}}],[\"entryset\",{\"1\":{\"63\":3,\"816\":1}}],[\"entities\",{\"1\":{\"663\":5,\"674\":5}}],[\"entities=\",{\"1\":{\"663\":1}}],[\"entity2\",{\"1\":{\"675\":2}}],[\"entity\",{\"1\":{\"655\":1,\"673\":4,\"674\":3,\"675\":17,\"758\":1}}],[\"enter\",{\"1\":{\"81\":1}}],[\"enumvalue\",{\"1\":{\"216\":1}}],[\"enum\",{\"1\":{\"81\":1,\"216\":2,\"493\":1,\"625\":1,\"666\":1}}],[\"ensure\",{\"1\":{\"56\":1,\"142\":2}}],[\"ensureexplicitcapacity\",{\"1\":{\"56\":2}}],[\"ensurecapacityinternal\",{\"1\":{\"56\":3}}],[\"end=false\",{\"1\":{\"549\":1}}],[\"endpoint\",{\"1\":{\"241\":8,\"318\":1,\"319\":3,\"665\":7,\"733\":3}}],[\"endpoint以华东1\",{\"1\":{\"241\":1,\"665\":1}}],[\"endtime2\",{\"1\":{\"575\":4}}],[\"endtime1\",{\"1\":{\"575\":4}}],[\"endtime\",{\"1\":{\"142\":2,\"616\":1}}],[\"endtime=system\",{\"1\":{\"142\":2}}],[\"end2\",{\"1\":{\"119\":1,\"715\":1}}],[\"end\",{\"1\":{\"56\":1,\"105\":1,\"117\":8,\"119\":1,\"120\":2,\"142\":3,\"431\":2,\"549\":1,\"703\":1,\"712\":4,\"715\":1,\"716\":2,\"763\":3,\"764\":1,\"780\":1,\"782\":3,\"789\":2,\"796\":2,\"817\":3}}],[\"enableaspectjautoproxy\",{\"1\":{\"770\":1}}],[\"enableautoconfiguration=\",{\"1\":{\"726\":1}}],[\"enableautoconfiguration=com\",{\"1\":{\"18\":1}}],[\"enableknife4j\",{\"1\":{\"727\":2}}],[\"enablecaching\",{\"1\":{\"706\":1}}],[\"enableconfigurationproperties\",{\"1\":{\"319\":2,\"706\":1,\"721\":1}}],[\"enablefeignclients\",{\"1\":{\"659\":1,\"706\":1}}],[\"enableswagger2\",{\"1\":{\"726\":1,\"727\":2}}],[\"enableswagger2webmvc\",{\"1\":{\"522\":2}}],[\"enablescrollwheelzoom\",{\"1\":{\"438\":1}}],[\"enabletilt\",{\"1\":{\"438\":1}}],[\"enabletransactionmanagement\",{\"1\":{\"224\":1,\"671\":2}}],[\"enablerotate\",{\"1\":{\"438\":1}}],[\"enable\",{\"1\":{\"355\":1,\"670\":1}}],[\"enablediscoveryclient\",{\"1\":{\"658\":1,\"659\":1,\"661\":1,\"706\":1}}],[\"enabled\",{\"1\":{\"342\":1,\"350\":1,\"351\":1}}],[\"enabledubbo\",{\"1\":{\"29\":1}}],[\"enablewebmvc注解\",{\"1\":{\"261\":1}}],[\"enablewebmvc\",{\"1\":{\"224\":1,\"232\":2,\"233\":1,\"256\":1,\"263\":2}}],[\"exist\",{\"1\":{\"670\":1,\"703\":1,\"725\":1,\"803\":1}}],[\"exists\",{\"1\":{\"430\":2,\"782\":1}}],[\"existing\",{\"1\":{\"66\":2}}],[\"exec\",{\"1\":{\"323\":1,\"355\":1,\"643\":1,\"646\":1,\"651\":1,\"652\":1}}],[\"executors\",{\"1\":{\"114\":1,\"115\":3,\"116\":1,\"119\":1,\"120\":2,\"142\":2,\"143\":2,\"712\":1,\"713\":1,\"715\":1,\"716\":2,\"721\":1,\"756\":1,\"758\":2,\"763\":1,\"790\":1}}],[\"executorservice\",{\"1\":{\"114\":1,\"116\":1,\"117\":1,\"119\":1,\"120\":2,\"142\":6,\"143\":5,\"539\":3,\"712\":1,\"715\":1,\"716\":2,\"756\":1,\"758\":2,\"763\":1,\"790\":1}}],[\"executor\",{\"1\":{\"114\":1,\"116\":1,\"119\":4,\"120\":3,\"121\":9,\"122\":9,\"715\":4,\"716\":3,\"717\":9,\"718\":9,\"721\":5,\"756\":2,\"758\":2,\"790\":2}}],[\"executiontime2\",{\"1\":{\"575\":4}}],[\"executiontime1\",{\"1\":{\"575\":5}}],[\"executionexception\",{\"1\":{\"105\":1,\"117\":2,\"119\":2,\"120\":2,\"142\":2,\"143\":2,\"712\":2,\"715\":2,\"716\":2,\"721\":1}}],[\"execution\",{\"1\":{\"81\":1,\"463\":1}}],[\"executing\",{\"1\":{\"81\":1}}],[\"execute\",{\"1\":{\"16\":1,\"17\":1,\"142\":2,\"442\":1,\"443\":1,\"444\":1,\"445\":1,\"703\":1,\"712\":1,\"780\":1,\"789\":1,\"790\":1,\"796\":1}}],[\"external\",{\"1\":{\"682\":7}}],[\"extern\",{\"1\":{\"544\":1,\"628\":1,\"758\":1}}],[\"extend\",{\"1\":{\"630\":2,\"635\":1}}],[\"extends\",{\"1\":{\"27\":2,\"54\":1,\"64\":4,\"83\":1,\"117\":1,\"120\":1,\"121\":3,\"122\":9,\"143\":1,\"196\":1,\"208\":2,\"220\":1,\"224\":1,\"230\":2,\"232\":1,\"245\":3,\"248\":1,\"263\":1,\"627\":1,\"668\":1,\"673\":2,\"712\":1,\"716\":1,\"717\":3,\"718\":9}}],[\"extension\",{\"1\":{\"544\":1,\"671\":1,\"728\":1}}],[\"extra的额外建议\",{\"1\":{\"486\":1}}],[\"extra\",{\"1\":{\"486\":1}}],[\"extname\",{\"1\":{\"239\":2}}],[\"ex对象发送给开发人员\",{\"1\":{\"230\":2}}],[\"ex\",{\"1\":{\"229\":1,\"230\":7,\"232\":1,\"233\":1,\"318\":2,\"319\":5,\"344\":2,\"742\":1,\"776\":1}}],[\"examplefile\",{\"1\":{\"241\":2,\"665\":1}}],[\"exampledir\",{\"1\":{\"241\":1}}],[\"exampleobject\",{\"1\":{\"241\":2,\"665\":1}}],[\"examplebucket\",{\"1\":{\"241\":1}}],[\"example\",{\"1\":{\"81\":1,\"132\":4}}],[\"examples\",{\"1\":{\"66\":1}}],[\"expiration\",{\"1\":{\"665\":3}}],[\"expired\",{\"1\":{\"728\":1}}],[\"expire\",{\"1\":{\"665\":2,\"703\":3,\"741\":1,\"742\":1,\"749\":3,\"776\":1,\"788\":1}}],[\"expireendtime\",{\"1\":{\"665\":3}}],[\"expiretime\",{\"1\":{\"557\":2,\"558\":2,\"559\":2,\"665\":2,\"756\":3,\"758\":2}}],[\"expireseconds\",{\"1\":{\"756\":2}}],[\"expiresin\",{\"1\":{\"457\":2}}],[\"expires\",{\"1\":{\"457\":7}}],[\"exposeproxy\",{\"1\":{\"770\":1}}],[\"expose\",{\"1\":{\"643\":1}}],[\"export\",{\"1\":{\"14\":6,\"22\":1,\"23\":1,\"140\":1,\"241\":2,\"504\":1,\"517\":1,\"518\":1,\"532\":1,\"609\":1,\"613\":1,\"615\":2,\"616\":2,\"620\":1,\"630\":1,\"639\":1,\"663\":1,\"664\":1}}],[\"expectedvalue\",{\"1\":{\"155\":1}}],[\"expanded\",{\"1\":{\"53\":1}}],[\"excludepathpatterns\",{\"1\":{\"739\":1,\"742\":1}}],[\"excludeproperty\",{\"1\":{\"198\":1}}],[\"exclude\",{\"1\":{\"661\":1}}],[\"excludefilters=\",{\"1\":{\"245\":1}}],[\"exclusions>\",{\"1\":{\"698\":1}}],[\"exclusion>\",{\"1\":{\"698\":1}}],[\"exclusion\",{\"1\":{\"104\":1}}],[\"excel表格内容为\",{\"1\":{\"525\":1}}],[\"excelwriter\",{\"1\":{\"431\":3,\"432\":3}}],[\"excelignore\",{\"1\":{\"430\":1}}],[\"excelproperty\",{\"1\":{\"430\":3,\"525\":2}}],[\"excel\",{\"0\":{\"429\":1},\"1\":{\"430\":2,\"571\":1},\"2\":{\"434\":1}}],[\"exceeds\",{\"1\":{\"56\":1}}],[\"exceptionhandler用于设置当前处理器类对应的异常类型\",{\"1\":{\"230\":1}}],[\"exceptionhandler\",{\"1\":{\"229\":1,\"230\":3,\"628\":3,\"666\":2}}],[\"exceptionally\",{\"1\":{\"120\":3,\"143\":2,\"716\":3}}],[\"exception\",{\"1\":{\"27\":4,\"83\":2,\"93\":3,\"105\":1,\"108\":1,\"120\":2,\"142\":2,\"143\":3,\"147\":1,\"167\":1,\"168\":1,\"169\":1,\"170\":1,\"171\":2,\"229\":2,\"230\":2,\"232\":7,\"233\":4,\"239\":1,\"241\":1,\"277\":1,\"279\":2,\"318\":1,\"319\":5,\"400\":1,\"407\":1,\"544\":2,\"551\":1,\"558\":1,\"561\":1,\"562\":1,\"573\":1,\"574\":1,\"627\":1,\"628\":1,\"665\":3,\"666\":8,\"675\":1,\"687\":1,\"688\":5,\"703\":1,\"704\":5,\"712\":1,\"716\":2,\"728\":1,\"733\":3,\"739\":1,\"742\":4,\"756\":1,\"758\":1,\"763\":1,\"781\":1,\"790\":1,\"796\":2}}],[\"exchange插件\",{\"1\":{\"361\":1}}],[\"exchange属性指定了一个交换机\",{\"1\":{\"354\":1}}],[\"exchangetypes\",{\"1\":{\"338\":4,\"340\":1,\"355\":1}}],[\"exchangebuilder\",{\"1\":{\"338\":1}}],[\"exchangename\",{\"1\":{\"335\":2,\"336\":2,\"337\":2}}],[\"exchange\",{\"1\":{\"27\":9,\"334\":1,\"338\":8,\"340\":2,\"344\":1,\"354\":2,\"355\":8,\"728\":5}}],[\"pq7xvp9bxdr\",{\"1\":{\"824\":1}}],[\"pv\",{\"1\":{\"821\":1}}],[\"pictures\",{\"1\":{\"665\":2}}],[\"picgo\",{\"1\":{\"43\":3}}],[\"picgo下载地址\",{\"1\":{\"43\":1}}],[\"picgo+sm\",{\"1\":{\"43\":2}}],[\"pms\",{\"1\":{\"655\":1,\"666\":1,\"667\":1,\"670\":9,\"672\":2,\"674\":2,\"675\":8,\"721\":3}}],[\"ps\",{\"1\":{\"639\":1,\"643\":1}}],[\"pcre\",{\"1\":{\"639\":2}}],[\"p0\",{\"1\":{\"559\":1,\"561\":1}}],[\"png\",{\"1\":{\"439\":1,\"455\":1}}],[\"pnpm\",{\"1\":{\"44\":1}}],[\"phrase\",{\"1\":{\"685\":2}}],[\"phrase短语匹配\",{\"1\":{\"685\":1}}],[\"php$\",{\"1\":{\"691\":2}}],[\"php\",{\"1\":{\"438\":1,\"691\":3}}],[\"phone\",{\"1\":{\"211\":2,\"518\":1,\"519\":4,\"596\":2,\"616\":1,\"725\":1,\"738\":10,\"741\":10,\"788\":4}}],[\"pwd\",{\"1\":{\"323\":1}}],[\"p>\",{\"1\":{\"220\":3}}],[\"pexpire\",{\"1\":{\"749\":1,\"782\":3}}],[\"peek\",{\"1\":{\"112\":3}}],[\"pessimistic\",{\"1\":{\"110\":1,\"766\":1}}],[\"persist\",{\"1\":{\"749\":1}}],[\"persistencetype\",{\"1\":{\"616\":1}}],[\"persistencekey\",{\"1\":{\"616\":1}}],[\"persistent实现\",{\"1\":{\"359\":1}}],[\"persistent\",{\"1\":{\"347\":1,\"359\":1}}],[\"permissions\",{\"1\":{\"664\":1}}],[\"permiti最多只有一个\",{\"1\":{\"156\":1}}],[\"permit\",{\"1\":{\"156\":3}}],[\"permits\",{\"1\":{\"109\":1}}],[\"percentage\",{\"1\":{\"372\":1}}],[\"perform\",{\"1\":{\"81\":1}}],[\"p\",{\"1\":{\"66\":11,\"67\":11,\"72\":1,\"220\":27,\"317\":3,\"323\":1,\"328\":2,\"379\":1,\"426\":2,\"533\":1,\"643\":2,\"646\":1,\"651\":2,\"652\":1,\"665\":1,\"681\":3}}],[\"platform\",{\"1\":{\"523\":1}}],[\"platformtransactionmanager\",{\"1\":{\"224\":1}}],[\"plain\",{\"1\":{\"523\":1,\"534\":1,\"643\":1,\"646\":1}}],[\"planetcode\",{\"1\":{\"518\":1}}],[\"place\",{\"1\":{\"444\":1}}],[\"placeapi\",{\"1\":{\"444\":1}}],[\"placeholder=\",{\"1\":{\"520\":1}}],[\"placeholder\",{\"1\":{\"295\":1}}],[\"placed\",{\"1\":{\"54\":1,\"64\":1,\"71\":1}}],[\"plusseconds\",{\"1\":{\"756\":1,\"758\":1}}],[\"plus配置\",{\"1\":{\"655\":1}}],[\"plus中设置\",{\"1\":{\"605\":1}}],[\"plus3\",{\"1\":{\"598\":1}}],[\"plus官网\",{\"1\":{\"195\":1}}],[\"plus\",{\"0\":{\"195\":1,\"594\":1},\"1\":{\"32\":1,\"33\":1,\"196\":1,\"201\":1,\"211\":1,\"215\":1,\"216\":1,\"455\":1,\"594\":1,\"595\":1,\"605\":1,\"655\":2,\"663\":2},\"2\":{\"221\":1,\"222\":1}}],[\"plugin>\",{\"1\":{\"224\":1,\"245\":1,\"248\":1}}],[\"plugin<\",{\"1\":{\"224\":1,\"245\":1,\"248\":1}}],[\"plugin\",{\"1\":{\"14\":1,\"496\":1,\"504\":1,\"687\":1}}],[\"plugins>\",{\"1\":{\"224\":1,\"245\":1,\"248\":1}}],[\"plugins\",{\"1\":{\"14\":1,\"263\":2,\"355\":1,\"504\":1,\"522\":1,\"544\":1,\"671\":1,\"681\":2,\"727\":1,\"733\":4}}],[\"pom\",{\"1\":{\"643\":1}}],[\"poi\",{\"1\":{\"444\":1}}],[\"pointer指针形成一个链表\",{\"1\":{\"476\":1}}],[\"pointer\",{\"1\":{\"476\":1}}],[\"point\",{\"1\":{\"422\":1,\"438\":3,\"439\":7,\"443\":1,\"816\":2}}],[\"policyconds\",{\"1\":{\"665\":4}}],[\"policyconditions\",{\"1\":{\"665\":4}}],[\"policy\",{\"1\":{\"665\":3,\"749\":1}}],[\"polyline\",{\"1\":{\"439\":3}}],[\"poll\",{\"1\":{\"112\":9,\"575\":1}}],[\"po到vo的转换函数\",{\"1\":{\"220\":1}}],[\"po\",{\"1\":{\"201\":1,\"215\":1,\"340\":1}}],[\"pojoparamforjson\",{\"1\":{\"257\":2}}],[\"pojoparam\",{\"1\":{\"251\":2,\"252\":2}}],[\"pojo参数传递\",{\"1\":{\"251\":1,\"252\":1}}],[\"pojo参数\",{\"0\":{\"251\":1},\"1\":{\"251\":1,\"252\":1}}],[\"pojo\",{\"1\":{\"175\":2,\"179\":1,\"251\":1,\"252\":1,\"257\":2,\"258\":2,\"261\":1}}],[\"pool2<\",{\"1\":{\"398\":1}}],[\"pool是连接池\",{\"1\":{\"398\":1}}],[\"poolconfig\",{\"1\":{\"396\":6}}],[\"pooled\",{\"1\":{\"175\":2,\"178\":2}}],[\"pool\",{\"1\":{\"114\":1,\"294\":1,\"295\":1,\"398\":2,\"655\":1,\"721\":5}}],[\"power\",{\"1\":{\"63\":2,\"66\":1}}],[\"positive\",{\"1\":{\"81\":1}}],[\"position=\",{\"1\":{\"518\":2}}],[\"position\",{\"1\":{\"56\":2}}],[\"possible\",{\"1\":{\"66\":1,\"486\":1}}],[\"posttags\",{\"1\":{\"710\":1}}],[\"postsignature\",{\"1\":{\"665\":2}}],[\"postpolicy\",{\"1\":{\"665\":3}}],[\"postprocessmessage\",{\"1\":{\"355\":1}}],[\"postobject请求最大可支持的文件大小为5\",{\"1\":{\"665\":1}}],[\"postman\",{\"1\":{\"521\":1}}],[\"postmapping\",{\"1\":{\"16\":2,\"17\":1,\"21\":2,\"23\":1,\"208\":1,\"224\":1,\"239\":1,\"241\":1,\"262\":1,\"453\":2,\"607\":2,\"608\":1,\"620\":1,\"674\":1,\"688\":2,\"764\":1,\"765\":1,\"801\":2,\"819\":1}}],[\"postconstruct\",{\"1\":{\"303\":1,\"790\":1}}],[\"postconstruct和\",{\"0\":{\"303\":1}}],[\"post请求发送单个参数\",{\"1\":{\"248\":1}}],[\"posthandle\",{\"1\":{\"232\":2,\"233\":2}}],[\"post\",{\"1\":{\"16\":6,\"17\":1,\"237\":1,\"262\":1,\"453\":1,\"603\":1,\"620\":2,\"663\":1,\"682\":12,\"686\":1,\"687\":2,\"710\":1,\"728\":1,\"821\":1}}],[\"port=8082\",{\"1\":{\"771\":1}}],[\"port><\",{\"1\":{\"248\":1}}],[\"port>\",{\"1\":{\"224\":1,\"245\":1}}],[\"port\",{\"1\":{\"29\":2,\"332\":1,\"340\":1,\"398\":1,\"416\":1,\"423\":1,\"533\":1,\"551\":2,\"595\":1,\"698\":1,\"728\":1}}],[\"pubsub\",{\"1\":{\"675\":5,\"793\":1}}],[\"publish\",{\"1\":{\"670\":1,\"731\":7,\"793\":1}}],[\"publisher\",{\"1\":{\"344\":2}}],[\"publisherapplicationtest\",{\"1\":{\"332\":1}}],[\"publisher<\",{\"1\":{\"27\":1}}],[\"public\",{\"1\":{\"16\":9,\"17\":5,\"18\":2,\"21\":2,\"23\":1,\"26\":1,\"27\":7,\"29\":5,\"54\":3,\"56\":2,\"58\":3,\"64\":8,\"66\":2,\"67\":2,\"81\":1,\"83\":9,\"87\":3,\"88\":4,\"89\":3,\"91\":6,\"92\":4,\"93\":5,\"95\":2,\"96\":1,\"98\":1,\"100\":1,\"103\":1,\"104\":2,\"105\":3,\"107\":3,\"108\":2,\"109\":1,\"110\":8,\"111\":1,\"112\":2,\"115\":1,\"117\":3,\"119\":7,\"120\":8,\"121\":9,\"122\":9,\"124\":2,\"130\":2,\"132\":4,\"140\":1,\"142\":7,\"143\":11,\"147\":3,\"148\":1,\"149\":1,\"151\":3,\"153\":2,\"156\":5,\"165\":9,\"167\":2,\"168\":2,\"169\":2,\"170\":2,\"171\":5,\"175\":5,\"176\":1,\"184\":1,\"192\":1,\"196\":1,\"208\":9,\"209\":2,\"210\":1,\"214\":2,\"216\":1,\"217\":2,\"219\":2,\"220\":15,\"224\":29,\"226\":13,\"229\":2,\"230\":14,\"232\":11,\"233\":6,\"239\":1,\"241\":6,\"245\":8,\"247\":8,\"248\":5,\"250\":2,\"251\":2,\"252\":3,\"253\":1,\"254\":2,\"256\":2,\"257\":1,\"258\":1,\"259\":4,\"261\":8,\"262\":17,\"263\":3,\"267\":8,\"269\":10,\"270\":5,\"275\":8,\"276\":8,\"277\":3,\"278\":11,\"279\":5,\"282\":4,\"283\":4,\"285\":3,\"286\":3,\"287\":1,\"288\":2,\"298\":2,\"299\":2,\"301\":1,\"302\":2,\"303\":4,\"304\":7,\"305\":1,\"306\":1,\"307\":3,\"309\":7,\"310\":6,\"312\":10,\"313\":3,\"318\":5,\"319\":14,\"332\":4,\"333\":3,\"335\":3,\"336\":3,\"337\":3,\"338\":18,\"339\":3,\"340\":2,\"344\":5,\"347\":2,\"351\":9,\"352\":3,\"355\":9,\"359\":2,\"395\":1,\"396\":2,\"399\":2,\"400\":6,\"407\":5,\"408\":2,\"409\":3,\"416\":2,\"418\":1,\"423\":2,\"430\":13,\"431\":1,\"432\":1,\"433\":1,\"442\":1,\"443\":1,\"444\":1,\"445\":1,\"451\":3,\"452\":4,\"453\":3,\"457\":6,\"491\":11,\"493\":5,\"512\":1,\"522\":2,\"525\":6,\"526\":2,\"531\":1,\"534\":1,\"537\":1,\"538\":1,\"539\":1,\"540\":1,\"544\":3,\"551\":4,\"558\":1,\"559\":2,\"560\":1,\"561\":1,\"562\":1,\"564\":1,\"565\":1,\"566\":2,\"573\":1,\"574\":1,\"575\":2,\"599\":2,\"605\":1,\"607\":3,\"608\":3,\"613\":1,\"620\":2,\"623\":5,\"624\":5,\"625\":4,\"627\":6,\"628\":3,\"655\":5,\"658\":2,\"659\":8,\"660\":3,\"661\":2,\"663\":7,\"665\":4,\"666\":8,\"667\":5,\"668\":4,\"670\":4,\"671\":2,\"672\":6,\"673\":7,\"674\":4,\"675\":7,\"687\":5,\"688\":7,\"690\":2,\"696\":1,\"697\":1,\"698\":2,\"702\":1,\"703\":5,\"704\":10,\"706\":5,\"710\":2,\"712\":12,\"713\":1,\"715\":7,\"716\":8,\"717\":9,\"718\":9,\"720\":2,\"721\":4,\"725\":1,\"726\":2,\"727\":2,\"728\":3,\"732\":2,\"733\":2,\"738\":2,\"739\":4,\"740\":4,\"741\":2,\"742\":8,\"747\":4,\"751\":2,\"752\":1,\"755\":1,\"756\":3,\"758\":8,\"763\":6,\"764\":2,\"765\":2,\"770\":4,\"777\":6,\"778\":4,\"780\":1,\"781\":2,\"788\":2,\"789\":2,\"790\":3,\"796\":2,\"801\":3,\"802\":2,\"803\":3,\"804\":1,\"805\":2,\"806\":5,\"807\":3,\"809\":1,\"810\":3,\"817\":2,\"819\":2,\"820\":2}}],[\"pull\",{\"1\":{\"317\":1,\"323\":1,\"328\":1,\"426\":1,\"651\":1,\"652\":1,\"681\":2}}],[\"putall\",{\"1\":{\"741\":1,\"788\":1}}],[\"putobjectargs\",{\"1\":{\"318\":4,\"319\":8,\"733\":8}}],[\"putobject\",{\"1\":{\"241\":2,\"318\":1,\"319\":2,\"665\":2,\"733\":2}}],[\"putobjectresult\",{\"1\":{\"241\":2,\"665\":2}}],[\"putobjectrequest\",{\"1\":{\"241\":6,\"665\":4}}],[\"putmapping\",{\"1\":{\"208\":1,\"224\":1,\"262\":1,\"751\":1,\"806\":2}}],[\"putmapentries\",{\"1\":{\"64\":1}}],[\"puttreeval\",{\"1\":{\"66\":1}}],[\"putval\",{\"1\":{\"66\":3}}],[\"put\",{\"1\":{\"16\":2,\"17\":6,\"66\":6,\"100\":1,\"110\":6,\"112\":5,\"184\":3,\"319\":2,\"339\":2,\"400\":2,\"407\":1,\"418\":2,\"423\":4,\"453\":1,\"493\":2,\"659\":3,\"660\":2,\"663\":2,\"665\":8,\"666\":4,\"670\":2,\"672\":1,\"674\":1,\"675\":2,\"682\":8,\"686\":2,\"710\":1,\"725\":3,\"728\":1,\"733\":1,\"817\":1}}],[\"push\",{\"1\":{\"14\":2,\"519\":1,\"531\":1,\"612\":2,\"613\":1}}],[\"packaging>\",{\"1\":{\"653\":1}}],[\"package=com\",{\"1\":{\"655\":1}}],[\"package=\",{\"1\":{\"299\":1,\"301\":1}}],[\"package\",{\"1\":{\"89\":1,\"201\":2,\"215\":1,\"407\":1,\"408\":1,\"409\":1,\"430\":2,\"522\":1,\"539\":1,\"544\":1,\"551\":2,\"623\":1,\"624\":1,\"625\":1,\"627\":1,\"628\":1,\"643\":1,\"655\":1,\"659\":1,\"671\":1,\"727\":1,\"758\":1}}],[\"pair<>\",{\"1\":{\"566\":1,\"575\":2}}],[\"padding\",{\"1\":{\"438\":1}}],[\"payload\",{\"1\":{\"668\":1}}],[\"payload>\",{\"1\":{\"668\":1}}],[\"payorder\",{\"1\":{\"355\":3}}],[\"payorderdto\",{\"1\":{\"355\":1}}],[\"payclient\",{\"1\":{\"355\":3}}],[\"pay\",{\"1\":{\"340\":5,\"352\":1,\"764\":3}}],[\"pattern\",{\"1\":{\"393\":1,\"599\":2,\"605\":1,\"666\":1,\"667\":1,\"750\":3,\"793\":2}}],[\"pattern=\",{\"1\":{\"259\":3}}],[\"pathrewrite\",{\"1\":{\"611\":1}}],[\"pathmatch\",{\"1\":{\"522\":1}}],[\"paths\",{\"1\":{\"522\":1,\"670\":6,\"726\":1,\"727\":1}}],[\"pathselectors\",{\"1\":{\"522\":2,\"726\":1,\"727\":2}}],[\"pathbuild\",{\"1\":{\"430\":1}}],[\"pathparam\",{\"1\":{\"407\":4}}],[\"pathurl\",{\"1\":{\"319\":14}}],[\"path>\",{\"1\":{\"224\":1,\"245\":1,\"248\":1}}],[\"pathvariable注解\",{\"1\":{\"262\":1}}],[\"pathvariable\",{\"1\":{\"208\":4,\"214\":1,\"224\":2,\"262\":5,\"608\":1,\"670\":2,\"674\":1,\"688\":1,\"747\":1,\"765\":1,\"802\":1,\"805\":1,\"806\":3,\"807\":1}}],[\"path\",{\"1\":{\"27\":3,\"29\":1,\"239\":2,\"319\":2,\"423\":1,\"430\":5,\"517\":3,\"519\":1,\"522\":1,\"531\":1,\"612\":3,\"615\":2,\"670\":2,\"710\":2,\"733\":3}}],[\"path=$path\",{\"1\":{\"639\":1}}],[\"path=\",{\"1\":{\"27\":2,\"663\":3,\"665\":1,\"728\":1}}],[\"pathname\",{\"1\":{\"14\":1,\"430\":6,\"612\":3,\"613\":1,\"630\":2}}],[\"pass\",{\"1\":{\"646\":1,\"691\":6,\"697\":1,\"728\":2}}],[\"pass=admin\",{\"1\":{\"328\":1}}],[\"password=12345678\",{\"1\":{\"651\":2}}],[\"password=root\",{\"1\":{\"224\":1,\"295\":1}}],[\"password\",{\"1\":{\"175\":3,\"178\":2,\"211\":3,\"224\":3,\"294\":1,\"295\":2,\"310\":4,\"312\":3,\"332\":1,\"340\":1,\"398\":1,\"533\":1,\"551\":2,\"557\":2,\"558\":4,\"560\":1,\"561\":4,\"574\":4,\"595\":1,\"596\":1,\"655\":2,\"725\":4}}],[\"passed\",{\"1\":{\"140\":1}}],[\"paginationinterceptor\",{\"1\":{\"671\":8}}],[\"paginationinnerinterceptor\",{\"1\":{\"218\":1,\"219\":1}}],[\"pagination\",{\"1\":{\"544\":1}}],[\"pagination=\",{\"1\":{\"22\":1,\"616\":1}}],[\"pageutils\",{\"1\":{\"670\":4,\"673\":6,\"674\":3,\"675\":5}}],[\"pageheaderwrapper>\",{\"1\":{\"615\":1}}],[\"pagenavs\",{\"1\":{\"710\":3}}],[\"pagenum\",{\"1\":{\"540\":2,\"544\":2}}],[\"pageno\",{\"1\":{\"220\":3}}],[\"pagereadlistener<demodata>\",{\"1\":{\"433\":1}}],[\"pageout会耗费一段时间\",{\"1\":{\"347\":1}}],[\"pagedto\",{\"1\":{\"220\":2}}],[\"pagedto<v>\",{\"1\":{\"220\":4}}],[\"pagedto<>\",{\"1\":{\"220\":4}}],[\"pagedto<uservo>\",{\"1\":{\"220\":4}}],[\"pagedto<t>\",{\"1\":{\"220\":1}}],[\"page<shop>\",{\"1\":{\"817\":1}}],[\"page<blog>\",{\"1\":{\"803\":1}}],[\"page<>\",{\"1\":{\"540\":1,\"544\":2,\"551\":1,\"573\":1,\"803\":1,\"817\":1}}],[\"page<p>\",{\"1\":{\"220\":3}}],[\"page<t>\",{\"1\":{\"220\":5}}],[\"page<user>\",{\"1\":{\"219\":1,\"220\":4,\"540\":1,\"544\":4,\"551\":1,\"573\":1}}],[\"pagequery\",{\"1\":{\"220\":3}}],[\"pagecontainer>\",{\"1\":{\"22\":2,\"23\":1}}],[\"page\",{\"1\":{\"22\":2,\"208\":1,\"219\":11,\"220\":12,\"261\":1,\"540\":1,\"544\":5,\"551\":3,\"573\":3,\"616\":2,\"670\":9,\"673\":4,\"674\":6,\"675\":9,\"691\":3,\"732\":2,\"803\":4,\"817\":6}}],[\"pages目录下查找内容\",{\"1\":{\"263\":1}}],[\"pagesize\",{\"1\":{\"22\":5,\"220\":3,\"540\":2,\"544\":2,\"616\":1,\"710\":5}}],[\"pages\",{\"1\":{\"16\":1,\"201\":1,\"219\":3,\"220\":2,\"232\":2,\"263\":3,\"517\":3,\"691\":1}}],[\"pageparams>\",{\"1\":{\"14\":1}}],[\"party\",{\"1\":{\"665\":2}}],[\"partitions\",{\"1\":{\"486\":1}}],[\"parties\",{\"1\":{\"108\":2}}],[\"particular\",{\"1\":{\"81\":1,\"142\":1}}],[\"partial<layoutsettings>\",{\"1\":{\"14\":2,\"613\":1}}],[\"parent\",{\"1\":{\"801\":1}}],[\"parentcid\",{\"1\":{\"690\":2,\"697\":2,\"702\":2}}],[\"parentpath\",{\"1\":{\"670\":4}}],[\"parent>\",{\"1\":{\"663\":1}}],[\"parent<\",{\"1\":{\"663\":1}}],[\"parenttag\",{\"1\":{\"518\":3}}],[\"parentid\",{\"1\":{\"509\":2}}],[\"parallelstream\",{\"1\":{\"512\":1}}],[\"paramarr\",{\"1\":{\"452\":5}}],[\"param注解改变map集合的默认key的名称\",{\"1\":{\"190\":1}}],[\"parametertype=\",{\"1\":{\"182\":1}}],[\"parametertypes\",{\"1\":{\"168\":2,\"170\":3}}],[\"parametercount\",{\"1\":{\"170\":1}}],[\"parameters\",{\"1\":{\"168\":1,\"170\":1,\"211\":3}}],[\"parameter\",{\"1\":{\"168\":1,\"170\":1,\"668\":1}}],[\"param\",{\"1\":{\"21\":4,\"23\":2,\"27\":2,\"29\":3,\"54\":2,\"56\":4,\"64\":4,\"66\":7,\"67\":6,\"142\":3,\"184\":5,\"207\":2,\"208\":2,\"220\":11,\"250\":2,\"251\":1,\"252\":1,\"253\":1,\"254\":2,\"256\":1,\"257\":1,\"258\":1,\"259\":4,\"319\":18,\"407\":3,\"451\":4,\"452\":9,\"453\":2,\"512\":1,\"599\":1,\"605\":2,\"664\":1,\"672\":2,\"674\":1,\"691\":1,\"710\":32,\"732\":4,\"747\":1,\"751\":1,\"755\":1,\"764\":1,\"777\":1,\"817\":2}}],[\"paramsserializer\",{\"1\":{\"532\":1}}],[\"params\",{\"1\":{\"14\":2,\"21\":2,\"22\":5,\"23\":7,\"26\":1,\"423\":2,\"512\":1,\"531\":1,\"532\":3,\"558\":10,\"559\":1,\"560\":4,\"561\":6,\"562\":2,\"564\":1,\"565\":1,\"574\":6,\"616\":1,\"625\":2,\"670\":6,\"673\":3,\"674\":5,\"675\":15,\"691\":1}}],[\"parsearray\",{\"1\":{\"733\":1}}],[\"parsedstringterms\",{\"1\":{\"710\":5}}],[\"parsedlongterms\",{\"1\":{\"710\":3}}],[\"parsednested\",{\"1\":{\"710\":1}}],[\"parse\",{\"1\":{\"532\":1,\"664\":1}}],[\"parseobject\",{\"1\":{\"687\":1,\"698\":1,\"702\":1,\"710\":1}}],[\"parseobj\",{\"1\":{\"457\":1}}],[\"parselong\",{\"1\":{\"27\":2,\"710\":1}}],[\"parkutil\",{\"1\":{\"84\":1}}],[\"parkuntil\",{\"1\":{\"81\":2}}],[\"parknanos\",{\"1\":{\"81\":2,\"84\":1}}],[\"park\",{\"1\":{\"81\":2,\"156\":1,\"704\":8}}],[\"pragma\",{\"1\":{\"523\":1}}],[\"pretags\",{\"1\":{\"710\":1}}],[\"pre\",{\"1\":{\"710\":1}}],[\"preset\",{\"1\":{\"584\":1}}],[\"present\",{\"1\":{\"67\":1}}],[\"precachejob\",{\"1\":{\"544\":1,\"551\":1,\"573\":1}}],[\"preprocessing\",{\"1\":{\"463\":1}}],[\"preparing\",{\"1\":{\"211\":1}}],[\"prepared\",{\"1\":{\"211\":1}}],[\"prefetch\",{\"1\":{\"333\":1}}],[\"prefixkeyswith\",{\"1\":{\"706\":1}}],[\"prefix\",{\"1\":{\"241\":1,\"319\":11,\"551\":1,\"635\":1,\"721\":1,\"738\":1,\"777\":3,\"778\":7,\"780\":2,\"788\":1}}],[\"predestroy\",{\"0\":{\"303\":1},\"1\":{\"303\":1}}],[\"predicates\",{\"1\":{\"27\":2,\"661\":2,\"663\":5,\"665\":1,\"710\":2,\"721\":1,\"728\":1}}],[\"prehandle\",{\"1\":{\"232\":8,\"233\":2,\"739\":1,\"742\":2}}],[\"preemption\",{\"1\":{\"104\":1}}],[\"previous\",{\"1\":{\"66\":2,\"67\":1}}],[\"previously\",{\"1\":{\"66\":2,\"67\":1}}],[\"pr\",{\"1\":{\"44\":1}}],[\"priorityqueue<>\",{\"1\":{\"575\":1}}],[\"priorityqueue<pair<user\",{\"1\":{\"575\":1}}],[\"priorityqueue\",{\"1\":{\"575\":5}}],[\"priorityblockingqueue\",{\"1\":{\"112\":1}}],[\"price\",{\"1\":{\"143\":5,\"670\":1,\"675\":1}}],[\"prims\",{\"1\":{\"140\":1}}],[\"primary\",{\"1\":{\"9\":1,\"14\":2,\"22\":1,\"23\":1,\"486\":1,\"509\":1,\"518\":1,\"520\":1,\"534\":1,\"557\":2,\"596\":1,\"670\":8,\"672\":1,\"682\":1,\"764\":3,\"801\":2,\"806\":1}}],[\"printkeyvalue\",{\"1\":{\"143\":1}}],[\"printuppercase\",{\"1\":{\"143\":1}}],[\"print\",{\"1\":{\"132\":1}}],[\"printflag\",{\"1\":{\"132\":2}}],[\"print15\",{\"1\":{\"93\":2}}],[\"print10\",{\"1\":{\"93\":2}}],[\"print5\",{\"1\":{\"93\":2}}],[\"printstacktrace\",{\"1\":{\"83\":1,\"92\":2,\"93\":3,\"108\":1,\"109\":1,\"110\":2,\"112\":4,\"142\":7,\"143\":2,\"153\":2,\"156\":2,\"318\":1,\"319\":4,\"407\":1,\"452\":1,\"675\":1,\"703\":1,\"710\":1,\"790\":1}}],[\"println\",{\"1\":{\"16\":4,\"17\":1,\"19\":2,\"27\":2,\"83\":4,\"87\":1,\"88\":2,\"89\":2,\"91\":2,\"92\":2,\"93\":3,\"95\":1,\"99\":1,\"100\":1,\"103\":5,\"104\":4,\"105\":5,\"107\":4,\"108\":2,\"109\":2,\"110\":8,\"111\":4,\"112\":20,\"117\":1,\"119\":9,\"120\":13,\"132\":1,\"142\":10,\"143\":25,\"147\":1,\"148\":1,\"149\":1,\"151\":1,\"152\":8,\"153\":4,\"155\":6,\"156\":10,\"165\":5,\"168\":1,\"169\":2,\"175\":1,\"182\":1,\"184\":1,\"196\":2,\"204\":1,\"206\":1,\"208\":1,\"211\":2,\"215\":1,\"219\":3,\"224\":1,\"229\":1,\"232\":6,\"233\":3,\"241\":7,\"245\":1,\"247\":4,\"248\":3,\"250\":4,\"251\":1,\"252\":1,\"253\":1,\"254\":2,\"256\":1,\"257\":1,\"258\":1,\"259\":7,\"261\":4,\"262\":13,\"267\":4,\"269\":2,\"270\":2,\"275\":1,\"276\":1,\"278\":4,\"279\":3,\"282\":1,\"283\":1,\"285\":1,\"286\":1,\"288\":6,\"299\":1,\"302\":1,\"303\":3,\"304\":3,\"307\":1,\"310\":1,\"312\":1,\"313\":2,\"318\":1,\"319\":1,\"332\":1,\"333\":2,\"335\":2,\"336\":2,\"337\":2,\"338\":4,\"339\":1,\"395\":3,\"399\":2,\"400\":15,\"407\":3,\"431\":1,\"433\":1,\"442\":1,\"443\":1,\"444\":1,\"445\":1,\"453\":1,\"454\":1,\"457\":1,\"491\":5,\"525\":2,\"526\":1,\"537\":1,\"538\":1,\"539\":2,\"551\":3,\"561\":1,\"574\":1,\"598\":1,\"655\":2,\"665\":19,\"687\":7,\"696\":1,\"698\":1,\"704\":3,\"706\":1,\"712\":15,\"715\":9,\"716\":13,\"733\":1,\"763\":3,\"781\":1,\"788\":1}}],[\"private\",{\"1\":{\"17\":1,\"18\":2,\"19\":1,\"27\":5,\"29\":1,\"53\":5,\"56\":5,\"87\":1,\"91\":1,\"92\":1,\"93\":5,\"110\":3,\"117\":4,\"132\":1,\"140\":1,\"142\":2,\"143\":3,\"151\":1,\"152\":2,\"155\":3,\"165\":1,\"171\":7,\"175\":5,\"196\":1,\"208\":3,\"211\":1,\"216\":3,\"217\":4,\"220\":18,\"224\":7,\"226\":3,\"230\":2,\"232\":2,\"233\":2,\"241\":7,\"251\":2,\"252\":5,\"267\":2,\"269\":1,\"270\":2,\"278\":1,\"279\":1,\"282\":2,\"283\":2,\"285\":1,\"286\":2,\"288\":5,\"304\":1,\"305\":1,\"307\":2,\"310\":4,\"312\":4,\"313\":1,\"319\":10,\"332\":1,\"355\":5,\"395\":1,\"396\":1,\"399\":1,\"400\":3,\"407\":1,\"409\":1,\"416\":4,\"423\":2,\"430\":7,\"452\":2,\"453\":9,\"455\":1,\"457\":2,\"491\":1,\"493\":2,\"512\":2,\"525\":2,\"539\":3,\"544\":3,\"551\":6,\"561\":1,\"573\":3,\"574\":1,\"575\":1,\"599\":3,\"607\":1,\"608\":1,\"623\":4,\"625\":3,\"627\":2,\"655\":1,\"659\":3,\"660\":2,\"663\":2,\"665\":5,\"666\":10,\"667\":8,\"668\":2,\"670\":2,\"673\":5,\"687\":3,\"688\":5,\"697\":1,\"710\":5,\"721\":3,\"726\":1,\"727\":1,\"733\":4,\"738\":1,\"740\":1,\"742\":2,\"747\":2,\"755\":2,\"756\":4,\"758\":4,\"763\":3,\"765\":3,\"777\":2,\"780\":1,\"781\":1,\"788\":2,\"789\":1,\"790\":5,\"796\":2,\"802\":1,\"803\":2,\"804\":1,\"806\":1,\"810\":3}}],[\"pro芯片\",{\"1\":{\"655\":1}}],[\"prod\",{\"1\":{\"635\":1,\"636\":1}}],[\"productfeignservice\",{\"1\":{\"710\":3}}],[\"productsaveserviceimpl\",{\"1\":{\"688\":1}}],[\"productsaveservice\",{\"1\":{\"688\":4}}],[\"productstatusup\",{\"1\":{\"688\":4}}],[\"productattrvalueservice\",{\"1\":{\"675\":1,\"688\":1}}],[\"productattrvalueentity\",{\"1\":{\"675\":2}}],[\"productconstant\",{\"1\":{\"674\":1,\"688\":1}}],[\"product模块使用模版引擎\",{\"1\":{\"690\":1}}],[\"product模块\",{\"1\":{\"663\":1}}],[\"product<\",{\"1\":{\"653\":1,\"655\":2}}],[\"production\",{\"1\":{\"635\":1}}],[\"product\",{\"1\":{\"382\":1,\"383\":1,\"655\":5,\"663\":5,\"666\":2,\"667\":2,\"669\":1,\"670\":3,\"671\":2,\"672\":1,\"673\":1,\"675\":3,\"688\":7,\"691\":1,\"706\":2,\"710\":9,\"721\":1}}],[\"product相关的key\",{\"1\":{\"382\":1}}],[\"productname\",{\"1\":{\"143\":8}}],[\"programmap\",{\"1\":{\"493\":2}}],[\"program>\",{\"1\":{\"493\":2}}],[\"programfactory\",{\"1\":{\"493\":2}}],[\"programenums\",{\"1\":{\"493\":2}}],[\"program\",{\"1\":{\"491\":16,\"493\":5,\"694\":1}}],[\"promise\",{\"1\":{\"532\":2}}],[\"promise<api\",{\"1\":{\"613\":1}}],[\"promise<any>\",{\"1\":{\"14\":1,\"630\":1}}],[\"promise<\",{\"1\":{\"613\":1}}],[\"promise<void>\",{\"1\":{\"14\":2}}],[\"promise<initialstate>\",{\"1\":{\"14\":1}}],[\"prometheus\",{\"1\":{\"485\":1}}],[\"province\",{\"1\":{\"252\":1,\"292\":1,\"293\":1,\"443\":1,\"444\":10}}],[\"provider\",{\"1\":{\"29\":2}}],[\"problem\",{\"1\":{\"241\":1,\"665\":2}}],[\"proxy\",{\"1\":{\"165\":3,\"611\":1,\"646\":1,\"691\":6,\"697\":2,\"770\":2,\"777\":4,\"790\":3,\"796\":1}}],[\"proxyutil\",{\"1\":{\"165\":3}}],[\"protable\",{\"1\":{\"616\":1}}],[\"prototype\",{\"1\":{\"302\":1,\"675\":1}}],[\"protocol\",{\"1\":{\"29\":2,\"332\":1}}],[\"protected\",{\"1\":{\"117\":1,\"224\":4,\"232\":2,\"245\":9,\"248\":4,\"263\":1}}],[\"profiles\",{\"1\":{\"636\":1}}],[\"profile文件\",{\"1\":{\"241\":1}}],[\"profile\",{\"1\":{\"76\":1,\"518\":1,\"522\":1,\"534\":1,\"639\":1}}],[\"prop>\",{\"1\":{\"293\":3}}],[\"properties创建一个配置文件\",{\"1\":{\"660\":1}}],[\"properties进行注入\",{\"1\":{\"310\":1}}],[\"properties文件中的最后一行\",{\"1\":{\"687\":1}}],[\"properties文件\",{\"1\":{\"295\":1}}],[\"properties\",{\"1\":{\"224\":2,\"288\":3,\"293\":1,\"295\":2,\"306\":1,\"312\":2,\"551\":1,\"655\":1,\"668\":1,\"686\":2,\"710\":2}}],[\"properties和application\",{\"1\":{\"47\":1}}],[\"property<\",{\"1\":{\"418\":2}}],[\"property>\",{\"1\":{\"289\":1,\"290\":1,\"291\":1,\"292\":1,\"293\":1}}],[\"property标签表示配置当前bean的属性\",{\"1\":{\"270\":1}}],[\"propertysource\",{\"0\":{\"306\":1},\"1\":{\"224\":1,\"306\":1,\"312\":2}}],[\"property=\",{\"1\":{\"181\":2}}],[\"property\",{\"1\":{\"181\":2,\"295\":1}}],[\"props=\",{\"1\":{\"663\":1,\"670\":1}}],[\"props>\",{\"1\":{\"293\":1}}],[\"props\",{\"1\":{\"14\":6,\"534\":2,\"615\":2}}],[\"project\",{\"0\":{\"831\":1}}],[\"projectlombok<\",{\"1\":{\"416\":1,\"429\":1,\"588\":1,\"655\":1}}],[\"projectinterceptor2\",{\"1\":{\"233\":4}}],[\"projectinterceptor\",{\"1\":{\"232\":8,\"233\":3}}],[\"projectexceptionadvice\",{\"1\":{\"229\":1,\"230\":1}}],[\"projects\",{\"1\":{\"27\":1,\"332\":1,\"397\":1}}],[\"projectname\",{\"1\":{\"14\":1}}],[\"proc\",{\"1\":{\"47\":1}}],[\"processannotations\",{\"1\":{\"453\":1,\"454\":1,\"455\":1}}],[\"process\",{\"1\":{\"423\":1,\"635\":1,\"733\":1}}],[\"processor\",{\"0\":{\"590\":1},\"1\":{\"81\":1}}],[\"processor<\",{\"1\":{\"18\":1,\"590\":1}}],[\"processing\",{\"1\":{\"14\":1}}],[\"procolumns\",{\"1\":{\"616\":1}}],[\"procolumns<api\",{\"1\":{\"14\":3,\"616\":1}}],[\"procomponents\",{\"0\":{\"616\":1},\"1\":{\"7\":1}}],[\"pro框架会在每个页面加载的时候先去调用查询当前\",{\"1\":{\"14\":1}}],[\"pro\",{\"0\":{\"615\":1},\"1\":{\"7\":1,\"12\":4,\"14\":1,\"582\":1,\"583\":1,\"584\":2,\"616\":4}}],[\"f757e6eee5b37817260bd043\",{\"1\":{\"444\":2}}],[\"fs\",{\"1\":{\"319\":3}}],[\"feed\",{\"1\":{\"809\":1,\"810\":1}}],[\"feed流的滚动分页\",{\"1\":{\"809\":1}}],[\"feed流中的数据会不断更新\",{\"1\":{\"809\":1}}],[\"feed流产品有两种常见模式\",{\"1\":{\"808\":1}}],[\"feed流\",{\"0\":{\"808\":1}}],[\"fee2bbb7c9ee\",{\"1\":{\"643\":1}}],[\"fescar\",{\"1\":{\"657\":1}}],[\"feign调用超时了\",{\"1\":{\"675\":1}}],[\"feignclient\",{\"1\":{\"659\":2}}],[\"feign\",{\"1\":{\"657\":1,\"659\":2,\"706\":1}}],[\"fetch\",{\"1\":{\"523\":3}}],[\"fetchuserinfo\",{\"1\":{\"14\":7,\"613\":5}}],[\"female\",{\"1\":{\"196\":1,\"208\":1,\"211\":1}}],[\"f\",{\"1\":{\"142\":1,\"452\":1,\"643\":2}}],[\"fn\",{\"1\":{\"120\":2,\"121\":6,\"122\":6,\"143\":2,\"716\":2,\"717\":6,\"718\":6}}],[\"func不要和别人冲突\",{\"1\":{\"544\":1}}],[\"functionality\",{\"1\":{\"140\":1}}],[\"function<id\",{\"1\":{\"758\":2}}],[\"function<integer\",{\"1\":{\"143\":1}}],[\"function<p\",{\"1\":{\"220\":1}}],[\"function<t\",{\"1\":{\"143\":1}}],[\"function<throwable\",{\"1\":{\"120\":1,\"716\":1}}],[\"function<\",{\"1\":{\"121\":3,\"143\":1,\"717\":3}}],[\"function\",{\"1\":{\"14\":1,\"406\":8,\"439\":1,\"532\":6,\"613\":1,\"615\":1,\"616\":1,\"620\":1,\"664\":1,\"758\":2}}],[\"futures\",{\"1\":{\"539\":3}}],[\"future2\",{\"1\":{\"143\":2}}],[\"future1\",{\"1\":{\"143\":2}}],[\"future对于结果的获取不是很友好\",{\"1\":{\"142\":1}}],[\"future<t>\",{\"1\":{\"143\":1}}],[\"future<\",{\"1\":{\"142\":1}}],[\"future\",{\"1\":{\"119\":1,\"120\":4,\"122\":6,\"123\":1,\"140\":1,\"141\":2,\"142\":1,\"539\":2,\"715\":1,\"716\":4,\"718\":6,\"719\":1}}],[\"futuretask3\",{\"1\":{\"142\":4}}],[\"futuretask2\",{\"1\":{\"142\":4}}],[\"futuretask\",{\"0\":{\"142\":1},\"1\":{\"105\":1,\"142\":16}}],[\"futuretask<void>\",{\"1\":{\"142\":1}}],[\"futuretask<integer>\",{\"1\":{\"105\":1,\"712\":1}}],[\"futuretask<>\",{\"1\":{\"83\":1,\"105\":1,\"142\":5,\"712\":1}}],[\"futuretask<string>\",{\"1\":{\"83\":1,\"142\":5}}],[\"full\",{\"1\":{\"112\":1,\"675\":1}}],[\"ftl指令\",{\"1\":{\"417\":1}}],[\"ftl\",{\"1\":{\"416\":2,\"423\":2,\"733\":1}}],[\"ft\",{\"1\":{\"71\":3}}],[\"flag\",{\"1\":{\"93\":7,\"132\":8,\"605\":1,\"755\":2,\"758\":2}}],[\"float\",{\"1\":{\"47\":1,\"63\":3,\"64\":3,\"66\":1,\"71\":3,\"416\":1}}],[\"fluxbody\",{\"1\":{\"27\":2}}],[\"flux<\",{\"1\":{\"27\":1}}],[\"flux\",{\"1\":{\"27\":4}}],[\"frequently\",{\"1\":{\"749\":1}}],[\"freemarker模版文件+minio文件上传\",{\"0\":{\"733\":1}}],[\"freemarker的模板对象\",{\"1\":{\"423\":1}}],[\"freemarkertest\",{\"1\":{\"423\":1}}],[\"freemarkerdemoapplication\",{\"1\":{\"423\":1}}],[\"freemarker<\",{\"1\":{\"416\":1,\"733\":1}}],[\"freemarker\",{\"0\":{\"415\":1},\"1\":{\"415\":3,\"416\":3,\"423\":2},\"2\":{\"424\":1,\"425\":1}}],[\"freeze\",{\"1\":{\"216\":1}}],[\"free\",{\"1\":{\"43\":1,\"450\":1}}],[\"frontend\",{\"1\":{\"643\":2,\"646\":2}}],[\"fromcoordinate\",{\"1\":{\"817\":1}}],[\"fromlonlat\",{\"1\":{\"815\":1}}],[\"fromserializer\",{\"1\":{\"706\":2}}],[\"fromusername\",{\"1\":{\"453\":3,\"454\":1,\"455\":1}}],[\"from=1\",{\"1\":{\"442\":1}}],[\"fromjson\",{\"1\":{\"23\":1,\"512\":1,\"566\":2,\"575\":4}}],[\"from\",{\"1\":{\"14\":1,\"27\":1,\"53\":1,\"66\":1,\"67\":2,\"81\":1,\"156\":2,\"175\":1,\"179\":1,\"180\":2,\"181\":1,\"182\":3,\"184\":1,\"185\":3,\"186\":1,\"189\":1,\"190\":2,\"192\":1,\"204\":1,\"224\":3,\"468\":2,\"504\":3,\"517\":4,\"519\":1,\"520\":2,\"532\":1,\"534\":1,\"544\":1,\"616\":5,\"630\":4,\"642\":1,\"643\":2,\"665\":1,\"670\":1,\"674\":1,\"675\":1,\"685\":2,\"710\":2,\"731\":4,\"796\":3,\"809\":1,\"817\":4}}],[\"friends\",{\"1\":{\"507\":1,\"518\":1}}],[\"fc\",{\"1\":{\"22\":2,\"23\":1,\"615\":1}}],[\"fc<props>\",{\"1\":{\"14\":2}}],[\"fakeikun\",{\"1\":{\"537\":1,\"538\":1,\"539\":1}}],[\"faq\",{\"1\":{\"442\":1,\"443\":1,\"444\":1,\"445\":1}}],[\"fanoutqueue2\",{\"1\":{\"338\":3}}],[\"fanoutqueue1\",{\"1\":{\"338\":3}}],[\"fanoutexchange\",{\"1\":{\"338\":9}}],[\"fanoutconfig\",{\"1\":{\"338\":1}}],[\"fanout会被所有队列消费\",{\"1\":{\"336\":1}}],[\"fanout交换机\",{\"0\":{\"335\":1},\"1\":{\"338\":1}}],[\"fanout\",{\"1\":{\"334\":1,\"335\":3,\"338\":3}}],[\"fanshe\",{\"1\":{\"167\":1,\"168\":1,\"169\":1,\"170\":1}}],[\"fair\",{\"1\":{\"102\":2}}],[\"fairlock\",{\"1\":{\"91\":1,\"102\":1}}],[\"failed\",{\"1\":{\"605\":1,\"804\":1}}],[\"fail\",{\"1\":{\"63\":2,\"738\":3,\"741\":3,\"747\":2,\"751\":2,\"752\":2,\"765\":4,\"770\":5,\"777\":1,\"789\":1,\"790\":1,\"796\":1,\"802\":1,\"803\":1,\"809\":1}}],[\"fastcgi\",{\"1\":{\"691\":5}}],[\"fast<\",{\"1\":{\"655\":2}}],[\"fastjson\",{\"1\":{\"512\":1}}],[\"fasterxml\",{\"1\":{\"224\":1,\"256\":1,\"339\":1,\"398\":1}}],[\"fast\",{\"1\":{\"63\":2,\"655\":4,\"663\":7}}],[\"factories\",{\"1\":{\"726\":1}}],[\"factories文件\",{\"1\":{\"18\":1}}],[\"factory\",{\"1\":{\"275\":2,\"276\":3,\"277\":1,\"409\":1,\"655\":1}}],[\"factorybean<userdao>\",{\"1\":{\"277\":1}}],[\"factorybean\",{\"1\":{\"224\":4}}],[\"factor\",{\"1\":{\"63\":4,\"64\":11,\"71\":1}}],[\"fallback\",{\"1\":{\"27\":1}}],[\"fallbackuri\",{\"1\":{\"27\":1}}],[\"false有状态\",{\"1\":{\"350\":1}}],[\"false表示非公平锁\",{\"1\":{\"151\":1}}],[\"false\",{\"1\":{\"14\":5,\"22\":6,\"23\":4,\"64\":1,\"66\":3,\"67\":3,\"91\":1,\"112\":1,\"132\":1,\"140\":1,\"151\":1,\"155\":2,\"198\":2,\"220\":3,\"233\":1,\"409\":1,\"416\":1,\"423\":1,\"438\":2,\"452\":1,\"512\":2,\"531\":1,\"532\":1,\"595\":1,\"605\":1,\"608\":3,\"612\":1,\"664\":1,\"670\":1,\"686\":1,\"690\":1,\"739\":1,\"742\":2,\"777\":1,\"782\":1,\"803\":1,\"817\":2}}],[\"fiele\",{\"1\":{\"386\":1}}],[\"fieldvalue\",{\"1\":{\"741\":2,\"788\":2}}],[\"fieldname\",{\"1\":{\"741\":1,\"788\":1}}],[\"field\",{\"1\":{\"63\":2,\"169\":6,\"171\":6,\"215\":1,\"386\":2,\"520\":1,\"605\":1,\"666\":2,\"668\":1,\"685\":9,\"687\":2,\"710\":17,\"805\":1,\"810\":1,\"817\":1}}],[\"fields\",{\"1\":{\"14\":2,\"63\":1,\"64\":1,\"169\":1,\"171\":2,\"685\":1,\"710\":1}}],[\"findparentpath\",{\"1\":{\"670\":3}}],[\"findcatelogpath\",{\"1\":{\"670\":2,\"673\":1}}],[\"find\",{\"1\":{\"599\":2,\"605\":1}}],[\"findbyid\",{\"1\":{\"312\":1,\"313\":1}}],[\"findall\",{\"1\":{\"262\":1,\"313\":1}}],[\"finalcollect\",{\"1\":{\"688\":3}}],[\"finaluserlist\",{\"1\":{\"566\":3,\"575\":3}}],[\"finalize\",{\"1\":{\"159\":1}}],[\"final只保证这个引用类型变量所引用的地址不会发生改变\",{\"1\":{\"133\":1}}],[\"finally\",{\"1\":{\"89\":2,\"91\":5,\"93\":3,\"103\":2,\"109\":1,\"110\":2,\"135\":1,\"140\":1,\"151\":1,\"152\":3,\"156\":2,\"241\":1,\"551\":1,\"561\":1,\"573\":1,\"574\":1,\"665\":3,\"703\":1,\"704\":4,\"755\":1,\"756\":1,\"758\":1,\"777\":1,\"781\":1,\"788\":1,\"790\":1}}],[\"final\",{\"0\":{\"133\":1},\"1\":{\"27\":3,\"53\":3,\"56\":1,\"63\":5,\"66\":3,\"67\":2,\"71\":1,\"72\":1,\"87\":3,\"88\":1,\"91\":1,\"93\":1,\"108\":1,\"110\":4,\"117\":1,\"152\":1,\"208\":1,\"216\":2,\"226\":8,\"318\":3,\"319\":1,\"355\":3,\"400\":1,\"430\":1,\"452\":1,\"493\":1,\"537\":1,\"538\":1,\"539\":1,\"599\":2,\"625\":3,\"627\":2,\"666\":1,\"667\":1,\"687\":1,\"740\":1,\"756\":1,\"758\":2,\"763\":2,\"777\":1,\"778\":2,\"780\":1,\"788\":2,\"789\":1,\"790\":1,\"796\":1,\"801\":1}}],[\"fillbeanwithmap\",{\"1\":{\"742\":1,\"796\":2}}],[\"fill\",{\"1\":{\"432\":1}}],[\"files\",{\"1\":{\"643\":1,\"646\":1,\"691\":1}}],[\"filestorageservice\",{\"1\":{\"319\":6,\"733\":3}}],[\"fileinputstream\",{\"1\":{\"318\":6,\"319\":2,\"665\":2,\"733\":12}}],[\"filename\",{\"1\":{\"241\":3,\"319\":13,\"430\":4,\"431\":2,\"432\":2,\"433\":2,\"525\":2,\"526\":1,\"691\":1,\"801\":4}}],[\"filepath\",{\"1\":{\"241\":1,\"319\":10,\"665\":2,\"788\":2}}],[\"filepath=\",{\"1\":{\"241\":1,\"655\":1,\"665\":2}}],[\"file\",{\"1\":{\"237\":2,\"238\":1,\"239\":1,\"241\":5,\"318\":2,\"319\":6,\"371\":1,\"430\":17,\"475\":1,\"728\":1,\"733\":1,\"801\":2}}],[\"filewriter\",{\"1\":{\"171\":1,\"423\":1,\"788\":1}}],[\"filter结果过滤\",{\"1\":{\"685\":1}}],[\"filtertaglist\",{\"1\":{\"518\":4}}],[\"filtertype\",{\"1\":{\"245\":1}}],[\"filtered\",{\"1\":{\"486\":1}}],[\"filter对所有访问进行增强\",{\"1\":{\"231\":1}}],[\"filter属于servlet技术\",{\"1\":{\"231\":1}}],[\"filters\",{\"1\":{\"27\":2,\"663\":3,\"665\":1,\"728\":1}}],[\"filter\",{\"1\":{\"14\":1,\"27\":4,\"224\":5,\"245\":1,\"248\":5,\"512\":1,\"518\":2,\"616\":2,\"663\":2,\"675\":1,\"685\":1,\"688\":1,\"697\":1,\"710\":7,\"728\":4}}],[\"fixedthreadpool\",{\"1\":{\"115\":3,\"713\":2}}],[\"firstname\",{\"1\":{\"685\":2}}],[\"firstletter\",{\"1\":{\"666\":1,\"667\":1}}],[\"first\",{\"1\":{\"53\":2,\"63\":1,\"682\":1}}],[\"five\",{\"1\":{\"27\":2}}],[\"follows\",{\"1\":{\"809\":2}}],[\"followservice\",{\"1\":{\"806\":3,\"807\":1,\"809\":1}}],[\"followcommons\",{\"1\":{\"807\":3}}],[\"followcontroller\",{\"1\":{\"806\":1}}],[\"followquerywrapper\",{\"1\":{\"806\":3,\"807\":3}}],[\"followuserid\",{\"1\":{\"806\":9,\"807\":5}}],[\"follow\",{\"1\":{\"806\":14,\"807\":11,\"809\":6,\"810\":1}}],[\"following\",{\"1\":{\"81\":2}}],[\"foxes\",{\"1\":{\"687\":1}}],[\"footer>\",{\"1\":{\"534\":1}}],[\"footer=\",{\"1\":{\"14\":2}}],[\"foofun\",{\"1\":{\"415\":1}}],[\"for循环\",{\"1\":{\"535\":1}}],[\"for=\",{\"1\":{\"518\":1,\"534\":2}}],[\"foreach>\",{\"1\":{\"190\":1,\"674\":1}}],[\"foreach\",{\"1\":{\"190\":2,\"196\":1,\"204\":1,\"206\":1,\"208\":1,\"215\":1,\"219\":1,\"532\":1,\"655\":1,\"666\":2,\"675\":1,\"710\":1,\"803\":1,\"817\":1}}],[\"forname\",{\"1\":{\"167\":1,\"168\":1,\"169\":1,\"170\":1}}],[\"fork采用的是copy\",{\"1\":{\"370\":1}}],[\"forkjointask<integer>\",{\"1\":{\"117\":1}}],[\"forkjointask\",{\"1\":{\"117\":5}}],[\"forkjoinpool\",{\"1\":{\"117\":7}}],[\"fork\",{\"0\":{\"117\":1},\"1\":{\"117\":8}}],[\"for\",{\"1\":{\"53\":2,\"63\":2,\"66\":6,\"67\":3,\"71\":1,\"81\":13,\"83\":3,\"91\":6,\"92\":2,\"93\":6,\"95\":1,\"99\":1,\"100\":1,\"107\":2,\"108\":1,\"109\":1,\"110\":4,\"117\":1,\"140\":1,\"151\":3,\"168\":1,\"171\":1,\"211\":2,\"214\":1,\"241\":1,\"256\":1,\"257\":1,\"258\":1,\"333\":1,\"347\":1,\"400\":1,\"407\":1,\"430\":2,\"431\":1,\"432\":1,\"433\":1,\"452\":1,\"453\":1,\"512\":2,\"526\":1,\"537\":1,\"538\":1,\"539\":1,\"544\":1,\"548\":1,\"551\":1,\"559\":1,\"566\":6,\"573\":1,\"575\":5,\"665\":2,\"668\":1,\"675\":1,\"687\":3,\"688\":1,\"710\":5,\"763\":2,\"788\":1,\"809\":1,\"810\":2,\"816\":3,\"817\":1}}],[\"forbidden\",{\"1\":{\"27\":2}}],[\"forward\",{\"1\":{\"27\":1}}],[\"form=\",{\"1\":{\"616\":1}}],[\"formatiso8601date\",{\"1\":{\"665\":1}}],[\"format\",{\"1\":{\"143\":2,\"319\":1,\"409\":2,\"544\":2,\"551\":2,\"573\":1,\"665\":1,\"675\":1,\"763\":1,\"764\":3,\"801\":2,\"806\":1,\"819\":1,\"820\":1}}],[\"form>\",{\"1\":{\"22\":1,\"23\":1,\"237\":1,\"520\":1}}],[\"formref=\",{\"1\":{\"14\":1}}],[\"formref\",{\"1\":{\"14\":4}}],[\"form\",{\"1\":{\"14\":2,\"22\":2,\"23\":2,\"142\":1,\"237\":2,\"520\":1}}],[\"formitemprops\",{\"1\":{\"14\":1}}],[\"found\",{\"1\":{\"21\":2,\"23\":1,\"496\":1,\"682\":1,\"830\":1}}],[\"hll\",{\"1\":{\"821\":1}}],[\"hyperloglog\",{\"1\":{\"821\":1}}],[\"hget\",{\"1\":{\"782\":1}}],[\"hgetall\",{\"1\":{\"395\":1}}],[\"hsstock\",{\"1\":{\"710\":1}}],[\"hset\",{\"1\":{\"386\":1,\"395\":2,\"782\":2}}],[\"h2>\",{\"1\":{\"663\":1}}],[\"hh\",{\"1\":{\"259\":2,\"409\":1,\"675\":1}}],[\"hhotspot\",{\"1\":{\"140\":1}}],[\"hmdianpingapplicationtests\",{\"1\":{\"788\":1}}],[\"hmdianpingapplication\",{\"1\":{\"770\":2}}],[\"hmdp\",{\"1\":{\"758\":3,\"770\":1,\"801\":1}}],[\"hmall\",{\"1\":{\"332\":2}}],[\"hm\",{\"1\":{\"232\":2}}],[\"h中找到声明\",{\"1\":{\"140\":1}}],[\"heap\",{\"1\":{\"694\":1}}],[\"heapbufferedresponseconsumerfactory\",{\"1\":{\"687\":1}}],[\"health\",{\"1\":{\"682\":1}}],[\"heading\",{\"1\":{\"821\":1}}],[\"head\",{\"1\":{\"526\":1}}],[\"head>\",{\"1\":{\"406\":1,\"416\":1,\"438\":1}}],[\"header中设置content\",{\"1\":{\"451\":1}}],[\"header\",{\"1\":{\"56\":1,\"691\":1,\"697\":1}}],[\"headers\",{\"1\":{\"27\":6,\"334\":1,\"630\":1}}],[\"headermap\",{\"1\":{\"17\":8}}],[\"headertitle=\",{\"1\":{\"14\":1,\"616\":1}}],[\"heima\",{\"1\":{\"382\":2,\"383\":2,\"726\":2,\"727\":3}}],[\"heima<\",{\"1\":{\"319\":1,\"733\":1}}],[\"height=\",{\"1\":{\"519\":1}}],[\"height\",{\"1\":{\"171\":1,\"438\":3}}],[\"henan\",{\"1\":{\"292\":1}}],[\"help\",{\"1\":{\"240\":1,\"665\":3}}],[\"hello\",{\"1\":{\"83\":1,\"142\":2,\"143\":4,\"156\":2,\"332\":1,\"333\":1,\"335\":1,\"344\":1,\"347\":1,\"355\":1,\"359\":1,\"416\":1,\"417\":1,\"451\":3,\"698\":3,\"704\":3}}],[\"h\",{\"1\":{\"66\":8,\"72\":3,\"379\":1,\"523\":14}}],[\"huantai3334\",{\"1\":{\"630\":1}}],[\"hub\",{\"1\":{\"317\":1}}],[\"hugecapacity\",{\"1\":{\"56\":2}}],[\"hutool\",{\"1\":{\"16\":1,\"758\":4}}],[\"hutool工具库\",{\"1\":{\"16\":1}}],[\"hot\",{\"1\":{\"739\":1,\"742\":1}}],[\"hotscore\",{\"1\":{\"688\":1,\"710\":1}}],[\"hosstock\",{\"1\":{\"710\":1}}],[\"host=search\",{\"1\":{\"710\":1}}],[\"host=gulimall\",{\"1\":{\"710\":1,\"721\":1}}],[\"hosts=\",{\"1\":{\"681\":1}}],[\"hostname\",{\"1\":{\"328\":1}}],[\"hosting\",{\"1\":{\"43\":1}}],[\"host\",{\"1\":{\"27\":2,\"241\":1,\"332\":2,\"340\":1,\"398\":1,\"533\":1,\"551\":3,\"665\":5,\"681\":1,\"691\":3,\"697\":1,\"698\":1,\"710\":1,\"721\":1}}],[\"hours\",{\"1\":{\"400\":1,\"702\":1}}],[\"houyunfei\",{\"1\":{\"373\":1,\"451\":1,\"525\":1,\"655\":1,\"665\":2}}],[\"hobby\",{\"1\":{\"171\":1}}],[\"homebrew\",{\"1\":{\"379\":2,\"380\":4,\"801\":1}}],[\"home\",{\"1\":{\"76\":1,\"430\":1,\"504\":1,\"507\":1,\"518\":1,\"727\":1}}],[\"holding\",{\"1\":{\"66\":1,\"156\":2}}],[\"holds\",{\"1\":{\"63\":2}}],[\"hold\",{\"1\":{\"56\":1,\"64\":1,\"104\":1}}],[\"how\",{\"1\":{\"53\":1}}],[\"horizontal\",{\"1\":{\"22\":1}}],[\"ht5rqde6q1k\",{\"1\":{\"824\":1}}],[\"ht\",{\"1\":{\"691\":1}}],[\"htaccess\",{\"1\":{\"691\":1}}],[\"html网页\",{\"1\":{\"415\":1}}],[\"html>\",{\"1\":{\"406\":2,\"416\":2,\"438\":2}}],[\"html\",{\"1\":{\"174\":1,\"317\":1,\"318\":5,\"319\":4,\"423\":1,\"426\":2,\"438\":2,\"439\":1,\"451\":4,\"453\":1,\"457\":1,\"458\":1,\"516\":1,\"522\":1,\"643\":4,\"646\":4,\"661\":1,\"691\":6,\"695\":1,\"697\":1,\"710\":2,\"726\":1,\"727\":1,\"733\":1}}],[\"htmltype=\",{\"1\":{\"22\":1,\"23\":1}}],[\"http块下面\",{\"1\":{\"691\":1}}],[\"httphost\",{\"1\":{\"687\":1}}],[\"httpheaders\",{\"1\":{\"27\":1}}],[\"httpasyncresponseconsumerfactory\",{\"1\":{\"687\":1}}],[\"httpcore\",{\"1\":{\"655\":1}}],[\"httpcomponents<\",{\"1\":{\"655\":1}}],[\"httpcomponents\",{\"1\":{\"655\":1}}],[\"http和https的区别\",{\"1\":{\"47\":1}}],[\"http请求怎么调用\",{\"1\":{\"28\":1}}],[\"http请求\",{\"1\":{\"28\":1}}],[\"httprequest\",{\"1\":{\"16\":1,\"17\":1,\"442\":1,\"443\":1,\"444\":1,\"445\":1}}],[\"httputil\",{\"1\":{\"16\":2,\"457\":2}}],[\"http\",{\"1\":{\"14\":2,\"16\":3,\"17\":1,\"27\":5,\"32\":1,\"33\":1,\"175\":2,\"248\":2,\"250\":1,\"259\":3,\"262\":1,\"269\":4,\"270\":4,\"278\":4,\"295\":7,\"316\":1,\"318\":3,\"319\":3,\"328\":1,\"415\":1,\"438\":1,\"450\":1,\"451\":1,\"455\":1,\"522\":2,\"532\":1,\"611\":5,\"639\":3,\"646\":2,\"657\":1,\"661\":2,\"663\":1,\"681\":2,\"682\":5,\"687\":1,\"691\":4,\"697\":1,\"710\":1,\"726\":1,\"727\":1,\"733\":4}}],[\"httpsession\",{\"1\":{\"738\":2,\"739\":1,\"741\":2}}],[\"httpservletresponse\",{\"1\":{\"232\":6,\"233\":3,\"451\":1,\"739\":1,\"742\":3}}],[\"httpservletrequest\",{\"1\":{\"16\":2,\"17\":1,\"21\":2,\"23\":1,\"27\":1,\"232\":6,\"233\":3,\"453\":2,\"534\":1,\"540\":1,\"544\":1,\"564\":1,\"565\":1,\"605\":2,\"607\":1,\"608\":3,\"613\":1,\"620\":2,\"710\":1,\"739\":1,\"742\":3}}],[\"httpstatus\",{\"1\":{\"27\":4,\"728\":3}}],[\"https\",{\"1\":{\"12\":1,\"14\":2,\"16\":1,\"27\":1,\"29\":3,\"43\":1,\"44\":1,\"140\":1,\"174\":1,\"201\":1,\"240\":2,\"241\":1,\"317\":2,\"326\":1,\"332\":1,\"355\":1,\"377\":1,\"378\":1,\"397\":1,\"412\":1,\"429\":1,\"436\":1,\"438\":2,\"439\":1,\"442\":2,\"443\":2,\"444\":2,\"445\":2,\"449\":1,\"450\":2,\"451\":1,\"453\":1,\"457\":3,\"458\":1,\"496\":1,\"504\":3,\"512\":1,\"516\":1,\"519\":1,\"523\":3,\"524\":1,\"532\":1,\"533\":1,\"537\":1,\"538\":1,\"539\":1,\"566\":1,\"587\":1,\"594\":1,\"598\":1,\"609\":3,\"611\":1,\"630\":2,\"655\":5,\"657\":1,\"661\":3,\"663\":2,\"665\":6,\"682\":1,\"687\":1,\"690\":1,\"692\":1,\"695\":1,\"704\":1,\"821\":1,\"824\":12}}],[\"havingvalue\",{\"1\":{\"351\":1}}],[\"have\",{\"1\":{\"140\":1}}],[\"handshake\",{\"1\":{\"651\":1}}],[\"handlependinglist\",{\"1\":{\"796\":2}}],[\"handlevoucherorder\",{\"1\":{\"790\":2,\"796\":2}}],[\"handlevaildexception\",{\"1\":{\"666\":1}}],[\"handleexception\",{\"1\":{\"666\":1}}],[\"handlenodeclick\",{\"1\":{\"663\":2}}],[\"handlenoauth\",{\"1\":{\"27\":7}}],[\"handle\",{\"1\":{\"66\":1,\"120\":2,\"143\":1,\"716\":2}}],[\"handlermethod\",{\"1\":{\"232\":2}}],[\"handlerinterceptor\",{\"1\":{\"232\":1,\"233\":1,\"739\":1,\"742\":2}}],[\"handlers\",{\"1\":{\"216\":1}}],[\"handleresponse\",{\"1\":{\"27\":1}}],[\"handleremove\",{\"1\":{\"14\":1}}],[\"handler\",{\"1\":{\"27\":2,\"115\":2,\"216\":1,\"232\":8,\"233\":3,\"713\":2,\"728\":1,\"739\":1,\"742\":3}}],[\"handleadd\",{\"1\":{\"14\":2}}],[\"handlemodalvisible\",{\"1\":{\"14\":4}}],[\"handleoffline\",{\"1\":{\"14\":1}}],[\"handleonline\",{\"1\":{\"14\":1}}],[\"handleupdatemodalvisible\",{\"1\":{\"14\":1}}],[\"handlesubmit\",{\"1\":{\"14\":1,\"612\":1}}],[\"hangzhou\",{\"1\":{\"241\":1}}],[\"hagersten\",{\"1\":{\"136\":1}}],[\"happens\",{\"0\":{\"128\":1,\"159\":1},\"1\":{\"159\":14}}],[\"hassendcode\",{\"1\":{\"738\":3,\"741\":3}}],[\"hasstock\",{\"1\":{\"688\":2,\"710\":2}}],[\"hasfailures\",{\"1\":{\"688\":1}}],[\"haserrors\",{\"1\":{\"666\":1}}],[\"hasteamcount\",{\"1\":{\"558\":2}}],[\"haskey\",{\"1\":{\"400\":1}}],[\"hasnextdelay\",{\"1\":{\"355\":2}}],[\"hashtags\",{\"1\":{\"523\":1}}],[\"hashtable\",{\"1\":{\"63\":1}}],[\"hashoperations\",{\"1\":{\"400\":8}}],[\"hash表\",{\"1\":{\"391\":1}}],[\"hash结构可以将对象中的每个字段独立存储\",{\"1\":{\"385\":1}}],[\"hashset<long>\",{\"1\":{\"688\":1}}],[\"hashset<>\",{\"1\":{\"99\":1,\"512\":1,\"668\":1,\"688\":1}}],[\"hashset\",{\"1\":{\"99\":1}}],[\"hashset线程不安全\",{\"0\":{\"99\":1}}],[\"hashes\",{\"1\":{\"66\":2}}],[\"hashcode\",{\"1\":{\"66\":6,\"69\":1,\"72\":1}}],[\"hash\",{\"1\":{\"63\":1,\"66\":17,\"67\":12,\"71\":4,\"72\":4,\"73\":1,\"571\":1}}],[\"hashmap线程不安全\",{\"0\":{\"100\":1}}],[\"hashmap源码分析\",{\"0\":{\"62\":1}}],[\"hashmap\",{\"0\":{\"61\":1},\"1\":{\"63\":4,\"64\":8,\"66\":3,\"67\":2,\"69\":5,\"71\":2,\"100\":1,\"110\":2,\"184\":1,\"407\":2},\"2\":{\"74\":1,\"75\":1}}],[\"hashmap的寻址算法\",{\"0\":{\"72\":1}}],[\"hashmap的底层了解吗\",{\"1\":{\"47\":1}}],[\"hashmap的扩容机制\",{\"1\":{\"47\":1}}],[\"hashmap为什么运行速度快\",{\"1\":{\"47\":1}}],[\"hashmap<>\",{\"1\":{\"16\":2,\"17\":1,\"100\":1,\"110\":2,\"214\":1,\"339\":1,\"418\":1,\"423\":2,\"453\":1,\"493\":1,\"666\":2,\"725\":2,\"733\":1,\"741\":1,\"788\":1,\"817\":1}}],[\"hashmap<string\",{\"1\":{\"16\":2,\"418\":1,\"423\":1,\"453\":2,\"455\":1,\"725\":2,\"733\":1}}],[\"has\",{\"1\":{\"63\":2,\"81\":4}}],[\"hincrby\",{\"1\":{\"782\":1}}],[\"hit\",{\"1\":{\"687\":2,\"710\":3}}],[\"hits\",{\"1\":{\"687\":2,\"710\":5}}],[\"hitail\",{\"1\":{\"71\":6}}],[\"highlighter\",{\"1\":{\"710\":1}}],[\"highlightbuilder\",{\"1\":{\"710\":7}}],[\"highlight\",{\"1\":{\"710\":1}}],[\"highline=\",{\"1\":{\"450\":1}}],[\"high\",{\"1\":{\"687\":1}}],[\"highest\",{\"1\":{\"66\":1}}],[\"higher\",{\"1\":{\"63\":1,\"66\":2}}],[\"hihead\",{\"1\":{\"71\":3}}],[\"hide\",{\"1\":{\"14\":3}}],[\"hideinform\",{\"1\":{\"14\":1}}],[\"history\",{\"1\":{\"14\":3,\"506\":1,\"517\":1,\"612\":5,\"613\":2,\"630\":2}}],[\"href=\",{\"1\":{\"22\":2,\"418\":3,\"616\":1}}],[\"href\",{\"1\":{\"14\":1,\"609\":2}}],[\"统一异常校验\",{\"1\":{\"666\":1}}],[\"统一返回结果封装\",{\"0\":{\"225\":1}}],[\"统一文档\",{\"1\":{\"27\":1}}],[\"统一日志\",{\"1\":{\"27\":1}}],[\"统一业务处理\",{\"1\":{\"27\":1}}],[\"统一去处理一些问题\",{\"1\":{\"26\":1}}],[\"统一请求\",{\"1\":{\"14\":1}}],[\"统计学习方法\",{\"1\":{\"824\":1}}],[\"统计bitmap中值为1的bit位的数量\",{\"1\":{\"819\":1}}],[\"统计sql用时\",{\"1\":{\"696\":1}}],[\"统计是否存在\",{\"1\":{\"673\":1}}],[\"统计用户调用接口次数\",{\"0\":{\"25\":1}}],[\"统计调用\",{\"1\":{\"5\":1}}],[\"v0\",{\"1\":{\"643\":4}}],[\"v数据库\",{\"1\":{\"533\":1}}],[\"v=\",{\"1\":{\"523\":3}}],[\"v=1\",{\"1\":{\"438\":1}}],[\"v1\",{\"1\":{\"442\":1,\"796\":1}}],[\"velocity从2010年更新完\",{\"1\":{\"415\":1}}],[\"velocity\",{\"1\":{\"415\":2}}],[\"verifytoken\",{\"1\":{\"728\":1}}],[\"version\",{\"1\":{\"476\":1,\"522\":1,\"655\":1,\"657\":1,\"682\":2,\"726\":1,\"727\":1}}],[\"version=\",{\"1\":{\"175\":2,\"269\":1,\"270\":1,\"278\":1,\"295\":1}}],[\"version>7\",{\"1\":{\"687\":1}}],[\"version>1\",{\"1\":{\"663\":1}}],[\"version>\",{\"1\":{\"19\":1,\"29\":4,\"175\":3,\"196\":2,\"224\":11,\"241\":4,\"245\":3,\"248\":1,\"256\":1,\"269\":1,\"294\":2,\"303\":1,\"312\":6,\"313\":2,\"318\":1,\"319\":1,\"339\":1,\"395\":2,\"416\":1,\"429\":2,\"453\":2,\"512\":1,\"522\":1,\"524\":1,\"551\":2,\"593\":1,\"594\":1,\"653\":1,\"655\":7,\"657\":2,\"661\":1,\"663\":3,\"665\":2,\"687\":2,\"704\":1,\"733\":1,\"781\":1,\"817\":2}}],[\"vertical\",{\"1\":{\"22\":1,\"23\":1}}],[\"vvalue\",{\"1\":{\"384\":1}}],[\"v\",{\"1\":{\"66\":9,\"67\":6,\"76\":1,\"117\":1,\"142\":1,\"143\":2,\"317\":6,\"323\":1,\"426\":3,\"507\":3,\"518\":5,\"520\":1,\"534\":2,\"646\":2,\"651\":6,\"652\":2,\"681\":3,\"690\":3,\"697\":5}}],[\"visitor\",{\"1\":{\"821\":1}}],[\"visibility\",{\"1\":{\"142\":2,\"158\":1}}],[\"visible=\",{\"1\":{\"14\":3}}],[\"visible\",{\"1\":{\"14\":6}}],[\"visualvm\",{\"1\":{\"695\":1}}],[\"vim\",{\"1\":{\"639\":1,\"651\":1}}],[\"vitejs\",{\"1\":{\"504\":2}}],[\"vite\",{\"1\":{\"502\":1,\"504\":3}}],[\"view\",{\"1\":{\"518\":1,\"616\":1,\"821\":1}}],[\"viewport\",{\"1\":{\"438\":1}}],[\"view和model\",{\"1\":{\"244\":1}}],[\"views\",{\"1\":{\"63\":1}}],[\"virtual\",{\"1\":{\"81\":1,\"332\":1}}],[\"v>>\",{\"1\":{\"63\":2}}],[\"v>\",{\"1\":{\"63\":1,\"64\":2,\"66\":4,\"67\":8,\"71\":9,\"122\":6,\"220\":1,\"718\":6}}],[\"vm\",{\"1\":{\"56\":1,\"140\":4}}],[\"vms\",{\"1\":{\"56\":1}}],[\"vue2\",{\"1\":{\"665\":1}}],[\"vuerouter\",{\"1\":{\"517\":3}}],[\"vue页面\",{\"1\":{\"507\":1,\"519\":1}}],[\"vuejs\",{\"1\":{\"504\":1,\"516\":1}}],[\"vue3\",{\"1\":{\"502\":1}}],[\"vue的响应底层是怎么做的\",{\"1\":{\"47\":1}}],[\"vue\",{\"1\":{\"47\":1,\"504\":6,\"517\":6,\"519\":1,\"520\":3,\"655\":2,\"665\":3,\"675\":1}}],[\"vue路由传参\",{\"1\":{\"47\":1}}],[\"voucherorderhandler\",{\"1\":{\"790\":2,\"796\":1}}],[\"voucherorder\",{\"1\":{\"765\":7,\"770\":14,\"790\":20,\"796\":15}}],[\"voucherorderservice\",{\"1\":{\"765\":2}}],[\"voucherid\",{\"1\":{\"765\":6,\"769\":2,\"770\":11,\"777\":2,\"789\":5,\"790\":3,\"796\":8}}],[\"voucherservice\",{\"1\":{\"764\":1}}],[\"voucher\",{\"1\":{\"739\":1,\"742\":1,\"764\":20,\"765\":5,\"769\":3,\"770\":5,\"789\":9,\"790\":2}}],[\"volumes\",{\"1\":{\"317\":8,\"323\":2,\"426\":3,\"651\":10,\"652\":3,\"681\":4}}],[\"volatile实现了java内存模型中的可见性和有序性\",{\"1\":{\"161\":1}}],[\"volatile为什么可以做到\",{\"1\":{\"161\":1}}],[\"volatile与jmm\",{\"0\":{\"160\":1}}],[\"volatile变量规则\",{\"1\":{\"159\":1}}],[\"volatileexample\",{\"1\":{\"132\":3}}],[\"volatile关键字的主要作用是确保变量的可见性和禁止指令重排序\",{\"1\":{\"132\":1}}],[\"volatile是java中的关键字\",{\"1\":{\"132\":1}}],[\"volatile\",{\"0\":{\"132\":1},\"1\":{\"47\":1,\"81\":1,\"110\":2,\"132\":1,\"134\":2,\"155\":2,\"158\":2,\"159\":2}}],[\"vo\",{\"1\":{\"220\":3,\"675\":9}}],[\"vos\",{\"1\":{\"220\":4,\"674\":4,\"675\":2}}],[\"voclass\",{\"1\":{\"220\":3}}],[\"vo分页结果\",{\"1\":{\"220\":2}}],[\"vo的分页对象\",{\"1\":{\"220\":3}}],[\"void\",{\"1\":{\"14\":2,\"16\":1,\"19\":1,\"56\":4,\"58\":1,\"83\":5,\"87\":3,\"88\":3,\"89\":2,\"91\":4,\"92\":3,\"93\":4,\"95\":1,\"100\":1,\"103\":1,\"104\":1,\"105\":1,\"107\":2,\"108\":1,\"109\":1,\"110\":6,\"111\":1,\"112\":1,\"117\":1,\"119\":2,\"120\":2,\"130\":2,\"132\":3,\"140\":2,\"142\":4,\"143\":8,\"147\":2,\"148\":1,\"149\":1,\"151\":2,\"152\":2,\"153\":1,\"155\":3,\"156\":3,\"165\":3,\"167\":1,\"168\":1,\"169\":1,\"170\":1,\"171\":2,\"175\":1,\"184\":1,\"190\":1,\"196\":5,\"204\":2,\"205\":1,\"206\":1,\"207\":2,\"208\":7,\"210\":1,\"211\":2,\"215\":1,\"219\":1,\"224\":4,\"230\":2,\"232\":5,\"233\":3,\"241\":1,\"263\":1,\"267\":4,\"269\":5,\"270\":3,\"275\":3,\"276\":3,\"278\":7,\"279\":4,\"282\":3,\"283\":3,\"285\":1,\"286\":1,\"287\":1,\"288\":1,\"298\":1,\"299\":1,\"302\":1,\"303\":3,\"304\":4,\"307\":1,\"312\":1,\"313\":2,\"318\":1,\"319\":3,\"332\":2,\"333\":3,\"335\":3,\"336\":3,\"337\":3,\"338\":4,\"339\":2,\"340\":1,\"344\":5,\"347\":2,\"352\":2,\"355\":3,\"395\":4,\"396\":1,\"399\":2,\"400\":7,\"407\":4,\"409\":2,\"423\":1,\"430\":1,\"431\":1,\"432\":1,\"433\":1,\"442\":1,\"443\":1,\"444\":1,\"445\":1,\"457\":2,\"491\":7,\"493\":1,\"525\":3,\"526\":2,\"537\":1,\"538\":1,\"539\":1,\"544\":1,\"551\":2,\"573\":1,\"575\":1,\"598\":1,\"655\":3,\"658\":1,\"659\":1,\"661\":1,\"663\":1,\"665\":2,\"668\":1,\"672\":6,\"673\":2,\"674\":2,\"675\":2,\"687\":2,\"688\":1,\"698\":1,\"706\":2,\"712\":6,\"715\":2,\"716\":2,\"733\":3,\"739\":1,\"740\":2,\"742\":2,\"755\":1,\"756\":2,\"758\":3,\"763\":2,\"764\":1,\"770\":1,\"777\":2,\"778\":1,\"780\":1,\"781\":1,\"788\":1,\"789\":1,\"790\":4,\"796\":2,\"802\":1,\"803\":1,\"804\":1,\"816\":1}}],[\"valu\",{\"1\":{\"710\":1}}],[\"valueat\",{\"1\":{\"820\":1}}],[\"valueoperations<string\",{\"1\":{\"698\":1}}],[\"valueoperations\",{\"1\":{\"400\":6,\"544\":8,\"551\":3,\"573\":3}}],[\"valueof\",{\"1\":{\"17\":1,\"95\":1,\"99\":1,\"100\":1,\"107\":2,\"108\":1,\"109\":1,\"665\":1,\"777\":1,\"778\":1,\"796\":1,\"805\":2,\"807\":1,\"810\":1,\"817\":1}}],[\"value2\",{\"1\":{\"388\":1}}],[\"value1\",{\"1\":{\"388\":1}}],[\"value对的形式存储\",{\"1\":{\"377\":1}}],[\"value为第三方bean注入资源\",{\"1\":{\"310\":1}}],[\"value读取配置文件中的内容\",{\"1\":{\"307\":1}}],[\"value进行简单类型注入\",{\"1\":{\"307\":1}}],[\"value>\",{\"1\":{\"289\":3,\"290\":4,\"291\":4}}],[\"value=\",{\"1\":{\"175\":8,\"178\":8,\"237\":1,\"245\":1,\"283\":2,\"286\":6,\"292\":3,\"294\":4,\"295\":4,\"519\":8}}],[\"value\",{\"0\":{\"307\":1,\"310\":1},\"1\":{\"14\":4,\"27\":1,\"56\":2,\"63\":3,\"66\":23,\"67\":14,\"71\":2,\"72\":1,\"87\":1,\"100\":1,\"110\":4,\"115\":1,\"117\":2,\"140\":1,\"143\":3,\"169\":2,\"171\":2,\"192\":1,\"198\":1,\"215\":2,\"216\":4,\"217\":1,\"224\":4,\"262\":3,\"307\":2,\"310\":4,\"312\":4,\"338\":4,\"340\":1,\"347\":1,\"355\":2,\"382\":1,\"383\":1,\"384\":2,\"386\":1,\"406\":1,\"451\":2,\"452\":1,\"518\":6,\"522\":1,\"531\":1,\"532\":1,\"605\":2,\"616\":3,\"660\":2,\"663\":3,\"665\":3,\"666\":3,\"667\":1,\"668\":2,\"670\":6,\"675\":3,\"685\":1,\"703\":1,\"706\":3,\"710\":8,\"727\":1,\"758\":4,\"764\":2,\"796\":4,\"804\":1,\"810\":1,\"817\":3}}],[\"valueenum\",{\"1\":{\"14\":1,\"616\":1}}],[\"valuetype\",{\"1\":{\"14\":8,\"616\":4}}],[\"values=true\",{\"1\":{\"706\":1}}],[\"values\",{\"1\":{\"14\":12,\"22\":2,\"23\":2,\"63\":1,\"188\":2,\"211\":2,\"224\":2,\"400\":1,\"407\":1,\"520\":2,\"612\":3,\"616\":5}}],[\"val\",{\"1\":{\"668\":2}}],[\"vals\",{\"1\":{\"668\":5}}],[\"validators\",{\"1\":{\"727\":1}}],[\"validator\",{\"1\":{\"668\":2}}],[\"validatedby\",{\"1\":{\"668\":1}}],[\"validated\",{\"1\":{\"667\":2}}],[\"valid\",{\"1\":{\"666\":5}}],[\"validpattern\",{\"1\":{\"599\":4,\"605\":2}}],[\"van\",{\"1\":{\"506\":1,\"507\":4,\"518\":10,\"519\":1,\"520\":2,\"534\":3}}],[\"vantresolver\",{\"1\":{\"504\":2}}],[\"vant\",{\"1\":{\"502\":1,\"504\":7}}],[\"var4\",{\"1\":{\"769\":1}}],[\"var2\",{\"1\":{\"769\":2}}],[\"var1\",{\"1\":{\"769\":2}}],[\"var5\",{\"1\":{\"769\":6}}],[\"variable\",{\"1\":{\"421\":1}}],[\"var\",{\"1\":{\"406\":3,\"426\":1,\"438\":3,\"439\":6,\"440\":1,\"485\":1,\"651\":6,\"691\":2,\"801\":1}}],[\"vary\",{\"1\":{\"66\":1,\"643\":1,\"646\":1}}],[\"varargs\",{\"1\":{\"58\":1}}],[\"varchari可变长度\",{\"1\":{\"487\":1}}],[\"varchar\",{\"1\":{\"9\":12,\"509\":2,\"510\":1,\"557\":3,\"596\":13,\"670\":15,\"672\":2,\"764\":3,\"801\":4}}],[\"v2\",{\"1\":{\"14\":1,\"316\":1,\"444\":1,\"445\":1,\"523\":1,\"639\":1,\"796\":1}}],[\"o性能\",{\"1\":{\"694\":1}}],[\"obtain\",{\"1\":{\"665\":1}}],[\"obj\",{\"1\":{\"171\":3,\"670\":2,\"673\":2,\"674\":2,\"675\":4}}],[\"objectkey>\",{\"1\":{\"544\":1,\"573\":1}}],[\"objectkey\",{\"1\":{\"544\":1}}],[\"objects\",{\"1\":{\"491\":2}}],[\"objectmapper\",{\"1\":{\"400\":2}}],[\"objectmetadata\",{\"1\":{\"241\":2}}],[\"object类似于文件系统的文件\",{\"1\":{\"317\":1}}],[\"objectname\",{\"1\":{\"241\":2,\"665\":2}}],[\"objectlock\",{\"1\":{\"156\":4}}],[\"objectlock=\",{\"1\":{\"156\":1}}],[\"object=new\",{\"1\":{\"147\":1}}],[\"object\",{\"1\":{\"53\":3,\"54\":3,\"66\":1,\"67\":6,\"72\":1,\"81\":11,\"84\":1,\"91\":1,\"98\":1,\"103\":6,\"104\":4,\"110\":4,\"147\":3,\"152\":2,\"153\":4,\"156\":2,\"165\":3,\"171\":2,\"226\":3,\"232\":6,\"233\":3,\"318\":1,\"319\":4,\"339\":2,\"399\":2,\"400\":1,\"659\":1,\"733\":2,\"738\":1,\"739\":2,\"742\":3,\"756\":1,\"758\":2,\"796\":4}}],[\"object>>\",{\"1\":{\"796\":2}}],[\"object>对象\",{\"1\":{\"399\":1}}],[\"object>\",{\"1\":{\"16\":2,\"110\":2,\"339\":2,\"399\":2,\"423\":1,\"524\":1,\"670\":2,\"673\":1,\"674\":2,\"675\":3,\"725\":2,\"733\":1,\"741\":1,\"742\":1,\"788\":1,\"796\":4}}],[\"os++\",{\"1\":{\"810\":1}}],[\"os\",{\"1\":{\"378\":1,\"523\":1,\"810\":6}}],[\"osscontroller\",{\"1\":{\"665\":1}}],[\"ossclient\",{\"1\":{\"241\":7,\"665\":14}}],[\"ossclientbuilder\",{\"1\":{\"241\":3,\"665\":1}}],[\"oss对象存储\",{\"0\":{\"665\":1}}],[\"ossheaders\",{\"1\":{\"241\":1}}],[\"ossexception\",{\"1\":{\"241\":3,\"665\":4}}],[\"oss<\",{\"1\":{\"241\":2,\"665\":3}}],[\"oss\",{\"1\":{\"240\":3,\"241\":20,\"319\":1,\"665\":21},\"2\":{\"243\":1}}],[\"oe\",{\"1\":{\"241\":5,\"665\":10}}],[\"o\",{\"1\":{\"152\":4,\"165\":1,\"204\":2,\"206\":1,\"507\":2,\"518\":2,\"639\":1,\"694\":1}}],[\"oom\",{\"1\":{\"115\":2}}],[\"other\",{\"1\":{\"64\":1,\"67\":1,\"81\":1,\"122\":18,\"143\":2,\"718\":18}}],[\"otherwise\",{\"1\":{\"63\":1,\"66\":1}}],[\"oldteam\",{\"1\":{\"560\":4}}],[\"oldthr\",{\"1\":{\"71\":4}}],[\"oldtab\",{\"1\":{\"71\":7}}],[\"oldcap\",{\"1\":{\"71\":11,\"73\":2}}],[\"oldcapacity\",{\"1\":{\"56\":5}}],[\"oldvalue\",{\"1\":{\"66\":3}}],[\"old\",{\"1\":{\"66\":1,\"352\":3}}],[\"oldinterfaceinfo\",{\"1\":{\"21\":4,\"23\":3}}],[\"ofseconds\",{\"1\":{\"796\":1}}],[\"ofnullable\",{\"1\":{\"512\":1,\"558\":2}}],[\"ofpattern\",{\"1\":{\"409\":1,\"763\":1,\"819\":1,\"820\":1}}],[\"offset\",{\"1\":{\"810\":9,\"819\":3}}],[\"off\",{\"1\":{\"643\":1}}],[\"offiaccount\",{\"1\":{\"451\":1,\"453\":1,\"457\":1,\"458\":1}}],[\"offer\",{\"1\":{\"112\":9,\"575\":1}}],[\"offlineinterfaceinfo\",{\"1\":{\"21\":1}}],[\"offline\",{\"1\":{\"21\":2,\"23\":1}}],[\"of\",{\"1\":{\"53\":5,\"54\":3,\"56\":3,\"58\":1,\"63\":7,\"66\":10,\"81\":2,\"140\":1,\"142\":3,\"196\":1,\"205\":1,\"207\":1,\"208\":1,\"217\":1,\"219\":1,\"220\":6,\"268\":1,\"355\":1,\"763\":1,\"810\":1,\"817\":1}}],[\"o操作的次数\",{\"1\":{\"47\":1}}],[\"over\",{\"1\":{\"142\":1,\"687\":1}}],[\"overflow\",{\"1\":{\"56\":3}}],[\"overload\",{\"1\":{\"47\":1}}],[\"overview\",{\"1\":{\"29\":1,\"240\":1,\"451\":1}}],[\"override\",{\"1\":{\"26\":1,\"27\":3,\"47\":1,\"83\":3,\"88\":2,\"89\":1,\"105\":1,\"117\":1,\"142\":1,\"165\":3,\"208\":1,\"210\":1,\"220\":2,\"224\":1,\"232\":6,\"233\":4,\"248\":1,\"263\":1,\"319\":4,\"344\":4,\"352\":2,\"355\":1,\"491\":2,\"512\":1,\"525\":2,\"558\":1,\"559\":1,\"560\":1,\"574\":1,\"575\":1,\"608\":1,\"620\":1,\"663\":2,\"668\":2,\"670\":2,\"672\":4,\"673\":4,\"674\":2,\"675\":4,\"688\":2,\"690\":1,\"696\":1,\"697\":1,\"698\":1,\"706\":2,\"710\":1,\"712\":3,\"721\":1,\"725\":1,\"728\":2,\"732\":2,\"738\":2,\"739\":2,\"741\":2,\"742\":4,\"747\":2,\"751\":1,\"752\":1,\"758\":2,\"764\":1,\"765\":1,\"777\":2,\"778\":2,\"780\":1,\"789\":2,\"790\":3,\"796\":2,\"802\":1,\"803\":3,\"804\":1,\"805\":1,\"806\":2,\"807\":1,\"809\":1,\"810\":1,\"817\":1,\"819\":1,\"820\":1}}],[\"okresult\",{\"1\":{\"725\":2,\"732\":2}}],[\"ok\",{\"1\":{\"27\":1,\"226\":4,\"409\":1,\"444\":1,\"624\":1,\"625\":1,\"659\":2,\"660\":1,\"663\":2,\"665\":1,\"666\":1,\"667\":2,\"670\":2,\"672\":1,\"673\":1,\"674\":2,\"675\":3,\"688\":2,\"704\":2,\"738\":2,\"740\":1,\"741\":2,\"747\":4,\"751\":2,\"752\":2,\"758\":4,\"764\":1,\"765\":1,\"770\":2,\"789\":1,\"790\":1,\"796\":1,\"801\":2,\"802\":1,\"803\":3,\"804\":1,\"805\":3,\"806\":2,\"807\":3,\"809\":1,\"810\":2,\"817\":4,\"819\":1,\"820\":3}}],[\"orelse\",{\"1\":{\"512\":1,\"558\":2}}],[\"origin\",{\"1\":{\"523\":1,\"611\":1}}],[\"origin=40\",{\"1\":{\"445\":1}}],[\"originalfilename\",{\"1\":{\"239\":3,\"241\":3,\"801\":2}}],[\"originalresponse\",{\"1\":{\"27\":5}}],[\"or\",{\"1\":{\"63\":2,\"64\":1,\"66\":2,\"67\":2,\"81\":2,\"140\":1,\"512\":1,\"556\":1,\"559\":2,\"670\":2,\"673\":1,\"674\":2,\"675\":2,\"806\":1}}],[\"orderbydesc\",{\"1\":{\"803\":1}}],[\"orderbyasc\",{\"1\":{\"747\":1}}],[\"ordertasks\",{\"1\":{\"790\":3,\"796\":1}}],[\"orderkey\",{\"1\":{\"789\":3,\"796\":3}}],[\"order<\",{\"1\":{\"653\":1,\"655\":2}}],[\"orderdaofactory\",{\"1\":{\"275\":3}}],[\"orderdaoimpl\",{\"1\":{\"275\":2}}],[\"orderdao\",{\"1\":{\"275\":7}}],[\"orders中的消息\",{\"1\":{\"796\":1}}],[\"orders中添加消息\",{\"1\":{\"796\":1}}],[\"orderstatuslistener\",{\"1\":{\"355\":1}}],[\"orderservice\",{\"1\":{\"340\":1,\"355\":4}}],[\"orders\",{\"1\":{\"220\":3,\"796\":6}}],[\"orderid\",{\"1\":{\"340\":2,\"352\":5,\"355\":5,\"765\":3,\"770\":6,\"789\":2,\"790\":3,\"796\":7}}],[\"orderitem\",{\"1\":{\"219\":2,\"220\":5}}],[\"ordering\",{\"1\":{\"158\":1}}],[\"order\",{\"1\":{\"54\":1,\"275\":1,\"340\":1,\"352\":13,\"355\":7,\"468\":1,\"469\":1,\"562\":1,\"684\":1,\"685\":2,\"710\":1,\"728\":1,\"731\":4,\"763\":1,\"764\":2,\"765\":1,\"770\":2,\"777\":1,\"781\":2,\"789\":2,\"790\":5,\"796\":4,\"805\":1,\"810\":1,\"817\":1}}],[\"ordered\",{\"1\":{\"27\":1,\"180\":2,\"188\":4,\"191\":3,\"728\":1}}],[\"oracle中的rownumber\",{\"1\":{\"47\":1}}],[\"org\",{\"1\":{\"14\":1,\"18\":1,\"27\":1,\"29\":3,\"174\":1,\"175\":4,\"269\":4,\"270\":4,\"278\":4,\"295\":7,\"316\":1,\"317\":1,\"407\":1,\"408\":3,\"409\":3,\"430\":1,\"504\":1,\"516\":1,\"522\":2,\"539\":5,\"544\":4,\"551\":12,\"628\":2,\"639\":1,\"655\":6,\"659\":2,\"671\":4,\"690\":1,\"692\":1,\"696\":2,\"726\":1,\"727\":3,\"758\":2}}],[\"outlogin\",{\"1\":{\"620\":1}}],[\"output=json\",{\"1\":{\"444\":1}}],[\"outofmemoryerror\",{\"1\":{\"56\":2}}],[\"out\",{\"1\":{\"16\":4,\"17\":1,\"19\":2,\"27\":2,\"83\":4,\"87\":1,\"88\":2,\"89\":2,\"91\":2,\"92\":2,\"93\":3,\"95\":1,\"99\":1,\"100\":1,\"103\":5,\"104\":4,\"105\":5,\"107\":4,\"108\":2,\"109\":2,\"110\":8,\"111\":4,\"112\":20,\"117\":1,\"119\":9,\"120\":13,\"132\":1,\"142\":10,\"143\":25,\"147\":1,\"148\":1,\"149\":1,\"151\":1,\"152\":8,\"153\":4,\"155\":6,\"156\":10,\"165\":5,\"168\":1,\"169\":2,\"175\":1,\"182\":1,\"184\":1,\"196\":2,\"204\":1,\"206\":1,\"208\":1,\"211\":2,\"215\":1,\"219\":3,\"224\":1,\"229\":1,\"232\":6,\"233\":3,\"241\":7,\"245\":1,\"247\":4,\"248\":3,\"250\":4,\"251\":1,\"252\":1,\"253\":1,\"254\":2,\"256\":1,\"257\":1,\"258\":1,\"259\":7,\"261\":4,\"262\":13,\"267\":4,\"269\":2,\"270\":2,\"275\":1,\"276\":1,\"278\":4,\"279\":3,\"282\":1,\"283\":1,\"285\":1,\"286\":1,\"288\":6,\"299\":1,\"302\":1,\"303\":3,\"304\":3,\"307\":1,\"310\":1,\"312\":1,\"313\":2,\"318\":1,\"319\":1,\"332\":1,\"333\":1,\"335\":2,\"336\":2,\"337\":2,\"338\":4,\"339\":1,\"395\":3,\"399\":2,\"400\":15,\"407\":3,\"431\":1,\"433\":1,\"442\":1,\"443\":1,\"444\":1,\"445\":1,\"453\":1,\"454\":1,\"457\":1,\"491\":5,\"525\":2,\"526\":1,\"537\":1,\"538\":1,\"539\":2,\"551\":3,\"561\":1,\"574\":1,\"598\":1,\"655\":2,\"665\":19,\"687\":7,\"696\":1,\"698\":1,\"704\":3,\"706\":1,\"712\":15,\"715\":9,\"716\":13,\"733\":4,\"763\":3,\"781\":1,\"788\":1}}],[\"ophximfvprb\",{\"1\":{\"824\":1}}],[\"ops\",{\"1\":{\"698\":3}}],[\"opsforgeo\",{\"1\":{\"816\":2,\"817\":1}}],[\"opsforstream\",{\"1\":{\"796\":4}}],[\"opsforset\",{\"1\":{\"400\":1,\"803\":4,\"807\":3}}],[\"opsforzset\",{\"1\":{\"400\":1,\"804\":4,\"805\":1,\"809\":1,\"810\":1}}],[\"opsforlist\",{\"1\":{\"400\":1}}],[\"opsforhash\",{\"1\":{\"400\":1,\"741\":1,\"742\":1,\"788\":1}}],[\"opsforvalue\",{\"1\":{\"399\":4,\"400\":3,\"544\":2,\"551\":1,\"573\":1,\"698\":3,\"702\":2,\"703\":6,\"704\":2,\"741\":2,\"747\":4,\"751\":1,\"752\":3,\"755\":4,\"756\":2,\"758\":6,\"763\":1,\"777\":1,\"778\":2,\"789\":1,\"819\":1,\"820\":1}}],[\"opts=\",{\"1\":{\"681\":1}}],[\"opt\",{\"1\":{\"379\":2,\"380\":1,\"801\":1}}],[\"optimization\",{\"1\":{\"463\":1}}],[\"optimisticlockerinnerinterceptor\",{\"1\":{\"218\":1}}],[\"optimistic\",{\"1\":{\"110\":1,\"766\":1}}],[\"options=\",{\"1\":{\"616\":1}}],[\"options\",{\"1\":{\"616\":2,\"620\":2,\"630\":4,\"663\":1,\"687\":4,\"688\":1,\"710\":1}}],[\"optional可选类\",{\"1\":{\"512\":1}}],[\"optional\",{\"1\":{\"512\":1,\"558\":2}}],[\"optional>\",{\"1\":{\"18\":1,\"588\":1,\"589\":1,\"590\":1,\"690\":1}}],[\"option\",{\"1\":{\"14\":2,\"616\":2,\"728\":1}}],[\"openfeign\",{\"1\":{\"659\":1}}],[\"openfeign<\",{\"1\":{\"659\":1}}],[\"openfeign远程调用\",{\"0\":{\"659\":1}}],[\"openssl\",{\"1\":{\"639\":2}}],[\"opensource\",{\"1\":{\"429\":1,\"524\":1}}],[\"opensession\",{\"1\":{\"175\":1,\"184\":1}}],[\"openwire\",{\"1\":{\"327\":1}}],[\"open=\",{\"1\":{\"190\":1}}],[\"open\",{\"1\":{\"190\":1}}],[\"openjdk\",{\"1\":{\"140\":1,\"640\":1}}],[\"openapi\",{\"1\":{\"14\":6}}],[\"operating\",{\"1\":{\"81\":1}}],[\"operations\",{\"1\":{\"63\":1,\"317\":1}}],[\"onpagechange\",{\"1\":{\"612\":1}}],[\"onmounted\",{\"1\":{\"532\":1}}],[\"onmessage\",{\"1\":{\"406\":1,\"407\":3}}],[\"onselect=\",{\"1\":{\"616\":1}}],[\"onsearch\",{\"1\":{\"518\":1}}],[\"onsuccess\",{\"1\":{\"344\":1}}],[\"onsubmit=\",{\"1\":{\"14\":3}}],[\"onsubmit\",{\"1\":{\"14\":6,\"520\":3}}],[\"onactivityresult\",{\"1\":{\"409\":1}}],[\"onbeforeunload\",{\"1\":{\"406\":1}}],[\"onopen\",{\"1\":{\"406\":1,\"407\":3}}],[\"onfailure\",{\"1\":{\"344\":1}}],[\"onfinish=\",{\"1\":{\"22\":1,\"23\":1}}],[\"onfinish\",{\"1\":{\"22\":2,\"23\":2}}],[\"only\",{\"1\":{\"66\":1,\"67\":1,\"371\":1,\"377\":1,\"703\":1}}],[\"onlyifabsent\",{\"1\":{\"66\":5}}],[\"onlineinterfaceinfo\",{\"1\":{\"21\":1}}],[\"online\",{\"1\":{\"21\":2}}],[\"oneapi\",{\"1\":{\"585\":1}}],[\"onerror\",{\"1\":{\"406\":1}}],[\"one\",{\"1\":{\"56\":1,\"81\":2,\"209\":1,\"691\":1,\"725\":1,\"738\":1,\"741\":1}}],[\"once\",{\"1\":{\"539\":1}}],[\"onclickright\",{\"1\":{\"506\":2,\"518\":1}}],[\"onclickleft\",{\"1\":{\"506\":2,\"518\":1}}],[\"onclick=\",{\"1\":{\"14\":5,\"406\":2,\"616\":1}}],[\"onclose\",{\"1\":{\"406\":1,\"407\":3}}],[\"oncancel=\",{\"1\":{\"14\":3}}],[\"oncancel\",{\"1\":{\"14\":6,\"518\":1}}],[\"onchange\",{\"1\":{\"14\":1,\"22\":1,\"507\":2,\"518\":1,\"616\":2}}],[\"on\",{\"1\":{\"9\":2,\"47\":1,\"63\":2,\"81\":2,\"142\":2,\"370\":1,\"378\":1,\"509\":1,\"511\":2,\"557\":2,\"596\":1,\"643\":3,\"646\":2,\"691\":2,\"731\":1,\"764\":3,\"801\":2}}],[\"配置客户端\",{\"1\":{\"781\":1}}],[\"配置线程池容器\",{\"1\":{\"721\":1}}],[\"配置线程池\",{\"1\":{\"721\":1}}],[\"配置网关\",{\"1\":{\"710\":1,\"721\":1}}],[\"配置为json格式\",{\"1\":{\"706\":1}}],[\"配置nginx负载均衡\",{\"1\":{\"691\":1}}],[\"配置跨域\",{\"1\":{\"663\":1}}],[\"配置分组\",{\"1\":{\"660\":1}}],[\"配置集id\",{\"1\":{\"660\":1}}],[\"配置集\",{\"1\":{\"660\":1}}],[\"配置request请求时的默认参数\",{\"1\":{\"630\":1}}],[\"配置redis\",{\"1\":{\"398\":2}}],[\"配置了这个可以从\",{\"1\":{\"611\":1}}],[\"配置中心来做配置管理\",{\"1\":{\"660\":1}}],[\"配置中心\",{\"1\":{\"545\":1,\"657\":1}}],[\"配置application\",{\"1\":{\"533\":1}}],[\"配置请求\",{\"1\":{\"532\":1}}],[\"配置请求统一处理\",{\"1\":{\"14\":1}}],[\"配置插件\",{\"1\":{\"504\":1}}],[\"配置ip白名单\",{\"1\":{\"457\":1}}],[\"配置成功\",{\"1\":{\"451\":1}}],[\"配置内网穿透\",{\"0\":{\"450\":1}}],[\"配置yml\",{\"1\":{\"416\":1}}],[\"配置连接池\",{\"1\":{\"396\":1}}],[\"配置如下\",{\"1\":{\"349\":1}}],[\"配置lazy模式\",{\"1\":{\"347\":1}}],[\"配置回调\",{\"1\":{\"344\":1}}],[\"配置自动创建消息id\",{\"1\":{\"339\":1,\"352\":1}}],[\"配置消息转换器\",{\"1\":{\"339\":1,\"340\":1}}],[\"配置前缀file\",{\"1\":{\"319\":1}}],[\"配置类里面注入stringredistemplate\",{\"1\":{\"742\":1}}],[\"配置类route\",{\"1\":{\"517\":1}}],[\"配置类\",{\"1\":{\"319\":1,\"551\":1}}],[\"配置类注解\",{\"1\":{\"312\":1}}],[\"配置spring注解扫描\",{\"1\":{\"299\":1}}],[\"配置server与dao的关系\",{\"1\":{\"270\":1}}],[\"配置文件中修改ttl\",{\"1\":{\"706\":1}}],[\"配置文件中加nacos注册\",{\"1\":{\"663\":1}}],[\"配置文件也要改\",{\"1\":{\"286\":1}}],[\"配置文件\",{\"0\":{\"595\":1},\"1\":{\"277\":1,\"283\":1,\"285\":1,\"286\":1,\"350\":1,\"379\":1,\"415\":1,\"655\":1,\"727\":1}}],[\"配置多个拦截器\",{\"0\":{\"233\":1}}],[\"配置多拦截器\",{\"1\":{\"232\":1,\"233\":1}}],[\"配置拦截器生效\",{\"1\":{\"739\":1}}],[\"配置拦截器\",{\"1\":{\"232\":1,\"233\":1}}],[\"配置拦截器类\",{\"1\":{\"232\":1}}],[\"配置后可以忽略不配置步骤2\",{\"1\":{\"215\":1,\"605\":1}}],[\"配置数据库连接环境信息\",{\"1\":{\"175\":1}}],[\"配置我应该都集中放在custom\",{\"1\":{\"43\":1}}],[\"配置\",{\"0\":{\"379\":1},\"1\":{\"29\":2,\"215\":1,\"216\":1,\"332\":1,\"340\":1,\"371\":1,\"551\":1,\"639\":1,\"665\":1,\"698\":1,\"704\":1,\"706\":1,\"726\":1}}],[\"配置式\",{\"1\":{\"27\":1}}],[\"配置prettier格式化\",{\"1\":{\"12\":1}}],[\"配置eslint\",{\"1\":{\"12\":1}}],[\"gae5a3tjazn\",{\"1\":{\"824\":1}}],[\"gateway导入以下依赖\",{\"1\":{\"728\":1}}],[\"gateway<\",{\"1\":{\"661\":1,\"728\":1}}],[\"gateway网关\",{\"0\":{\"661\":1}}],[\"gateway模块下面\",{\"1\":{\"29\":1}}],[\"gateway项目作为服务调用者\",{\"1\":{\"29\":1}}],[\"gatewayfilterchain\",{\"1\":{\"27\":2,\"728\":1}}],[\"gateway\",{\"1\":{\"27\":5,\"657\":1,\"661\":3,\"663\":1,\"728\":3}}],[\"g1\",{\"1\":{\"796\":8,\"815\":3}}],[\"gms\",{\"1\":{\"675\":3}}],[\"gmail\",{\"1\":{\"655\":1}}],[\"gzip\",{\"1\":{\"643\":7,\"646\":7}}],[\"gz\",{\"1\":{\"639\":3}}],[\"gb\",{\"1\":{\"523\":1,\"665\":1}}],[\"gulimallelasticsearchconfig\",{\"1\":{\"687\":3,\"688\":1,\"710\":1}}],[\"gulimallexceptioncontrolleradvice\",{\"1\":{\"666\":1}}],[\"gulimallcorsconfiguration\",{\"1\":{\"663\":1}}],[\"gulimallcouponapplication\",{\"1\":{\"658\":2}}],[\"gulimallgatewayapplication\",{\"1\":{\"661\":2}}],[\"gulimallmemberapplication\",{\"1\":{\"659\":2}}],[\"gulimallproductapplicationtests\",{\"1\":{\"655\":1}}],[\"gulimallproductapplication\",{\"1\":{\"655\":3,\"706\":2}}],[\"gulimall\",{\"1\":{\"655\":7,\"658\":1,\"659\":3,\"660\":2,\"663\":1,\"665\":2,\"666\":1,\"671\":2,\"674\":1,\"675\":1,\"691\":6,\"696\":1,\"697\":1,\"706\":2,\"710\":11,\"721\":8}}],[\"guava\",{\"1\":{\"543\":1}}],[\"gutter=\",{\"1\":{\"518\":1}}],[\"guide\",{\"1\":{\"43\":1,\"438\":1,\"442\":1,\"444\":1}}],[\"gogogo\",{\"1\":{\"704\":2}}],[\"google\",{\"1\":{\"512\":3,\"543\":1}}],[\"go\",{\"1\":{\"508\":1,\"704\":2}}],[\"goanother\",{\"1\":{\"381\":1}}],[\"grant\",{\"1\":{\"457\":2}}],[\"groups\",{\"1\":{\"667\":9,\"668\":3}}],[\"groupname给指定的消费者组添加消费者\",{\"1\":{\"795\":1}}],[\"groupname\",{\"1\":{\"522\":1,\"673\":2,\"727\":1,\"795\":2}}],[\"groupid\",{\"1\":{\"673\":2,\"674\":2}}],[\"groupid>\",{\"1\":{\"18\":1,\"19\":1,\"27\":1,\"29\":4,\"175\":3,\"196\":2,\"224\":11,\"241\":4,\"245\":3,\"248\":1,\"256\":1,\"269\":1,\"294\":2,\"303\":1,\"312\":6,\"313\":2,\"318\":3,\"319\":1,\"332\":1,\"339\":1,\"340\":1,\"395\":2,\"398\":3,\"405\":1,\"416\":5,\"429\":2,\"453\":2,\"512\":1,\"522\":1,\"524\":1,\"533\":2,\"551\":2,\"588\":1,\"589\":1,\"590\":1,\"591\":1,\"592\":1,\"593\":1,\"594\":1,\"599\":1,\"653\":1,\"655\":7,\"657\":2,\"658\":1,\"659\":1,\"660\":1,\"661\":2,\"663\":2,\"665\":2,\"687\":1,\"690\":2,\"698\":4,\"704\":1,\"706\":1,\"726\":2,\"727\":1,\"728\":4,\"733\":2,\"770\":1,\"781\":1,\"817\":2}}],[\"groupingby\",{\"1\":{\"214\":1,\"564\":1,\"566\":1,\"575\":1,\"816\":1}}],[\"group\",{\"1\":{\"140\":6,\"469\":1,\"660\":1,\"670\":8,\"674\":3,\"795\":4,\"796\":2}}],[\"grow\",{\"1\":{\"56\":2}}],[\"glassfish\",{\"1\":{\"241\":1}}],[\"globalcors\",{\"1\":{\"728\":1}}],[\"globalexceptionhandler\",{\"1\":{\"628\":1}}],[\"globalexceptionhandler类\",{\"0\":{\"628\":1}}],[\"global\",{\"1\":{\"201\":1,\"215\":1,\"605\":1,\"655\":1,\"663\":1}}],[\"globalfilter\",{\"1\":{\"27\":1,\"728\":1}}],[\"gitee\",{\"1\":{\"504\":1,\"655\":3}}],[\"github搜现成的代码\",{\"1\":{\"586\":1}}],[\"github\",{\"1\":{\"43\":1,\"44\":1,\"140\":1,\"355\":1,\"522\":1,\"609\":3,\"630\":1,\"657\":1,\"682\":1,\"687\":1,\"695\":1,\"704\":1,\"727\":2}}],[\"given\",{\"1\":{\"142\":3}}],[\"gte\",{\"1\":{\"685\":1,\"710\":3}}],[\"gt\",{\"1\":{\"26\":1,\"559\":1,\"769\":1,\"770\":2,\"790\":1}}],[\"gson<\",{\"1\":{\"512\":1}}],[\"gson\",{\"1\":{\"23\":4,\"512\":7,\"566\":5,\"575\":10}}],[\"g\",{\"1\":{\"12\":1,\"63\":1,\"567\":1,\"584\":1,\"643\":1}}],[\"georeference\",{\"1\":{\"817\":1}}],[\"georesults<redisgeocommands\",{\"1\":{\"817\":1}}],[\"georadius\",{\"1\":{\"815\":1}}],[\"geolocation<>\",{\"1\":{\"816\":1}}],[\"geolocation<string>>>\",{\"1\":{\"817\":1}}],[\"geolocation<string>>\",{\"1\":{\"816\":1,\"817\":1}}],[\"geo\",{\"1\":{\"816\":1,\"817\":1}}],[\"geo在redis中就一个menber和一个经纬度\",{\"1\":{\"816\":1}}],[\"geosearchcommandargs\",{\"1\":{\"817\":1}}],[\"geosearchstore\",{\"1\":{\"815\":1}}],[\"geosearch\",{\"1\":{\"815\":2}}],[\"geopos\",{\"1\":{\"815\":1}}],[\"geohash\",{\"1\":{\"815\":1}}],[\"geodist\",{\"1\":{\"815\":2}}],[\"geoadd\",{\"1\":{\"815\":2,\"816\":1}}],[\"geo就是geolocation的简写形式\",{\"1\":{\"815\":1}}],[\"geo数据结构\",{\"0\":{\"815\":1}}],[\"geoconv\",{\"1\":{\"442\":1}}],[\"gercurrentuser\",{\"1\":{\"613\":1}}],[\"gecko\",{\"1\":{\"523\":1}}],[\"ge\",{\"1\":{\"204\":1,\"206\":1,\"209\":2,\"675\":1}}],[\"general\",{\"1\":{\"764\":3,\"801\":2,\"806\":1}}],[\"generatepostpolicy\",{\"1\":{\"665\":1}}],[\"generated\",{\"1\":{\"9\":1,\"596\":1}}],[\"generator<\",{\"1\":{\"655\":1}}],[\"generator\",{\"1\":{\"655\":2}}],[\"genericjackson2jsonredisserializer\",{\"1\":{\"399\":5,\"706\":1}}],[\"genderagg\",{\"1\":{\"685\":1}}],[\"gender没有索引\",{\"1\":{\"467\":1}}],[\"gender的时候\",{\"1\":{\"467\":1}}],[\"gender\",{\"1\":{\"171\":1,\"175\":1,\"196\":1,\"208\":1,\"211\":1,\"217\":1,\"518\":1,\"519\":4,\"596\":2,\"616\":1,\"685\":4,\"687\":2}}],[\"gensign\",{\"1\":{\"17\":3,\"27\":1}}],[\"gety\",{\"1\":{\"816\":2}}],[\"getx\",{\"1\":{\"816\":2}}],[\"getvoucherid\",{\"1\":{\"790\":2}}],[\"getvalue\",{\"1\":{\"21\":2,\"23\":1,\"566\":2,\"575\":4,\"687\":1,\"796\":2,\"810\":1,\"816\":1,\"817\":1}}],[\"geturi\",{\"1\":{\"728\":1}}],[\"getuser\",{\"1\":{\"740\":1,\"742\":1,\"765\":1,\"770\":5,\"777\":2,\"789\":1,\"790\":1,\"796\":1,\"801\":1,\"803\":2,\"804\":2,\"806\":2,\"807\":2,\"809\":1,\"810\":1,\"819\":1,\"820\":1}}],[\"getuserrole\",{\"1\":{\"608\":2}}],[\"getuserrequestparams\",{\"1\":{\"23\":1}}],[\"getuserstatus\",{\"1\":{\"605\":2,\"608\":1}}],[\"getuserpassword\",{\"1\":{\"599\":1,\"605\":1,\"607\":1}}],[\"getuseraccount\",{\"1\":{\"599\":1,\"605\":1,\"607\":1,\"608\":1}}],[\"getuserdao\",{\"1\":{\"276\":3}}],[\"getuserid\",{\"1\":{\"214\":2,\"559\":2,\"560\":1,\"562\":2,\"790\":2,\"802\":1,\"809\":1}}],[\"getusername\",{\"1\":{\"16\":1,\"206\":2,\"209\":2,\"220\":3,\"605\":2,\"608\":1}}],[\"getusernamebypost\",{\"1\":{\"16\":3,\"17\":2,\"19\":1,\"21\":1,\"23\":1}}],[\"getkeepalivetime\",{\"1\":{\"721\":1}}],[\"getkeyasnumber\",{\"1\":{\"710\":3}}],[\"getkeyasstring\",{\"1\":{\"687\":1,\"710\":5}}],[\"getkeyword\",{\"1\":{\"710\":4}}],[\"getkeyprefix\",{\"1\":{\"706\":2}}],[\"getkey\",{\"1\":{\"566\":1,\"575\":2,\"816\":1}}],[\"getquerystring\",{\"1\":{\"710\":1}}],[\"getqueryparams\",{\"1\":{\"27\":1}}],[\"getgender\",{\"1\":{\"605\":2,\"608\":1}}],[\"getlevel1categories\",{\"1\":{\"690\":1,\"696\":1,\"697\":1,\"706\":3}}],[\"getlist\",{\"1\":{\"551\":1}}],[\"getlogo\",{\"1\":{\"688\":1}}],[\"getloginuser\",{\"1\":{\"23\":1,\"544\":1,\"564\":1,\"565\":1}}],[\"getloginuserusingget\",{\"1\":{\"14\":1}}],[\"getlock\",{\"1\":{\"551\":1,\"561\":2,\"573\":1,\"574\":2,\"704\":2,\"781\":2,\"790\":1}}],[\"getlocaladdress\",{\"1\":{\"27\":1}}],[\"getlong\",{\"1\":{\"457\":1}}],[\"getword\",{\"1\":{\"454\":1}}],[\"getjedis\",{\"1\":{\"396\":2}}],[\"getdayofmonth\",{\"1\":{\"819\":1,\"820\":1}}],[\"getdatafromdb\",{\"1\":{\"703\":5,\"704\":1}}],[\"getdata\",{\"1\":{\"355\":1,\"409\":1,\"423\":2,\"688\":1,\"710\":1,\"756\":1,\"758\":1}}],[\"getdistance\",{\"1\":{\"817\":1}}],[\"getdefaultimg\",{\"1\":{\"675\":2}}],[\"getdefaultmessage\",{\"1\":{\"666\":2}}],[\"getdecript\",{\"1\":{\"675\":1}}],[\"getdeclaredmethod\",{\"1\":{\"170\":1}}],[\"getdeclaredmethods\",{\"1\":{\"170\":2}}],[\"getdeclaredfield\",{\"1\":{\"169\":2}}],[\"getdeclaredfields\",{\"1\":{\"169\":2,\"171\":1}}],[\"getdeclaredconstructor\",{\"1\":{\"168\":3}}],[\"getdeclaredconstructors\",{\"1\":{\"168\":2}}],[\"getdescription\",{\"1\":{\"558\":1,\"559\":1,\"623\":1,\"625\":1,\"627\":2,\"628\":1}}],[\"getfragments\",{\"1\":{\"710\":1}}],[\"getfullprice\",{\"1\":{\"675\":1}}],[\"getfullcount\",{\"1\":{\"675\":1}}],[\"getfuture\",{\"1\":{\"344\":1}}],[\"getfielderrors\",{\"1\":{\"666\":2}}],[\"getfield\",{\"1\":{\"169\":1,\"666\":2}}],[\"getfields\",{\"1\":{\"169\":1}}],[\"getfirst\",{\"1\":{\"27\":5,\"728\":1}}],[\"getobjectargs\",{\"1\":{\"319\":1}}],[\"getobjecttype\",{\"1\":{\"277\":1}}],[\"getobject\",{\"1\":{\"277\":1,\"319\":1}}],[\"getoriginalfilename\",{\"1\":{\"239\":1,\"241\":2,\"801\":1}}],[\"getorderdao\",{\"1\":{\"275\":3}}],[\"getorder\",{\"1\":{\"27\":1,\"728\":1}}],[\"get请求发送多个请求参数\",{\"1\":{\"248\":1}}],[\"getendtime\",{\"1\":{\"764\":1,\"765\":1,\"789\":1}}],[\"getendpoint\",{\"1\":{\"241\":1,\"319\":3}}],[\"getetag\",{\"1\":{\"665\":2}}],[\"getemail\",{\"1\":{\"605\":2,\"608\":1}}],[\"getexpiretime\",{\"1\":{\"558\":1,\"561\":2,\"574\":2,\"756\":1,\"758\":1}}],[\"getexchange\",{\"1\":{\"344\":1}}],[\"getelementbyid\",{\"1\":{\"406\":2}}],[\"geterrorcode\",{\"1\":{\"241\":1,\"665\":2}}],[\"geterrormessage\",{\"1\":{\"241\":1,\"665\":2}}],[\"getrootelement\",{\"1\":{\"453\":1}}],[\"getrootconfigclasses\",{\"1\":{\"224\":1,\"245\":1,\"248\":1}}],[\"getroutingkey\",{\"1\":{\"344\":1}}],[\"getredis\",{\"1\":{\"706\":1}}],[\"getreadwritelock\",{\"1\":{\"704\":2}}],[\"getreadpath\",{\"1\":{\"319\":2}}],[\"getreason\",{\"1\":{\"344\":1}}],[\"getreplynewsmessage\",{\"1\":{\"455\":1}}],[\"getreplymessage\",{\"1\":{\"453\":2}}],[\"getreplytext\",{\"1\":{\"344\":1}}],[\"getreplycode\",{\"1\":{\"344\":1}}],[\"getrecords\",{\"1\":{\"219\":1,\"220\":3,\"544\":1,\"551\":1,\"573\":1,\"673\":1,\"803\":1,\"817\":1}}],[\"getresultcode\",{\"1\":{\"409\":1}}],[\"getresourcesfileinputstream\",{\"1\":{\"430\":1}}],[\"getresource\",{\"1\":{\"396\":1,\"430\":4}}],[\"getresourceasstream\",{\"1\":{\"175\":1,\"184\":1,\"430\":1}}],[\"getresponse\",{\"1\":{\"27\":2,\"728\":1}}],[\"getreturntype\",{\"1\":{\"170\":1}}],[\"getremoteaddress\",{\"1\":{\"27\":1}}],[\"getrequestid\",{\"1\":{\"241\":1,\"665\":2}}],[\"getrequest\",{\"1\":{\"27\":1,\"728\":1}}],[\"getbegintime\",{\"1\":{\"764\":1,\"765\":1,\"789\":1}}],[\"getbean\",{\"1\":{\"269\":2,\"297\":3,\"298\":1,\"312\":1,\"344\":1}}],[\"getbounds\",{\"1\":{\"675\":1}}],[\"getbooleanextra\",{\"1\":{\"409\":1}}],[\"getbrandsbycatid\",{\"1\":{\"675\":1}}],[\"getbrandid\",{\"1\":{\"655\":1,\"672\":4,\"675\":4,\"688\":1,\"710\":2}}],[\"getbit\",{\"1\":{\"819\":1}}],[\"getbindingresult\",{\"1\":{\"666\":1}}],[\"getbizorderno\",{\"1\":{\"340\":1}}],[\"getbaseattrs\",{\"1\":{\"675\":1}}],[\"getbasicremote\",{\"1\":{\"407\":1}}],[\"getbalance\",{\"1\":{\"206\":2,\"208\":1,\"209\":4,\"210\":7}}],[\"getbytes\",{\"1\":{\"347\":1,\"359\":1,\"452\":1,\"599\":2,\"605\":1,\"665\":1,\"725\":1,\"733\":1}}],[\"getbyid\",{\"1\":{\"21\":2,\"23\":1,\"208\":2,\"210\":1,\"214\":1,\"224\":6,\"262\":7,\"352\":1,\"355\":1,\"559\":1,\"560\":1,\"575\":2,\"613\":1,\"670\":2,\"673\":1,\"675\":1,\"688\":2,\"721\":2,\"747\":1,\"751\":1,\"752\":1,\"755\":1,\"756\":1,\"758\":4,\"765\":1,\"802\":2,\"803\":1}}],[\"getbuckets\",{\"1\":{\"687\":1,\"710\":8}}],[\"getbucket\",{\"1\":{\"319\":5}}],[\"getbucketname\",{\"1\":{\"241\":1}}],[\"getnickname\",{\"1\":{\"802\":1}}],[\"getnorelationattr\",{\"1\":{\"674\":2}}],[\"getnow\",{\"1\":{\"143\":1}}],[\"getnetmallname\",{\"1\":{\"143\":3}}],[\"getname\",{\"1\":{\"83\":2,\"91\":2,\"92\":2,\"93\":3,\"95\":1,\"103\":3,\"104\":4,\"107\":4,\"108\":1,\"109\":2,\"110\":8,\"120\":4,\"143\":4,\"151\":1,\"165\":2,\"169\":1,\"170\":1,\"171\":1,\"209\":2,\"220\":2,\"232\":1,\"453\":1,\"539\":1,\"558\":1,\"559\":1,\"672\":6,\"673\":2,\"675\":1,\"687\":1,\"688\":2,\"690\":2,\"697\":2,\"706\":2,\"716\":4,\"817\":1}}],[\"getnamebypost\",{\"1\":{\"16\":3}}],[\"getnamebyget\",{\"1\":{\"16\":3,\"19\":1,\"27\":1}}],[\"getpublishstatus\",{\"1\":{\"675\":1}}],[\"getphone\",{\"1\":{\"605\":2,\"608\":1,\"725\":3,\"738\":1,\"741\":1}}],[\"getpoint\",{\"1\":{\"439\":1}}],[\"getprogrammap\",{\"1\":{\"493\":2}}],[\"getprogram\",{\"1\":{\"491\":1}}],[\"getproperty\",{\"1\":{\"430\":1}}],[\"getpricebycompletablefuture\",{\"1\":{\"143\":1}}],[\"getprice\",{\"1\":{\"143\":2,\"675\":2,\"688\":1}}],[\"getpassword\",{\"1\":{\"558\":1,\"560\":1,\"561\":2,\"574\":2,\"725\":3}}],[\"getparentcid\",{\"1\":{\"663\":2,\"670\":2,\"690\":2,\"696\":1,\"697\":4,\"706\":1}}],[\"getparentfile\",{\"1\":{\"430\":2}}],[\"getparametertypes\",{\"1\":{\"170\":1}}],[\"getparametercount\",{\"1\":{\"170\":1}}],[\"getparameters\",{\"1\":{\"168\":1,\"170\":1}}],[\"getparameter\",{\"1\":{\"27\":1}}],[\"getpaytime\",{\"1\":{\"352\":1}}],[\"getpagenum\",{\"1\":{\"710\":2}}],[\"getpageno\",{\"1\":{\"220\":1}}],[\"getpage\",{\"1\":{\"670\":2,\"673\":1,\"674\":1,\"675\":2}}],[\"getpagesize\",{\"1\":{\"220\":1}}],[\"getpages\",{\"1\":{\"219\":1,\"220\":4}}],[\"getpath\",{\"1\":{\"27\":1,\"430\":9,\"431\":1,\"432\":2,\"433\":1,\"728\":1}}],[\"getclaimsbody\",{\"1\":{\"728\":1}}],[\"getclassloader\",{\"1\":{\"165\":1}}],[\"getclass\",{\"1\":{\"54\":1,\"58\":1,\"167\":1,\"171\":1}}],[\"getcatalog3id\",{\"1\":{\"710\":2}}],[\"getcatalogjsonfromdbwithredissonlock\",{\"1\":{\"704\":1}}],[\"getcatalogjsonfromdbwithredislock\",{\"1\":{\"703\":10}}],[\"getcatalogjsonfromdb\",{\"1\":{\"698\":1,\"702\":1}}],[\"getcatalogjsonfromredis\",{\"1\":{\"698\":1}}],[\"getcatalogjson\",{\"1\":{\"690\":3,\"697\":1,\"706\":1}}],[\"getcatalogid\",{\"1\":{\"675\":3,\"688\":1,\"721\":2}}],[\"getcatelogid\",{\"1\":{\"670\":2,\"672\":1,\"673\":3,\"674\":3}}],[\"getcatid\",{\"1\":{\"663\":1,\"672\":1,\"690\":7,\"697\":7,\"706\":1}}],[\"getcause\",{\"1\":{\"143\":1}}],[\"getchildrens\",{\"1\":{\"663\":3}}],[\"getcheckpassword\",{\"1\":{\"599\":1}}],[\"getcoresize\",{\"1\":{\"721\":1}}],[\"getcountdownlatch\",{\"1\":{\"704\":2}}],[\"getcontent\",{\"1\":{\"733\":2,\"817\":2}}],[\"getcontextclassloader\",{\"1\":{\"430\":1}}],[\"getconstructor\",{\"1\":{\"168\":1}}],[\"getconstructors\",{\"1\":{\"168\":1}}],[\"getcodetype\",{\"1\":{\"493\":1}}],[\"getcode\",{\"1\":{\"230\":4,\"623\":1,\"624\":2,\"625\":1,\"627\":3,\"628\":1,\"666\":3,\"674\":1,\"675\":2,\"688\":4,\"710\":1,\"738\":1,\"741\":1}}],[\"getcreatetime\",{\"1\":{\"211\":1}}],[\"get会阻塞\",{\"1\":{\"105\":1,\"712\":1}}],[\"getarticleid\",{\"1\":{\"733\":3}}],[\"getarray\",{\"1\":{\"98\":1}}],[\"getaggregations\",{\"1\":{\"687\":1,\"710\":9}}],[\"getattrs\",{\"1\":{\"710\":6}}],[\"getattr\",{\"1\":{\"675\":1}}],[\"getattrvalues\",{\"1\":{\"675\":1}}],[\"getattrtype\",{\"1\":{\"674\":1}}],[\"getattrname\",{\"1\":{\"673\":1,\"674\":1,\"675\":1,\"710\":1}}],[\"getattrinfo\",{\"1\":{\"673\":1}}],[\"getattrid\",{\"1\":{\"673\":10,\"674\":3,\"675\":2,\"688\":2}}],[\"getattribute\",{\"1\":{\"608\":1,\"613\":1,\"738\":1,\"739\":1}}],[\"getattrgroupwithattrsbyspuid\",{\"1\":{\"721\":1}}],[\"getattrgroupname\",{\"1\":{\"670\":1,\"673\":2}}],[\"getattrgroupid\",{\"1\":{\"670\":1,\"673\":5,\"674\":2}}],[\"getavatarurl\",{\"1\":{\"605\":2,\"608\":1}}],[\"getaccesstoken\",{\"1\":{\"457\":3}}],[\"getaccesskeysecret\",{\"1\":{\"241\":1}}],[\"getaccesskeyid\",{\"1\":{\"241\":1}}],[\"getaccesskey\",{\"1\":{\"23\":1,\"319\":1}}],[\"getapplicationcontext\",{\"1\":{\"409\":3}}],[\"getall\",{\"1\":{\"224\":5,\"262\":6}}],[\"getandset\",{\"1\":{\"155\":1}}],[\"gettag\",{\"1\":{\"732\":2}}],[\"gettags\",{\"1\":{\"512\":1,\"566\":2,\"575\":4}}],[\"gettimetolive\",{\"1\":{\"706\":2}}],[\"getting\",{\"1\":{\"12\":1,\"174\":1,\"378\":1}}],[\"gettoken\",{\"1\":{\"457\":1,\"725\":2}}],[\"gettotalhits\",{\"1\":{\"710\":1}}],[\"gettotaltimemillis\",{\"1\":{\"537\":1,\"538\":1,\"539\":1}}],[\"gettotal\",{\"1\":{\"219\":1,\"220\":4}}],[\"getteambyid\",{\"1\":{\"561\":1,\"562\":1,\"574\":1}}],[\"getteamid\",{\"1\":{\"561\":1,\"562\":1,\"564\":1,\"574\":1}}],[\"gettemplate\",{\"1\":{\"423\":1,\"733\":1}}],[\"getter\",{\"1\":{\"216\":1,\"226\":1,\"430\":1}}],[\"gettypeid\",{\"1\":{\"816\":1}}],[\"gettype\",{\"1\":{\"169\":1,\"512\":1,\"566\":2,\"575\":4}}],[\"gettreenode\",{\"1\":{\"67\":1}}],[\"get和post的区别\",{\"1\":{\"47\":2}}],[\"gethighlightfields\",{\"1\":{\"710\":1}}],[\"gethits\",{\"1\":{\"687\":2,\"710\":4}}],[\"gethasstock\",{\"1\":{\"688\":1,\"710\":2}}],[\"gethostid\",{\"1\":{\"241\":1,\"665\":2}}],[\"gethoststring\",{\"1\":{\"27\":1}}],[\"getheaders\",{\"1\":{\"27\":1,\"728\":1}}],[\"getheadermap\",{\"1\":{\"17\":2}}],[\"getheader\",{\"1\":{\"16\":1,\"17\":5,\"27\":1,\"232\":1,\"742\":1}}],[\"getminbehottime\",{\"1\":{\"732\":2}}],[\"getminbalance\",{\"1\":{\"209\":2}}],[\"getmsg\",{\"1\":{\"666\":3,\"688\":2}}],[\"getmenus\",{\"1\":{\"663\":2}}],[\"getmessageproperties\",{\"1\":{\"355\":2}}],[\"getmessage\",{\"1\":{\"230\":2,\"241\":1,\"344\":1,\"544\":1,\"623\":1,\"624\":1,\"625\":1,\"627\":2,\"628\":3,\"665\":3}}],[\"getmethods\",{\"1\":{\"170\":2}}],[\"getmethod\",{\"1\":{\"27\":1,\"170\":2,\"232\":1}}],[\"getmaxbehottime\",{\"1\":{\"732\":2}}],[\"getmaxbalance\",{\"1\":{\"209\":2}}],[\"getmaxsize\",{\"1\":{\"721\":1}}],[\"getmaxnum\",{\"1\":{\"558\":1,\"559\":1,\"561\":1,\"574\":1}}],[\"getmapper\",{\"1\":{\"176\":1,\"182\":1,\"184\":1}}],[\"getmapping\",{\"1\":{\"16\":1,\"27\":1,\"208\":2,\"209\":2,\"214\":2,\"220\":1,\"224\":2,\"262\":2,\"416\":1,\"451\":2,\"452\":1,\"531\":1,\"534\":1,\"540\":1,\"544\":1,\"608\":1,\"613\":1,\"670\":1,\"672\":1,\"674\":1,\"675\":1,\"690\":1,\"704\":7,\"710\":1,\"747\":2,\"802\":1,\"805\":1,\"807\":1,\"810\":1,\"817\":1,\"820\":1}}],[\"getmodifiers\",{\"1\":{\"168\":1,\"169\":1,\"170\":1}}],[\"getscore\",{\"1\":{\"810\":1}}],[\"getsize\",{\"1\":{\"732\":2}}],[\"getspuid\",{\"1\":{\"721\":4}}],[\"getspuname\",{\"1\":{\"675\":1}}],[\"getsalt\",{\"1\":{\"725\":1}}],[\"getsaleattrbyspuid\",{\"1\":{\"721\":1}}],[\"getsafetyuser\",{\"1\":{\"512\":2,\"534\":1,\"566\":1,\"575\":2,\"608\":2,\"613\":1}}],[\"getsourceasstring\",{\"1\":{\"687\":1,\"710\":1}}],[\"getsort\",{\"1\":{\"663\":8,\"710\":2}}],[\"getsortby\",{\"1\":{\"220\":2}}],[\"getskuprice\",{\"1\":{\"710\":3}}],[\"getskudefaultimg\",{\"1\":{\"688\":1}}],[\"getskuhasstock\",{\"1\":{\"688\":1}}],[\"getskuinfobyspuid\",{\"1\":{\"688\":1}}],[\"getskuid\",{\"1\":{\"675\":4,\"688\":4}}],[\"getskuname\",{\"1\":{\"675\":1}}],[\"getskus\",{\"1\":{\"675\":1}}],[\"getshowdesc\",{\"1\":{\"675\":1}}],[\"getstock\",{\"1\":{\"764\":1,\"765\":1,\"769\":1,\"789\":2}}],[\"getstr\",{\"1\":{\"457\":1}}],[\"getstringvalue\",{\"1\":{\"453\":1}}],[\"getstatuscode\",{\"1\":{\"27\":3}}],[\"getstatus\",{\"1\":{\"23\":1,\"208\":1,\"209\":4,\"210\":2,\"220\":4,\"352\":3,\"355\":2,\"558\":1,\"559\":1,\"560\":1,\"561\":2,\"574\":2}}],[\"getsemaphore\",{\"1\":{\"704\":2}}],[\"getsession\",{\"1\":{\"605\":2,\"608\":1,\"613\":1,\"620\":1,\"739\":1}}],[\"getsearchtext\",{\"1\":{\"559\":1}}],[\"getservletfilters\",{\"1\":{\"224\":1,\"248\":1}}],[\"getservletmappings\",{\"1\":{\"224\":1,\"245\":3,\"248\":1}}],[\"getservletconfigclasses\",{\"1\":{\"224\":1,\"245\":1,\"248\":1}}],[\"getsecretkey\",{\"1\":{\"23\":1,\"27\":1,\"319\":1}}],[\"geticon\",{\"1\":{\"802\":1}}],[\"getimgurl\",{\"1\":{\"675\":3}}],[\"getimagesbyskuid\",{\"1\":{\"721\":1}}],[\"getimages\",{\"1\":{\"675\":3}}],[\"getitems\",{\"1\":{\"688\":1}}],[\"getitem\",{\"1\":{\"664\":1}}],[\"getisasc\",{\"1\":{\"220\":1}}],[\"getintvolatile\",{\"1\":{\"769\":1}}],[\"getinterfaceinfo\",{\"1\":{\"27\":2,\"29\":1}}],[\"getinterfaceinfobyidusingget\",{\"1\":{\"22\":1,\"23\":1}}],[\"getinstance\",{\"1\":{\"452\":1}}],[\"getinputstream\",{\"1\":{\"241\":1,\"453\":1}}],[\"getinfo\",{\"1\":{\"206\":1}}],[\"getinvokeuser\",{\"1\":{\"27\":2,\"29\":1}}],[\"getinitialstate\",{\"1\":{\"14\":1,\"613\":1,\"615\":1}}],[\"getid\",{\"1\":{\"21\":4,\"23\":2,\"27\":1,\"105\":1,\"119\":2,\"206\":1,\"210\":2,\"214\":3,\"352\":1,\"544\":1,\"558\":4,\"559\":1,\"560\":2,\"561\":2,\"562\":1,\"564\":1,\"565\":1,\"566\":4,\"574\":2,\"575\":8,\"598\":1,\"599\":1,\"605\":2,\"608\":1,\"613\":1,\"675\":6,\"688\":1,\"704\":3,\"712\":3,\"715\":2,\"725\":1,\"751\":1,\"764\":2,\"765\":1,\"770\":5,\"777\":3,\"778\":2,\"780\":1,\"789\":3,\"790\":1,\"796\":3,\"801\":2,\"803\":3,\"804\":3,\"806\":2,\"807\":2,\"809\":4,\"810\":1,\"816\":2,\"817\":1,\"819\":1,\"820\":1}}],[\"get\",{\"1\":{\"14\":1,\"16\":4,\"27\":6,\"83\":1,\"105\":3,\"110\":6,\"117\":1,\"119\":1,\"120\":2,\"142\":12,\"143\":4,\"155\":2,\"169\":1,\"171\":1,\"208\":1,\"214\":1,\"226\":2,\"248\":1,\"369\":1,\"395\":1,\"399\":2,\"400\":3,\"430\":3,\"442\":1,\"443\":1,\"444\":1,\"445\":1,\"453\":2,\"454\":3,\"455\":2,\"457\":3,\"532\":1,\"544\":2,\"549\":1,\"551\":1,\"562\":1,\"566\":5,\"575\":3,\"616\":3,\"659\":1,\"663\":2,\"670\":1,\"673\":1,\"674\":1,\"675\":9,\"682\":4,\"684\":2,\"685\":15,\"687\":2,\"688\":1,\"698\":2,\"702\":1,\"703\":2,\"704\":1,\"710\":16,\"712\":1,\"715\":1,\"716\":2,\"721\":1,\"728\":3,\"740\":1,\"741\":1,\"747\":2,\"752\":1,\"755\":1,\"756\":1,\"758\":2,\"778\":1,\"780\":2,\"789\":1,\"796\":3,\"817\":1,\"820\":3}}],[\"=$\",{\"1\":{\"612\":1}}],[\"=null\",{\"1\":{\"544\":1}}],[\"=new\",{\"1\":{\"89\":1,\"103\":1}}],[\"=a\",{\"1\":{\"468\":1}}],[\"=或者==\",{\"1\":{\"420\":1}}],[\"=balance\",{\"1\":{\"205\":1}}],[\"=2000\",{\"1\":{\"204\":1}}],[\"=completablefuture\",{\"1\":{\"119\":1,\"715\":1}}],[\"==null\",{\"1\":{\"688\":1}}],[\"==>\",{\"1\":{\"248\":3,\"250\":4,\"251\":1,\"252\":1,\"253\":1,\"254\":2,\"256\":1,\"257\":1,\"258\":1,\"259\":7}}],[\"==2\",{\"1\":{\"208\":1}}],[\"==\",{\"1\":{\"21\":4,\"23\":3,\"27\":4,\"53\":1,\"54\":2,\"66\":10,\"67\":7,\"71\":6,\"72\":2,\"73\":1,\"87\":1,\"120\":1,\"142\":1,\"143\":1,\"210\":3,\"211\":1,\"214\":1,\"220\":2,\"352\":1,\"355\":2,\"409\":1,\"430\":1,\"457\":1,\"518\":1,\"539\":1,\"558\":2,\"559\":3,\"560\":3,\"561\":1,\"562\":4,\"564\":1,\"565\":1,\"566\":1,\"574\":1,\"605\":1,\"607\":2,\"608\":1,\"612\":1,\"613\":1,\"620\":1,\"663\":4,\"664\":1,\"670\":1,\"675\":1,\"688\":1,\"703\":1,\"710\":5,\"716\":1,\"725\":1,\"728\":2,\"732\":6,\"738\":2,\"739\":1,\"741\":2,\"742\":1,\"747\":2,\"751\":2,\"752\":1,\"755\":1,\"758\":2,\"769\":1,\"780\":1,\"782\":3,\"789\":2,\"790\":1,\"796\":4,\"802\":1,\"803\":1,\"804\":1,\"805\":1,\"807\":1,\"810\":3,\"817\":3,\"820\":4}}],[\"===\",{\"1\":{\"14\":3,\"615\":1,\"616\":1,\"630\":2}}],[\"=>写\",{\"1\":{\"580\":1}}],[\"=>初始化\",{\"1\":{\"580\":1}}],[\"=>userid\",{\"1\":{\"564\":1}}],[\"=>url\",{\"1\":{\"531\":1}}],[\"=>不可解密的值\",{\"1\":{\"17\":1}}],[\"=>\",{\"1\":{\"14\":26,\"22\":8,\"23\":4,\"92\":2,\"506\":2,\"507\":1,\"518\":6,\"519\":1,\"520\":1,\"531\":1,\"532\":3,\"567\":4,\"580\":5,\"605\":1,\"612\":2,\"613\":2,\"615\":1,\"616\":8,\"630\":2,\"663\":1}}],[\"=\",{\"1\":{\"9\":1,\"14\":23,\"16\":9,\"17\":13,\"19\":3,\"21\":12,\"22\":23,\"23\":20,\"26\":3,\"27\":31,\"51\":2,\"53\":3,\"54\":9,\"56\":8,\"58\":5,\"63\":3,\"64\":5,\"66\":21,\"67\":25,\"71\":40,\"72\":4,\"73\":1,\"83\":10,\"87\":6,\"88\":2,\"91\":16,\"92\":6,\"93\":18,\"95\":2,\"97\":1,\"98\":5,\"99\":2,\"100\":2,\"102\":2,\"103\":1,\"104\":2,\"105\":5,\"107\":3,\"108\":3,\"109\":2,\"110\":15,\"111\":3,\"112\":1,\"116\":1,\"117\":13,\"119\":8,\"120\":6,\"132\":3,\"135\":1,\"140\":3,\"142\":16,\"143\":16,\"151\":6,\"152\":3,\"155\":4,\"156\":3,\"165\":4,\"167\":4,\"168\":7,\"169\":8,\"170\":12,\"171\":8,\"175\":5,\"176\":2,\"182\":5,\"184\":16,\"185\":12,\"186\":6,\"189\":1,\"190\":1,\"191\":14,\"192\":2,\"196\":5,\"204\":5,\"205\":2,\"206\":2,\"207\":3,\"208\":7,\"209\":19,\"210\":2,\"211\":8,\"214\":11,\"215\":1,\"216\":2,\"217\":6,\"219\":10,\"220\":28,\"224\":13,\"226\":13,\"230\":6,\"232\":3,\"239\":5,\"241\":20,\"245\":5,\"248\":1,\"261\":4,\"262\":6,\"267\":1,\"269\":4,\"270\":1,\"275\":1,\"276\":2,\"278\":1,\"279\":1,\"282\":2,\"283\":2,\"285\":1,\"286\":2,\"298\":3,\"304\":1,\"309\":2,\"310\":2,\"312\":6,\"313\":1,\"318\":7,\"319\":29,\"332\":3,\"333\":5,\"335\":4,\"336\":4,\"337\":4,\"338\":28,\"339\":3,\"340\":8,\"342\":1,\"344\":2,\"347\":8,\"350\":1,\"351\":2,\"352\":8,\"355\":24,\"359\":1,\"395\":4,\"396\":3,\"399\":7,\"400\":26,\"406\":9,\"407\":2,\"409\":5,\"416\":1,\"418\":4,\"420\":1,\"423\":8,\"430\":8,\"431\":7,\"432\":5,\"433\":1,\"438\":3,\"439\":6,\"440\":1,\"442\":2,\"443\":2,\"444\":2,\"445\":2,\"451\":2,\"452\":18,\"453\":10,\"454\":7,\"455\":4,\"457\":11,\"491\":2,\"493\":4,\"506\":2,\"507\":2,\"512\":11,\"517\":2,\"518\":16,\"519\":3,\"520\":3,\"522\":1,\"525\":1,\"526\":1,\"531\":5,\"532\":4,\"534\":4,\"537\":4,\"538\":5,\"539\":10,\"540\":2,\"544\":9,\"551\":12,\"558\":13,\"559\":19,\"560\":4,\"561\":12,\"562\":14,\"564\":6,\"565\":2,\"566\":29,\"573\":8,\"574\":12,\"575\":49,\"598\":2,\"599\":15,\"605\":9,\"607\":3,\"608\":5,\"609\":2,\"612\":9,\"613\":5,\"615\":3,\"616\":4,\"623\":4,\"625\":3,\"627\":6,\"630\":3,\"635\":1,\"651\":1,\"655\":4,\"659\":4,\"661\":1,\"663\":8,\"665\":26,\"666\":17,\"667\":20,\"668\":7,\"670\":15,\"671\":1,\"672\":10,\"673\":29,\"674\":15,\"675\":45,\"687\":25,\"688\":24,\"690\":12,\"691\":1,\"696\":2,\"697\":13,\"698\":6,\"702\":3,\"703\":13,\"704\":12,\"706\":14,\"710\":68,\"712\":13,\"715\":8,\"716\":6,\"721\":14,\"725\":8,\"726\":1,\"727\":1,\"728\":5,\"731\":6,\"732\":10,\"733\":16,\"738\":7,\"739\":2,\"740\":2,\"741\":10,\"742\":5,\"747\":8,\"751\":2,\"752\":4,\"755\":8,\"756\":10,\"758\":25,\"763\":20,\"764\":7,\"765\":5,\"769\":3,\"770\":16,\"777\":11,\"778\":6,\"780\":2,\"781\":6,\"782\":3,\"788\":11,\"789\":11,\"790\":17,\"796\":21,\"801\":8,\"802\":3,\"803\":12,\"804\":9,\"805\":6,\"806\":7,\"807\":12,\"809\":5,\"810\":14,\"816\":6,\"817\":18,\"819\":4,\"820\":8}}],[\"nick\",{\"1\":{\"738\":1,\"788\":1}}],[\"nx\",{\"1\":{\"703\":2,\"776\":1}}],[\"ntlp查看\",{\"1\":{\"640\":1}}],[\"ntlp\",{\"1\":{\"639\":2}}],[\"ngrok\",{\"1\":{\"450\":2}}],[\"nginx修改\",{\"1\":{\"710\":1}}],[\"nginx动静分离\",{\"0\":{\"697\":1}}],[\"nginx测试\",{\"1\":{\"696\":1}}],[\"nginx配置如下\",{\"1\":{\"771\":1}}],[\"nginx配置域名\",{\"0\":{\"691\":1}}],[\"nginx配置文件目录在\",{\"1\":{\"639\":1}}],[\"nginx容器\",{\"1\":{\"646\":1}}],[\"nginx服务器\",{\"1\":{\"611\":1,\"663\":1}}],[\"nginx来单机部署\",{\"1\":{\"502\":1}}],[\"nginx\",{\"0\":{\"426\":1},\"1\":{\"27\":1,\"426\":13,\"638\":1,\"639\":14,\"643\":9,\"646\":12,\"691\":4,\"697\":1,\"771\":1},\"2\":{\"427\":1,\"428\":1}}],[\"n\",{\"1\":{\"47\":2,\"51\":3,\"66\":4,\"67\":3,\"72\":2,\"73\":1,\"566\":7,\"567\":1,\"575\":1}}],[\"navvo\",{\"1\":{\"710\":8}}],[\"navvo>\",{\"1\":{\"710\":1}}],[\"nav\",{\"1\":{\"506\":2,\"518\":2}}],[\"natappfree\",{\"1\":{\"451\":1,\"453\":1}}],[\"natapp\",{\"1\":{\"450\":2}}],[\"nat官网\",{\"1\":{\"450\":1}}],[\"native\",{\"1\":{\"140\":2,\"520\":1,\"694\":2}}],[\"nack声明消费失败\",{\"1\":{\"361\":1}}],[\"nack\",{\"1\":{\"349\":1,\"354\":1}}],[\"nack是投递失败\",{\"1\":{\"343\":1}}],[\"nacos中添加配置\",{\"1\":{\"728\":1}}],[\"nacos配置中心\",{\"0\":{\"660\":1}}],[\"nacos服务注册中心地址\",{\"1\":{\"658\":1}}],[\"nacos注册中心\",{\"0\":{\"658\":1}}],[\"nacos\",{\"1\":{\"29\":4,\"545\":1,\"657\":2,\"658\":2,\"660\":3,\"663\":1,\"728\":3}}],[\"nacos<\",{\"1\":{\"29\":2}}],[\"nacos做注册中心\",{\"1\":{\"29\":1}}],[\"nanoseconds\",{\"1\":{\"87\":1}}],[\"nanotime\",{\"1\":{\"87\":2}}],[\"name>\",{\"1\":{\"653\":1}}],[\"namespace\",{\"1\":{\"660\":1}}],[\"namespace=\",{\"1\":{\"175\":1,\"179\":1}}],[\"names\",{\"1\":{\"651\":1}}],[\"name名字必须一致\",{\"1\":{\"286\":1}}],[\"name可以多个\",{\"1\":{\"272\":1}}],[\"name属性对应的值为构造函数中方法形参的参数名\",{\"1\":{\"285\":1}}],[\"name属性表示配置哪一个具体的属性\",{\"1\":{\"270\":1}}],[\"name属性的值是实体类所在包\",{\"1\":{\"179\":1}}],[\"name时走不走索引\",{\"1\":{\"47\":1}}],[\"name1=\",{\"1\":{\"27\":1}}],[\"name1\",{\"1\":{\"27\":1}}],[\"name=张三\",{\"1\":{\"250\":1}}],[\"name=itcast\",{\"1\":{\"248\":2}}],[\"name=cxk\",{\"1\":{\"27\":2,\"307\":1}}],[\"name=cxk转发到http\",{\"1\":{\"27\":2}}],[\"name=\",{\"1\":{\"22\":2,\"23\":2,\"175\":9,\"176\":1,\"178\":8,\"179\":1,\"237\":3,\"270\":2,\"272\":1,\"282\":3,\"283\":2,\"285\":1,\"286\":2,\"287\":1,\"289\":1,\"290\":1,\"291\":1,\"292\":1,\"293\":1,\"294\":4,\"295\":4,\"395\":1,\"419\":1,\"438\":1,\"506\":1,\"507\":3,\"518\":4,\"520\":1,\"660\":1}}],[\"namecontroller\",{\"1\":{\"16\":1}}],[\"name\",{\"1\":{\"9\":1,\"14\":2,\"16\":14,\"17\":1,\"22\":2,\"23\":2,\"27\":9,\"29\":4,\"47\":3,\"165\":7,\"169\":3,\"170\":3,\"171\":4,\"180\":4,\"181\":2,\"184\":2,\"185\":6,\"186\":2,\"188\":4,\"191\":2,\"209\":1,\"211\":1,\"220\":7,\"224\":5,\"248\":4,\"250\":3,\"251\":1,\"252\":1,\"262\":2,\"307\":4,\"317\":2,\"323\":1,\"328\":1,\"338\":8,\"339\":1,\"340\":2,\"347\":2,\"351\":1,\"355\":4,\"395\":5,\"399\":5,\"400\":13,\"416\":5,\"417\":1,\"418\":4,\"419\":2,\"421\":1,\"423\":1,\"426\":2,\"444\":10,\"467\":1,\"539\":1,\"557\":2,\"558\":3,\"559\":5,\"595\":2,\"612\":2,\"615\":2,\"616\":2,\"646\":2,\"651\":3,\"652\":1,\"655\":1,\"658\":1,\"660\":6,\"663\":3,\"666\":1,\"667\":1,\"670\":9,\"672\":10,\"681\":2,\"682\":7,\"686\":1,\"687\":2,\"691\":3,\"710\":4,\"728\":1,\"738\":1,\"777\":6,\"778\":3,\"780\":11,\"788\":1,\"794\":1}}],[\"num\",{\"1\":{\"537\":2,\"538\":2,\"539\":1,\"566\":2,\"575\":11,\"820\":5}}],[\"numer2\",{\"1\":{\"390\":1}}],[\"number2\",{\"1\":{\"390\":1}}],[\"number1\",{\"1\":{\"390\":2}}],[\"number++\",{\"1\":{\"92\":1}}],[\"numbers\",{\"1\":{\"66\":1}}],[\"number\",{\"1\":{\"22\":2,\"23\":1,\"53\":1,\"56\":1,\"63\":3,\"92\":6,\"151\":4,\"443\":1,\"518\":4,\"630\":1,\"684\":2,\"685\":1}}],[\"null约束它\",{\"1\":{\"469\":1}}],[\"nullpointerexception\",{\"1\":{\"54\":1,\"64\":1,\"142\":3}}],[\"null>\",{\"1\":{\"14\":1}}],[\"null\",{\"1\":{\"9\":11,\"14\":4,\"21\":4,\"23\":2,\"27\":5,\"54\":1,\"58\":1,\"64\":1,\"66\":12,\"67\":15,\"71\":16,\"72\":3,\"112\":1,\"120\":3,\"121\":3,\"122\":3,\"142\":4,\"143\":3,\"185\":6,\"186\":3,\"191\":5,\"205\":1,\"209\":8,\"210\":1,\"214\":2,\"220\":9,\"224\":1,\"229\":1,\"230\":3,\"241\":1,\"245\":1,\"318\":1,\"319\":2,\"352\":1,\"355\":2,\"406\":1,\"409\":2,\"452\":3,\"457\":1,\"509\":7,\"510\":1,\"557\":13,\"558\":3,\"559\":7,\"560\":3,\"561\":3,\"562\":1,\"564\":1,\"565\":1,\"574\":3,\"596\":11,\"605\":6,\"607\":2,\"608\":1,\"613\":2,\"620\":2,\"623\":1,\"624\":1,\"625\":1,\"630\":1,\"663\":5,\"665\":3,\"667\":1,\"670\":50,\"672\":4,\"673\":5,\"674\":1,\"675\":1,\"688\":1,\"690\":4,\"697\":5,\"706\":3,\"710\":8,\"716\":3,\"717\":3,\"718\":3,\"725\":1,\"732\":6,\"733\":3,\"738\":2,\"739\":1,\"741\":2,\"742\":1,\"747\":2,\"751\":2,\"752\":2,\"755\":5,\"756\":1,\"758\":6,\"764\":26,\"796\":2,\"801\":18,\"802\":1,\"803\":1,\"804\":2,\"805\":1,\"806\":3,\"807\":1,\"810\":1,\"817\":3,\"820\":2}}],[\"netty\",{\"1\":{\"698\":2}}],[\"netty如果没有指定堆外内存\",{\"1\":{\"698\":1}}],[\"netstat\",{\"1\":{\"639\":2,\"640\":1}}],[\"net\",{\"1\":{\"412\":1,\"519\":1,\"537\":1,\"538\":1,\"539\":1,\"566\":1,\"598\":1,\"609\":1,\"630\":1}}],[\"network\",{\"1\":{\"241\":1,\"665\":2}}],[\"netmallname\",{\"1\":{\"143\":5}}],[\"netmall\",{\"1\":{\"143\":11}}],[\"need\",{\"1\":{\"142\":1,\"725\":1}}],[\"needed\",{\"1\":{\"63\":1}}],[\"never\",{\"1\":{\"66\":1,\"295\":1}}],[\"necessary\",{\"1\":{\"63\":1}}],[\"negative\",{\"1\":{\"54\":1,\"64\":2,\"87\":1}}],[\"nestedaggregationbuilder\",{\"1\":{\"710\":1}}],[\"nestedquery\",{\"1\":{\"710\":3}}],[\"nestedquerybuilder\",{\"1\":{\"710\":1}}],[\"nested子句对attrs字段进行嵌套查询\",{\"1\":{\"710\":1}}],[\"nested\",{\"1\":{\"53\":1,\"710\":7}}],[\"nextid\",{\"1\":{\"763\":2,\"765\":1,\"770\":2,\"789\":1,\"790\":1,\"796\":1}}],[\"nextint\",{\"1\":{\"99\":1}}],[\"nextuserteamuserid\",{\"1\":{\"562\":2}}],[\"nextuserteam\",{\"1\":{\"562\":2}}],[\"nextdouble\",{\"1\":{\"143\":1}}],[\"next\",{\"1\":{\"22\":1,\"63\":1,\"66\":2,\"67\":5,\"71\":9}}],[\"newgeosearchargs\",{\"1\":{\"817\":1}}],[\"newbank\",{\"1\":{\"686\":1}}],[\"newarraylist\",{\"1\":{\"355\":1,\"430\":1}}],[\"newsmessage\",{\"1\":{\"455\":11}}],[\"news\",{\"1\":{\"337\":1,\"338\":1,\"455\":1}}],[\"newsinglethreadexecutor\",{\"1\":{\"114\":1,\"790\":1}}],[\"newenvironmentvariablecredentialsprovider\",{\"1\":{\"241\":1}}],[\"newfilename\",{\"1\":{\"239\":2}}],[\"newfixedthreadpool\",{\"1\":{\"114\":1,\"119\":1,\"120\":2,\"142\":1,\"143\":2,\"712\":1,\"715\":1,\"716\":2,\"756\":1,\"758\":1,\"763\":1}}],[\"newline\",{\"1\":{\"171\":1,\"788\":1}}],[\"newinstance\",{\"1\":{\"168\":1}}],[\"newproxyinstance\",{\"1\":{\"165\":1}}],[\"newvalue\",{\"1\":{\"155\":1}}],[\"newcachedthreadpool\",{\"1\":{\"114\":1}}],[\"newcap\",{\"1\":{\"71\":9}}],[\"newcapacity\",{\"1\":{\"56\":6}}],[\"newcondition\",{\"1\":{\"91\":1,\"93\":3,\"156\":1}}],[\"newtab\",{\"1\":{\"71\":7}}],[\"newthr\",{\"1\":{\"71\":6}}],[\"newnode\",{\"1\":{\"66\":2,\"72\":1}}],[\"new\",{\"1\":{\"14\":2,\"16\":4,\"17\":3,\"18\":1,\"19\":1,\"21\":8,\"22\":1,\"23\":5,\"26\":2,\"27\":5,\"47\":1,\"50\":1,\"54\":2,\"56\":1,\"58\":4,\"64\":3,\"71\":1,\"81\":1,\"83\":6,\"87\":3,\"88\":3,\"89\":3,\"91\":13,\"92\":3,\"93\":5,\"95\":2,\"97\":1,\"98\":1,\"99\":3,\"100\":2,\"102\":2,\"103\":3,\"104\":6,\"105\":3,\"107\":3,\"108\":2,\"109\":2,\"110\":11,\"111\":1,\"112\":1,\"116\":3,\"117\":4,\"132\":3,\"135\":1,\"140\":3,\"142\":12,\"143\":6,\"151\":5,\"152\":6,\"153\":2,\"155\":6,\"156\":10,\"165\":3,\"167\":1,\"169\":1,\"170\":1,\"171\":4,\"175\":1,\"184\":3,\"196\":2,\"204\":3,\"205\":1,\"206\":1,\"207\":1,\"208\":3,\"209\":1,\"210\":2,\"211\":2,\"214\":2,\"219\":5,\"220\":8,\"224\":9,\"229\":1,\"230\":3,\"239\":1,\"241\":5,\"245\":8,\"248\":5,\"261\":4,\"267\":1,\"269\":2,\"275\":1,\"276\":2,\"277\":1,\"298\":2,\"309\":2,\"310\":2,\"312\":4,\"318\":1,\"319\":10,\"338\":5,\"339\":2,\"340\":1,\"344\":3,\"351\":6,\"352\":2,\"355\":2,\"359\":1,\"395\":1,\"396\":3,\"399\":3,\"400\":2,\"406\":1,\"407\":1,\"408\":1,\"416\":1,\"418\":5,\"423\":7,\"430\":8,\"433\":1,\"438\":3,\"439\":11,\"440\":1,\"452\":3,\"453\":5,\"454\":2,\"455\":4,\"457\":1,\"491\":4,\"493\":3,\"512\":6,\"519\":1,\"522\":1,\"525\":1,\"531\":1,\"534\":1,\"537\":2,\"538\":3,\"539\":7,\"540\":2,\"544\":5,\"549\":1,\"551\":5,\"558\":15,\"559\":7,\"560\":6,\"561\":13,\"562\":8,\"564\":3,\"565\":1,\"566\":9,\"573\":4,\"574\":13,\"575\":15,\"598\":1,\"599\":2,\"605\":3,\"607\":3,\"608\":3,\"612\":1,\"624\":4,\"655\":2,\"659\":2,\"663\":2,\"665\":9,\"666\":2,\"668\":1,\"670\":8,\"671\":1,\"672\":3,\"673\":13,\"674\":6,\"675\":20,\"687\":7,\"688\":5,\"690\":4,\"694\":1,\"696\":1,\"697\":2,\"698\":1,\"702\":1,\"703\":1,\"704\":4,\"706\":3,\"710\":17,\"712\":7,\"721\":4,\"725\":2,\"726\":3,\"727\":1,\"732\":6,\"733\":6,\"738\":1,\"739\":1,\"740\":1,\"741\":1,\"742\":4,\"755\":1,\"756\":2,\"758\":2,\"763\":1,\"764\":1,\"765\":1,\"770\":3,\"777\":1,\"780\":2,\"781\":2,\"788\":5,\"789\":3,\"790\":4,\"796\":3,\"801\":2,\"803\":1,\"806\":2,\"807\":2,\"810\":2,\"816\":4,\"817\":4}}],[\"nomal\",{\"1\":{\"725\":1}}],[\"noack\",{\"1\":{\"795\":2}}],[\"noattr\",{\"1\":{\"674\":1}}],[\"noargsconstructor\",{\"1\":{\"217\":1,\"220\":2}}],[\"nohup\",{\"1\":{\"640\":1}}],[\"noreferrer\",{\"1\":{\"616\":1}}],[\"normal\",{\"1\":{\"216\":1,\"439\":1}}],[\"noopener\",{\"1\":{\"616\":1}}],[\"nosuchalgorithmexception\",{\"1\":{\"452\":1}}],[\"nosuchelementexception\",{\"1\":{\"112\":1}}],[\"nosql数据库\",{\"1\":{\"377\":1}}],[\"nosql则对数据库格式没有严格约束\",{\"1\":{\"377\":1}}],[\"nosql\",{\"1\":{\"377\":1}}],[\"nowsecond\",{\"1\":{\"763\":2}}],[\"now\",{\"1\":{\"196\":2,\"208\":2,\"211\":1,\"333\":2,\"352\":2,\"409\":1,\"756\":2,\"758\":2,\"763\":4,\"765\":2,\"819\":2,\"820\":4}}],[\"node版本选择v12\",{\"1\":{\"655\":1}}],[\"nodejs服务器\",{\"1\":{\"611\":1}}],[\"nodejs\",{\"1\":{\"532\":1}}],[\"node\",{\"1\":{\"67\":16,\"71\":1,\"317\":1,\"635\":1,\"655\":1,\"663\":1,\"670\":9,\"681\":1}}],[\"nodes\",{\"1\":{\"67\":1,\"682\":1}}],[\"node<k\",{\"1\":{\"63\":1,\"66\":3,\"67\":6,\"71\":8}}],[\"nonfairlock\",{\"1\":{\"102\":1}}],[\"nonpositive\",{\"1\":{\"64\":1}}],[\"none\",{\"1\":{\"63\":1,\"66\":1,\"67\":1,\"344\":1,\"349\":2,\"359\":1,\"710\":1}}],[\"non\",{\"1\":{\"53\":1,\"102\":1,\"347\":1,\"670\":2}}],[\"nonce三个参数进行字典序排序\",{\"1\":{\"452\":1}}],[\"nonce\",{\"1\":{\"17\":3,\"27\":3,\"451\":4,\"452\":9}}],[\"no\",{\"1\":{\"22\":1,\"66\":1,\"67\":1,\"81\":2,\"104\":1,\"241\":1,\"371\":1,\"523\":2,\"560\":1,\"625\":1,\"682\":1}}],[\"not必须不是指定的情况\",{\"1\":{\"685\":1}}],[\"notin\",{\"1\":{\"674\":1}}],[\"notify的原有调用顺序\",{\"1\":{\"156\":1}}],[\"notifyall\",{\"1\":{\"81\":1,\"84\":1,\"91\":1,\"92\":3}}],[\"notify\",{\"1\":{\"81\":1,\"84\":1,\"91\":1,\"92\":1,\"140\":1,\"156\":1}}],[\"notnull\",{\"1\":{\"666\":1,\"667\":2,\"668\":1}}],[\"notblank\",{\"1\":{\"666\":1,\"667\":2}}],[\"not=a\",{\"1\":{\"523\":1}}],[\"nothing\",{\"1\":{\"140\":1}}],[\"notempty\",{\"1\":{\"666\":2,\"667\":1}}],[\"note\",{\"1\":{\"63\":1}}],[\"not\",{\"1\":{\"9\":6,\"21\":2,\"23\":1,\"63\":2,\"67\":1,\"81\":1,\"140\":1,\"215\":1,\"241\":1,\"377\":1,\"406\":1,\"485\":1,\"496\":1,\"509\":2,\"557\":6,\"558\":1,\"596\":3,\"605\":1,\"625\":1,\"663\":1,\"665\":2,\"666\":1,\"675\":1,\"681\":1,\"685\":1,\"703\":1,\"725\":1,\"764\":20,\"801\":14,\"806\":4,\"830\":1}}],[\"npm\",{\"1\":{\"12\":1,\"584\":1,\"635\":2,\"655\":4,\"675\":1}}],[\"c1\",{\"1\":{\"796\":4}}],[\"cmd\",{\"1\":{\"642\":1,\"643\":2}}],[\"c++\",{\"1\":{\"500\":1,\"508\":1}}],[\"cgi\",{\"1\":{\"457\":2}}],[\"cc\",{\"1\":{\"451\":1,\"453\":1}}],[\"cd\",{\"1\":{\"344\":3,\"379\":1,\"380\":1,\"584\":1,\"639\":1}}],[\"csdn\",{\"1\":{\"412\":1,\"566\":1,\"630\":1,\"665\":2}}],[\"csdn博客\",{\"1\":{\"43\":1,\"44\":1,\"47\":1}}],[\"css\",{\"1\":{\"263\":2,\"438\":1,\"643\":1,\"646\":1,\"733\":5}}],[\"ctx=new\",{\"1\":{\"278\":1,\"296\":1,\"301\":2}}],[\"ctx\",{\"1\":{\"245\":9,\"269\":3,\"278\":2,\"297\":1,\"312\":2}}],[\"center目录中进行前端代码和nginx配置的修改\",{\"1\":{\"646\":1}}],[\"center\",{\"1\":{\"595\":1,\"643\":4,\"646\":5}}],[\"centerandzoom\",{\"1\":{\"438\":1}}],[\"ceph\",{\"1\":{\"533\":1}}],[\"cell>\",{\"1\":{\"519\":1}}],[\"cell\",{\"1\":{\"519\":8}}],[\"ce\",{\"1\":{\"241\":2,\"665\":4}}],[\"cj\",{\"1\":{\"211\":1,\"595\":1,\"655\":2}}],[\"cjdk\",{\"1\":{\"140\":1}}],[\"cp\",{\"1\":{\"426\":1}}],[\"cpp中\",{\"1\":{\"140\":2}}],[\"cpp中实现\",{\"1\":{\"140\":1}}],[\"cpp\",{\"1\":{\"140\":1}}],[\"cpphotspot\",{\"1\":{\"140\":1}}],[\"cpu\",{\"1\":{\"81\":3}}],[\"crown\",{\"1\":{\"615\":1}}],[\"cron\",{\"1\":{\"409\":1,\"544\":1,\"551\":1,\"573\":1}}],[\"credential\",{\"1\":{\"457\":2}}],[\"credentials\",{\"1\":{\"318\":1,\"319\":1,\"630\":1,\"635\":1,\"733\":2}}],[\"credentialsproviderfactory\",{\"1\":{\"241\":1}}],[\"credentialsprovider\",{\"1\":{\"241\":2}}],[\"creating\",{\"1\":{\"458\":1}}],[\"creation\",{\"1\":{\"66\":1}}],[\"createconsumer\",{\"1\":{\"795\":1}}],[\"createvoucherorder\",{\"1\":{\"770\":4,\"777\":2,\"790\":2}}],[\"createwebhashhistory\",{\"1\":{\"517\":1}}],[\"createrouter\",{\"1\":{\"517\":1}}],[\"createrootapplicationcontext\",{\"1\":{\"245\":2}}],[\"createnewfilename\",{\"1\":{\"801\":1}}],[\"createnewfile\",{\"1\":{\"430\":1}}],[\"createuserwithphone\",{\"1\":{\"738\":2,\"741\":1}}],[\"createuser\",{\"1\":{\"323\":1}}],[\"createproxy\",{\"1\":{\"165\":2}}],[\"createservletapplicationcontext\",{\"1\":{\"245\":2}}],[\"creates\",{\"1\":{\"142\":2}}],[\"created\",{\"1\":{\"64\":1,\"140\":1,\"616\":1,\"663\":1}}],[\"createmodalvisible\",{\"1\":{\"14\":2}}],[\"createmodal\",{\"1\":{\"14\":2}}],[\"create\",{\"1\":{\"9\":2,\"12\":1,\"47\":1,\"211\":2,\"220\":1,\"504\":1,\"509\":1,\"511\":2,\"532\":1,\"551\":1,\"557\":2,\"584\":1,\"596\":1,\"670\":9,\"672\":1,\"682\":1,\"704\":1,\"741\":1,\"764\":6,\"781\":1,\"788\":1,\"796\":2,\"801\":4,\"806\":2,\"820\":1}}],[\"createtime\",{\"1\":{\"9\":2,\"22\":1,\"23\":1,\"25\":1,\"453\":2,\"509\":2,\"518\":1,\"519\":2,\"557\":4,\"596\":2,\"616\":1}}],[\"craig\",{\"1\":{\"136\":1}}],[\"cfs\",{\"1\":{\"124\":2,\"720\":2}}],[\"cyclicbarrier`\",{\"1\":{\"108\":1}}],[\"cyclicbarrier\",{\"1\":{\"108\":9}}],[\"chromedriver\",{\"1\":{\"655\":3}}],[\"chrome\",{\"1\":{\"523\":1}}],[\"chromium\",{\"1\":{\"523\":1}}],[\"ch\",{\"1\":{\"523\":3}}],[\"childtag\",{\"1\":{\"518\":2}}],[\"children\",{\"1\":{\"518\":4,\"615\":2,\"663\":4,\"670\":1}}],[\"china\",{\"1\":{\"292\":1,\"337\":1,\"338\":1}}],[\"choose>\",{\"1\":{\"186\":1}}],[\"check来解决这样的问题\",{\"1\":{\"755\":1}}],[\"check\",{\"1\":{\"728\":3,\"804\":1}}],[\"checkpassword\",{\"1\":{\"599\":5,\"612\":2}}],[\"checktext\",{\"1\":{\"452\":4}}],[\"checksignature\",{\"1\":{\"452\":2}}],[\"checking\",{\"1\":{\"132\":1}}],[\"cheated\",{\"1\":{\"409\":1}}],[\"cheatactivity\",{\"1\":{\"409\":1}}],[\"cheapest\",{\"1\":{\"66\":1}}],[\"channel\",{\"1\":{\"731\":3,\"793\":3}}],[\"changeorigin\",{\"1\":{\"611\":1}}],[\"change=\",{\"1\":{\"507\":1,\"518\":1}}],[\"changeposition\",{\"1\":{\"442\":1}}],[\"change\",{\"1\":{\"63\":1,\"66\":1}}],[\"char定长效率高\",{\"1\":{\"487\":1}}],[\"char和varchar\",{\"1\":{\"487\":1}}],[\"charset=utf\",{\"1\":{\"438\":1,\"451\":3}}],[\"charset=\",{\"1\":{\"406\":1,\"416\":1}}],[\"character\",{\"1\":{\"651\":4}}],[\"characterencodingfilter\",{\"1\":{\"224\":2,\"248\":2}}],[\"characterencoding=utf\",{\"1\":{\"211\":1,\"655\":2}}],[\"charat\",{\"1\":{\"143\":1}}],[\"char\",{\"1\":{\"47\":1,\"171\":1,\"452\":3,\"670\":3}}],[\"chatgpt\",{\"0\":{\"496\":1},\"1\":{\"47\":2}}],[\"chat\",{\"1\":{\"32\":1}}],[\"chain\",{\"1\":{\"27\":6,\"728\":3}}],[\"c\",{\"1\":{\"54\":4,\"91\":2,\"93\":4,\"112\":4,\"140\":1,\"147\":1,\"151\":1,\"155\":1,\"159\":2,\"400\":4,\"422\":1,\"452\":1}}],[\"curl\",{\"1\":{\"523\":1,\"639\":1}}],[\"currentproxy\",{\"1\":{\"770\":1,\"777\":2,\"790\":1,\"796\":1}}],[\"currentvalue\",{\"1\":{\"519\":2,\"520\":3}}],[\"currentthread\",{\"1\":{\"83\":5,\"91\":2,\"92\":2,\"93\":3,\"95\":1,\"103\":3,\"104\":4,\"105\":1,\"107\":4,\"108\":1,\"109\":2,\"110\":8,\"119\":2,\"120\":4,\"143\":4,\"151\":1,\"155\":1,\"430\":1,\"539\":1,\"561\":1,\"574\":1,\"704\":3,\"712\":3,\"715\":2,\"716\":4,\"777\":1,\"778\":2,\"780\":1}}],[\"currenttime\",{\"1\":{\"27\":2}}],[\"currenttimemillis\",{\"1\":{\"17\":1,\"27\":1,\"142\":4,\"143\":2,\"211\":4,\"430\":1,\"431\":3,\"432\":1,\"453\":1,\"454\":1,\"455\":1,\"457\":2,\"575\":8,\"665\":1,\"696\":2,\"706\":2,\"763\":2,\"804\":1,\"809\":1}}],[\"currently\",{\"1\":{\"56\":1,\"63\":1}}],[\"currentuser>\",{\"1\":{\"616\":2}}],[\"currentuser\",{\"1\":{\"14\":4,\"612\":1,\"613\":5,\"615\":5,\"616\":1}}],[\"current\",{\"1\":{\"9\":3,\"14\":1,\"22\":2,\"66\":1,\"120\":4,\"143\":1,\"219\":2,\"509\":3,\"557\":6,\"596\":3,\"613\":1,\"716\":4,\"764\":11,\"801\":6,\"803\":2,\"806\":1,\"817\":8}}],[\"customer\",{\"1\":{\"682\":8}}],[\"custom\",{\"1\":{\"458\":2}}],[\"customsqlsegment\",{\"1\":{\"207\":1}}],[\"customglobalfilter\",{\"1\":{\"27\":1}}],[\"caching\",{\"1\":{\"706\":1,\"750\":1}}],[\"caching组合以上多个操作\",{\"1\":{\"706\":1}}],[\"cacheclient\",{\"1\":{\"758\":6}}],[\"cacheconfig共享缓存\",{\"1\":{\"706\":1}}],[\"cacheevict\",{\"1\":{\"706\":4}}],[\"cacheevict删除\",{\"1\":{\"706\":1}}],[\"cacheproperties\",{\"1\":{\"706\":5}}],[\"cacheput更新\",{\"1\":{\"706\":1}}],[\"cacheable\",{\"1\":{\"706\":1}}],[\"cacheable保存缓存\",{\"1\":{\"706\":1}}],[\"cache<\",{\"1\":{\"706\":1}}],[\"cache\",{\"1\":{\"416\":1,\"423\":1,\"523\":3,\"690\":1,\"696\":1,\"706\":5,\"747\":2,\"750\":1,\"751\":2,\"752\":3,\"755\":3,\"756\":5,\"758\":12}}],[\"cachedthreadpool\",{\"1\":{\"115\":3,\"713\":2}}],[\"cached\",{\"1\":{\"63\":1}}],[\"cat\",{\"1\":{\"682\":5}}],[\"catid\",{\"1\":{\"670\":2,\"672\":5,\"675\":3}}],[\"catalogagg\",{\"1\":{\"710\":6}}],[\"catalogvo\",{\"1\":{\"710\":6}}],[\"catalogvos\",{\"1\":{\"710\":3}}],[\"catalogvo>\",{\"1\":{\"710\":1}}],[\"catalogid\",{\"1\":{\"710\":6,\"721\":1}}],[\"catalog3vo\",{\"1\":{\"690\":4,\"697\":4}}],[\"catalog3vos\",{\"1\":{\"690\":2,\"697\":2}}],[\"catalog3vo>\",{\"1\":{\"690\":1,\"697\":1}}],[\"catalogjsonfromdb\",{\"1\":{\"698\":3}}],[\"catalogjson\",{\"1\":{\"690\":2,\"698\":5,\"702\":5,\"704\":1}}],[\"catalognameagg\",{\"1\":{\"710\":2}}],[\"catalogname\",{\"1\":{\"688\":1,\"710\":7}}],[\"catalog\",{\"1\":{\"670\":2,\"690\":2,\"710\":5}}],[\"categoryentities\",{\"1\":{\"690\":3,\"696\":2,\"697\":3,\"706\":2}}],[\"categoryentity\",{\"1\":{\"663\":10,\"670\":4,\"672\":4,\"673\":8,\"688\":1,\"690\":2,\"696\":1,\"706\":2}}],[\"categorydao\",{\"1\":{\"672\":1,\"673\":2}}],[\"categorybrandrelationserviceimpl中\",{\"1\":{\"672\":1}}],[\"categorybrandrelationservice\",{\"1\":{\"672\":3,\"675\":1,\"706\":1}}],[\"categorybrandrelationentity\",{\"1\":{\"672\":5}}],[\"categorybrandrelation\",{\"1\":{\"672\":7}}],[\"categoryid\",{\"1\":{\"670\":7}}],[\"category>\",{\"1\":{\"670\":1}}],[\"category\",{\"1\":{\"663\":5,\"672\":7,\"688\":2,\"706\":9}}],[\"categoryservice\",{\"1\":{\"663\":2,\"670\":1,\"673\":1,\"688\":1,\"690\":1}}],[\"catelog2vo\",{\"1\":{\"690\":7,\"697\":7}}],[\"catelogpath\",{\"1\":{\"673\":3}}],[\"catelogname\",{\"1\":{\"673\":2}}],[\"cateloglist\",{\"1\":{\"672\":1}}],[\"catelogid\",{\"1\":{\"670\":7,\"672\":2,\"673\":6,\"674\":3,\"675\":10,\"710\":1}}],[\"catelog\",{\"1\":{\"663\":1,\"670\":3,\"672\":5}}],[\"catch\",{\"1\":{\"14\":3,\"22\":3,\"23\":2,\"27\":4,\"83\":1,\"87\":1,\"88\":1,\"89\":2,\"92\":2,\"93\":3,\"104\":2,\"108\":1,\"109\":1,\"110\":4,\"112\":4,\"140\":1,\"142\":7,\"143\":3,\"153\":2,\"156\":2,\"230\":1,\"241\":2,\"318\":1,\"319\":5,\"340\":1,\"407\":1,\"452\":1,\"453\":1,\"532\":1,\"544\":2,\"551\":2,\"561\":1,\"573\":2,\"574\":1,\"612\":1,\"613\":1,\"665\":5,\"675\":1,\"688\":2,\"703\":1,\"704\":3,\"710\":2,\"728\":1,\"755\":1,\"756\":1,\"758\":1,\"788\":1,\"790\":1,\"796\":2,\"801\":1}}],[\"camel\",{\"1\":{\"595\":1,\"605\":1}}],[\"caffeine\",{\"1\":{\"543\":1}}],[\"cardbordered\",{\"1\":{\"616\":1}}],[\"card\",{\"1\":{\"534\":2}}],[\"card>\",{\"1\":{\"22\":3,\"23\":3,\"534\":1}}],[\"caught\",{\"1\":{\"241\":2,\"665\":4}}],[\"cause\",{\"1\":{\"230\":4}}],[\"cas自旋锁\",{\"0\":{\"769\":1}}],[\"cases\",{\"1\":{\"665\":2}}],[\"case\",{\"1\":{\"491\":2,\"595\":1,\"605\":1}}],[\"case相关\",{\"1\":{\"47\":1}}],[\"cas\",{\"1\":{\"131\":3,\"766\":1,\"769\":4}}],[\"cas操作\",{\"0\":{\"131\":1}}],[\"calprice\",{\"1\":{\"143\":3}}],[\"callback回执\",{\"1\":{\"344\":1}}],[\"callback\",{\"1\":{\"344\":1}}],[\"callsuper\",{\"1\":{\"220\":1}}],[\"callable<v>\",{\"1\":{\"142\":1}}],[\"callable<integer>\",{\"1\":{\"105\":1,\"712\":1}}],[\"callable<string>\",{\"1\":{\"83\":1,\"142\":1}}],[\"callable01\",{\"1\":{\"105\":2,\"712\":2}}],[\"callable接口\",{\"0\":{\"105\":1}}],[\"callable\",{\"1\":{\"83\":1,\"105\":1,\"142\":13}}],[\"call\",{\"1\":{\"81\":1,\"83\":3,\"105\":1,\"140\":1,\"142\":2,\"703\":2,\"712\":1,\"780\":6,\"782\":8,\"789\":4,\"796\":5}}],[\"called\",{\"1\":{\"81\":2}}],[\"calling\",{\"1\":{\"81\":3}}],[\"calculatepostsignature\",{\"1\":{\"665\":1}}],[\"calculatecapacity\",{\"1\":{\"56\":1}}],[\"calculations\",{\"1\":{\"66\":1}}],[\"canadmin\",{\"1\":{\"615\":2}}],[\"cannot\",{\"1\":{\"605\":1}}],[\"cannedaccesscontrollist\",{\"1\":{\"241\":1}}],[\"cancelorder\",{\"1\":{\"355\":1}}],[\"cancel\",{\"1\":{\"105\":1}}],[\"can\",{\"1\":{\"56\":1,\"66\":1,\"67\":1,\"140\":2}}],[\"capacity\",{\"1\":{\"53\":4,\"54\":5,\"56\":3,\"63\":6,\"64\":12,\"71\":8}}],[\"clean\",{\"1\":{\"655\":1}}],[\"clear\",{\"1\":{\"211\":1}}],[\"clustered\",{\"1\":{\"466\":2}}],[\"claimsbody\",{\"1\":{\"728\":2}}],[\"claims\",{\"1\":{\"728\":1}}],[\"clazz3\",{\"1\":{\"167\":1}}],[\"clazz2\",{\"1\":{\"167\":1}}],[\"clazz\",{\"1\":{\"167\":1,\"168\":4,\"169\":3,\"170\":4,\"171\":2}}],[\"class不可以写接口的类全名\",{\"1\":{\"272\":1}}],[\"class=\",{\"1\":{\"269\":2,\"270\":3,\"272\":1,\"275\":1,\"276\":1,\"277\":1,\"278\":1,\"282\":3,\"283\":1,\"285\":1,\"286\":3,\"287\":3,\"294\":1,\"295\":1,\"299\":1}}],[\"class属性表示给bean定义类型\",{\"1\":{\"269\":1,\"270\":1}}],[\"classes=gulimallproductapplication\",{\"1\":{\"655\":1}}],[\"classes\",{\"1\":{\"224\":1,\"245\":1,\"313\":1,\"423\":1}}],[\"classpathresource\",{\"1\":{\"298\":1,\"780\":1,\"789\":1}}],[\"classpathxmlapplicationcontext\",{\"1\":{\"269\":1,\"278\":2,\"296\":1,\"301\":1}}],[\"classpath\",{\"1\":{\"201\":1,\"215\":1,\"224\":1,\"312\":2,\"313\":1,\"423\":1,\"655\":1}}],[\"class<r>\",{\"1\":{\"758\":2}}],[\"class<v>\",{\"1\":{\"220\":1}}],[\"class<\",{\"1\":{\"168\":3,\"170\":2,\"224\":2,\"245\":2,\"248\":2,\"277\":1,\"668\":2}}],[\"class是无参的\",{\"1\":{\"47\":1}}],[\"classname=\",{\"1\":{\"22\":1}}],[\"class\",{\"1\":{\"16\":2,\"17\":1,\"18\":1,\"19\":1,\"23\":1,\"27\":1,\"29\":2,\"53\":1,\"54\":2,\"83\":6,\"87\":1,\"88\":1,\"89\":1,\"91\":4,\"92\":2,\"93\":2,\"95\":1,\"101\":1,\"104\":1,\"105\":1,\"107\":1,\"108\":1,\"110\":4,\"112\":1,\"117\":2,\"132\":1,\"142\":3,\"143\":3,\"147\":2,\"151\":1,\"153\":1,\"156\":2,\"165\":6,\"167\":6,\"168\":4,\"169\":4,\"170\":6,\"171\":4,\"175\":2,\"176\":1,\"182\":1,\"184\":1,\"196\":1,\"208\":6,\"209\":2,\"211\":1,\"214\":6,\"217\":4,\"219\":1,\"220\":8,\"224\":16,\"226\":2,\"229\":2,\"230\":6,\"232\":4,\"233\":2,\"241\":4,\"245\":15,\"247\":4,\"248\":6,\"251\":1,\"252\":2,\"256\":1,\"261\":4,\"262\":4,\"263\":3,\"267\":4,\"269\":3,\"270\":2,\"275\":3,\"276\":3,\"277\":2,\"278\":2,\"279\":1,\"282\":1,\"283\":1,\"285\":1,\"286\":1,\"288\":1,\"297\":2,\"298\":2,\"299\":1,\"301\":2,\"302\":1,\"303\":1,\"304\":3,\"305\":1,\"306\":1,\"307\":2,\"309\":6,\"310\":4,\"312\":11,\"313\":3,\"318\":1,\"319\":8,\"332\":2,\"338\":2,\"344\":2,\"351\":1,\"355\":2,\"395\":1,\"396\":1,\"399\":2,\"400\":2,\"407\":1,\"408\":1,\"409\":1,\"416\":1,\"423\":3,\"430\":9,\"431\":1,\"433\":1,\"451\":1,\"452\":1,\"453\":2,\"454\":1,\"455\":1,\"457\":1,\"491\":2,\"493\":1,\"496\":1,\"522\":1,\"525\":4,\"526\":1,\"539\":1,\"544\":1,\"551\":2,\"558\":1,\"562\":1,\"595\":1,\"599\":1,\"607\":1,\"623\":1,\"624\":1,\"627\":1,\"628\":3,\"655\":6,\"658\":2,\"659\":4,\"660\":2,\"661\":3,\"663\":2,\"665\":1,\"666\":5,\"667\":16,\"668\":6,\"671\":1,\"673\":2,\"687\":3,\"688\":3,\"703\":1,\"704\":1,\"706\":4,\"710\":2,\"712\":4,\"721\":3,\"726\":1,\"727\":2,\"728\":1,\"733\":1,\"739\":2,\"740\":2,\"741\":1,\"742\":3,\"747\":2,\"752\":1,\"755\":1,\"756\":4,\"758\":6,\"763\":1,\"770\":2,\"777\":1,\"780\":1,\"781\":1,\"788\":2,\"789\":1,\"790\":1,\"796\":1,\"805\":2,\"806\":1,\"807\":1,\"810\":1}}],[\"clh队列\",{\"1\":{\"136\":1}}],[\"clone\",{\"1\":{\"630\":1}}],[\"closeable\",{\"1\":{\"518\":1}}],[\"closewebsocket\",{\"1\":{\"406\":2}}],[\"close=\",{\"1\":{\"190\":1,\"518\":1}}],[\"close\",{\"1\":{\"56\":1,\"171\":1,\"175\":1,\"184\":1,\"190\":1,\"278\":1,\"395\":1,\"406\":3,\"788\":1}}],[\"cloud<\",{\"1\":{\"27\":1,\"657\":2,\"658\":1,\"659\":1,\"660\":1,\"661\":1,\"665\":1,\"728\":3}}],[\"cloud\",{\"1\":{\"27\":5,\"545\":1,\"657\":6,\"658\":2,\"659\":2,\"660\":3,\"661\":3,\"663\":2,\"665\":4,\"728\":5}}],[\"click=\",{\"1\":{\"519\":4,\"663\":1,\"670\":2}}],[\"click\",{\"1\":{\"439\":1,\"506\":2,\"518\":2,\"670\":1}}],[\"clientid\",{\"1\":{\"406\":1}}],[\"clients<\",{\"1\":{\"395\":1,\"698\":1}}],[\"clientexception\",{\"1\":{\"241\":3,\"665\":4}}],[\"client<\",{\"1\":{\"29\":2,\"687\":2}}],[\"client\",{\"1\":{\"16\":4,\"18\":1,\"19\":2,\"241\":1,\"651\":2,\"665\":2,\"687\":4}}],[\"cli\",{\"1\":{\"12\":1,\"379\":1,\"584\":1,\"652\":2}}],[\"cxk<\",{\"1\":{\"653\":1,\"655\":1,\"661\":1,\"663\":1}}],[\"cxk\",{\"1\":{\"14\":1,\"89\":1,\"167\":1,\"168\":3,\"169\":6,\"170\":4,\"335\":1,\"336\":1,\"337\":1,\"338\":6,\"340\":2,\"344\":1,\"395\":2,\"400\":2,\"519\":1,\"551\":2,\"616\":1,\"655\":7,\"659\":3,\"660\":1,\"665\":1,\"666\":1,\"668\":2,\"671\":2,\"696\":1,\"706\":2}}],[\"cnf\",{\"1\":{\"651\":1}}],[\"cnf的配置文件\",{\"1\":{\"651\":1}}],[\"cn|\",{\"1\":{\"443\":1}}],[\"cn\",{\"1\":{\"12\":1,\"14\":2,\"16\":1,\"29\":2,\"241\":1,\"316\":1,\"317\":2,\"381\":1,\"415\":1,\"450\":1,\"504\":3,\"523\":1,\"532\":1,\"665\":2,\"758\":4,\"821\":1}}],[\"city\",{\"1\":{\"252\":1,\"292\":1,\"293\":1,\"443\":2,\"444\":10}}],[\"circular\",{\"1\":{\"104\":1}}],[\"circuitbreaker\",{\"1\":{\"27\":2}}],[\"ci\",{\"1\":{\"9\":1,\"651\":2,\"764\":3,\"801\":4,\"806\":1}}],[\"couponfeignservice\",{\"1\":{\"659\":4,\"675\":2}}],[\"coupons\",{\"1\":{\"659\":6}}],[\"couponservice\",{\"1\":{\"659\":2}}],[\"couponentity\",{\"1\":{\"659\":5}}],[\"couponcontroller\",{\"1\":{\"659\":1,\"660\":2}}],[\"coupon\",{\"1\":{\"658\":1,\"659\":5,\"660\":10}}],[\"coupon<\",{\"1\":{\"653\":1,\"655\":2}}],[\"count++\",{\"1\":{\"820\":1}}],[\"count会减少1\",{\"1\":{\"782\":1}}],[\"count会增加1\",{\"1\":{\"782\":1}}],[\"counter\",{\"1\":{\"694\":1,\"782\":2}}],[\"countteamuserbyteamid\",{\"1\":{\"561\":1,\"562\":1,\"574\":1}}],[\"count1\",{\"1\":{\"561\":2,\"574\":2}}],[\"count2\",{\"1\":{\"561\":2,\"574\":2}}],[\"count=20\",{\"1\":{\"523\":1}}],[\"country\",{\"1\":{\"292\":1,\"293\":1}}],[\"countdown\",{\"1\":{\"107\":1,\"704\":1,\"763\":1}}],[\"countdownlatch\",{\"1\":{\"107\":5,\"108\":1,\"763\":5}}],[\"count\",{\"1\":{\"47\":1,\"87\":3,\"91\":8,\"108\":2,\"140\":1,\"208\":1,\"209\":1,\"558\":1,\"561\":4,\"562\":3,\"574\":4,\"599\":2,\"670\":1,\"673\":2,\"763\":4,\"770\":9,\"788\":2,\"790\":3,\"794\":2,\"795\":3,\"796\":4,\"806\":3,\"810\":1,\"820\":3}}],[\"costtime2\",{\"1\":{\"575\":4}}],[\"costtime1\",{\"1\":{\"575\":6}}],[\"coding\",{\"1\":{\"491\":6,\"493\":1}}],[\"codetype\",{\"1\":{\"491\":5,\"493\":8}}],[\"code1\",{\"1\":{\"400\":1}}],[\"code\",{\"1\":{\"14\":1,\"56\":2,\"81\":4,\"142\":6,\"226\":8,\"230\":23,\"241\":1,\"344\":1,\"400\":1,\"443\":1,\"512\":3,\"531\":1,\"558\":11,\"559\":1,\"560\":5,\"561\":8,\"562\":4,\"564\":1,\"565\":1,\"574\":8,\"622\":1,\"623\":13,\"624\":9,\"625\":7,\"627\":17,\"628\":2,\"630\":4,\"643\":1,\"663\":1,\"665\":2,\"666\":5,\"738\":7,\"739\":1,\"741\":8,\"742\":1}}],[\"covering\",{\"1\":{\"466\":1,\"467\":1}}],[\"coor=bd09ll\",{\"1\":{\"443\":1}}],[\"coords=114\",{\"1\":{\"442\":1}}],[\"cookie\",{\"1\":{\"533\":1,\"605\":1,\"611\":1}}],[\"cookie数据可以设置过期时间\",{\"1\":{\"47\":1}}],[\"cookie数据在客户端存储\",{\"1\":{\"47\":1}}],[\"cookie存储在客户端\",{\"1\":{\"47\":1}}],[\"cookie和session都是用来在客户端和服务器之间保持状态的机制\",{\"1\":{\"47\":1}}],[\"cookie和session\",{\"1\":{\"47\":1}}],[\"copy\",{\"1\":{\"616\":1,\"642\":1,\"643\":5}}],[\"copyable\",{\"1\":{\"616\":6}}],[\"copytolist\",{\"1\":{\"208\":1,\"209\":2,\"214\":2,\"220\":2}}],[\"copyproperties\",{\"1\":{\"208\":2,\"214\":2,\"220\":1,\"559\":2,\"560\":1,\"673\":4,\"674\":1,\"675\":5,\"688\":2,\"740\":1,\"741\":1,\"788\":1,\"805\":2,\"807\":1}}],[\"copyoptions\",{\"1\":{\"741\":1,\"788\":1}}],[\"copyonwritearrayset\",{\"1\":{\"99\":1}}],[\"copyonwritearraylist\",{\"1\":{\"98\":7}}],[\"copyonwritearraylist<>\",{\"1\":{\"98\":1}}],[\"copyof\",{\"1\":{\"54\":1,\"56\":2,\"58\":1,\"98\":1}}],[\"corba\",{\"1\":{\"544\":1}}],[\"corswebfilter\",{\"1\":{\"663\":3}}],[\"corsregistry\",{\"1\":{\"663\":1}}],[\"corsconfigurations\",{\"1\":{\"728\":1}}],[\"corsconfiguration\",{\"1\":{\"663\":8}}],[\"corsconfig\",{\"1\":{\"663\":1}}],[\"cors\",{\"1\":{\"523\":1}}],[\"correlationdata\",{\"1\":{\"344\":3}}],[\"correlated\",{\"1\":{\"344\":2}}],[\"corresponds\",{\"1\":{\"140\":1}}],[\"coresize=20\",{\"1\":{\"721\":1}}],[\"coresize\",{\"1\":{\"721\":1}}],[\"core<\",{\"1\":{\"224\":1,\"256\":1,\"398\":1,\"698\":1,\"817\":1}}],[\"core\",{\"1\":{\"115\":1,\"216\":1,\"544\":3,\"655\":1,\"713\":1,\"758\":3}}],[\"corepoolsize\",{\"1\":{\"115\":2,\"713\":2}}],[\"com代理不了\",{\"1\":{\"691\":1}}],[\"com进行访问\",{\"1\":{\"691\":1}}],[\"comitheima\",{\"1\":{\"245\":1}}],[\"come\",{\"1\":{\"142\":1}}],[\"comp\",{\"1\":{\"643\":1,\"646\":1}}],[\"compile\",{\"1\":{\"599\":2,\"605\":1}}],[\"compressed\",{\"1\":{\"523\":1}}],[\"completionstage\",{\"1\":{\"143\":1}}],[\"completionstage<t>\",{\"1\":{\"143\":1}}],[\"completionstage<\",{\"1\":{\"122\":9,\"143\":1,\"718\":9}}],[\"completion\",{\"1\":{\"142\":2}}],[\"complete\",{\"1\":{\"120\":1,\"143\":1,\"716\":1}}],[\"completedfuture\",{\"1\":{\"143\":1}}],[\"completed\",{\"1\":{\"81\":1,\"143\":1}}],[\"completablefuture=completablefuture\",{\"1\":{\"143\":1}}],[\"completablefuture提供了非常强大的future的扩展功能\",{\"1\":{\"143\":1}}],[\"completablefuture\",{\"0\":{\"141\":1,\"143\":1,\"714\":1},\"1\":{\"119\":1,\"120\":2,\"143\":13,\"539\":3,\"571\":1,\"715\":1,\"716\":2,\"721\":3}}],[\"completablefuture<skuinfoentity>\",{\"1\":{\"721\":1}}],[\"completablefuture<character>\",{\"1\":{\"143\":3}}],[\"completablefuture<object>\",{\"1\":{\"124\":1,\"720\":1}}],[\"completablefuture<\",{\"1\":{\"124\":2,\"720\":2}}],[\"completablefuture<v>\",{\"1\":{\"122\":3,\"718\":3}}],[\"completablefuture<void>\",{\"1\":{\"119\":3,\"121\":6,\"122\":6,\"124\":1,\"143\":3,\"539\":1,\"715\":3,\"717\":6,\"718\":6,\"720\":1,\"721\":4}}],[\"completablefuture<t>\",{\"1\":{\"120\":4,\"143\":1,\"716\":4}}],[\"completablefuture<integer>\",{\"1\":{\"119\":1,\"120\":2,\"143\":3,\"715\":1,\"716\":2}}],[\"completablefuture<u>\",{\"1\":{\"119\":2,\"121\":3,\"143\":2,\"715\":2,\"717\":3}}],[\"completablefuture异步回调\",{\"0\":{\"118\":1}}],[\"compute\",{\"1\":{\"117\":3}}],[\"computes\",{\"1\":{\"66\":1}}],[\"compact\",{\"1\":{\"764\":3,\"801\":2,\"806\":1}}],[\"compareandswapint\",{\"1\":{\"769\":1}}],[\"compareandset\",{\"1\":{\"155\":2}}],[\"compareto\",{\"1\":{\"675\":2}}],[\"compare\",{\"1\":{\"131\":3,\"766\":1}}],[\"comparator\",{\"1\":{\"112\":1}}],[\"comparable\",{\"1\":{\"112\":1}}],[\"companyname\",{\"1\":{\"180\":2,\"181\":1,\"184\":10,\"185\":6,\"186\":3,\"188\":2,\"191\":3}}],[\"company\",{\"1\":{\"44\":1,\"180\":2,\"181\":1,\"184\":1,\"185\":3,\"186\":1,\"188\":2,\"191\":1}}],[\"components\",{\"1\":{\"504\":4,\"616\":2}}],[\"componentscan\",{\"0\":{\"301\":1},\"1\":{\"18\":1,\"224\":2,\"232\":2,\"233\":1,\"245\":6,\"256\":1,\"263\":2,\"301\":1,\"306\":1,\"309\":1,\"310\":1,\"312\":3}}],[\"component注解如果不起名称\",{\"1\":{\"299\":1}}],[\"component注解不可以添加在接口上\",{\"1\":{\"299\":1}}],[\"component注解\",{\"1\":{\"299\":1}}],[\"component\",{\"1\":{\"27\":1,\"232\":1,\"233\":1,\"241\":2,\"299\":2,\"301\":1,\"332\":1,\"355\":1,\"407\":2,\"409\":2,\"517\":3,\"544\":2,\"612\":3,\"615\":3,\"670\":5,\"721\":1,\"728\":1,\"758\":2,\"763\":1}}],[\"community\",{\"1\":{\"450\":1}}],[\"communicate\",{\"1\":{\"241\":1,\"665\":2}}],[\"common<\",{\"1\":{\"655\":1,\"661\":1,\"663\":1}}],[\"common模块中的resources目录中新增以下目录和文件resources\",{\"1\":{\"726\":1}}],[\"common模块中引入该依赖\",{\"1\":{\"726\":1}}],[\"common模块导入mybatisplus等依赖\",{\"1\":{\"655\":1}}],[\"common模块\",{\"1\":{\"655\":1}}],[\"commons\",{\"1\":{\"430\":1,\"655\":1}}],[\"commons<\",{\"1\":{\"398\":1,\"416\":1,\"599\":1}}],[\"commonparamdifferentname\",{\"1\":{\"250\":5}}],[\"commonparam\",{\"1\":{\"248\":8}}],[\"common\",{\"1\":{\"29\":1,\"66\":1,\"241\":1,\"250\":2,\"256\":2,\"398\":1,\"623\":1,\"624\":1,\"625\":1,\"627\":1,\"628\":3,\"659\":1,\"668\":2,\"687\":4,\"688\":1,\"710\":1,\"726\":1,\"727\":2,\"807\":1}}],[\"comments表\",{\"1\":{\"801\":1}}],[\"comments\",{\"1\":{\"801\":2}}],[\"comment\",{\"1\":{\"9\":13,\"509\":9,\"510\":1,\"557\":20,\"596\":13,\"670\":63,\"672\":3,\"764\":28,\"801\":20,\"806\":4}}],[\"com\",{\"1\":{\"21\":2,\"23\":2,\"29\":2,\"44\":1,\"89\":1,\"140\":1,\"167\":1,\"168\":1,\"169\":1,\"170\":1,\"175\":4,\"176\":2,\"178\":2,\"179\":2,\"201\":2,\"211\":1,\"215\":1,\"216\":1,\"224\":4,\"232\":3,\"233\":1,\"240\":3,\"241\":8,\"245\":5,\"256\":1,\"263\":3,\"269\":2,\"270\":3,\"275\":1,\"276\":1,\"277\":1,\"278\":1,\"282\":3,\"283\":1,\"285\":1,\"286\":3,\"287\":3,\"294\":2,\"295\":1,\"299\":2,\"301\":1,\"306\":1,\"309\":3,\"310\":3,\"312\":5,\"317\":1,\"326\":1,\"355\":1,\"381\":1,\"407\":1,\"408\":1,\"409\":2,\"429\":1,\"430\":2,\"436\":1,\"438\":2,\"439\":1,\"442\":2,\"443\":2,\"444\":2,\"445\":2,\"449\":1,\"450\":1,\"451\":1,\"453\":1,\"457\":3,\"458\":1,\"496\":1,\"512\":2,\"519\":1,\"522\":4,\"523\":4,\"524\":1,\"533\":1,\"537\":1,\"538\":1,\"539\":5,\"544\":6,\"551\":2,\"587\":1,\"594\":1,\"595\":2,\"609\":1,\"623\":1,\"624\":1,\"625\":1,\"627\":2,\"628\":4,\"630\":1,\"655\":15,\"657\":1,\"659\":3,\"661\":3,\"663\":2,\"665\":6,\"666\":1,\"668\":2,\"671\":4,\"682\":1,\"685\":1,\"687\":1,\"690\":1,\"691\":3,\"696\":1,\"704\":1,\"706\":2,\"710\":6,\"721\":3,\"726\":2,\"727\":4,\"758\":3,\"770\":1,\"824\":12}}],[\"col>\",{\"1\":{\"518\":1}}],[\"col\",{\"1\":{\"518\":1}}],[\"color\",{\"1\":{\"419\":1,\"710\":2}}],[\"collation\",{\"1\":{\"651\":2}}],[\"collate\",{\"1\":{\"9\":1,\"764\":3,\"801\":4,\"806\":1}}],[\"collutils\",{\"1\":{\"355\":1}}],[\"collutil\",{\"1\":{\"214\":2,\"220\":1}}],[\"collect1\",{\"1\":{\"675\":2}}],[\"collectors\",{\"1\":{\"143\":2,\"214\":2,\"220\":1,\"512\":2,\"534\":1,\"564\":1,\"566\":3,\"575\":5,\"608\":1,\"663\":2,\"673\":1,\"674\":3,\"675\":4,\"688\":6,\"690\":3,\"697\":4,\"710\":2,\"805\":4,\"807\":2,\"816\":1}}],[\"collect\",{\"1\":{\"143\":2,\"214\":2,\"220\":1,\"512\":2,\"534\":1,\"564\":1,\"566\":3,\"575\":5,\"608\":1,\"663\":2,\"673\":3,\"674\":5,\"675\":8,\"688\":11,\"690\":6,\"697\":9,\"710\":4,\"805\":4,\"807\":2,\"816\":1}}],[\"collectionutils\",{\"1\":{\"430\":2,\"512\":1,\"531\":1,\"559\":1,\"562\":1}}],[\"collection=\",{\"1\":{\"190\":1,\"674\":1}}],[\"collections4\",{\"1\":{\"430\":1}}],[\"collections\",{\"1\":{\"97\":1,\"214\":1,\"220\":2,\"670\":1,\"780\":1,\"789\":1,\"790\":1,\"796\":1,\"805\":1,\"807\":1}}],[\"collection<session>\",{\"1\":{\"407\":1}}],[\"collection<\",{\"1\":{\"54\":1}}],[\"collection\",{\"1\":{\"54\":4,\"56\":1,\"63\":2,\"190\":1,\"261\":1,\"407\":1}}],[\"collisions\",{\"1\":{\"66\":1}}],[\"collide\",{\"1\":{\"66\":1}}],[\"column\",{\"1\":{\"180\":2,\"181\":2}}],[\"column语句\",{\"1\":{\"47\":1}}],[\"column2\",{\"1\":{\"47\":1}}],[\"column1\",{\"1\":{\"47\":1}}],[\"column=\",{\"1\":{\"22\":1,\"23\":1,\"181\":2}}],[\"columnsstate=\",{\"1\":{\"616\":1}}],[\"columns=\",{\"1\":{\"14\":4,\"616\":1}}],[\"columns\",{\"1\":{\"14\":9,\"616\":4}}],[\"cond\",{\"1\":{\"665\":2}}],[\"conditions\",{\"1\":{\"544\":1,\"655\":1,\"766\":1}}],[\"conditionc\",{\"1\":{\"93\":5}}],[\"conditionb\",{\"1\":{\"93\":5}}],[\"conditionalonproperty\",{\"1\":{\"351\":1}}],[\"conditionalonclass\",{\"1\":{\"319\":1}}],[\"conditiona\",{\"1\":{\"93\":5}}],[\"condition\",{\"1\":{\"91\":7,\"93\":5,\"156\":4,\"486\":1}}],[\"concurs\",{\"1\":{\"691\":1}}],[\"concurrency\",{\"1\":{\"476\":1}}],[\"concurrenthashmap\",{\"1\":{\"100\":1}}],[\"concurrent\",{\"1\":{\"91\":2,\"93\":3,\"104\":1,\"110\":4,\"112\":3,\"117\":4,\"142\":1,\"151\":1,\"155\":1,\"539\":1,\"742\":1,\"758\":3}}],[\"concurrent包的简称\",{\"1\":{\"80\":1}}],[\"concurrentmodificationexception\",{\"1\":{\"63\":1,\"98\":1}}],[\"concept\",{\"1\":{\"665\":1}}],[\"concat\",{\"1\":{\"452\":2}}],[\"conf中\",{\"1\":{\"691\":2}}],[\"conf目录下面\",{\"1\":{\"652\":1}}],[\"conf的配置文件内容为\",{\"1\":{\"646\":1}}],[\"conf前端用于测试的\",{\"1\":{\"585\":1}}],[\"conf配置文件在~\",{\"1\":{\"652\":1}}],[\"conf配置文件\",{\"1\":{\"379\":1}}],[\"conf\",{\"1\":{\"373\":1,\"379\":1,\"426\":1,\"639\":1,\"643\":4,\"646\":3,\"651\":4,\"652\":4}}],[\"conf文件夹下面\",{\"1\":{\"651\":1}}],[\"conf文件\",{\"1\":{\"369\":1}}],[\"confirm>\",{\"1\":{\"344\":1}}],[\"confirm\",{\"1\":{\"344\":2}}],[\"confirm机制\",{\"1\":{\"343\":1,\"344\":1}}],[\"confirm和publisher\",{\"1\":{\"343\":1}}],[\"config=config\",{\"1\":{\"706\":6}}],[\"config文件夹\",{\"1\":{\"681\":1}}],[\"config<\",{\"1\":{\"660\":1,\"728\":1}}],[\"configure\",{\"1\":{\"639\":1}}],[\"configuration与\",{\"0\":{\"301\":1}}],[\"configuration>\",{\"1\":{\"175\":1,\"224\":1,\"245\":1,\"248\":1}}],[\"configurationproperties\",{\"1\":{\"18\":1,\"241\":1,\"319\":1,\"551\":2,\"721\":1}}],[\"configuration\",{\"1\":{\"18\":2,\"175\":1,\"216\":1,\"219\":1,\"224\":2,\"232\":3,\"233\":1,\"245\":3,\"256\":1,\"263\":3,\"301\":1,\"306\":1,\"309\":4,\"310\":1,\"312\":3,\"319\":1,\"338\":2,\"344\":1,\"351\":1,\"399\":1,\"408\":2,\"423\":3,\"522\":2,\"551\":2,\"590\":1,\"595\":1,\"605\":1,\"663\":2,\"671\":2,\"687\":1,\"704\":2,\"706\":1,\"721\":1,\"726\":1,\"727\":3,\"733\":3,\"739\":1,\"742\":1,\"781\":1}}],[\"config\",{\"1\":{\"14\":6,\"175\":3,\"184\":1,\"201\":2,\"215\":2,\"232\":1,\"263\":1,\"309\":1,\"317\":4,\"369\":1,\"408\":1,\"522\":1,\"532\":2,\"545\":1,\"551\":8,\"585\":1,\"605\":2,\"635\":3,\"643\":1,\"646\":1,\"655\":2,\"660\":2,\"663\":2,\"671\":1,\"681\":2,\"704\":5,\"706\":2,\"721\":1,\"728\":1,\"729\":1,\"731\":1,\"781\":5}}],[\"convertandsend\",{\"1\":{\"332\":1,\"333\":1,\"335\":1,\"336\":1,\"337\":1,\"339\":1,\"340\":1,\"344\":1,\"347\":1,\"355\":2}}],[\"convertor\",{\"1\":{\"220\":3}}],[\"connect=\",{\"1\":{\"651\":2}}],[\"connections\",{\"1\":{\"646\":1}}],[\"connection\",{\"1\":{\"342\":1,\"651\":1}}],[\"connectionnum\",{\"1\":{\"283\":6,\"286\":6}}],[\"connector\",{\"1\":{\"175\":1,\"224\":1,\"294\":1,\"312\":1,\"591\":1,\"655\":1}}],[\"con3\",{\"1\":{\"168\":5}}],[\"con2\",{\"1\":{\"168\":1}}],[\"con1\",{\"1\":{\"168\":2}}],[\"continue\",{\"1\":{\"559\":2,\"566\":1,\"575\":2,\"796\":1}}],[\"contaier\",{\"1\":{\"643\":1}}],[\"container\",{\"1\":{\"317\":1,\"426\":1,\"438\":3,\"643\":2}}],[\"contained\",{\"1\":{\"63\":1,\"66\":1}}],[\"containing\",{\"1\":{\"54\":1}}],[\"contains\",{\"1\":{\"27\":1,\"53\":1,\"454\":1,\"512\":1,\"668\":1,\"688\":1,\"728\":1}}],[\"contact\",{\"1\":{\"522\":1,\"726\":5}}],[\"contrib\",{\"1\":{\"504\":1}}],[\"control\",{\"1\":{\"268\":1,\"476\":1,\"523\":1}}],[\"controller商品上架错误\",{\"1\":{\"688\":1}}],[\"controller接受service处理完的数据\",{\"1\":{\"675\":1}}],[\"controller一共做三件事情\",{\"1\":{\"675\":1}}],[\"controller根据需求组装成model和view\",{\"1\":{\"244\":1}}],[\"controller负责请求和数据的接收\",{\"1\":{\"244\":1}}],[\"controller中使用\",{\"1\":{\"241\":1}}],[\"controller控制器\",{\"1\":{\"224\":1}}],[\"controller\",{\"1\":{\"224\":1,\"232\":2,\"233\":1,\"245\":5,\"247\":4,\"248\":2,\"256\":1,\"261\":4,\"262\":4,\"263\":1,\"299\":1,\"522\":1,\"666\":1,\"726\":1}}],[\"controller是否是线程安全的\",{\"1\":{\"47\":1}}],[\"context\",{\"1\":{\"295\":4,\"408\":2,\"522\":2,\"525\":2,\"539\":1,\"551\":4,\"655\":2,\"668\":1,\"671\":2,\"727\":3}}],[\"context=\",{\"1\":{\"295\":1}}],[\"context<\",{\"1\":{\"269\":1,\"312\":1}}],[\"contextconfiguration\",{\"1\":{\"224\":1,\"313\":2}}],[\"contextloads\",{\"1\":{\"19\":1,\"655\":1}}],[\"content=\",{\"1\":{\"438\":2}}],[\"contenttype\",{\"1\":{\"232\":1,\"318\":1,\"319\":2,\"733\":2}}],[\"contents\",{\"1\":{\"58\":1}}],[\"content\",{\"1\":{\"17\":2,\"27\":4,\"232\":1,\"438\":1,\"443\":1,\"451\":1,\"452\":2,\"453\":2,\"454\":4,\"507\":1,\"518\":3,\"665\":1,\"729\":1,\"733\":1,\"801\":2}}],[\"consistency\",{\"1\":{\"472\":1}}],[\"consider\",{\"1\":{\"142\":1}}],[\"consul是不会主动再发健康检查的\",{\"1\":{\"412\":1}}],[\"consul向微服务发的健康检查请求发不通\",{\"1\":{\"412\":1}}],[\"consul和微服务间的网络不稳定\",{\"1\":{\"412\":1}}],[\"consul微服务注册问题\",{\"0\":{\"412\":1}}],[\"consumername从消费者组读取消息\",{\"1\":{\"795\":1}}],[\"consumername删除消费者组中的指定消费者\",{\"1\":{\"795\":1}}],[\"consumer中定义失败交换机和队列\",{\"1\":{\"351\":1}}],[\"consumer\",{\"1\":{\"349\":1,\"795\":3,\"796\":2}}],[\"consumer<string>\",{\"1\":{\"143\":1}}],[\"consumer<t>\",{\"1\":{\"143\":1}}],[\"consumer<\",{\"1\":{\"121\":3,\"717\":3}}],[\"consecutive\",{\"1\":{\"66\":1}}],[\"conscious\",{\"1\":{\"56\":2}}],[\"console\",{\"1\":{\"14\":5,\"240\":2,\"317\":1,\"520\":2,\"532\":2,\"616\":3,\"630\":1,\"663\":1,\"665\":1,\"670\":3,\"804\":1}}],[\"constraintvalidatorcontext\",{\"1\":{\"668\":1}}],[\"constraintvalidator<listvalue\",{\"1\":{\"668\":1}}],[\"constraintannotation\",{\"1\":{\"668\":2}}],[\"constraint\",{\"1\":{\"668\":1}}],[\"constructions\",{\"1\":{\"142\":1}}],[\"constructs\",{\"1\":{\"54\":3,\"64\":4}}],[\"constructor<\",{\"1\":{\"168\":2}}],[\"constructors\",{\"1\":{\"63\":1}}],[\"constructor\",{\"1\":{\"22\":1,\"63\":1,\"168\":8,\"668\":1}}],[\"constant\",{\"1\":{\"616\":1}}],[\"constants\",{\"1\":{\"207\":2}}],[\"const\",{\"1\":{\"14\":21,\"22\":17,\"23\":10,\"486\":3,\"506\":2,\"507\":2,\"517\":2,\"518\":10,\"519\":3,\"520\":3,\"531\":3,\"532\":2,\"534\":1,\"609\":1,\"612\":8,\"613\":2,\"615\":3,\"616\":3,\"630\":2,\"635\":1,\"663\":1}}],[\"创建订单\",{\"1\":{\"790\":2}}],[\"创建lua脚本\",{\"1\":{\"789\":1}}],[\"创建锁\",{\"1\":{\"782\":2}}],[\"创建优惠卷\",{\"0\":{\"764\":1}}],[\"创建线程\",{\"0\":{\"712\":1}}],[\"创建线程池的参数\",{\"1\":{\"47\":1}}],[\"创建检索请求\",{\"1\":{\"687\":1}}],[\"创建时可以指定字段的类型\",{\"1\":{\"686\":1}}],[\"创建时间\",{\"1\":{\"9\":2,\"22\":1,\"23\":1,\"25\":1,\"509\":2,\"557\":4,\"596\":2,\"616\":1,\"764\":2,\"801\":2,\"806\":1}}],[\"创建挂载目录~\",{\"1\":{\"681\":1}}],[\"创建两个类\",{\"1\":{\"667\":1}}],[\"创建putobject请求\",{\"1\":{\"665\":2}}],[\"创建putobjectrequest对象\",{\"1\":{\"241\":1,\"665\":2}}],[\"创建vue文件\",{\"1\":{\"663\":1}}],[\"创建gulimall\",{\"1\":{\"655\":1}}],[\"创建五个数据库\",{\"1\":{\"654\":1}}],[\"创建数据库gulimall\",{\"1\":{\"655\":1}}],[\"创建数据库\",{\"1\":{\"596\":1}}],[\"创建数据源\",{\"1\":{\"312\":1}}],[\"创建监听器\",{\"1\":{\"525\":1}}],[\"创建队伍失败\",{\"1\":{\"558\":2}}],[\"创建队伍\",{\"0\":{\"558\":1},\"1\":{\"500\":1}}],[\"创建队列的节点称为该队列的主节点\",{\"1\":{\"363\":1}}],[\"创建ak的时候\",{\"1\":{\"441\":1}}],[\"创建标注对象并添加到地图\",{\"1\":{\"439\":1}}],[\"创建标注\",{\"1\":{\"439\":1}}],[\"创建点坐标\",{\"1\":{\"438\":1}}],[\"创建地图实例\",{\"1\":{\"438\":1}}],[\"创建地图\",{\"0\":{\"438\":1}}],[\"创建json格式序列化对象\",{\"1\":{\"399\":1}}],[\"创建redistemplate<string\",{\"1\":{\"399\":1}}],[\"创建factory\",{\"1\":{\"396\":1}}],[\"创建消息\",{\"1\":{\"355\":1}}],[\"创建消息队列users\",{\"1\":{\"794\":1}}],[\"创建消息队列\",{\"1\":{\"329\":1}}],[\"创建cd\",{\"1\":{\"344\":1}}],[\"创建controller类\",{\"1\":{\"245\":1}}],[\"创建completablefuture类\",{\"1\":{\"143\":1}}],[\"创建交换机和队列绑定\",{\"1\":{\"337\":1}}],[\"创建交换机\",{\"1\":{\"336\":1}}],[\"创建角色\",{\"1\":{\"323\":1}}],[\"创建配置文件\",{\"1\":{\"319\":1}}],[\"创建配置类官网\",{\"1\":{\"687\":1}}],[\"创建配置类\",{\"1\":{\"219\":1,\"224\":1,\"245\":1}}],[\"创建实例container并启动\",{\"1\":{\"651\":1}}],[\"创建实例\",{\"1\":{\"551\":1}}],[\"创建实例工厂对象\",{\"1\":{\"276\":1}}],[\"创建实体类user\",{\"1\":{\"175\":1}}],[\"创建ossclient实例\",{\"1\":{\"241\":1,\"665\":2}}],[\"创建一个stream类型的消息队列\",{\"1\":{\"796\":1}}],[\"创建一个listvalueconstraintvalidator类\",{\"1\":{\"668\":1}}],[\"创建一个listvalue注解\",{\"1\":{\"668\":1}}],[\"创建一个网关模块\",{\"1\":{\"661\":1}}],[\"创建一个优先队列\",{\"1\":{\"575\":1}}],[\"创建一个bucket\",{\"1\":{\"240\":1}}],[\"创建一个公共的接口定义文件\",{\"1\":{\"29\":1}}],[\"创建拦截器\",{\"0\":{\"232\":1},\"1\":{\"232\":1}}],[\"创建项目\",{\"0\":{\"653\":1},\"1\":{\"224\":1}}],[\"创建userinfo类\",{\"1\":{\"217\":1}}],[\"创建usermapper接口\",{\"1\":{\"176\":1}}],[\"创建service接口\",{\"1\":{\"208\":1}}],[\"创建minio链接客户端\",{\"1\":{\"318\":1}}],[\"创建mybatis配置类并配置sqlsessionfactory\",{\"1\":{\"312\":1}}],[\"创建mybatis项目\",{\"0\":{\"175\":1}}],[\"创建map数据\",{\"1\":{\"418\":1,\"423\":1}}],[\"创建mapper映射文件usermapper\",{\"1\":{\"175\":1}}],[\"创建maven项目\",{\"1\":{\"269\":1}}],[\"创建io流\",{\"1\":{\"171\":1}}],[\"创建对象\",{\"1\":{\"168\":1,\"396\":1,\"525\":1}}],[\"创建异步对象\",{\"0\":{\"119\":1,\"715\":1}}],[\"创建\",{\"1\":{\"114\":1,\"416\":1}}],[\"创建新的数组\",{\"1\":{\"71\":1}}],[\"创建阈值\",{\"1\":{\"71\":1}}],[\"创建失败\",{\"1\":{\"14\":1}}],[\"创建成功\",{\"1\":{\"14\":1}}],[\"创建前端项目\",{\"1\":{\"12\":1}}],[\"创建人\",{\"1\":{\"9\":1}}],[\"dffd631c453f76bf38221c7a\",{\"1\":{\"444\":2}}],[\"dlx\",{\"1\":{\"354\":1}}],[\"ddl\",{\"1\":{\"477\":1}}],[\"dd\",{\"1\":{\"259\":6,\"319\":2,\"665\":1,\"675\":1,\"763\":1}}],[\"ddos\",{\"1\":{\"27\":1}}],[\"d\",{\"1\":{\"239\":1,\"241\":1,\"317\":2,\"328\":1,\"400\":3,\"426\":2,\"452\":1,\"504\":1,\"518\":1,\"566\":8,\"584\":1,\"643\":2,\"646\":1,\"651\":3,\"652\":1,\"681\":2}}],[\"dserver\",{\"1\":{\"771\":1}}],[\"dsl\",{\"0\":{\"685\":1}}],[\"dskiptests\",{\"1\":{\"643\":1}}],[\"ds=new\",{\"1\":{\"310\":1}}],[\"ds\",{\"1\":{\"224\":3,\"309\":12,\"310\":17,\"312\":6}}],[\"driving\",{\"1\":{\"445\":1}}],[\"drive\",{\"1\":{\"317\":1}}],[\"driverclassname\",{\"1\":{\"294\":1,\"295\":1,\"655\":1}}],[\"driver=com\",{\"1\":{\"224\":1,\"295\":1}}],[\"driver\",{\"1\":{\"175\":4,\"178\":4,\"211\":2,\"224\":4,\"294\":1,\"295\":2,\"309\":2,\"310\":5,\"312\":3,\"595\":2,\"655\":3}}],[\"druid\",{\"1\":{\"294\":1,\"295\":1,\"655\":1}}],[\"druiddatasource\",{\"1\":{\"224\":2,\"294\":1,\"295\":1,\"309\":4,\"310\":6,\"312\":2,\"655\":1}}],[\"dto\",{\"1\":{\"220\":6,\"732\":20}}],[\"dtd\",{\"1\":{\"175\":6}}],[\"dynamictablenameinnerinterceptor\",{\"1\":{\"218\":1}}],[\"dbfallback\",{\"1\":{\"758\":5}}],[\"dbc\",{\"1\":{\"566\":1}}],[\"dbtype\",{\"1\":{\"219\":1,\"671\":1}}],[\"db静态工具\",{\"0\":{\"214\":1}}],[\"db\",{\"1\":{\"201\":1,\"214\":3,\"215\":1,\"224\":1,\"294\":1,\"295\":1,\"309\":2,\"310\":2,\"323\":3,\"605\":1,\"655\":1,\"663\":1,\"696\":1}}],[\"duration\",{\"1\":{\"796\":1}}],[\"durability\",{\"1\":{\"472\":1}}],[\"durable就是持久化\",{\"1\":{\"359\":1}}],[\"durable是否持久化\",{\"1\":{\"359\":1}}],[\"durable\",{\"1\":{\"340\":1,\"347\":2,\"355\":2,\"359\":1}}],[\"due\",{\"1\":{\"81\":2}}],[\"dubboservice\",{\"1\":{\"29\":1}}],[\"dubbo<\",{\"1\":{\"29\":2}}],[\"dubbo\",{\"1\":{\"29\":11}}],[\"dubbo框架\",{\"0\":{\"29\":1}}],[\"dubboreference\",{\"1\":{\"27\":3,\"29\":1}}],[\"door\",{\"1\":{\"704\":7}}],[\"dootherexception\",{\"1\":{\"230\":1}}],[\"does\",{\"1\":{\"703\":1}}],[\"doe2\",{\"1\":{\"682\":1}}],[\"doew\",{\"1\":{\"682\":1}}],[\"doe\",{\"1\":{\"682\":5}}],[\"doexception\",{\"1\":{\"229\":1}}],[\"doinsertusers\",{\"1\":{\"537\":1,\"538\":1,\"539\":1}}],[\"dosearchresult\",{\"1\":{\"531\":1}}],[\"dosystemexception\",{\"1\":{\"230\":1}}],[\"doafterallanalysed\",{\"1\":{\"525\":1}}],[\"dom4j<\",{\"1\":{\"453\":1}}],[\"dom4j用来转换接收到的消息\",{\"1\":{\"453\":1}}],[\"domain=moving\",{\"1\":{\"450\":1}}],[\"domain\",{\"1\":{\"201\":1,\"215\":1,\"224\":1,\"312\":1,\"533\":1,\"539\":1,\"544\":1}}],[\"doreadsync\",{\"1\":{\"526\":1}}],[\"doread\",{\"1\":{\"433\":2,\"525\":1}}],[\"dowrite100\",{\"1\":{\"431\":1}}],[\"dowrite\",{\"1\":{\"430\":2}}],[\"downloads\",{\"1\":{\"655\":1}}],[\"download\",{\"1\":{\"381\":1,\"639\":1,\"695\":1}}],[\"downloadfile\",{\"1\":{\"319\":2}}],[\"down\",{\"1\":{\"319\":1,\"566\":5,\"731\":1}}],[\"downward\",{\"1\":{\"66\":1}}],[\"dobusinessexception\",{\"1\":{\"230\":1}}],[\"do\",{\"1\":{\"67\":2,\"71\":1,\"87\":1,\"140\":1,\"769\":1}}],[\"done\",{\"1\":{\"143\":1}}],[\"dont\",{\"1\":{\"142\":1}}],[\"don\",{\"1\":{\"66\":2,\"142\":1}}],[\"doubledata\",{\"1\":{\"430\":1}}],[\"double\",{\"1\":{\"47\":1,\"71\":1,\"143\":1,\"171\":2,\"430\":1,\"755\":1,\"804\":2,\"817\":4}}],[\"dog\",{\"1\":{\"27\":1,\"687\":1}}],[\"docache\",{\"1\":{\"551\":1,\"573\":1}}],[\"docacherecommenduser\",{\"1\":{\"544\":1,\"551\":1,\"573\":1}}],[\"docket=new\",{\"1\":{\"522\":1,\"727\":1}}],[\"docket\",{\"1\":{\"522\":5,\"726\":2,\"727\":5}}],[\"dockerfile\",{\"1\":{\"642\":1,\"643\":2}}],[\"docker部署\",{\"0\":{\"642\":1}}],[\"docker安装es环境\",{\"0\":{\"681\":1}}],[\"docker安装mysql\",{\"0\":{\"651\":1}}],[\"docker安装\",{\"0\":{\"328\":1}}],[\"docker\",{\"0\":{\"652\":1},\"1\":{\"317\":13,\"323\":5,\"328\":2,\"355\":1,\"426\":7,\"643\":12,\"646\":2,\"651\":14,\"652\":7,\"681\":8}}],[\"doclose\",{\"1\":{\"518\":2}}],[\"documented\",{\"1\":{\"668\":1}}],[\"documentexception\",{\"1\":{\"453\":1}}],[\"documentationtype\",{\"1\":{\"522\":2,\"726\":1,\"727\":2}}],[\"documentation\",{\"1\":{\"522\":6,\"727\":7}}],[\"document\",{\"1\":{\"406\":2,\"453\":3,\"691\":1}}],[\"doctype\",{\"1\":{\"175\":2,\"406\":1,\"416\":1,\"438\":1}}],[\"doc\",{\"1\":{\"14\":1,\"16\":1,\"43\":1,\"450\":1,\"451\":1,\"453\":1,\"457\":1,\"458\":1,\"522\":1,\"682\":2,\"727\":1}}],[\"docs\",{\"1\":{\"12\":1,\"14\":2,\"44\":1,\"316\":2,\"317\":1,\"378\":1,\"532\":1,\"661\":2,\"682\":1}}],[\"dio\",{\"1\":{\"698\":2}}],[\"divider>\",{\"1\":{\"518\":2}}],[\"divider\",{\"1\":{\"518\":2}}],[\"div>\",{\"1\":{\"406\":1,\"438\":1,\"507\":1,\"518\":1,\"520\":1,\"616\":1,\"663\":1}}],[\"digit\",{\"1\":{\"452\":3}}],[\"digest\",{\"1\":{\"452\":3}}],[\"digestutils\",{\"1\":{\"599\":2,\"605\":1,\"725\":1}}],[\"digestutil\",{\"1\":{\"22\":2}}],[\"digesthex\",{\"1\":{\"17\":1}}],[\"digestalgorithm\",{\"1\":{\"17\":1}}],[\"digester\",{\"1\":{\"17\":4}}],[\"difference\",{\"1\":{\"400\":3}}],[\"different\",{\"1\":{\"250\":2}}],[\"dirve\",{\"1\":{\"445\":1}}],[\"dirorfile\",{\"1\":{\"430\":2}}],[\"dir\",{\"1\":{\"369\":1,\"373\":1,\"665\":4,\"801\":2}}],[\"direction\",{\"1\":{\"445\":2}}],[\"directqueue2\",{\"1\":{\"338\":5}}],[\"directqueue1\",{\"1\":{\"338\":5}}],[\"directexchange\",{\"1\":{\"338\":15,\"351\":6,\"359\":2}}],[\"directconfig\",{\"1\":{\"338\":1}}],[\"direct需要指定key\",{\"1\":{\"336\":1}}],[\"direct交换机\",{\"0\":{\"336\":1},\"1\":{\"338\":2}}],[\"direct\",{\"1\":{\"334\":1,\"336\":3,\"338\":9,\"344\":1,\"351\":4,\"355\":2,\"359\":1,\"694\":1}}],[\"dirpath\",{\"1\":{\"319\":4}}],[\"di管理第三方bean\",{\"0\":{\"294\":1}}],[\"di依赖注入就是在service层里面注入一个bookdao对象\",{\"1\":{\"270\":1}}],[\"di依赖注入\",{\"0\":{\"270\":1,\"280\":1}}],[\"didependency\",{\"1\":{\"268\":1}}],[\"discovery\",{\"1\":{\"658\":1,\"663\":1,\"681\":1,\"728\":1}}],[\"discovery<\",{\"1\":{\"658\":1,\"728\":1}}],[\"disposablebean\",{\"1\":{\"279\":1}}],[\"dist文件夹下面\",{\"1\":{\"639\":1}}],[\"dist\",{\"1\":{\"639\":1,\"643\":1,\"646\":1}}],[\"distancemap\",{\"1\":{\"817\":3}}],[\"distance>\",{\"1\":{\"817\":1}}],[\"distance\",{\"1\":{\"566\":2,\"575\":4,\"817\":5}}],[\"district\",{\"1\":{\"443\":1}}],[\"distributed\",{\"1\":{\"66\":1}}],[\"distinguish\",{\"1\":{\"53\":1}}],[\"disablekeyprefix\",{\"1\":{\"706\":1}}],[\"disablecachingnullvalues\",{\"1\":{\"706\":1}}],[\"disable\",{\"1\":{\"22\":1,\"643\":1,\"646\":1}}],[\"dayofmonth\",{\"1\":{\"819\":2,\"820\":3}}],[\"days\",{\"1\":{\"742\":1}}],[\"da9b8387f72f1c529de32146\",{\"1\":{\"444\":2}}],[\"dao包等\",{\"1\":{\"245\":1}}],[\"dao把数据处理完后将结果交给service\",{\"1\":{\"244\":1}}],[\"dao层主要负责数据的增删改查操作\",{\"1\":{\"244\":1}}],[\"dao接口\",{\"1\":{\"224\":1}}],[\"dao\",{\"1\":{\"224\":1,\"245\":1,\"267\":2,\"269\":2,\"270\":1,\"275\":1,\"276\":1,\"278\":2,\"282\":2,\"283\":2,\"286\":4,\"288\":1,\"299\":2,\"302\":1,\"303\":1,\"304\":2,\"307\":1,\"310\":1,\"312\":1,\"655\":1,\"671\":1,\"706\":1}}],[\"dance\",{\"1\":{\"165\":3}}],[\"dangdang\",{\"1\":{\"143\":2}}],[\"danger\",{\"1\":{\"14\":2}}],[\"daemon\",{\"1\":{\"89\":1,\"643\":1}}],[\"daemonthread\",{\"1\":{\"89\":3}}],[\"daily\",{\"1\":{\"44\":1}}],[\"dateformatter=\",{\"1\":{\"616\":1}}],[\"date2\",{\"1\":{\"259\":2}}],[\"date2=2088\",{\"1\":{\"259\":1}}],[\"date1\",{\"1\":{\"259\":5}}],[\"date1=2088\",{\"1\":{\"259\":2}}],[\"date=2088\",{\"1\":{\"259\":3}}],[\"date\",{\"1\":{\"259\":16,\"319\":1,\"416\":1,\"418\":1,\"422\":1,\"423\":1,\"430\":4,\"518\":1,\"519\":1,\"558\":3,\"559\":1,\"561\":2,\"574\":2,\"616\":1,\"665\":5,\"675\":3,\"732\":4,\"763\":2}}],[\"datetimeformatter\",{\"1\":{\"409\":2,\"763\":1,\"819\":1,\"820\":1}}],[\"datetimeformat\",{\"1\":{\"259\":3}}],[\"datetime\",{\"1\":{\"9\":4,\"25\":2,\"422\":1,\"509\":4,\"557\":6,\"596\":4,\"616\":1,\"670\":2}}],[\"data<\",{\"1\":{\"817\":1}}],[\"datafromdb\",{\"1\":{\"703\":11,\"704\":3}}],[\"dataformat\",{\"1\":{\"339\":1}}],[\"dataformat<\",{\"1\":{\"339\":1}}],[\"data文件夹\",{\"1\":{\"681\":1}}],[\"data=\",{\"1\":{\"663\":1,\"670\":1}}],[\"data=text\",{\"1\":{\"422\":1}}],[\"datalist\",{\"1\":{\"433\":2}}],[\"datatype\",{\"1\":{\"400\":1}}],[\"datatypesize=4个字节\",{\"1\":{\"51\":1}}],[\"datatypesize\",{\"1\":{\"51\":2}}],[\"dataparam\",{\"1\":{\"259\":11}}],[\"database\",{\"1\":{\"368\":1,\"533\":1,\"551\":1}}],[\"databasename\",{\"1\":{\"283\":6,\"286\":6}}],[\"databind<\",{\"1\":{\"224\":1,\"256\":1,\"398\":1}}],[\"databufferutils\",{\"1\":{\"27\":1}}],[\"databuffer\",{\"1\":{\"27\":4}}],[\"databuffer>\",{\"1\":{\"27\":2}}],[\"databufferfactory\",{\"1\":{\"27\":1}}],[\"datasourceautoconfiguration\",{\"1\":{\"661\":1}}],[\"datasourcetransactionmanager\",{\"1\":{\"224\":2}}],[\"datasource\",{\"1\":{\"211\":1,\"224\":14,\"245\":1,\"295\":1,\"309\":4,\"310\":6,\"312\":5,\"595\":1,\"655\":2}}],[\"datasource>\",{\"1\":{\"175\":2,\"178\":2}}],[\"datasource=\",{\"1\":{\"22\":1}}],[\"dataindex\",{\"1\":{\"14\":9,\"616\":11}}],[\"data\",{\"1\":{\"14\":8,\"18\":1,\"22\":16,\"23\":14,\"27\":4,\"217\":2,\"220\":5,\"226\":7,\"237\":2,\"241\":1,\"259\":4,\"317\":8,\"319\":2,\"323\":3,\"355\":7,\"397\":1,\"398\":1,\"406\":1,\"409\":3,\"416\":1,\"422\":2,\"430\":7,\"431\":3,\"432\":1,\"453\":1,\"457\":1,\"525\":3,\"532\":2,\"533\":2,\"544\":3,\"551\":2,\"599\":1,\"616\":1,\"622\":1,\"623\":10,\"624\":2,\"630\":3,\"651\":3,\"652\":2,\"660\":1,\"663\":9,\"665\":2,\"666\":4,\"667\":1,\"670\":6,\"672\":3,\"673\":2,\"675\":1,\"681\":2,\"687\":1,\"698\":2,\"710\":2,\"721\":1,\"725\":1,\"756\":2,\"758\":1,\"810\":1,\"817\":1}}],[\"deny\",{\"1\":{\"691\":2}}],[\"derived\",{\"1\":{\"486\":1}}],[\"detail\",{\"1\":{\"443\":1,\"444\":10}}],[\"details\",{\"1\":{\"412\":1,\"566\":1,\"630\":1}}],[\"dead\",{\"1\":{\"354\":3,\"361\":1}}],[\"deadlockdemo\",{\"1\":{\"153\":1}}],[\"debug模式也会被当成服务器宕机\",{\"1\":{\"551\":1}}],[\"debug\",{\"1\":{\"344\":3,\"738\":1,\"741\":1,\"801\":1}}],[\"deprecated\",{\"1\":{\"512\":1}}],[\"deploy\",{\"1\":{\"317\":2}}],[\"dependencymanagement>\",{\"1\":{\"657\":1}}],[\"dependency>\",{\"1\":{\"18\":1,\"19\":1,\"27\":1,\"29\":4,\"175\":3,\"196\":2,\"224\":10,\"241\":4,\"245\":2,\"256\":1,\"269\":1,\"294\":2,\"303\":1,\"312\":6,\"313\":2,\"318\":3,\"319\":1,\"332\":1,\"339\":1,\"340\":1,\"395\":2,\"398\":3,\"405\":1,\"416\":5,\"429\":2,\"453\":2,\"512\":1,\"522\":1,\"524\":1,\"533\":2,\"551\":2,\"588\":1,\"589\":1,\"590\":1,\"591\":1,\"592\":1,\"593\":1,\"594\":1,\"599\":1,\"655\":7,\"657\":2,\"658\":1,\"659\":1,\"660\":1,\"661\":2,\"663\":1,\"665\":2,\"687\":1,\"690\":2,\"698\":3,\"704\":1,\"706\":1,\"726\":2,\"727\":1,\"728\":4,\"733\":2,\"770\":1,\"781\":1,\"817\":2}}],[\"dependencies<\",{\"1\":{\"657\":2}}],[\"dependencies>\",{\"1\":{\"175\":1,\"224\":1,\"245\":1,\"269\":1,\"312\":1,\"318\":1,\"416\":1,\"657\":1,\"728\":1,\"733\":1}}],[\"deductmoneybyid\",{\"1\":{\"208\":2}}],[\"deductbalance\",{\"1\":{\"208\":3,\"210\":1}}],[\"deduction\",{\"1\":{\"208\":1}}],[\"delconsumer\",{\"1\":{\"795\":1}}],[\"delval\",{\"1\":{\"663\":1}}],[\"del\",{\"1\":{\"549\":1,\"703\":1,\"780\":1}}],[\"deletebatchrelation\",{\"1\":{\"674\":3}}],[\"deletebyids\",{\"1\":{\"190\":2}}],[\"deletebyid\",{\"1\":{\"189\":1,\"196\":1}}],[\"deleterelation\",{\"1\":{\"674\":3}}],[\"deleteuser\",{\"1\":{\"608\":1}}],[\"deleted\",{\"1\":{\"215\":1}}],[\"deletemapping\",{\"1\":{\"208\":1,\"224\":1,\"262\":1}}],[\"delete>\",{\"1\":{\"189\":1,\"190\":1,\"674\":1}}],[\"delete\",{\"1\":{\"189\":1,\"190\":2,\"192\":1,\"215\":4,\"224\":7,\"226\":2,\"262\":15,\"319\":2,\"400\":2,\"430\":1,\"605\":3,\"608\":1,\"616\":1,\"663\":3,\"674\":2,\"682\":3,\"703\":4,\"728\":1,\"731\":1,\"751\":1,\"755\":1,\"758\":1,\"777\":1,\"778\":1}}],[\"delay头\",{\"1\":{\"361\":1}}],[\"delayval\",{\"1\":{\"355\":2}}],[\"delaymillis\",{\"1\":{\"355\":8}}],[\"delayed属性为true即可\",{\"1\":{\"361\":1}}],[\"delayed\",{\"1\":{\"355\":4}}],[\"delayexchange插件\",{\"0\":{\"355\":1}}],[\"delayqueue\",{\"1\":{\"112\":1}}],[\"delay\",{\"1\":{\"87\":3,\"355\":10,\"361\":1,\"416\":1,\"423\":1}}],[\"decript\",{\"1\":{\"675\":2}}],[\"decremented\",{\"1\":{\"140\":1}}],[\"decrement\",{\"1\":{\"92\":2}}],[\"decimal\",{\"1\":{\"670\":2}}],[\"declared表示私有\",{\"1\":{\"168\":1}}],[\"decoratedresponse\",{\"1\":{\"27\":2}}],[\"devel\",{\"1\":{\"639\":2}}],[\"develop\",{\"1\":{\"450\":1}}],[\"developers\",{\"1\":{\"450\":1,\"451\":1,\"453\":1,\"457\":1,\"458\":1}}],[\"developer\",{\"1\":{\"240\":1,\"665\":1}}],[\"development\",{\"1\":{\"175\":2,\"178\":2,\"496\":1}}],[\"devtools热部署\",{\"1\":{\"690\":1}}],[\"devtools<\",{\"1\":{\"589\":1,\"690\":1}}],[\"devtools\",{\"0\":{\"589\":1},\"1\":{\"690\":1}}],[\"dev\",{\"1\":{\"44\":1,\"504\":1,\"522\":1,\"611\":1,\"635\":1,\"804\":1}}],[\"demos\",{\"1\":{\"616\":1}}],[\"demodata\",{\"1\":{\"430\":4,\"431\":1,\"433\":4}}],[\"demo<\",{\"1\":{\"406\":1}}],[\"demo01\",{\"1\":{\"89\":1}}],[\"demo\",{\"1\":{\"29\":2,\"168\":1,\"169\":1,\"170\":1,\"171\":1,\"211\":1,\"241\":1,\"416\":1,\"423\":1,\"522\":2}}],[\"definded\",{\"1\":{\"675\":1}}],[\"defineprops<usercardlistprops>\",{\"1\":{\"534\":1}}],[\"defined\",{\"1\":{\"458\":1}}],[\"definition\",{\"1\":{\"9\":1,\"596\":1}}],[\"defaultredisscript<>\",{\"1\":{\"780\":1,\"789\":1}}],[\"defaultredisscript<long>\",{\"1\":{\"703\":1,\"780\":1,\"789\":1}}],[\"defaultcacheconfig\",{\"1\":{\"706\":1}}],[\"defaultcapacity\",{\"1\":{\"53\":2,\"54\":1}}],[\"defaultimage\",{\"1\":{\"675\":3}}],[\"defaultprops\",{\"1\":{\"663\":2,\"670\":1}}],[\"defaultapi2\",{\"1\":{\"522\":2,\"727\":2}}],[\"default=\",{\"1\":{\"175\":1,\"178\":2}}],[\"defaultvalue\",{\"1\":{\"143\":1,\"810\":1,\"817\":1}}],[\"defaultexecutor\",{\"1\":{\"120\":1,\"121\":3,\"122\":3,\"716\":1,\"717\":3,\"718\":3}}],[\"defaulted\",{\"1\":{\"64\":1}}],[\"defaultthreadfactory\",{\"1\":{\"116\":1,\"721\":1}}],[\"defaultsortby\",{\"1\":{\"220\":2}}],[\"defaults\",{\"1\":{\"71\":1}}],[\"defaultsettings\",{\"1\":{\"14\":1,\"613\":2}}],[\"defaultloginfailuremessage\",{\"1\":{\"14\":2,\"612\":2}}],[\"defaultloginsuccessmessage\",{\"1\":{\"14\":2,\"612\":2}}],[\"default\",{\"1\":{\"9\":4,\"14\":3,\"22\":1,\"23\":1,\"27\":1,\"53\":4,\"63\":3,\"64\":8,\"71\":4,\"216\":1,\"328\":2,\"491\":1,\"504\":1,\"509\":4,\"517\":1,\"532\":1,\"534\":1,\"557\":8,\"596\":4,\"615\":2,\"616\":2,\"630\":1,\"643\":1,\"651\":2,\"663\":1,\"668\":4,\"670\":2,\"687\":1,\"732\":2,\"764\":12,\"801\":5,\"806\":1,\"817\":3}}],[\"desktophttps\",{\"1\":{\"381\":1}}],[\"dest\",{\"1\":{\"523\":1,\"686\":1}}],[\"destination=39\",{\"1\":{\"445\":1}}],[\"destroymethod=\",{\"1\":{\"704\":1}}],[\"destroy\",{\"1\":{\"278\":1,\"279\":2,\"303\":3}}],[\"destory\",{\"1\":{\"278\":3,\"795\":1}}],[\"descfuture\",{\"1\":{\"721\":2}}],[\"descentity\",{\"1\":{\"675\":4}}],[\"descriptor\",{\"1\":{\"687\":1}}],[\"descript\",{\"1\":{\"666\":1,\"667\":1,\"670\":1}}],[\"description>\",{\"1\":{\"653\":1}}],[\"descriptions>\",{\"1\":{\"22\":1,\"23\":1}}],[\"descriptions\",{\"1\":{\"22\":9,\"23\":9}}],[\"description=\",{\"1\":{\"22\":1}}],[\"description\",{\"1\":{\"9\":1,\"14\":2,\"22\":2,\"23\":1,\"63\":1,\"180\":2,\"188\":4,\"191\":4,\"220\":3,\"224\":5,\"522\":1,\"557\":2,\"558\":3,\"559\":5,\"623\":4,\"624\":6,\"625\":5,\"627\":9,\"630\":2,\"670\":1,\"726\":1,\"727\":1}}],[\"desc=\",{\"1\":{\"534\":1}}],[\"desc\",{\"1\":{\"216\":4,\"670\":2,\"675\":1,\"684\":2,\"685\":2,\"710\":3,\"721\":1,\"731\":4}}],[\"desired\",{\"1\":{\"56\":1}}],[\"design\",{\"0\":{\"615\":1},\"1\":{\"7\":2,\"12\":3,\"14\":2,\"582\":2,\"583\":1,\"584\":1,\"610\":1,\"616\":3}}],[\"1天内同一个用户多次访问该网站\",{\"1\":{\"821\":1}}],[\"1的记录\",{\"1\":{\"809\":1}}],[\"1的时间戳为1640995200l\",{\"1\":{\"763\":1}}],[\"1为加载更多\",{\"1\":{\"732\":2}}],[\"17<\",{\"1\":{\"687\":2}}],[\"17\",{\"1\":{\"681\":8,\"687\":2}}],[\"1显示\",{\"1\":{\"663\":1}}],[\"1k\",{\"1\":{\"643\":1,\"646\":1}}],[\"14s\",{\"1\":{\"538\":1}}],[\"19<\",{\"1\":{\"453\":1}}],[\"19\",{\"1\":{\"418\":1,\"423\":1}}],[\"192\",{\"1\":{\"332\":1,\"681\":1,\"687\":1,\"691\":2,\"728\":2}}],[\"1f\",{\"1\":{\"418\":1,\"423\":1}}],[\"1是未支付\",{\"1\":{\"355\":1}}],[\"1分30秒\",{\"1\":{\"355\":1}}],[\"1s\",{\"1\":{\"342\":1}}],[\"1st\",{\"1\":{\"66\":1}}],[\"1这种请求\",{\"1\":{\"232\":1}}],[\"1正常\",{\"1\":{\"216\":1}}],[\"18688190004\",{\"1\":{\"211\":1}}],[\"18688190003\",{\"1\":{\"211\":2}}],[\"18688190002\",{\"1\":{\"211\":2}}],[\"18688190001\",{\"1\":{\"211\":2}}],[\"18688190000l\",{\"1\":{\"211\":1}}],[\"18688990011\",{\"1\":{\"196\":1,\"208\":1}}],[\"18\",{\"1\":{\"169\":1,\"395\":1,\"399\":1,\"400\":2,\"416\":1,\"418\":1,\"423\":1,\"429\":1,\"506\":1,\"518\":1,\"655\":1,\"663\":1,\"670\":2,\"687\":2,\"794\":1}}],[\"1获取所有的构造方法\",{\"1\":{\"168\":1}}],[\"1返回当前线程的中断状态\",{\"1\":{\"155\":1}}],[\"118\",{\"1\":{\"523\":4}}],[\"110000\",{\"1\":{\"443\":1}}],[\"114514\",{\"1\":{\"519\":1}}],[\"114\",{\"1\":{\"442\":1}}],[\"116780020\",{\"1\":{\"630\":1}}],[\"116\",{\"1\":{\"438\":1,\"439\":4,\"443\":1,\"444\":10,\"445\":2,\"815\":7}}],[\"11186623\",{\"1\":{\"665\":2}}],[\"111\",{\"1\":{\"143\":2,\"703\":3}}],[\"11\",{\"1\":{\"143\":2,\"319\":1,\"665\":1,\"681\":1,\"687\":1,\"691\":2,\"696\":1,\"731\":4}}],[\"1l\",{\"1\":{\"116\":1,\"196\":1,\"205\":1,\"207\":1,\"544\":1,\"573\":1,\"666\":1,\"667\":1,\"756\":1}}],[\"1390536764510310401l\",{\"1\":{\"733\":1}}],[\"130\",{\"1\":{\"728\":2}}],[\"131\",{\"1\":{\"443\":1}}],[\"13<\",{\"1\":{\"175\":1}}],[\"13\",{\"1\":{\"115\":1,\"713\":1,\"788\":1}}],[\"152\",{\"1\":{\"696\":1}}],[\"15分钟\",{\"1\":{\"369\":1}}],[\"150\",{\"1\":{\"332\":1}}],[\"15672\",{\"1\":{\"328\":3}}],[\"15\",{\"1\":{\"71\":2,\"93\":2,\"241\":1,\"261\":2,\"438\":1,\"523\":1,\"665\":1}}],[\"1等价于oldcap\",{\"1\":{\"71\":1}}],[\"125\",{\"1\":{\"696\":1}}],[\"12e5ed93\",{\"1\":{\"660\":1}}],[\"128g\",{\"1\":{\"670\":1}}],[\"128\",{\"1\":{\"596\":1}}],[\"121\",{\"1\":{\"566\":1,\"646\":2}}],[\"1212121\",{\"1\":{\"537\":1,\"538\":1,\"539\":1}}],[\"12\",{\"1\":{\"261\":1,\"420\":2,\"655\":1,\"704\":1}}],[\"12<\",{\"1\":{\"224\":1,\"313\":1,\"655\":1}}],[\"123321\",{\"1\":{\"396\":1}}],[\"123\",{\"1\":{\"196\":1,\"208\":1,\"211\":8,\"220\":1,\"332\":1,\"452\":1,\"537\":2,\"538\":2,\"539\":2,\"598\":4,\"682\":3}}],[\"123456\",{\"1\":{\"323\":1,\"379\":2,\"395\":1,\"396\":1,\"398\":1,\"533\":1,\"781\":1}}],[\"12345678\",{\"1\":{\"211\":1,\"537\":1,\"538\":1,\"539\":1,\"595\":1,\"651\":1,\"655\":2}}],[\"1234\",{\"1\":{\"175\":2,\"178\":2,\"400\":2}}],[\"127\",{\"1\":{\"27\":1,\"211\":1,\"295\":1,\"634\":1,\"691\":4}}],[\"12088\",{\"1\":{\"444\":1}}],[\"120\",{\"1\":{\"14\":1}}],[\"1640995200l\",{\"1\":{\"763\":1}}],[\"16g\",{\"1\":{\"710\":1}}],[\"16px\",{\"1\":{\"520\":1}}],[\"168\",{\"1\":{\"332\":1,\"681\":1,\"687\":1,\"691\":2,\"728\":2}}],[\"16<\",{\"1\":{\"224\":1,\"294\":1,\"312\":1}}],[\"167\",{\"1\":{\"171\":1}}],[\"16\",{\"1\":{\"22\":1,\"23\":1,\"63\":1,\"64\":2,\"66\":6,\"72\":1,\"518\":1,\"519\":1,\"537\":1,\"538\":1,\"539\":1,\"598\":1,\"609\":1}}],[\"1<<30\",{\"1\":{\"63\":1}}],[\"1<\",{\"1\":{\"19\":1,\"196\":1,\"224\":1,\"241\":3,\"245\":1,\"248\":1,\"653\":1,\"665\":1}}],[\"10l\",{\"1\":{\"756\":1}}],[\"105\",{\"1\":{\"646\":2}}],[\"1048576000\",{\"1\":{\"665\":1}}],[\"104198838\",{\"1\":{\"566\":1}}],[\"104585630\",{\"1\":{\"412\":1}}],[\"106\",{\"1\":{\"450\":1}}],[\"10运算\",{\"1\":{\"420\":1}}],[\"10<\",{\"1\":{\"339\":1}}],[\"10101920201920212\",{\"1\":{\"422\":1}}],[\"101\",{\"1\":{\"332\":1}}],[\"10mb\",{\"1\":{\"238\":1}}],[\"100运算情况下\",{\"1\":{\"575\":1}}],[\"1001\",{\"1\":{\"575\":1}}],[\"100+5\",{\"1\":{\"420\":1}}],[\"100mb\",{\"1\":{\"238\":1}}],[\"100\",{\"1\":{\"99\":1,\"115\":1,\"117\":1,\"286\":1,\"319\":2,\"372\":1,\"420\":3,\"431\":1,\"438\":3,\"538\":1,\"571\":1,\"575\":4,\"616\":2,\"685\":2,\"710\":1,\"713\":1,\"763\":1}}],[\"1000ms\",{\"1\":{\"342\":1,\"350\":1,\"398\":1}}],[\"1000000\",{\"1\":{\"347\":1}}],[\"100000\",{\"1\":{\"211\":2,\"539\":1,\"721\":1}}],[\"10000\",{\"1\":{\"171\":1,\"431\":1,\"539\":2,\"666\":1,\"685\":1}}],[\"10000l\",{\"1\":{\"27\":1}}],[\"1000\",{\"1\":{\"27\":1,\"87\":1,\"88\":1,\"109\":1,\"204\":2,\"206\":1,\"211\":2,\"396\":2,\"418\":1,\"423\":1,\"455\":1,\"457\":1,\"538\":1,\"539\":1,\"665\":2,\"670\":1,\"671\":1,\"703\":1,\"788\":1,\"794\":1}}],[\"10001\",{\"1\":{\"27\":4,\"666\":1,\"691\":1}}],[\"10002\",{\"1\":{\"16\":3,\"17\":1,\"27\":9}}],[\"10\",{\"1\":{\"53\":1,\"58\":2,\"83\":3,\"87\":1,\"92\":2,\"93\":6,\"105\":1,\"117\":1,\"119\":3,\"120\":4,\"143\":1,\"224\":3,\"245\":1,\"269\":1,\"283\":1,\"286\":1,\"312\":2,\"313\":1,\"420\":1,\"430\":1,\"432\":1,\"439\":1,\"468\":1,\"519\":1,\"523\":1,\"537\":2,\"538\":1,\"539\":1,\"544\":1,\"551\":1,\"573\":1,\"575\":1,\"598\":1,\"609\":1,\"685\":2,\"687\":1,\"704\":1,\"710\":7,\"712\":4,\"715\":3,\"716\":4,\"731\":8,\"732\":2,\"738\":1,\"755\":1,\"756\":1,\"758\":2,\"776\":1,\"781\":1,\"788\":1,\"815\":1}}],[\"1024\",{\"1\":{\"9\":1,\"510\":1,\"557\":1,\"596\":1,\"646\":1,\"665\":3,\"687\":3,\"764\":1,\"790\":2}}],[\"1\",{\"0\":{\"835\":1,\"837\":1},\"1\":{\"9\":1,\"14\":2,\"22\":2,\"23\":1,\"25\":1,\"26\":2,\"27\":5,\"29\":4,\"51\":3,\"56\":5,\"58\":1,\"63\":2,\"66\":3,\"67\":1,\"71\":4,\"72\":2,\"92\":1,\"93\":6,\"98\":1,\"104\":2,\"115\":1,\"117\":1,\"126\":1,\"132\":2,\"134\":1,\"143\":8,\"153\":2,\"156\":7,\"168\":1,\"169\":1,\"170\":1,\"171\":1,\"175\":4,\"176\":1,\"184\":2,\"190\":2,\"198\":1,\"205\":1,\"208\":1,\"211\":5,\"214\":1,\"215\":3,\"216\":1,\"219\":1,\"220\":5,\"224\":4,\"241\":2,\"245\":1,\"261\":1,\"262\":2,\"269\":1,\"270\":1,\"278\":1,\"286\":1,\"294\":2,\"295\":2,\"312\":3,\"313\":1,\"318\":3,\"319\":2,\"333\":1,\"339\":1,\"342\":1,\"344\":1,\"350\":1,\"352\":5,\"355\":4,\"363\":1,\"382\":2,\"383\":2,\"395\":4,\"396\":1,\"400\":6,\"415\":2,\"416\":1,\"418\":1,\"430\":2,\"439\":2,\"444\":10,\"452\":5,\"453\":1,\"454\":1,\"455\":1,\"469\":1,\"470\":1,\"474\":6,\"509\":1,\"519\":3,\"522\":1,\"524\":1,\"544\":1,\"551\":1,\"557\":3,\"558\":3,\"559\":1,\"562\":2,\"566\":18,\"567\":1,\"573\":1,\"596\":1,\"599\":9,\"605\":3,\"615\":1,\"616\":1,\"620\":1,\"634\":1,\"636\":1,\"639\":4,\"640\":2,\"643\":6,\"646\":1,\"655\":3,\"657\":1,\"661\":1,\"663\":5,\"664\":1,\"665\":1,\"666\":1,\"667\":1,\"668\":2,\"670\":8,\"673\":1,\"675\":3,\"681\":1,\"682\":9,\"685\":2,\"687\":2,\"688\":3,\"691\":6,\"698\":1,\"702\":1,\"703\":8,\"704\":3,\"705\":1,\"706\":1,\"710\":28,\"721\":1,\"726\":1,\"727\":2,\"728\":3,\"730\":2,\"731\":5,\"733\":2,\"738\":1,\"755\":1,\"756\":1,\"758\":1,\"763\":3,\"764\":7,\"765\":2,\"769\":2,\"770\":2,\"780\":4,\"781\":1,\"782\":19,\"789\":7,\"790\":3,\"794\":2,\"796\":11,\"801\":1,\"803\":3,\"804\":2,\"806\":1,\"810\":3,\"817\":3,\"819\":1,\"820\":2}}],[\"0版本引入的消息传递模型\",{\"1\":{\"793\":1}}],[\"0版本开始\",{\"1\":{\"347\":1}}],[\"04\",{\"1\":{\"731\":4}}],[\"0以后默认使用lettuce作为操作redis的客户端\",{\"1\":{\"698\":1}}],[\"0注意冒号后面要加空格\",{\"1\":{\"681\":1}}],[\"0l\",{\"1\":{\"663\":1,\"688\":1,\"725\":1}}],[\"0s\",{\"1\":{\"567\":1}}],[\"0x0f\",{\"1\":{\"452\":2}}],[\"00\",{\"1\":{\"731\":8}}],[\"000684b1e282e0084f6ff3fcc5d000\",{\"1\":{\"450\":1}}],[\"003785\",{\"1\":{\"444\":1}}],[\"0ed20a155aedbde956bfff9e\",{\"1\":{\"444\":2}}],[\"0px\",{\"1\":{\"438\":2}}],[\"02\",{\"1\":{\"418\":1,\"423\":1}}],[\"0开源协议的对象存储服务\",{\"1\":{\"316\":1}}],[\"085405\",{\"1\":{\"444\":1}}],[\"085153\",{\"1\":{\"444\":1}}],[\"085671\",{\"1\":{\"444\":1}}],[\"086083\",{\"1\":{\"444\":1}}],[\"086878\",{\"1\":{\"444\":1}}],[\"08\",{\"1\":{\"259\":14}}],[\"01116\",{\"1\":{\"445\":1}}],[\"010135\",{\"1\":{\"444\":1}}],[\"01\",{\"1\":{\"211\":14,\"416\":1}}],[\"07\",{\"1\":{\"211\":14}}],[\"05\",{\"1\":{\"143\":1}}],[\"0<\",{\"1\":{\"29\":2,\"224\":3,\"245\":1,\"256\":1,\"312\":1,\"318\":1,\"395\":2,\"524\":1,\"655\":2,\"704\":1}}],[\"0\",{\"1\":{\"9\":2,\"14\":5,\"19\":1,\"21\":2,\"22\":2,\"23\":1,\"25\":1,\"26\":3,\"27\":10,\"29\":2,\"54\":3,\"56\":4,\"58\":2,\"63\":1,\"64\":9,\"66\":3,\"67\":1,\"71\":8,\"72\":1,\"73\":1,\"83\":3,\"87\":5,\"91\":8,\"92\":4,\"93\":10,\"95\":1,\"99\":1,\"100\":2,\"107\":2,\"108\":1,\"109\":1,\"110\":4,\"117\":1,\"120\":1,\"140\":1,\"143\":1,\"151\":4,\"175\":4,\"210\":1,\"211\":3,\"214\":1,\"215\":4,\"220\":2,\"241\":1,\"248\":1,\"269\":1,\"270\":1,\"278\":1,\"286\":1,\"295\":3,\"319\":7,\"333\":1,\"347\":1,\"355\":1,\"395\":1,\"396\":2,\"398\":1,\"400\":2,\"409\":1,\"415\":1,\"416\":1,\"423\":1,\"430\":4,\"431\":1,\"432\":1,\"438\":2,\"439\":4,\"441\":5,\"442\":1,\"443\":1,\"444\":1,\"452\":4,\"474\":6,\"509\":3,\"518\":1,\"522\":2,\"523\":6,\"525\":2,\"533\":1,\"537\":4,\"538\":4,\"539\":6,\"544\":1,\"551\":3,\"557\":5,\"558\":3,\"559\":4,\"560\":1,\"561\":2,\"562\":1,\"566\":7,\"573\":2,\"574\":2,\"575\":5,\"593\":1,\"596\":5,\"598\":1,\"599\":1,\"605\":4,\"608\":1,\"612\":1,\"616\":1,\"624\":1,\"625\":1,\"630\":1,\"634\":2,\"636\":2,\"640\":3,\"643\":6,\"653\":1,\"655\":2,\"657\":1,\"661\":2,\"663\":8,\"665\":5,\"666\":2,\"667\":2,\"668\":2,\"670\":10,\"673\":2,\"674\":1,\"675\":14,\"681\":3,\"685\":2,\"688\":2,\"691\":8,\"696\":1,\"703\":1,\"706\":1,\"710\":18,\"716\":1,\"726\":2,\"727\":2,\"728\":1,\"732\":2,\"733\":1,\"738\":1,\"763\":6,\"764\":2,\"769\":1,\"770\":5,\"780\":1,\"782\":2,\"788\":1,\"789\":4,\"790\":4,\"794\":1,\"796\":7,\"801\":2,\"805\":1,\"806\":1,\"810\":3,\"820\":8,\"821\":1}}],[\"tuple\",{\"1\":{\"810\":3}}],[\"tl\",{\"1\":{\"740\":4}}],[\"tdikru\",{\"1\":{\"453\":1}}],[\"td>\",{\"1\":{\"418\":16,\"419\":8}}],[\"tt超时分为两种情况\",{\"1\":{\"361\":1}}],[\"ttl\",{\"1\":{\"354\":3,\"361\":1,\"741\":2,\"742\":1,\"749\":1,\"751\":1,\"752\":2,\"755\":2,\"756\":1,\"758\":5,\"788\":1}}],[\"tt>\",{\"1\":{\"56\":1,\"64\":7,\"66\":6,\"67\":6}}],[\"tmp\",{\"1\":{\"318\":1,\"319\":1,\"423\":1,\"733\":2}}],[\"tbl\",{\"1\":{\"224\":6}}],[\"tb\",{\"1\":{\"175\":1,\"179\":1,\"180\":2,\"181\":1,\"182\":3,\"184\":1,\"185\":3,\"186\":1,\"188\":2,\"189\":1,\"190\":2,\"191\":1,\"192\":1,\"204\":2,\"205\":1,\"207\":1,\"208\":1,\"217\":1,\"468\":2,\"764\":6,\"801\":4,\"806\":1,\"809\":1}}],[\"txt文件\",{\"1\":{\"687\":1}}],[\"txt\",{\"1\":{\"171\":1,\"241\":4,\"665\":2,\"788\":1}}],[\"txt结尾的文件\",{\"1\":{\"47\":1}}],[\"t2时刻发布了新的记录\",{\"1\":{\"809\":1}}],[\"t2线程获取到a锁\",{\"1\":{\"153\":1}}],[\"t2线程持有a锁\",{\"1\":{\"153\":1}}],[\"t2\",{\"1\":{\"152\":1,\"153\":1,\"155\":2}}],[\"t1线程获取到b锁\",{\"1\":{\"153\":1}}],[\"t1线程持有a锁\",{\"1\":{\"153\":1}}],[\"t1\",{\"1\":{\"152\":1,\"153\":1,\"155\":3}}],[\"t>\",{\"1\":{\"120\":1,\"121\":3,\"143\":1,\"716\":1,\"717\":3}}],[\"tar\",{\"1\":{\"639\":4}}],[\"target=\",{\"1\":{\"616\":1}}],[\"target\",{\"1\":{\"83\":2,\"611\":1,\"643\":1,\"668\":1}}],[\"tamparr\",{\"1\":{\"452\":4}}],[\"tap\",{\"1\":{\"380\":1}}],[\"taps\",{\"1\":{\"380\":1}}],[\"taglist2\",{\"1\":{\"566\":3}}],[\"taglist1\",{\"1\":{\"566\":3}}],[\"taglist\",{\"1\":{\"518\":4,\"566\":2,\"575\":4}}],[\"tag>\",{\"1\":{\"518\":1,\"534\":1}}],[\"tagnamelist\",{\"1\":{\"512\":9,\"531\":3,\"532\":1}}],[\"tagname\",{\"1\":{\"509\":2,\"511\":2,\"512\":4}}],[\"tag=银行\",{\"1\":{\"444\":1}}],[\"tag\",{\"1\":{\"355\":1,\"509\":1,\"511\":2,\"518\":6,\"534\":3,\"732\":2}}],[\"tags>\",{\"1\":{\"534\":1}}],[\"tagsstr\",{\"1\":{\"512\":3}}],[\"tags\",{\"1\":{\"208\":1,\"510\":1,\"512\":1,\"518\":1,\"531\":3,\"532\":5,\"534\":1,\"566\":4,\"567\":1,\"575\":8,\"710\":2}}],[\"taobao\",{\"1\":{\"143\":2}}],[\"take\",{\"1\":{\"112\":5,\"142\":1,\"790\":1}}],[\"task3\",{\"1\":{\"142\":1}}],[\"task2\",{\"1\":{\"117\":3,\"142\":1}}],[\"task1\",{\"1\":{\"117\":3,\"142\":1}}],[\"task\",{\"1\":{\"83\":3,\"105\":3,\"142\":2,\"143\":1,\"409\":1,\"712\":3,\"763\":2}}],[\"tabbar>\",{\"1\":{\"507\":1,\"518\":1}}],[\"tabbar\",{\"1\":{\"507\":7,\"518\":7}}],[\"tab栏\",{\"1\":{\"505\":1}}],[\"tab\",{\"1\":{\"66\":8,\"67\":6,\"72\":2}}],[\"tablelogic\",{\"1\":{\"663\":1}}],[\"tablelistener\",{\"1\":{\"525\":2}}],[\"tabledropdown\",{\"1\":{\"616\":1}}],[\"table>\",{\"1\":{\"418\":2}}],[\"tablefield注解给字段名添加转义字符\",{\"1\":{\"200\":1}}],[\"tablefield\",{\"0\":{\"200\":1},\"1\":{\"217\":2,\"670\":1,\"803\":1}}],[\"tableid\",{\"0\":{\"199\":1},\"1\":{\"666\":1,\"667\":1}}],[\"tableprefix=sms\",{\"1\":{\"655\":1}}],[\"tableprefix\",{\"1\":{\"198\":2}}],[\"tablename\",{\"0\":{\"198\":1},\"1\":{\"217\":1,\"666\":1,\"667\":1}}],[\"tables\",{\"1\":{\"66\":1}}],[\"tablesizefor\",{\"1\":{\"64\":1}}],[\"table\",{\"1\":{\"9\":1,\"47\":2,\"63\":9,\"66\":4,\"67\":1,\"71\":2,\"110\":1,\"486\":1,\"509\":1,\"510\":1,\"557\":2,\"596\":1,\"616\":1,\"670\":8,\"672\":1,\"764\":3,\"801\":2,\"806\":1}}],[\"two\",{\"1\":{\"63\":2,\"66\":1}}],[\"t\",{\"1\":{\"58\":4,\"66\":2,\"83\":2,\"93\":6,\"120\":3,\"121\":3,\"122\":6,\"142\":1,\"143\":8,\"171\":2,\"355\":3,\"468\":2,\"623\":4,\"624\":1,\"630\":1,\"643\":3,\"716\":3,\"717\":3,\"718\":6}}],[\"tcp常见的标志位\",{\"1\":{\"47\":1}}],[\"tcp建立的过程\",{\"1\":{\"47\":1}}],[\"typora+picgo\",{\"1\":{\"44\":1}}],[\"typora+picgo+sm\",{\"1\":{\"43\":1}}],[\"typora中无法验证上传\",{\"1\":{\"44\":1}}],[\"typora\",{\"1\":{\"43\":1}}],[\"typeid\",{\"1\":{\"816\":2,\"817\":7}}],[\"typedtuple<string>\",{\"1\":{\"810\":1}}],[\"typedtuple<string>>\",{\"1\":{\"810\":1}}],[\"typedtuples\",{\"1\":{\"810\":5}}],[\"typejson\",{\"1\":{\"747\":3}}],[\"typereference<attrresponsevo>\",{\"1\":{\"710\":1}}],[\"typereference<map<string\",{\"1\":{\"698\":1,\"702\":1}}],[\"type>\",{\"1\":{\"657\":2}}],[\"typeservice\",{\"1\":{\"747\":1}}],[\"types\",{\"1\":{\"643\":2,\"646\":2}}],[\"typescript\",{\"1\":{\"22\":1}}],[\"typetoken<list<string>>\",{\"1\":{\"566\":2,\"575\":4}}],[\"typetoken<set<string>>\",{\"1\":{\"512\":1}}],[\"type这条sql的连接的类型\",{\"1\":{\"486\":1}}],[\"type为text\",{\"1\":{\"451\":1}}],[\"type字段\",{\"1\":{\"451\":1}}],[\"typehandler\",{\"1\":{\"217\":2}}],[\"typealiases\",{\"1\":{\"179\":1}}],[\"typealiases>\",{\"1\":{\"175\":1,\"179\":1}}],[\"type\",{\"1\":{\"14\":2,\"23\":1,\"58\":1,\"169\":1,\"201\":3,\"215\":2,\"216\":1,\"224\":5,\"232\":2,\"245\":1,\"338\":4,\"340\":1,\"344\":1,\"355\":1,\"400\":3,\"438\":1,\"444\":2,\"451\":1,\"486\":2,\"518\":1,\"533\":1,\"609\":2,\"616\":4,\"630\":1,\"655\":2,\"668\":2,\"670\":3,\"674\":1,\"682\":5,\"686\":5,\"710\":17,\"732\":12,\"739\":1,\"742\":1,\"747\":1,\"758\":4,\"764\":2,\"817\":2}}],[\"type=redis\",{\"1\":{\"706\":1}}],[\"type=single\",{\"1\":{\"681\":1}}],[\"type=client\",{\"1\":{\"457\":2}}],[\"type=webgl\",{\"1\":{\"438\":1}}],[\"type=\",{\"1\":{\"14\":5,\"22\":1,\"23\":1,\"175\":4,\"178\":4,\"181\":1,\"237\":5,\"286\":2,\"406\":2,\"438\":2,\"518\":1,\"520\":2,\"534\":2}}],[\"termquery\",{\"1\":{\"710\":4}}],[\"term子句过滤hasstock字段为\",{\"1\":{\"710\":1}}],[\"term子句过滤catalogid为\",{\"1\":{\"710\":1}}],[\"termsquery\",{\"1\":{\"710\":1}}],[\"terms子句过滤brandid为\",{\"1\":{\"710\":1}}],[\"termsaggregationbuilder\",{\"1\":{\"687\":1,\"710\":3}}],[\"terms\",{\"1\":{\"685\":4,\"687\":3,\"710\":21}}],[\"termsofserviceurl\",{\"1\":{\"522\":1}}],[\"term\",{\"1\":{\"682\":1,\"685\":2,\"710\":4}}],[\"terminate\",{\"1\":{\"81\":1}}],[\"terminated\",{\"1\":{\"47\":1,\"81\":2}}],[\"teamservice\",{\"1\":{\"564\":1,\"565\":1}}],[\"teamstatusenum\",{\"1\":{\"558\":1,\"559\":1,\"560\":1,\"561\":2,\"574\":2}}],[\"teamhasjoinnum\",{\"1\":{\"562\":2}}],[\"teamquitdto\",{\"1\":{\"562\":4}}],[\"teamquerydto\",{\"1\":{\"559\":10,\"564\":5,\"565\":5}}],[\"teamjoindto\",{\"1\":{\"561\":5,\"574\":5}}],[\"teamupdatedto\",{\"1\":{\"560\":6}}],[\"teamuservo\",{\"1\":{\"559\":6}}],[\"teamuservolist\",{\"1\":{\"559\":3}}],[\"teamlist\",{\"1\":{\"559\":5,\"564\":2,\"565\":2}}],[\"teamid\",{\"1\":{\"557\":2,\"558\":3,\"559\":4,\"561\":6,\"562\":8,\"564\":1,\"574\":6}}],[\"team\",{\"1\":{\"507\":2,\"517\":4,\"518\":2,\"557\":3,\"558\":13,\"559\":4,\"560\":6,\"561\":9,\"562\":5,\"574\":9}}],[\"teardown\",{\"1\":{\"395\":1}}],[\"teacher\",{\"1\":{\"171\":3}}],[\"tempparenttag\",{\"1\":{\"518\":3}}],[\"tempchildren\",{\"1\":{\"518\":2}}],[\"tempclient\",{\"1\":{\"23\":2}}],[\"template>\",{\"1\":{\"506\":1,\"507\":2,\"518\":2,\"519\":1,\"520\":1,\"534\":3,\"663\":1}}],[\"templatefilename\",{\"1\":{\"432\":2}}],[\"templateexception\",{\"1\":{\"423\":1}}],[\"templates\",{\"1\":{\"423\":1}}],[\"templates目录下面创建一个文件01\",{\"1\":{\"416\":1}}],[\"template\",{\"1\":{\"342\":1,\"399\":7,\"416\":1,\"423\":5,\"733\":3}}],[\"tempint\",{\"1\":{\"110\":10}}],[\"tenantlineinnerinterceptor\",{\"1\":{\"218\":1}}],[\"ten\",{\"1\":{\"54\":1}}],[\"testredisson\",{\"1\":{\"781\":1}}],[\"testidworker\",{\"1\":{\"763\":1}}],[\"testinsert\",{\"1\":{\"196\":1}}],[\"test等\",{\"1\":{\"660\":1}}],[\"testupload\",{\"1\":{\"665\":2}}],[\"testupdatewrapper\",{\"1\":{\"205\":1}}],[\"testupdatebyquerywrapper\",{\"1\":{\"204\":1}}],[\"testupdatebyid\",{\"1\":{\"196\":1}}],[\"testuser\",{\"1\":{\"598\":1}}],[\"testexcel\",{\"1\":{\"525\":1}}],[\"test4\",{\"1\":{\"445\":1}}],[\"test3\",{\"1\":{\"444\":1}}],[\"test2\",{\"1\":{\"443\":1}}],[\"testmoban\",{\"1\":{\"432\":1}}],[\"testzset\",{\"1\":{\"400\":1}}],[\"testlist\",{\"1\":{\"400\":1}}],[\"testlambdawrapper\",{\"1\":{\"206\":1}}],[\"testhash\",{\"1\":{\"395\":1,\"400\":1}}],[\"testjedis\",{\"1\":{\"395\":1}}],[\"testpathbuild\",{\"1\":{\"430\":5}}],[\"testpageout\",{\"1\":{\"347\":1}}],[\"testpagequery\",{\"1\":{\"219\":1}}],[\"testpojo\",{\"1\":{\"399\":1}}],[\"testpublisherdelaymessage\",{\"1\":{\"355\":1}}],[\"testcommon\",{\"1\":{\"400\":1}}],[\"testconfirmcallback\",{\"1\":{\"344\":1}}],[\"testcustomsqlupdate\",{\"1\":{\"207\":1}}],[\"testfileutil\",{\"1\":{\"430\":7,\"431\":1,\"432\":2,\"433\":1}}],[\"testfindall\",{\"1\":{\"313\":1}}],[\"testfindbyid\",{\"1\":{\"313\":1}}],[\"testfanoutexchange\",{\"1\":{\"335\":1}}],[\"testworkqueue\",{\"1\":{\"333\":1}}],[\"testgetbyid\",{\"1\":{\"224\":1}}],[\"test<\",{\"1\":{\"224\":1,\"313\":1,\"318\":1,\"416\":1}}],[\"testdeletebylogic\",{\"1\":{\"215\":1}}],[\"testdeleteuser\",{\"1\":{\"196\":1}}],[\"teststringredistemplate\",{\"1\":{\"698\":1}}],[\"teststring\",{\"1\":{\"395\":1,\"399\":1,\"400\":1}}],[\"testset\",{\"1\":{\"400\":1}}],[\"testsendmap\",{\"1\":{\"339\":1}}],[\"testsendtopicexchange\",{\"1\":{\"337\":1}}],[\"testsenddirectexchange\",{\"1\":{\"336\":1}}],[\"testselectbyid\",{\"1\":{\"196\":1}}],[\"testselectbycondition\",{\"1\":{\"184\":1}}],[\"testsaveshop\",{\"1\":{\"756\":1}}],[\"testsaveuser\",{\"1\":{\"400\":1}}],[\"testsavebatch\",{\"1\":{\"211\":1}}],[\"testsaveonebyone\",{\"1\":{\"211\":1}}],[\"testadduser\",{\"1\":{\"208\":1,\"598\":1}}],[\"testquery\",{\"1\":{\"208\":1}}],[\"testquerywrapper\",{\"1\":{\"204\":1}}],[\"testquerybyids\",{\"1\":{\"196\":1}}],[\"test=\",{\"1\":{\"185\":6,\"186\":3,\"191\":5}}],[\"test1\",{\"1\":{\"87\":2,\"147\":2}}],[\"test\",{\"1\":{\"19\":1,\"21\":1,\"58\":1,\"92\":1,\"93\":1,\"95\":1,\"104\":1,\"107\":1,\"108\":1,\"110\":2,\"112\":1,\"117\":1,\"142\":2,\"143\":3,\"147\":2,\"151\":7,\"156\":2,\"165\":1,\"167\":1,\"168\":1,\"169\":1,\"170\":1,\"171\":1,\"175\":3,\"178\":1,\"184\":1,\"196\":5,\"204\":2,\"205\":1,\"206\":1,\"207\":1,\"208\":2,\"211\":2,\"215\":1,\"219\":1,\"224\":2,\"313\":2,\"319\":2,\"332\":2,\"333\":1,\"335\":1,\"336\":1,\"337\":1,\"339\":1,\"344\":1,\"347\":1,\"355\":1,\"395\":2,\"399\":2,\"400\":7,\"416\":1,\"423\":2,\"430\":5,\"431\":1,\"432\":1,\"433\":1,\"442\":2,\"443\":1,\"444\":1,\"445\":1,\"522\":1,\"537\":1,\"539\":3,\"551\":5,\"575\":1,\"598\":1,\"655\":6,\"659\":1,\"660\":2,\"661\":1,\"663\":1,\"665\":2,\"682\":1,\"687\":2,\"698\":1,\"733\":2,\"756\":1,\"763\":1,\"781\":1,\"788\":1,\"816\":1}}],[\"textmessage\",{\"1\":{\"453\":4,\"454\":3}}],[\"text=\",{\"1\":{\"422\":1,\"506\":2,\"518\":2}}],[\"text当前页面名称去查找\",{\"1\":{\"261\":1}}],[\"textarea\",{\"1\":{\"14\":1,\"22\":1,\"23\":1}}],[\"text\",{\"1\":{\"9\":2,\"14\":7,\"237\":2,\"261\":1,\"318\":1,\"319\":1,\"344\":1,\"406\":4,\"438\":3,\"451\":2,\"453\":1,\"454\":1,\"518\":7,\"523\":1,\"616\":3,\"643\":3,\"646\":3,\"686\":1,\"687\":2,\"710\":1,\"733\":2}}],[\"thirdparty\",{\"1\":{\"665\":3}}],[\"third\",{\"1\":{\"665\":2}}],[\"this\",{\"1\":{\"17\":2,\"22\":1,\"26\":1,\"53\":2,\"54\":4,\"56\":4,\"63\":4,\"64\":6,\"66\":2,\"67\":2,\"71\":1,\"92\":4,\"117\":2,\"140\":5,\"142\":4,\"143\":1,\"165\":2,\"208\":1,\"210\":2,\"216\":2,\"220\":3,\"226\":5,\"230\":6,\"270\":1,\"278\":1,\"279\":1,\"282\":2,\"283\":2,\"285\":1,\"286\":2,\"304\":1,\"355\":2,\"430\":1,\"457\":1,\"491\":2,\"493\":1,\"512\":2,\"558\":2,\"559\":1,\"560\":2,\"562\":2,\"566\":2,\"575\":7,\"623\":7,\"625\":3,\"627\":6,\"663\":4,\"666\":2,\"670\":4,\"672\":5,\"673\":4,\"674\":1,\"675\":4,\"688\":1,\"690\":2,\"696\":1,\"697\":1,\"702\":2,\"706\":2,\"721\":1,\"725\":1,\"738\":2,\"741\":1,\"742\":1,\"747\":2,\"751\":2,\"752\":1,\"755\":1,\"756\":2,\"758\":7,\"763\":1,\"765\":1,\"769\":2,\"770\":6,\"777\":2,\"788\":1,\"790\":2,\"802\":1,\"803\":6,\"804\":2,\"806\":3,\"807\":2,\"809\":1,\"810\":3,\"817\":2}}],[\"thumb=\",{\"1\":{\"534\":1}}],[\"thoughtworks\",{\"1\":{\"453\":1}}],[\"those\",{\"1\":{\"63\":1}}],[\"thymeleaf<\",{\"1\":{\"690\":1}}],[\"thymeleaf\",{\"1\":{\"415\":2,\"690\":1,\"696\":1}}],[\"than\",{\"1\":{\"241\":1}}],[\"that\",{\"1\":{\"56\":2,\"63\":3,\"66\":4,\"67\":1,\"81\":3,\"140\":2,\"142\":3}}],[\"through\",{\"1\":{\"750\":1}}],[\"throwable\",{\"1\":{\"140\":2,\"165\":1,\"230\":2,\"344\":1}}],[\"throwable>\",{\"1\":{\"120\":3,\"716\":3}}],[\"throws\",{\"1\":{\"54\":2,\"56\":1,\"64\":3,\"83\":1,\"87\":3,\"92\":2,\"105\":2,\"107\":1,\"108\":1,\"110\":2,\"117\":1,\"119\":2,\"120\":2,\"142\":5,\"143\":2,\"147\":1,\"155\":3,\"156\":3,\"165\":1,\"167\":1,\"168\":1,\"169\":1,\"170\":1,\"171\":2,\"175\":1,\"184\":1,\"232\":6,\"233\":3,\"239\":1,\"241\":3,\"277\":1,\"279\":2,\"319\":1,\"332\":1,\"333\":3,\"339\":2,\"344\":2,\"355\":1,\"400\":1,\"423\":1,\"453\":2,\"665\":2,\"687\":2,\"688\":1,\"704\":4,\"712\":3,\"715\":2,\"716\":2,\"721\":1,\"733\":3,\"739\":1,\"742\":3,\"763\":1,\"781\":1}}],[\"throw\",{\"1\":{\"14\":1,\"17\":1,\"21\":5,\"23\":3,\"26\":1,\"54\":1,\"56\":1,\"64\":2,\"87\":2,\"88\":1,\"89\":2,\"104\":2,\"110\":2,\"140\":1,\"142\":1,\"143\":3,\"208\":2,\"210\":2,\"319\":2,\"453\":1,\"512\":1,\"531\":1,\"544\":1,\"551\":2,\"558\":11,\"559\":1,\"560\":5,\"561\":8,\"562\":4,\"564\":1,\"565\":1,\"573\":2,\"574\":8,\"607\":3,\"612\":1,\"704\":3,\"710\":1,\"755\":1,\"756\":1,\"758\":1,\"788\":1,\"801\":1}}],[\"thr\",{\"1\":{\"120\":1,\"716\":1}}],[\"threw\",{\"1\":{\"140\":1}}],[\"threadid\",{\"1\":{\"777\":2,\"778\":4}}],[\"thread1\",{\"1\":{\"776\":1}}],[\"threadlocal<>\",{\"1\":{\"740\":1}}],[\"threadlocal<userdto>\",{\"1\":{\"740\":1}}],[\"threadlocalrandom\",{\"1\":{\"143\":1}}],[\"threaddemo\",{\"1\":{\"712\":1}}],[\"threaddemo06\",{\"1\":{\"89\":1}}],[\"threaddemo05\",{\"1\":{\"88\":1}}],[\"threaddemo04\",{\"1\":{\"87\":1}}],[\"threaddemo03\",{\"1\":{\"83\":1}}],[\"threaddemo02\",{\"1\":{\"83\":1}}],[\"threaddemo01\",{\"1\":{\"83\":1}}],[\"threadfactory\",{\"1\":{\"115\":4,\"713\":4}}],[\"threadpoolconfigproperties\",{\"1\":{\"721\":3}}],[\"threadpool\",{\"1\":{\"143\":4}}],[\"threadpoolexecutor\",{\"1\":{\"114\":1,\"115\":2,\"116\":2,\"539\":1,\"713\":1,\"721\":4}}],[\"threadpool线程池\",{\"0\":{\"113\":1}}],[\"threadstartfailed\",{\"1\":{\"140\":1}}],[\"threadstatus\",{\"1\":{\"140\":1}}],[\"threads\",{\"1\":{\"89\":2,\"140\":2}}],[\"thread\",{\"1\":{\"81\":27,\"83\":14,\"87\":6,\"88\":5,\"89\":4,\"91\":8,\"92\":4,\"93\":6,\"95\":2,\"99\":1,\"100\":1,\"103\":5,\"104\":6,\"105\":2,\"107\":6,\"108\":2,\"109\":4,\"110\":16,\"114\":1,\"119\":2,\"120\":8,\"132\":5,\"140\":5,\"142\":8,\"143\":6,\"151\":4,\"152\":3,\"153\":2,\"155\":13,\"156\":20,\"333\":3,\"344\":1,\"430\":1,\"539\":2,\"549\":1,\"561\":1,\"574\":1,\"703\":1,\"704\":6,\"712\":9,\"715\":2,\"716\":8,\"721\":5,\"755\":1,\"776\":1,\"777\":1,\"778\":2,\"780\":1}}],[\"threshold=8\",{\"1\":{\"66\":1}}],[\"threshold\",{\"1\":{\"63\":2,\"64\":1,\"66\":2,\"71\":6}}],[\"then\",{\"1\":{\"140\":1,\"532\":1,\"663\":1,\"703\":1,\"780\":1,\"782\":3,\"789\":2,\"796\":2}}],[\"thencombineasync\",{\"1\":{\"122\":2,\"718\":2}}],[\"thencombine\",{\"1\":{\"122\":2,\"143\":1,\"718\":2}}],[\"thenrun方法默认在调用该方法的线程中执行\",{\"1\":{\"143\":1}}],[\"thenrun方法\",{\"1\":{\"143\":1}}],[\"thenrunasync方法会使用默认的forkjoinpool或者通过传递给它的executor在一个新的线程中执行runnable\",{\"1\":{\"143\":1}}],[\"thenrunasync方法\",{\"1\":{\"143\":1}}],[\"thenrunasync\",{\"1\":{\"121\":4,\"717\":4}}],[\"thenrun\",{\"1\":{\"121\":2,\"143\":2,\"717\":2}}],[\"thenacceptbothasync\",{\"1\":{\"122\":2,\"718\":2}}],[\"thenacceptboth\",{\"1\":{\"122\":2,\"718\":2}}],[\"thenacceptasync\",{\"1\":{\"121\":4,\"717\":4,\"721\":3}}],[\"thenaccept\",{\"1\":{\"121\":2,\"143\":4,\"717\":2}}],[\"thenapply和handle区别\",{\"1\":{\"143\":1}}],[\"thenapplyasync\",{\"1\":{\"121\":4,\"717\":4}}],[\"thenapply\",{\"1\":{\"121\":2,\"143\":5,\"717\":2}}],[\"there\",{\"1\":{\"66\":2,\"67\":1}}],[\"their\",{\"1\":{\"56\":1}}],[\"they\",{\"1\":{\"54\":1}}],[\"the\",{\"1\":{\"53\":10,\"54\":10,\"56\":12,\"63\":15,\"64\":18,\"66\":17,\"67\":8,\"81\":10,\"140\":8,\"142\":9,\"241\":2,\"643\":2,\"665\":5,\"687\":2,\"691\":3,\"703\":1,\"728\":4}}],[\"tonumber\",{\"1\":{\"789\":1,\"796\":1}}],[\"toepochsecond\",{\"1\":{\"763\":2}}],[\"toedit\",{\"1\":{\"519\":5}}],[\"toseconds\",{\"1\":{\"758\":1}}],[\"tostring\",{\"1\":{\"27\":1,\"100\":1,\"241\":2,\"253\":1,\"288\":1,\"319\":3,\"344\":1,\"406\":1,\"430\":1,\"452\":1,\"687\":2,\"688\":1,\"690\":5,\"697\":5,\"698\":1,\"703\":2,\"704\":1,\"710\":1,\"733\":1,\"738\":1,\"741\":3,\"770\":4,\"777\":1,\"778\":1,\"788\":2,\"789\":3,\"790\":2,\"796\":2,\"803\":4,\"804\":4,\"807\":2,\"809\":1,\"816\":2,\"817\":1}}],[\"tobean\",{\"1\":{\"747\":1,\"752\":1,\"755\":1,\"756\":2,\"758\":3}}],[\"tobuilder\",{\"1\":{\"687\":1}}],[\"tobase64string\",{\"1\":{\"665\":1}}],[\"tobytearray\",{\"1\":{\"319\":1}}],[\"top5\",{\"1\":{\"805\":5}}],[\"topuserpairlist\",{\"1\":{\"566\":2,\"575\":2}}],[\"top\",{\"0\":{\"567\":1},\"1\":{\"534\":1,\"567\":2,\"575\":1}}],[\"topics\",{\"1\":{\"523\":1}}],[\"topic类型exchange可以让队列在绑定bindingkey\",{\"1\":{\"337\":1}}],[\"topic交换机\",{\"0\":{\"337\":1},\"1\":{\"338\":1}}],[\"topic\",{\"1\":{\"334\":1,\"337\":3,\"338\":6,\"340\":3,\"355\":1}}],[\"to=\",{\"1\":{\"518\":3}}],[\"to=5\",{\"1\":{\"442\":1}}],[\"toxml\",{\"1\":{\"453\":1,\"454\":1,\"455\":1}}],[\"tousername\",{\"1\":{\"453\":3,\"454\":1,\"455\":1}}],[\"touppercase\",{\"1\":{\"143\":1,\"452\":1}}],[\"tokenkey\",{\"1\":{\"741\":3,\"788\":3}}],[\"token\",{\"0\":{\"457\":1},\"1\":{\"452\":2,\"457\":12,\"687\":1,\"725\":6,\"728\":7,\"741\":3,\"742\":3,\"788\":5}}],[\"toast\",{\"1\":{\"409\":3}}],[\"toarray\",{\"1\":{\"54\":1,\"58\":2,\"539\":1,\"670\":1}}],[\"todatestring\",{\"1\":{\"519\":1}}],[\"today\",{\"1\":{\"422\":3}}],[\"todaystr\",{\"1\":{\"319\":2}}],[\"todo\",{\"1\":{\"27\":1,\"492\":1,\"520\":1,\"599\":1,\"605\":1,\"616\":1,\"672\":2,\"675\":3,\"688\":8,\"702\":1,\"706\":1}}],[\"tools\",{\"1\":{\"317\":8,\"323\":2,\"373\":1,\"426\":3,\"651\":10,\"652\":3,\"681\":4}}],[\"toolbarrender=\",{\"1\":{\"14\":1}}],[\"totext\",{\"1\":{\"261\":2}}],[\"totalpage\",{\"1\":{\"710\":3}}],[\"totallist\",{\"1\":{\"526\":2}}],[\"totalnum\",{\"1\":{\"25\":1,\"26\":2}}],[\"total\",{\"1\":{\"14\":3,\"22\":5,\"219\":3,\"220\":2}}],[\"tojsonlist\",{\"1\":{\"261\":2}}],[\"tojsonpojo\",{\"1\":{\"261\":2}}],[\"tojsonstring\",{\"1\":{\"687\":1,\"688\":1,\"698\":1,\"702\":1}}],[\"tojsonstr\",{\"1\":{\"16\":1,\"17\":1,\"747\":2,\"751\":1,\"752\":1,\"755\":1,\"756\":1,\"758\":2}}],[\"tojumppage\",{\"1\":{\"261\":2}}],[\"tomap\",{\"1\":{\"688\":1,\"690\":1,\"697\":1}}],[\"tom\",{\"1\":{\"262\":1}}],[\"tomcat端口号\",{\"1\":{\"248\":1}}],[\"tomcat8\",{\"1\":{\"248\":1}}],[\"tomcat\",{\"1\":{\"224\":1,\"245\":1,\"248\":1,\"638\":1}}],[\"tomppagedefaultsortbyupdatetimedesc\",{\"1\":{\"220\":1}}],[\"tomppagedefaultsortbycreatetimedesc\",{\"1\":{\"220\":2}}],[\"tomppage\",{\"1\":{\"220\":5}}],[\"tomillis\",{\"1\":{\"87\":1}}],[\"tolist\",{\"1\":{\"143\":3,\"214\":1,\"220\":1,\"512\":2,\"534\":1,\"566\":2,\"575\":4,\"608\":1,\"663\":2,\"673\":1,\"674\":3,\"675\":4,\"688\":5,\"690\":2,\"697\":3,\"710\":2,\"747\":1,\"805\":4,\"807\":2}}],[\"tolerate\",{\"1\":{\"63\":1}}],[\"to\",{\"1\":{\"53\":4,\"54\":1,\"56\":11,\"58\":2,\"63\":3,\"64\":2,\"66\":7,\"67\":2,\"81\":6,\"132\":1,\"140\":6,\"142\":1,\"241\":3,\"338\":6,\"351\":2,\"361\":1,\"430\":1,\"595\":1,\"605\":1,\"643\":1,\"665\":7,\"691\":4,\"706\":2,\"728\":1,\"749\":1}}],[\"tr>\",{\"1\":{\"418\":3,\"419\":2}}],[\"tree>\",{\"1\":{\"663\":1,\"670\":1}}],[\"tree\",{\"1\":{\"465\":1,\"518\":1,\"663\":3,\"670\":4}}],[\"tree树\",{\"1\":{\"465\":1}}],[\"trees\",{\"1\":{\"66\":1}}],[\"treeifybin\",{\"1\":{\"66\":1}}],[\"treeify\",{\"1\":{\"66\":2}}],[\"treenodeclick\",{\"1\":{\"670\":2}}],[\"treenode<k\",{\"1\":{\"66\":1,\"67\":2,\"71\":1}}],[\"treenode\",{\"1\":{\"66\":2,\"67\":2,\"71\":1}}],[\"tradeoff\",{\"1\":{\"66\":1}}],[\"transferto\",{\"1\":{\"239\":1,\"801\":1}}],[\"transform\",{\"1\":{\"66\":1,\"616\":1}}],[\"transaction\",{\"1\":{\"671\":1}}],[\"transactionmanager\",{\"1\":{\"224\":1}}],[\"transactional\",{\"1\":{\"210\":1,\"558\":1,\"562\":1,\"672\":2,\"673\":2,\"675\":1,\"706\":1,\"751\":1,\"764\":1,\"765\":1,\"770\":2,\"788\":1,\"789\":1,\"790\":1}}],[\"transient就是临时模式\",{\"1\":{\"346\":1}}],[\"transient\",{\"1\":{\"53\":1,\"63\":9}}],[\"trace\",{\"1\":{\"27\":1}}],[\"true无状态\",{\"1\":{\"350\":1}}],[\"true表示获取\",{\"1\":{\"188\":1}}],[\"true表示公平锁\",{\"1\":{\"151\":1}}],[\"true\",{\"1\":{\"14\":6,\"22\":3,\"23\":2,\"56\":1,\"63\":1,\"66\":3,\"67\":4,\"88\":1,\"89\":3,\"91\":2,\"96\":1,\"98\":1,\"102\":1,\"112\":2,\"132\":3,\"140\":1,\"142\":1,\"151\":1,\"155\":6,\"168\":1,\"169\":1,\"170\":1,\"171\":1,\"188\":1,\"217\":2,\"219\":2,\"220\":1,\"224\":3,\"232\":4,\"319\":1,\"339\":1,\"340\":1,\"342\":1,\"344\":1,\"347\":1,\"350\":2,\"351\":3,\"352\":1,\"355\":3,\"359\":2,\"438\":1,\"512\":1,\"539\":1,\"561\":1,\"564\":1,\"565\":1,\"574\":1,\"598\":1,\"608\":1,\"609\":2,\"611\":1,\"616\":5,\"663\":2,\"664\":1,\"671\":1,\"682\":1,\"688\":1,\"696\":1,\"710\":2,\"728\":1,\"739\":1,\"741\":1,\"742\":4,\"770\":1,\"777\":1,\"778\":1,\"788\":1,\"790\":1,\"796\":4,\"819\":1,\"820\":1}}],[\"trysetcount\",{\"1\":{\"704\":1}}],[\"trylock\",{\"1\":{\"551\":1,\"561\":1,\"573\":1,\"574\":1,\"755\":2,\"756\":1,\"758\":2,\"777\":3,\"778\":1,\"781\":2,\"790\":1}}],[\"trying\",{\"1\":{\"241\":1,\"665\":2}}],[\"tryreleaseshared\",{\"1\":{\"136\":1}}],[\"tryrelease\",{\"1\":{\"136\":1}}],[\"tryacquireshared\",{\"1\":{\"136\":1}}],[\"tryacquire\",{\"1\":{\"136\":1}}],[\"try\",{\"1\":{\"14\":3,\"22\":3,\"23\":2,\"27\":4,\"83\":1,\"87\":1,\"88\":1,\"89\":2,\"91\":4,\"92\":2,\"93\":3,\"103\":2,\"104\":2,\"108\":1,\"109\":1,\"110\":4,\"112\":4,\"135\":1,\"140\":2,\"142\":7,\"143\":3,\"151\":1,\"152\":3,\"153\":2,\"156\":3,\"241\":1,\"318\":1,\"319\":5,\"340\":1,\"407\":1,\"431\":1,\"432\":1,\"452\":1,\"453\":1,\"544\":2,\"551\":2,\"561\":1,\"573\":2,\"574\":1,\"612\":1,\"613\":1,\"643\":1,\"646\":1,\"665\":3,\"675\":1,\"688\":2,\"703\":2,\"704\":4,\"710\":2,\"728\":1,\"755\":1,\"756\":1,\"758\":1,\"777\":1,\"781\":1,\"788\":1,\"790\":2,\"796\":2,\"801\":1}}],[\"ts文件\",{\"1\":{\"611\":1,\"630\":1}}],[\"ts逻辑\",{\"1\":{\"520\":1}}],[\"ts路由跳转传参\",{\"1\":{\"519\":1}}],[\"ts代码\",{\"1\":{\"518\":1,\"615\":1}}],[\"ts里了\",{\"1\":{\"43\":1}}],[\"tsx页面\",{\"1\":{\"615\":1}}],[\"tsx中\",{\"1\":{\"612\":1}}],[\"tsx\",{\"1\":{\"14\":1,\"615\":2}}],[\"tsx代码\",{\"1\":{\"14\":1}}],[\"ts\",{\"1\":{\"14\":1,\"507\":1,\"517\":1,\"518\":1,\"519\":1,\"520\":1,\"534\":1,\"615\":1,\"616\":1,\"635\":3}}],[\"ticket\",{\"1\":{\"91\":14}}],[\"timeline\",{\"1\":{\"808\":1}}],[\"time参数\",{\"1\":{\"485\":1}}],[\"timeunit\",{\"1\":{\"87\":1,\"104\":3,\"110\":6,\"112\":9,\"115\":1,\"116\":1,\"142\":7,\"143\":3,\"153\":2,\"155\":3,\"156\":3,\"400\":1,\"539\":1,\"551\":1,\"561\":1,\"573\":1,\"574\":1,\"702\":1,\"703\":6,\"704\":1,\"713\":1,\"721\":1,\"741\":2,\"742\":1,\"751\":1,\"752\":2,\"755\":3,\"758\":11,\"777\":1,\"778\":1,\"781\":1,\"788\":1}}],[\"timeoutsec\",{\"1\":{\"777\":4,\"778\":2}}],[\"timeout\",{\"1\":{\"84\":1,\"87\":1,\"112\":2,\"342\":1,\"533\":1}}],[\"timeout<\",{\"1\":{\"81\":4}}],[\"timed\",{\"1\":{\"81\":2,\"86\":1}}],[\"time\",{\"1\":{\"81\":2,\"142\":2,\"211\":4,\"220\":3,\"352\":1,\"409\":2,\"422\":1,\"670\":2,\"706\":2,\"731\":7,\"749\":1,\"758\":10,\"763\":2,\"764\":11,\"801\":4,\"806\":1,\"810\":3}}],[\"times\",{\"1\":{\"63\":1}}],[\"timestamp\",{\"1\":{\"9\":3,\"17\":3,\"27\":3,\"451\":4,\"452\":10,\"509\":3,\"557\":6,\"596\":3,\"763\":4,\"764\":22,\"801\":10,\"806\":2}}],[\"title>\",{\"1\":{\"406\":1,\"416\":1,\"438\":1}}],[\"title=webapi\",{\"1\":{\"442\":1,\"443\":1,\"444\":1,\"445\":1}}],[\"title=jspopulargl\",{\"1\":{\"438\":1}}],[\"title=\",{\"1\":{\"22\":6,\"23\":4,\"506\":1,\"518\":1,\"519\":8,\"534\":1}}],[\"title\",{\"1\":{\"14\":9,\"522\":1,\"609\":2,\"616\":12,\"670\":1,\"682\":3,\"726\":1,\"727\":1,\"764\":2,\"801\":1}}],[\"tinyint\",{\"1\":{\"9\":2,\"25\":1,\"487\":1,\"509\":4,\"557\":2,\"596\":6,\"670\":6,\"764\":4,\"801\":1}}],[\"mkdirs\",{\"1\":{\"430\":1}}],[\"mq假定消费者获取消息后会成功处理\",{\"1\":{\"359\":1}}],[\"mq收到ack回执后才会删除该消息\",{\"1\":{\"359\":1}}],[\"mq默认是内存存储消息\",{\"1\":{\"359\":1}}],[\"mq宕机导致消息丢失\",{\"1\":{\"359\":1}}],[\"mqconstants\",{\"1\":{\"355\":5}}],[\"mqconfirmconfig\",{\"1\":{\"344\":1}}],[\"mq消息的重复投递\",{\"1\":{\"352\":1}}],[\"mq可靠性\",{\"0\":{\"345\":1}}],[\"mq异步回调返回回执\",{\"1\":{\"344\":1}}],[\"mq会根据消息处理的情况返回不同的回执\",{\"1\":{\"343\":1}}],[\"mq导致消息丢失\",{\"1\":{\"341\":1}}],[\"mq\",{\"1\":{\"328\":2,\"355\":1}}],[\"mm\",{\"1\":{\"259\":8,\"319\":2,\"409\":1,\"665\":1,\"675\":2,\"763\":1}}],[\"mvn\",{\"1\":{\"643\":1,\"655\":1}}],[\"mvnrepository\",{\"1\":{\"29\":2,\"512\":1,\"587\":1,\"655\":2,\"690\":1}}],[\"mvcconfig\",{\"1\":{\"739\":1,\"742\":1}}],[\"mvcc的实现原理如下\",{\"1\":{\"476\":1}}],[\"mvcc的具体实现\",{\"1\":{\"476\":1}}],[\"mvcc\",{\"1\":{\"476\":1}}],[\"mvc设计模式\",{\"1\":{\"244\":1}}],[\"mvc扫描到\",{\"1\":{\"232\":1}}],[\"mvc可以扫描到异常处理类\",{\"1\":{\"229\":1}}],[\"mvc要用到\",{\"1\":{\"224\":1}}],[\"mvc\",{\"1\":{\"224\":1,\"522\":1}}],[\"mp\",{\"1\":{\"201\":1,\"215\":1,\"449\":1}}],[\"mpopenid\",{\"1\":{\"9\":1}}],[\"m3\",{\"1\":{\"149\":2}}],[\"m2\",{\"1\":{\"142\":2,\"148\":2}}],[\"m1\",{\"1\":{\"142\":2,\"655\":1}}],[\"mill或者road或者mill\",{\"1\":{\"685\":1}}],[\"mill\",{\"1\":{\"685\":9,\"687\":1}}],[\"milliseconds\",{\"1\":{\"142\":7,\"155\":3,\"795\":2}}],[\"millis\",{\"1\":{\"87\":5}}],[\"mime\",{\"1\":{\"643\":1,\"646\":1}}],[\"microsoft\",{\"1\":{\"523\":1}}],[\"microseconds\",{\"1\":{\"110\":4,\"551\":1,\"561\":1,\"573\":1,\"574\":1}}],[\"middle\",{\"1\":{\"117\":3}}],[\"mintime\",{\"1\":{\"810\":7}}],[\"mindistance\",{\"1\":{\"566\":2,\"575\":2}}],[\"min\",{\"1\":{\"372\":1,\"398\":1,\"566\":2,\"643\":1,\"646\":1,\"666\":1,\"667\":1,\"675\":5,\"732\":2,\"810\":1}}],[\"mini\",{\"1\":{\"534\":1}}],[\"minioapplicationtest\",{\"1\":{\"319\":1}}],[\"miniofilestorageservice\",{\"1\":{\"319\":1}}],[\"minioconfig\",{\"1\":{\"319\":2}}],[\"minioconfigproperties\",{\"1\":{\"319\":17}}],[\"minioclient\",{\"1\":{\"318\":4,\"319\":8,\"733\":8}}],[\"minio123\",{\"1\":{\"318\":1,\"319\":1,\"733\":3}}],[\"miniotest\",{\"1\":{\"318\":1}}],[\"minio<\",{\"1\":{\"318\":1}}],[\"minio\",{\"1\":{\"316\":1,\"317\":32,\"318\":1,\"319\":7,\"733\":4},\"2\":{\"320\":1,\"321\":1}}],[\"minio基于apache\",{\"1\":{\"316\":1}}],[\"minio对象存储服务\",{\"0\":{\"316\":1}}],[\"minimum\",{\"1\":{\"56\":2}}],[\"minbalance\",{\"1\":{\"209\":7,\"220\":1}}],[\"mincapacity\",{\"1\":{\"56\":14}}],[\"minutes\",{\"1\":{\"27\":2,\"539\":1,\"741\":2,\"751\":1,\"752\":2,\"755\":2,\"758\":5,\"788\":1}}],[\"m\",{\"1\":{\"64\":4,\"566\":7,\"658\":1,\"685\":3}}],[\"m或者cat\",{\"1\":{\"47\":1}}],[\"msie\",{\"1\":{\"643\":1,\"646\":1}}],[\"msgdataid\",{\"1\":{\"453\":1}}],[\"msgid\",{\"1\":{\"453\":1}}],[\"msgtype\",{\"1\":{\"453\":1}}],[\"msg\",{\"1\":{\"226\":4,\"332\":2,\"333\":4,\"335\":4,\"336\":4,\"337\":4,\"338\":8,\"339\":6,\"344\":1,\"347\":2,\"355\":7,\"622\":1,\"663\":1,\"666\":5,\"793\":1}}],[\"msc\",{\"1\":{\"224\":3,\"312\":3}}],[\"ms\",{\"1\":{\"43\":5,\"143\":1,\"431\":1,\"575\":6}}],[\"multi\",{\"1\":{\"685\":2}}],[\"multidelaymessage<long>\",{\"1\":{\"355\":1}}],[\"multidelaymessage<>\",{\"1\":{\"355\":1}}],[\"multidelaymessage<t>\",{\"1\":{\"355\":2}}],[\"multidelaymessage\",{\"1\":{\"355\":1}}],[\"multiple\",{\"1\":{\"616\":1}}],[\"multiplier\",{\"1\":{\"342\":2,\"350\":2}}],[\"multipartfile\",{\"1\":{\"239\":1,\"241\":2,\"801\":1}}],[\"multipart\",{\"1\":{\"237\":2,\"238\":1}}],[\"mutex\",{\"1\":{\"767\":1}}],[\"mutual\",{\"1\":{\"104\":1}}],[\"mutate\",{\"1\":{\"27\":1}}],[\"must必须达到的所有条件\",{\"1\":{\"685\":1}}],[\"must\",{\"1\":{\"63\":1,\"685\":7,\"710\":6}}],[\"mustrole\",{\"1\":{\"21\":2}}],[\"much\",{\"1\":{\"53\":1}}],[\"mozilla\",{\"1\":{\"523\":1}}],[\"mobile\",{\"1\":{\"523\":1}}],[\"moban\",{\"1\":{\"432\":1}}],[\"more\",{\"1\":{\"241\":1,\"732\":4}}],[\"mongosh\",{\"1\":{\"323\":1}}],[\"mongo\",{\"1\":{\"323\":4}}],[\"mongodb\",{\"0\":{\"322\":1},\"1\":{\"323\":2},\"2\":{\"324\":1,\"325\":1}}],[\"money\",{\"1\":{\"208\":9,\"210\":3,\"416\":1,\"418\":2,\"419\":2}}],[\"monitor\",{\"1\":{\"81\":2,\"91\":1}}],[\"mono<void>\",{\"1\":{\"27\":4,\"728\":1}}],[\"move\",{\"1\":{\"67\":1}}],[\"movable\",{\"1\":{\"67\":5}}],[\"modulename=coupon\",{\"1\":{\"655\":1}}],[\"modules>\",{\"1\":{\"653\":1,\"655\":2}}],[\"module>\",{\"1\":{\"653\":5,\"655\":13}}],[\"moduledid\",{\"1\":{\"544\":1}}],[\"module\",{\"1\":{\"247\":4,\"248\":2,\"250\":2,\"251\":1,\"252\":1,\"253\":1,\"254\":2,\"256\":1,\"257\":1,\"258\":1,\"259\":4,\"262\":13,\"639\":2}}],[\"modeclick\",{\"1\":{\"670\":2}}],[\"mode为lazy\",{\"1\":{\"362\":1}}],[\"mode=\",{\"1\":{\"295\":1}}],[\"mode\",{\"1\":{\"66\":1,\"347\":1,\"349\":1,\"523\":1}}],[\"model和heima\",{\"1\":{\"726\":1}}],[\"model和view组合起来生成页面转发给前端浏览器\",{\"1\":{\"244\":1}}],[\"models\",{\"1\":{\"534\":1}}],[\"model=\",{\"1\":{\"507\":1,\"518\":1,\"520\":1}}],[\"modelandview\",{\"1\":{\"232\":2,\"233\":2}}],[\"model\",{\"1\":{\"21\":2,\"23\":2,\"157\":2,\"241\":2,\"416\":4,\"418\":4,\"518\":2,\"539\":1,\"544\":1,\"710\":3}}],[\"modify\",{\"1\":{\"63\":1}}],[\"modifiers\",{\"1\":{\"168\":1,\"169\":1,\"170\":1}}],[\"modified\",{\"1\":{\"63\":1}}],[\"modifications\",{\"1\":{\"63\":1}}],[\"modcount++\",{\"1\":{\"56\":1,\"96\":1}}],[\"modcount\",{\"1\":{\"56\":2,\"63\":3,\"67\":1,\"69\":1}}],[\"modal>\",{\"1\":{\"14\":2}}],[\"myredissonconfig\",{\"1\":{\"704\":1}}],[\"myrunnable\",{\"1\":{\"143\":1}}],[\"mybyte\",{\"1\":{\"452\":4}}],[\"mybaits\",{\"1\":{\"201\":1}}],[\"mybatisx插件\",{\"1\":{\"598\":1}}],[\"mybatis配置类\",{\"1\":{\"224\":1}}],[\"mybatisconfig\",{\"1\":{\"219\":1,\"224\":3,\"312\":2,\"671\":1}}],[\"mybatisenumtypehandler\",{\"1\":{\"216\":1}}],[\"mybatisplus分页插件配置\",{\"0\":{\"671\":1}}],[\"mybatisplus的分页结果\",{\"1\":{\"220\":3}}],[\"mybatisplusinterceptor\",{\"1\":{\"219\":4,\"671\":1}}],[\"mybatisplus提供了很多的插件功能\",{\"1\":{\"218\":1}}],[\"mybatisplus提供了很多特殊类型字段的类型处理器\",{\"1\":{\"217\":1}}],[\"mybatisplus提供一个静态工具类\",{\"1\":{\"214\":1}}],[\"mybatisplus\",{\"1\":{\"216\":1,\"544\":2,\"655\":1,\"671\":2}}],[\"mybatisplus会根据链式编程的最后一个方法来判断最终的返回结果\",{\"1\":{\"209\":1}}],[\"mybatisplus识别字段时会把is去除\",{\"1\":{\"200\":1}}],[\"mybatis会将数组参数\",{\"1\":{\"190\":1}}],[\"mybatis核心配置文件\",{\"0\":{\"177\":1}}],[\"mybatisdemo\",{\"1\":{\"175\":1}}],[\"mybatis<\",{\"1\":{\"175\":1,\"224\":2,\"312\":2}}],[\"mybatis\",{\"0\":{\"174\":1,\"195\":1,\"593\":1,\"594\":1},\"1\":{\"174\":2,\"175\":10,\"178\":2,\"179\":1,\"184\":1,\"190\":1,\"195\":1,\"196\":1,\"201\":2,\"211\":1,\"215\":1,\"216\":1,\"224\":1,\"593\":1,\"595\":1,\"598\":1,\"605\":1,\"655\":1,\"663\":1,\"671\":1},\"2\":{\"193\":1,\"194\":1,\"221\":1,\"222\":1}}],[\"mybatis分页查询\",{\"1\":{\"47\":1}}],[\"mybatis的常用标签\",{\"1\":{\"47\":1}}],[\"myicon\",{\"1\":{\"439\":2}}],[\"mytask\",{\"1\":{\"117\":10}}],[\"mythreadconfig\",{\"1\":{\"721\":1}}],[\"mythread02\",{\"1\":{\"83\":2}}],[\"mythread\",{\"1\":{\"83\":4,\"142\":2,\"712\":5}}],[\"mycacheconfig\",{\"1\":{\"706\":1}}],[\"mycache\",{\"1\":{\"110\":12}}],[\"mycallable\",{\"1\":{\"83\":2}}],[\"mycircuitbreaker\",{\"1\":{\"27\":1}}],[\"mysql本身就带有锁机制\",{\"1\":{\"775\":1}}],[\"mysql配置\",{\"1\":{\"655\":1}}],[\"mysqld\",{\"1\":{\"651\":1}}],[\"mysql<\",{\"1\":{\"591\":1,\"655\":1}}],[\"mysql数据查询慢怎么办\",{\"1\":{\"543\":1}}],[\"mysql数据库\",{\"1\":{\"503\":1,\"548\":1}}],[\"mysql数据库的核心引擎\",{\"1\":{\"47\":1}}],[\"mysql主从复制的核心就是二进制日志binlog\",{\"1\":{\"477\":1}}],[\"mysql主从复制的核心就是二进制日志\",{\"1\":{\"477\":1}}],[\"mysql中的多版本并发控制\",{\"1\":{\"476\":1}}],[\"mysql超大分页怎么处理\",{\"0\":{\"468\":1},\"1\":{\"468\":1}}],[\"mysql底层采用的数据结构是b+树\",{\"1\":{\"465\":1}}],[\"mysql执行流程如下\",{\"1\":{\"463\":1}}],[\"mysql执行流程\",{\"0\":{\"463\":1}}],[\"mysql面试题\",{\"0\":{\"461\":1}}],[\"mysql和redis\",{\"1\":{\"359\":1}}],[\"mysql\",{\"0\":{\"591\":1},\"1\":{\"143\":4,\"175\":5,\"178\":4,\"211\":2,\"219\":1,\"224\":2,\"283\":1,\"286\":3,\"294\":2,\"295\":2,\"309\":4,\"310\":4,\"485\":1,\"533\":1,\"595\":2,\"651\":36,\"655\":5,\"775\":1},\"2\":{\"488\":1,\"489\":1}}],[\"mysql为什么用b+树\",{\"1\":{\"47\":1}}],[\"mysql的innodb引擎采用的b+树的数据结构来存储索引\",{\"1\":{\"465\":1}}],[\"mysql的索引是什么结构\",{\"1\":{\"47\":1}}],[\"mysql的binlog\",{\"1\":{\"47\":1}}],[\"my\",{\"1\":{\"22\":1,\"58\":1,\"318\":2,\"651\":1,\"682\":3,\"686\":2,\"704\":3}}],[\"myapplication\",{\"1\":{\"29\":1}}],[\"myapp\",{\"1\":{\"12\":1,\"584\":2}}],[\"mallsearchservice\",{\"1\":{\"710\":2}}],[\"mallsearchserviceimpl\",{\"1\":{\"710\":1}}],[\"master\",{\"1\":{\"682\":1}}],[\"mask\",{\"1\":{\"66\":1}}],[\"masking\",{\"1\":{\"66\":1}}],[\"margin\",{\"1\":{\"438\":1,\"520\":1,\"534\":2}}],[\"markers\",{\"1\":{\"439\":1}}],[\"marker\",{\"1\":{\"439\":6}}],[\"markorderpaysuccess\",{\"1\":{\"340\":1,\"352\":2,\"355\":1}}],[\"mark\",{\"1\":{\"340\":1}}],[\"made\",{\"1\":{\"241\":1,\"665\":2}}],[\"maven多模块聚合compile\",{\"1\":{\"655\":1}}],[\"maven依赖如下\",{\"1\":{\"599\":1}}],[\"maven依赖官网\",{\"1\":{\"587\":1}}],[\"maven\",{\"1\":{\"224\":1,\"245\":1,\"248\":1,\"643\":1}}],[\"maven<\",{\"1\":{\"224\":1,\"245\":1,\"248\":1}}],[\"matlab神经网络30个案例分析\",{\"1\":{\"824\":1}}],[\"math\",{\"1\":{\"143\":1,\"406\":1,\"566\":2,\"732\":2}}],[\"match子句匹配包含关键字\",{\"1\":{\"710\":1}}],[\"matchquery\",{\"1\":{\"687\":1,\"710\":1}}],[\"match匹配\",{\"1\":{\"685\":1}}],[\"match匹配查询\",{\"1\":{\"685\":1}}],[\"matchmode\",{\"1\":{\"665\":1}}],[\"matchuserids\",{\"1\":{\"575\":2}}],[\"matchusersbypriorityqueue\",{\"1\":{\"575\":3}}],[\"matchusersbylistsorted\",{\"1\":{\"575\":3}}],[\"matchusers\",{\"1\":{\"566\":1,\"575\":2}}],[\"matcher\",{\"1\":{\"522\":1,\"599\":8,\"605\":4}}],[\"matching\",{\"1\":{\"522\":1}}],[\"matchvalue\",{\"1\":{\"67\":8}}],[\"match\",{\"1\":{\"67\":1,\"605\":1,\"684\":1,\"685\":23,\"710\":1}}],[\"manual\",{\"1\":{\"349\":1,\"359\":1}}],[\"management\",{\"1\":{\"328\":2,\"453\":1}}],[\"manage\",{\"1\":{\"317\":1,\"615\":1}}],[\"manager\",{\"1\":{\"114\":1}}],[\"many\",{\"1\":{\"66\":1}}],[\"maketext\",{\"1\":{\"409\":3}}],[\"make\",{\"1\":{\"58\":1,\"63\":1,\"639\":2}}],[\"may\",{\"1\":{\"56\":1,\"81\":1,\"140\":1}}],[\"mac启动nacos\",{\"1\":{\"658\":1}}],[\"mac64\",{\"1\":{\"655\":1}}],[\"macintosh\",{\"1\":{\"523\":1}}],[\"mac使用docker安装\",{\"1\":{\"323\":1}}],[\"machine\",{\"1\":{\"81\":1}}],[\"macos安装redis\",{\"0\":{\"378\":1}}],[\"macos\",{\"0\":{\"76\":1},\"1\":{\"523\":1}}],[\"mac\",{\"1\":{\"43\":1,\"378\":1,\"523\":1}}],[\"maprecord<string\",{\"1\":{\"796\":2}}],[\"map>\",{\"1\":{\"292\":1}}],[\"map集合对象\",{\"1\":{\"184\":1}}],[\"mapper文件位置\",{\"1\":{\"655\":1}}],[\"mapperscan\",{\"1\":{\"595\":1,\"655\":1,\"671\":2,\"706\":1,\"770\":1}}],[\"mapperscannerconfigurer等\",{\"1\":{\"245\":1}}],[\"mapperscannerconfigurer\",{\"1\":{\"224\":4,\"312\":4}}],[\"mappers>\",{\"1\":{\"175\":1,\"176\":1}}],[\"mapper代码\",{\"1\":{\"207\":1}}],[\"mapper代理方式\",{\"1\":{\"176\":1}}],[\"mapper代理开发步骤\",{\"1\":{\"176\":1}}],[\"mapper代理开发\",{\"0\":{\"176\":1}}],[\"mapper>\",{\"1\":{\"175\":1,\"179\":1}}],[\"mapper\",{\"1\":{\"175\":3,\"176\":2,\"179\":1,\"201\":8,\"208\":1,\"215\":3,\"400\":3,\"539\":1,\"595\":1,\"655\":2,\"770\":1}}],[\"mappedbytebuffer\",{\"1\":{\"81\":1}}],[\"mapping映射\",{\"0\":{\"686\":1}}],[\"mappings\",{\"1\":{\"63\":2,\"64\":3,\"686\":1,\"710\":1}}],[\"mapping\",{\"1\":{\"27\":1,\"66\":3,\"67\":3,\"686\":1,\"728\":1}}],[\"map<object\",{\"1\":{\"742\":1,\"796\":2}}],[\"map<long\",{\"1\":{\"214\":1,\"564\":1,\"566\":1,\"575\":1,\"688\":2,\"816\":1}}],[\"map<\",{\"1\":{\"64\":2}}],[\"map<string\",{\"1\":{\"17\":2,\"100\":1,\"110\":2,\"288\":1,\"339\":2,\"395\":1,\"407\":1,\"423\":1,\"493\":2,\"665\":1,\"666\":2,\"670\":2,\"673\":1,\"674\":2,\"675\":3,\"690\":4,\"697\":2,\"698\":3,\"702\":2,\"703\":10,\"704\":2,\"741\":1,\"788\":1,\"817\":1}}],[\"map\",{\"1\":{\"16\":6,\"27\":1,\"63\":1,\"64\":3,\"66\":4,\"67\":4,\"100\":3,\"110\":8,\"143\":3,\"184\":8,\"214\":1,\"220\":1,\"288\":2,\"292\":1,\"395\":2,\"407\":1,\"418\":1,\"423\":6,\"438\":10,\"439\":11,\"440\":3,\"442\":1,\"443\":1,\"444\":1,\"445\":1,\"453\":8,\"454\":4,\"455\":3,\"493\":4,\"512\":2,\"518\":1,\"534\":1,\"543\":1,\"566\":2,\"567\":1,\"575\":4,\"595\":1,\"605\":1,\"608\":1,\"663\":2,\"666\":6,\"673\":1,\"674\":3,\"675\":4,\"688\":5,\"690\":2,\"697\":2,\"710\":2,\"725\":7,\"733\":3,\"805\":4,\"807\":2,\"816\":3}}],[\"mainpath=com\",{\"1\":{\"655\":1}}],[\"mainuserlist\",{\"1\":{\"544\":1,\"551\":1,\"573\":2}}],[\"mainuserlist=\",{\"1\":{\"544\":1}}],[\"main\",{\"1\":{\"16\":1,\"83\":3,\"87\":1,\"88\":1,\"89\":1,\"91\":2,\"92\":1,\"93\":1,\"95\":1,\"100\":1,\"103\":1,\"104\":1,\"105\":3,\"107\":2,\"108\":1,\"109\":1,\"110\":2,\"111\":1,\"112\":1,\"117\":1,\"119\":2,\"120\":2,\"132\":1,\"140\":1,\"142\":2,\"143\":3,\"147\":1,\"151\":1,\"153\":1,\"156\":3,\"165\":1,\"167\":1,\"168\":1,\"169\":1,\"170\":1,\"171\":1,\"175\":1,\"241\":1,\"269\":1,\"275\":1,\"276\":1,\"298\":1,\"312\":1,\"318\":1,\"493\":1,\"518\":1,\"525\":2,\"526\":1,\"655\":1,\"658\":1,\"659\":1,\"661\":1,\"675\":1,\"691\":2,\"706\":1,\"712\":12,\"715\":2,\"716\":2,\"733\":2,\"763\":1,\"770\":1,\"788\":1}}],[\"maxmemory\",{\"1\":{\"749\":1}}],[\"maxsize=200\",{\"1\":{\"721\":1}}],[\"maxsize\",{\"1\":{\"721\":1}}],[\"maxdirectmemory只去调大堆外内存\",{\"1\":{\"698\":1}}],[\"maxdirectmemoryi进行设置\",{\"1\":{\"698\":1}}],[\"maxage\",{\"1\":{\"663\":1}}],[\"maxnum\",{\"1\":{\"557\":2,\"558\":3,\"559\":5}}],[\"maxbalance\",{\"1\":{\"209\":7,\"220\":1}}],[\"maximumpoolsize\",{\"1\":{\"115\":2,\"713\":2}}],[\"maximum\",{\"1\":{\"56\":1,\"63\":2,\"64\":3,\"71\":4}}],[\"max\",{\"1\":{\"14\":2,\"56\":6,\"71\":2,\"115\":2,\"238\":2,\"342\":1,\"350\":1,\"398\":3,\"675\":6,\"713\":1,\"732\":2,\"803\":1,\"810\":6}}],[\"medcl\",{\"1\":{\"687\":1}}],[\"menu2\",{\"1\":{\"663\":6}}],[\"menu1\",{\"1\":{\"663\":6}}],[\"menu\",{\"1\":{\"458\":1,\"663\":4}}],[\"menus=\",{\"1\":{\"616\":1}}],[\"menus\",{\"1\":{\"458\":1,\"663\":3,\"670\":1}}],[\"mercator\",{\"1\":{\"439\":3}}],[\"means\",{\"1\":{\"241\":2,\"665\":4}}],[\"memcached\",{\"1\":{\"543\":1}}],[\"memberentity\",{\"1\":{\"659\":5}}],[\"membercontroller\",{\"1\":{\"659\":1}}],[\"membercoupons\",{\"1\":{\"659\":5}}],[\"member<\",{\"1\":{\"653\":1,\"655\":2}}],[\"memberservice\",{\"1\":{\"659\":2}}],[\"members\",{\"1\":{\"400\":2}}],[\"member\",{\"1\":{\"392\":3,\"659\":7,\"675\":1,\"815\":1,\"816\":1}}],[\"member2\",{\"1\":{\"392\":1}}],[\"member1\",{\"1\":{\"392\":1}}],[\"memory\",{\"1\":{\"157\":2,\"161\":2,\"694\":1}}],[\"meminfo\",{\"1\":{\"47\":1}}],[\"mechanics\",{\"1\":{\"63\":1}}],[\"metadata\",{\"1\":{\"241\":4}}],[\"meta\",{\"1\":{\"18\":1,\"22\":1,\"726\":1}}],[\"methodargumentnotvalidexception\",{\"1\":{\"666\":3}}],[\"method=\",{\"1\":{\"237\":1,\"275\":1,\"276\":1,\"278\":2}}],[\"methodname\",{\"1\":{\"232\":1}}],[\"methods1\",{\"1\":{\"170\":1}}],[\"methods\",{\"1\":{\"66\":1,\"67\":1,\"81\":2,\"170\":1,\"663\":1}}],[\"method\",{\"1\":{\"9\":1,\"14\":1,\"22\":1,\"23\":1,\"27\":3,\"29\":1,\"81\":2,\"140\":3,\"165\":5,\"170\":7,\"237\":1,\"262\":3,\"303\":2,\"616\":1,\"620\":1,\"663\":1,\"668\":1,\"694\":2}}],[\"messages\",{\"1\":{\"453\":1}}],[\"messagedigest\",{\"1\":{\"452\":2}}],[\"messagedeliverymode\",{\"1\":{\"347\":1,\"359\":1}}],[\"messagepostprocessor\",{\"1\":{\"355\":1}}],[\"messagerecoverer\",{\"1\":{\"351\":2}}],[\"messagebuilder\",{\"1\":{\"347\":1,\"359\":1}}],[\"messageconverter\",{\"1\":{\"339\":2,\"340\":1,\"352\":2}}],[\"message\",{\"1\":{\"14\":7,\"22\":9,\"23\":7,\"230\":8,\"241\":2,\"332\":3,\"333\":3,\"335\":2,\"336\":2,\"337\":2,\"347\":3,\"355\":13,\"359\":2,\"406\":4,\"407\":6,\"444\":1,\"453\":10,\"454\":7,\"612\":3,\"623\":6,\"624\":4,\"625\":5,\"627\":2,\"630\":4,\"665\":4,\"666\":6,\"667\":8,\"668\":3,\"791\":1}}],[\"md做标题\",{\"0\":{\"40\":1}}],[\"md做左侧标题\",{\"0\":{\"37\":1}}],[\"md5digestashex\",{\"1\":{\"599\":2,\"605\":1,\"725\":1}}],[\"md5hex\",{\"1\":{\"22\":2}}],[\"md5加密\",{\"1\":{\"17\":1,\"599\":1}}],[\"md\",{\"1\":{\"1\":1,\"452\":2,\"657\":1}}],[\"md就可以定义这个页面的内容\",{\"1\":{\"1\":1}}],[\"开始时间戳\",{\"1\":{\"763\":1}}],[\"开缓存\",{\"1\":{\"696\":3}}],[\"开源项目导入\",{\"0\":{\"655\":1}}],[\"开闭原则\",{\"1\":{\"565\":1}}],[\"开一个监听线程\",{\"1\":{\"551\":1}}],[\"开头\",{\"1\":{\"738\":1}}],[\"开头的like模糊查询\",{\"1\":{\"470\":1}}],[\"开头模糊查询导致索引失效\",{\"1\":{\"470\":1}}],[\"开户行\",{\"1\":{\"422\":1}}],[\"开发环境\",{\"1\":{\"634\":1,\"635\":2}}],[\"开发\",{\"1\":{\"634\":2}}],[\"开发框架\",{\"1\":{\"502\":1}}],[\"开发案例\",{\"0\":{\"454\":1}}],[\"开发者获得加密后的字符串可与signature对比\",{\"1\":{\"452\":1}}],[\"开发者通过检验signature对请求进行校验\",{\"1\":{\"452\":1}}],[\"开发者只需要关心调用哪些接口\",{\"1\":{\"18\":1}}],[\"开发语言\",{\"1\":{\"327\":1}}],[\"开发接口调用次数统计\",{\"1\":{\"25\":1}}],[\"开发starter步骤\",{\"1\":{\"18\":1}}],[\"开发一个简单的sdk\",{\"1\":{\"18\":1}}],[\"开启一个线程任务\",{\"1\":{\"796\":1}}],[\"开启线程任务\",{\"1\":{\"789\":1}}],[\"开启异步线程进行缓存重建\",{\"1\":{\"756\":1,\"758\":1}}],[\"开启缓存\",{\"1\":{\"706\":1}}],[\"开启jmeter\",{\"1\":{\"696\":1}}],[\"开启json数据类型自动转换\",{\"1\":{\"256\":1}}],[\"开启nacos注册发现\",{\"1\":{\"661\":1}}],[\"开启服务注册发现功能\",{\"1\":{\"659\":1}}],[\"开启端口映射\",{\"1\":{\"451\":1}}],[\"开启鼠标滚轮缩放\",{\"1\":{\"438\":2}}],[\"开启消费者确认机制为auto\",{\"1\":{\"359\":1}}],[\"开启消费者失败重试机制\",{\"1\":{\"359\":1}}],[\"开启消费者失败重试\",{\"1\":{\"350\":1}}],[\"开启持久化功能\",{\"1\":{\"359\":1}}],[\"开启持久化可以确保缓存中mq消息不丢失\",{\"1\":{\"359\":1}}],[\"开启生产者确认机制\",{\"1\":{\"359\":1}}],[\"开启生产者确认比较消耗mq性能\",{\"1\":{\"344\":1}}],[\"开启lazy模式\",{\"1\":{\"347\":1}}],[\"开启publisher\",{\"1\":{\"344\":2}}],[\"开启超时重试机制\",{\"1\":{\"342\":1}}],[\"开启context命名空间\",{\"1\":{\"295\":1}}],[\"开启自动装配\",{\"1\":{\"287\":2}}],[\"开启自动结果映射\",{\"1\":{\"217\":1}}],[\"开启springmvc注解支持\",{\"1\":{\"256\":1}}],[\"开启\",{\"1\":{\"9\":1,\"14\":1,\"22\":1,\"23\":1,\"770\":1}}],[\"开通\",{\"1\":{\"5\":1}}],[\"udtsplzfqz2\",{\"1\":{\"824\":1}}],[\"uv\",{\"1\":{\"821\":1}}],[\"uv统计\",{\"0\":{\"821\":1}}],[\"u7c7b\",{\"1\":{\"655\":1}}],[\"u7f00\",{\"1\":{\"655\":2}}],[\"u8868\",{\"1\":{\"655\":2}}],[\"u8005\",{\"1\":{\"655\":1}}],[\"u4f1a\",{\"1\":{\"655\":1}}],[\"u4f5c\",{\"1\":{\"655\":1}}],[\"u4e0d\",{\"1\":{\"655\":1}}],[\"u4eac\",{\"1\":{\"443\":5}}],[\"ua\",{\"1\":{\"523\":3}}],[\"ui<\",{\"1\":{\"726\":1}}],[\"ui\",{\"1\":{\"502\":1,\"522\":2,\"584\":1,\"726\":1}}],[\"uid\",{\"1\":{\"444\":10}}],[\"u542b\",{\"1\":{\"655\":1}}],[\"u540d\",{\"1\":{\"655\":2}}],[\"u524d\",{\"1\":{\"655\":2}}],[\"u5305\",{\"1\":{\"655\":2}}],[\"u5317\",{\"1\":{\"443\":5}}],[\"u5e02\",{\"1\":{\"443\":3}}],[\"u5e02|none|none|100|100\",{\"1\":{\"443\":1}}],[\"u5e02|\",{\"1\":{\"443\":1}}],[\"u\",{\"1\":{\"122\":3,\"143\":1,\"655\":1,\"718\":3,\"820\":1}}],[\"u>\",{\"1\":{\"121\":3,\"122\":9,\"143\":2,\"717\":3,\"718\":9}}],[\"uuid=\",{\"1\":{\"703\":1}}],[\"uuid\",{\"1\":{\"100\":1,\"239\":2,\"241\":1,\"344\":1,\"698\":1,\"703\":7,\"704\":1,\"741\":1,\"778\":1,\"788\":1}}],[\"ul>\",{\"1\":{\"81\":2}}],[\"utc\",{\"1\":{\"763\":2}}],[\"utils\",{\"1\":{\"659\":1,\"758\":2}}],[\"util\",{\"1\":{\"80\":1,\"91\":2,\"93\":3,\"104\":1,\"110\":8,\"112\":4,\"117\":4,\"142\":1,\"151\":1,\"155\":1,\"407\":3,\"430\":5,\"539\":4,\"544\":2,\"551\":2,\"655\":1,\"742\":1,\"758\":6}}],[\"utility\",{\"1\":{\"66\":1}}],[\"utf8\",{\"1\":{\"651\":2}}],[\"utf8mb4\",{\"1\":{\"9\":1,\"764\":3,\"801\":4,\"806\":1}}],[\"utf\",{\"1\":{\"27\":1,\"175\":2,\"224\":1,\"248\":1,\"269\":1,\"270\":1,\"278\":1,\"295\":1,\"347\":1,\"359\":1,\"406\":1,\"416\":1,\"665\":1,\"710\":1}}],[\"us\",{\"1\":{\"523\":1}}],[\"usr\",{\"1\":{\"76\":1,\"426\":1,\"639\":3,\"643\":3,\"646\":3,\"681\":3,\"691\":1,\"697\":1}}],[\"using\",{\"1\":{\"71\":1,\"142\":1,\"485\":1,\"486\":3}}],[\"usually\",{\"1\":{\"56\":1}}],[\"useunicode=true\",{\"1\":{\"211\":1,\"655\":2}}],[\"usegeneratedkeys\",{\"1\":{\"188\":1}}],[\"usegeneratedkeys=\",{\"1\":{\"188\":1}}],[\"usesingleserver\",{\"1\":{\"551\":1,\"704\":1,\"781\":1}}],[\"usessl=false\",{\"1\":{\"175\":2,\"178\":2,\"636\":1,\"655\":1}}],[\"uses\",{\"1\":{\"66\":1}}],[\"usestate<any>\",{\"1\":{\"22\":1,\"23\":1}}],[\"usestate<api\",{\"1\":{\"22\":2,\"23\":1}}],[\"usestate<number>\",{\"1\":{\"22\":1}}],[\"usestate<boolean>\",{\"1\":{\"14\":1}}],[\"usestate\",{\"1\":{\"22\":3,\"23\":2}}],[\"use\",{\"1\":{\"63\":1,\"66\":1,\"142\":1,\"444\":1,\"532\":2,\"630\":2,\"665\":2,\"668\":1,\"764\":1}}],[\"used\",{\"1\":{\"53\":2,\"63\":4,\"66\":1,\"749\":2}}],[\"useparams\",{\"1\":{\"22\":1,\"23\":1}}],[\"useeffect来监听值的变化来给表格设置值\",{\"1\":{\"14\":1}}],[\"useeffect\",{\"1\":{\"14\":1,\"22\":2,\"23\":1}}],[\"userdtos\",{\"1\":{\"805\":4}}],[\"userdto\",{\"1\":{\"740\":7,\"741\":4,\"742\":4,\"788\":4,\"801\":1,\"805\":2,\"807\":1,\"809\":1}}],[\"userdaofactorybean\",{\"1\":{\"277\":2}}],[\"userdaofactory\",{\"1\":{\"276\":6}}],[\"userdaoimpl\",{\"1\":{\"276\":2,\"277\":1,\"282\":1}}],[\"userdao\",{\"1\":{\"276\":7,\"277\":3,\"282\":10}}],[\"userholder修改\",{\"1\":{\"740\":1}}],[\"userholder\",{\"1\":{\"739\":1,\"740\":2,\"742\":3,\"765\":1,\"770\":5,\"777\":2,\"789\":1,\"790\":1,\"796\":1,\"801\":1,\"803\":2,\"804\":2,\"806\":2,\"807\":2,\"809\":1,\"810\":1,\"819\":1,\"820\":1}}],[\"useref<actiontype>\",{\"1\":{\"616\":1}}],[\"useref<proforminstance>\",{\"1\":{\"14\":1}}],[\"useref\",{\"1\":{\"616\":1}}],[\"usermap\",{\"1\":{\"741\":2,\"742\":3,\"788\":2}}],[\"usermappertest\",{\"1\":{\"196\":1}}],[\"usermapper\",{\"1\":{\"175\":1,\"176\":6,\"179\":1,\"196\":8,\"204\":2,\"205\":1,\"206\":1,\"207\":1,\"208\":3,\"512\":2,\"537\":1,\"539\":3,\"599\":2,\"605\":1}}],[\"usermanage\",{\"1\":{\"615\":1}}],[\"usertaglist\",{\"1\":{\"566\":2,\"575\":4}}],[\"usertags\",{\"1\":{\"566\":3,\"575\":6}}],[\"userteamlist\",{\"1\":{\"562\":4,\"564\":2}}],[\"userteamquerywrapper1\",{\"1\":{\"562\":4}}],[\"userteamquerywrapper\",{\"1\":{\"561\":7,\"562\":3,\"564\":3,\"574\":7}}],[\"userteamservice\",{\"1\":{\"558\":1,\"561\":3,\"562\":3,\"564\":1,\"574\":3}}],[\"userteam\",{\"1\":{\"558\":7,\"561\":7,\"562\":3,\"564\":1,\"574\":7}}],[\"usertype\",{\"1\":{\"518\":1,\"534\":2}}],[\"usercenter\",{\"1\":{\"636\":1,\"640\":1,\"643\":1}}],[\"usercenterback\",{\"1\":{\"595\":1,\"623\":1,\"624\":1,\"625\":1,\"627\":2,\"628\":4}}],[\"userconstant\",{\"1\":{\"605\":2,\"608\":2,\"613\":1,\"620\":1}}],[\"usercontroller\",{\"1\":{\"208\":1,\"245\":1,\"247\":2,\"248\":2,\"261\":4,\"262\":4,\"607\":1}}],[\"usercardlistprops\",{\"1\":{\"534\":1}}],[\"useroute\",{\"1\":{\"520\":2,\"531\":1}}],[\"userouter\",{\"1\":{\"519\":2}}],[\"userjson\",{\"1\":{\"400\":2}}],[\"user相关的key\",{\"1\":{\"382\":1}}],[\"user=admin\",{\"1\":{\"328\":1}}],[\"user==null||user\",{\"1\":{\"208\":1}}],[\"userfactory\",{\"1\":{\"276\":2}}],[\"userformdto\",{\"1\":{\"208\":3}}],[\"userlongpair\",{\"1\":{\"566\":2,\"575\":4}}],[\"userlogin\",{\"1\":{\"605\":2,\"607\":2}}],[\"userlogindto\",{\"1\":{\"605\":7,\"607\":6}}],[\"userloginusingpost\",{\"1\":{\"14\":1}}],[\"userloginrequest\",{\"1\":{\"14\":1}}],[\"userlistdata\",{\"1\":{\"532\":4}}],[\"userlist\",{\"1\":{\"261\":4,\"512\":4,\"532\":1,\"534\":5,\"538\":3,\"539\":3,\"540\":2,\"544\":3,\"566\":3,\"575\":5,\"608\":2,\"616\":2}}],[\"user2\",{\"1\":{\"261\":4}}],[\"user1\",{\"1\":{\"261\":4,\"399\":3,\"400\":5,\"613\":2}}],[\"user类\",{\"1\":{\"251\":1}}],[\"userinfo\",{\"1\":{\"217\":2}}],[\"useriduserlistmap\",{\"1\":{\"566\":2,\"575\":2}}],[\"useridlist\",{\"1\":{\"566\":3,\"575\":3}}],[\"userids\",{\"1\":{\"214\":2}}],[\"userid\",{\"1\":{\"9\":1,\"25\":1,\"26\":4,\"27\":2,\"29\":2,\"208\":4,\"214\":3,\"509\":2,\"511\":2,\"544\":3,\"551\":2,\"557\":4,\"558\":1,\"559\":8,\"561\":6,\"562\":3,\"564\":1,\"566\":2,\"573\":2,\"574\":6,\"575\":2,\"613\":2,\"765\":2,\"770\":13,\"777\":4,\"781\":2,\"789\":5,\"790\":11,\"796\":9,\"802\":2,\"803\":6,\"804\":6,\"806\":5,\"807\":6,\"809\":2,\"810\":2,\"819\":2,\"820\":2}}],[\"userquery\",{\"1\":{\"209\":2,\"220\":4}}],[\"userquerywrapper\",{\"1\":{\"204\":3,\"566\":3,\"575\":6,\"599\":3,\"605\":4,\"608\":3}}],[\"uservo\",{\"1\":{\"208\":3,\"209\":2,\"214\":11,\"220\":4,\"559\":5}}],[\"user>\",{\"1\":{\"208\":1}}],[\"userupdatewrapper\",{\"1\":{\"205\":3}}],[\"users2\",{\"1\":{\"575\":3}}],[\"users1\",{\"1\":{\"575\":2}}],[\"userstatus\",{\"1\":{\"216\":3,\"518\":1,\"596\":2,\"616\":1}}],[\"users\",{\"1\":{\"175\":2,\"176\":1,\"196\":2,\"204\":2,\"206\":2,\"208\":4,\"209\":4,\"214\":5,\"262\":7,\"373\":1,\"512\":4,\"525\":1,\"531\":2,\"534\":2,\"575\":2,\"655\":1,\"665\":2,\"687\":1,\"794\":3,\"807\":2}}],[\"userserviceimpltest\",{\"1\":{\"208\":1}}],[\"userserviceimpl\",{\"1\":{\"208\":1}}],[\"userservice\",{\"1\":{\"23\":1,\"208\":13,\"209\":2,\"211\":2,\"214\":2,\"219\":1,\"220\":1,\"531\":1,\"534\":2,\"538\":1,\"539\":4,\"540\":1,\"544\":6,\"551\":1,\"559\":1,\"560\":1,\"564\":1,\"565\":1,\"573\":1,\"575\":3,\"598\":1,\"607\":4,\"608\":3,\"613\":2,\"620\":1,\"788\":2,\"802\":1,\"805\":2,\"807\":1,\"819\":1,\"820\":1}}],[\"userregister\",{\"1\":{\"599\":2,\"607\":2}}],[\"userregisterdto\",{\"1\":{\"599\":9,\"607\":4}}],[\"userrequestparams\",{\"1\":{\"22\":1,\"23\":3}}],[\"userrole\",{\"1\":{\"9\":1,\"518\":1,\"596\":1,\"615\":1,\"616\":1}}],[\"userpage\",{\"1\":{\"544\":3}}],[\"userpassword\",{\"1\":{\"9\":1,\"596\":1,\"599\":7,\"605\":6,\"607\":2,\"609\":1,\"612\":2}}],[\"userprofile\",{\"1\":{\"9\":1}}],[\"useradminanydatabase\",{\"1\":{\"323\":1}}],[\"useravatar\",{\"1\":{\"9\":1}}],[\"useraccount\",{\"1\":{\"9\":1,\"22\":3,\"518\":1,\"519\":2,\"596\":2,\"599\":9,\"605\":9,\"607\":2,\"609\":1,\"616\":1}}],[\"username=root\",{\"1\":{\"224\":1,\"295\":1}}],[\"usernamebypost\",{\"1\":{\"19\":2,\"23\":2}}],[\"username\",{\"1\":{\"9\":1,\"21\":2,\"23\":1,\"175\":3,\"178\":2,\"204\":6,\"209\":6,\"211\":3,\"224\":3,\"237\":1,\"239\":2,\"250\":4,\"294\":1,\"295\":2,\"310\":3,\"312\":3,\"332\":1,\"340\":1,\"518\":1,\"519\":4,\"525\":1,\"534\":1,\"595\":1,\"596\":2,\"608\":4,\"616\":1,\"655\":2,\"687\":2}}],[\"user\",{\"1\":{\"9\":4,\"16\":13,\"17\":7,\"19\":5,\"21\":5,\"22\":8,\"23\":5,\"27\":1,\"29\":1,\"89\":1,\"175\":3,\"179\":2,\"192\":2,\"196\":22,\"204\":7,\"205\":1,\"206\":6,\"207\":1,\"208\":20,\"209\":8,\"210\":14,\"211\":23,\"214\":9,\"217\":2,\"220\":7,\"245\":1,\"247\":7,\"251\":4,\"252\":4,\"257\":3,\"261\":11,\"262\":21,\"276\":1,\"323\":1,\"382\":1,\"383\":1,\"395\":3,\"399\":6,\"400\":16,\"430\":1,\"438\":1,\"507\":1,\"510\":1,\"512\":2,\"517\":4,\"518\":3,\"519\":15,\"523\":1,\"531\":1,\"532\":5,\"534\":10,\"537\":15,\"538\":15,\"539\":16,\"544\":6,\"551\":1,\"557\":2,\"558\":1,\"559\":4,\"560\":1,\"561\":1,\"562\":1,\"564\":1,\"565\":1,\"566\":9,\"573\":1,\"574\":1,\"575\":18,\"595\":1,\"596\":1,\"598\":12,\"599\":7,\"605\":28,\"607\":2,\"608\":23,\"611\":2,\"612\":8,\"613\":8,\"615\":1,\"616\":1,\"620\":3,\"630\":1,\"643\":5,\"646\":6,\"660\":4,\"687\":8,\"725\":1,\"728\":4,\"738\":15,\"739\":7,\"740\":5,\"741\":7,\"742\":4,\"764\":1,\"770\":3,\"788\":11,\"790\":1,\"801\":4,\"802\":4,\"805\":4,\"806\":6,\"807\":4,\"809\":5,\"819\":1,\"820\":1}}],[\"upstream\",{\"1\":{\"691\":1}}],[\"upproducts\",{\"1\":{\"688\":2}}],[\"up\",{\"1\":{\"140\":2,\"688\":8}}],[\"upon\",{\"1\":{\"63\":1,\"142\":2}}],[\"uploadimage\",{\"1\":{\"801\":1}}],[\"uploadimgfile\",{\"1\":{\"319\":2}}],[\"uploadhtmlfile\",{\"1\":{\"319\":3,\"733\":1}}],[\"upload\",{\"1\":{\"43\":1,\"237\":1,\"239\":3,\"241\":4,\"665\":2,\"739\":1,\"742\":1,\"801\":2}}],[\"updated\",{\"1\":{\"682\":1}}],[\"updatedetail\",{\"1\":{\"672\":1}}],[\"updateattr\",{\"1\":{\"673\":1}}],[\"updatecategory\",{\"1\":{\"672\":5,\"706\":1}}],[\"updatecascade\",{\"1\":{\"672\":1,\"706\":1}}],[\"updateshop\",{\"1\":{\"751\":1}}],[\"updatespustatus\",{\"1\":{\"688\":1}}],[\"updatestatusgroup\",{\"1\":{\"668\":2}}],[\"updatesort\",{\"1\":{\"663\":1}}],[\"updategroup\",{\"1\":{\"667\":7}}],[\"updateteam\",{\"1\":{\"560\":1,\"562\":4}}],[\"updatetime\",{\"1\":{\"9\":2,\"22\":1,\"23\":1,\"25\":1,\"509\":2,\"557\":4,\"596\":2}}],[\"updatebrand\",{\"1\":{\"672\":2}}],[\"updatebatchbyid\",{\"1\":{\"663\":1}}],[\"updatebalancebyids\",{\"1\":{\"207\":3}}],[\"updatebyid\",{\"1\":{\"21\":2,\"196\":1,\"352\":1,\"560\":1,\"562\":1,\"667\":1,\"672\":2,\"673\":1,\"706\":1,\"733\":1,\"751\":1}}],[\"update>\",{\"1\":{\"191\":1,\"207\":1,\"672\":1}}],[\"updatewrapper<user>\",{\"1\":{\"205\":1}}],[\"updatewrapper<userinterfaceinfo>\",{\"1\":{\"26\":1}}],[\"updatewrapper<>\",{\"1\":{\"26\":1,\"205\":1}}],[\"updatewrapper\",{\"0\":{\"205\":1},\"1\":{\"26\":6}}],[\"updatemodal\",{\"1\":{\"14\":2}}],[\"update\",{\"1\":{\"9\":1,\"26\":1,\"191\":2,\"192\":1,\"204\":2,\"205\":2,\"207\":1,\"208\":3,\"210\":1,\"211\":2,\"220\":2,\"224\":7,\"226\":2,\"262\":7,\"352\":2,\"416\":1,\"423\":1,\"509\":1,\"548\":1,\"557\":2,\"596\":1,\"652\":1,\"663\":2,\"667\":3,\"670\":1,\"672\":2,\"673\":1,\"682\":3,\"751\":2,\"764\":6,\"765\":4,\"769\":6,\"770\":8,\"790\":4,\"801\":4,\"803\":4,\"804\":4}}],[\"uri+请求体进行检索\",{\"1\":{\"684\":1}}],[\"uriencoding><\",{\"1\":{\"248\":1}}],[\"uri\",{\"1\":{\"27\":2,\"661\":2,\"663\":5,\"665\":1,\"710\":2,\"721\":1,\"728\":1}}],[\"uri从固定地址改成\",{\"1\":{\"27\":1}}],[\"urlencoder\",{\"1\":{\"710\":1}}],[\"urlbasedcorsconfigurationsource\",{\"1\":{\"663\":2}}],[\"url=baidu\",{\"1\":{\"661\":1}}],[\"url=qq\",{\"1\":{\"661\":1}}],[\"url=$\",{\"1\":{\"630\":1}}],[\"url=jdbc\",{\"1\":{\"224\":1,\"295\":1}}],[\"urlpath\",{\"1\":{\"319\":10}}],[\"urlparams\",{\"1\":{\"14\":2}}],[\"url地址传参\",{\"1\":{\"250\":1}}],[\"url\",{\"1\":{\"9\":1,\"14\":3,\"22\":1,\"23\":1,\"175\":2,\"178\":2,\"211\":1,\"224\":3,\"241\":5,\"294\":1,\"295\":2,\"310\":3,\"312\":3,\"442\":2,\"443\":2,\"444\":2,\"445\":2,\"457\":4,\"595\":1,\"616\":1,\"630\":3,\"635\":1,\"655\":2,\"663\":1,\"666\":1,\"667\":1,\"670\":1,\"728\":1}}],[\"unauthorized\",{\"1\":{\"728\":3}}],[\"unsigned\",{\"1\":{\"764\":10,\"801\":11,\"806\":2,\"820\":1}}],[\"unsupportedencodingexception\",{\"1\":{\"710\":1}}],[\"unstarted\",{\"1\":{\"140\":1}}],[\"unzip\",{\"1\":{\"639\":1}}],[\"unplugin\",{\"1\":{\"504\":2}}],[\"unpark\",{\"1\":{\"156\":1}}],[\"unknow\",{\"1\":{\"230\":1,\"666\":3}}],[\"until\",{\"1\":{\"132\":1}}],[\"unlock\",{\"1\":{\"91\":7,\"93\":3,\"103\":2,\"110\":2,\"111\":4,\"135\":1,\"151\":1,\"152\":5,\"156\":3,\"551\":1,\"561\":1,\"573\":1,\"574\":1,\"704\":4,\"755\":2,\"756\":1,\"758\":2,\"777\":3,\"778\":1,\"780\":7,\"781\":1,\"790\":1}}],[\"unfairlock\",{\"1\":{\"91\":1}}],[\"unchecked\",{\"1\":{\"71\":1}}],[\"underscore\",{\"1\":{\"595\":1,\"605\":1}}],[\"undefined>\",{\"1\":{\"613\":1}}],[\"undefined\",{\"1\":{\"14\":2,\"613\":1,\"615\":1,\"635\":1}}],[\"undo\",{\"0\":{\"475\":1},\"1\":{\"475\":6,\"476\":3}}],[\"undo日志\",{\"1\":{\"47\":1}}],[\"unique\",{\"1\":{\"466\":1,\"511\":1}}],[\"union会多一次过滤\",{\"1\":{\"487\":1}}],[\"union\",{\"1\":{\"400\":3,\"486\":1}}],[\"unionid\",{\"1\":{\"9\":3}}],[\"unirunstage\",{\"1\":{\"121\":3,\"717\":3}}],[\"uniacceptstage\",{\"1\":{\"121\":3,\"717\":3}}],[\"uniapplystage\",{\"1\":{\"121\":3,\"717\":3}}],[\"uniexceptionallystage\",{\"1\":{\"120\":1,\"716\":1}}],[\"uniwhencompletestage\",{\"1\":{\"120\":3,\"716\":3}}],[\"unit\",{\"1\":{\"112\":2,\"115\":2,\"669\":2,\"713\":2,\"758\":9}}],[\"unicode\",{\"1\":{\"9\":1,\"651\":2,\"801\":2}}],[\"umi的配置文件是config\",{\"1\":{\"635\":1}}],[\"umijs\",{\"1\":{\"14\":2,\"584\":1,\"630\":1}}],[\"umi\",{\"0\":{\"615\":1},\"1\":{\"7\":2,\"584\":1,\"630\":3}}],[\"描述<=512\",{\"1\":{\"558\":2}}],[\"描述统一格式中的消息\",{\"1\":{\"226\":1}}],[\"描述统一格式中的编码\",{\"1\":{\"226\":1}}],[\"描述统一格式中的数据\",{\"1\":{\"226\":1}}],[\"描述\",{\"1\":{\"9\":1,\"14\":1,\"22\":1,\"23\":1,\"115\":7,\"143\":1,\"198\":1,\"473\":1,\"556\":1,\"557\":1,\"670\":1,\"713\":7}}],[\"bd9peqcf82n\",{\"1\":{\"824\":1}}],[\"bjx\",{\"1\":{\"815\":2}}],[\"bj\",{\"1\":{\"815\":1}}],[\"bjn\",{\"1\":{\"815\":2}}],[\"b+\",{\"1\":{\"465\":1}}],[\"b+树的叶子节点保存对应的主键\",{\"1\":{\"466\":1}}],[\"b+树的叶子节点保存了整行数据\",{\"1\":{\"466\":1}}],[\"b+树便于扫库和区间查询\",{\"1\":{\"465\":1}}],[\"b+树\",{\"1\":{\"465\":1}}],[\"b+树更适用于静态或者频繁查询的场景\",{\"1\":{\"47\":1}}],[\"b+树通常被设计为磁盘上的存储结构\",{\"1\":{\"47\":1}}],[\"b+树是一种多路搜索树\",{\"1\":{\"47\":1}}],[\"b+树和跳表都是logn时间复杂度的数据结构\",{\"1\":{\"47\":1}}],[\"b+树和跳表都是logn\",{\"1\":{\"47\":2}}],[\"bmap\",{\"1\":{\"439\":4}}],[\"bmapgl\",{\"1\":{\"438\":3,\"439\":11,\"440\":1}}],[\"b>\",{\"1\":{\"418\":2,\"420\":1,\"710\":2}}],[\"b><br\",{\"1\":{\"416\":1}}],[\"b><br><br>\",{\"1\":{\"416\":1}}],[\"bgrewriteaof\",{\"1\":{\"372\":1}}],[\"bgsave开始时会fork主进程得到子进程\",{\"1\":{\"370\":1}}],[\"bgsave\",{\"1\":{\"369\":3}}],[\"blank\",{\"1\":{\"616\":1}}],[\"blanktarget\",{\"1\":{\"609\":2}}],[\"blob等大字段拆分出来单独放在一张表\",{\"1\":{\"730\":1}}],[\"blob\",{\"1\":{\"657\":1,\"682\":1}}],[\"blogs\",{\"1\":{\"810\":3}}],[\"blogservice\",{\"1\":{\"801\":1,\"802\":1,\"805\":1,\"810\":1}}],[\"blogid\",{\"1\":{\"810\":1}}],[\"blog表\",{\"1\":{\"801\":1}}],[\"blogv2\",{\"1\":{\"609\":1}}],[\"blog\",{\"1\":{\"412\":1,\"566\":1,\"609\":2,\"630\":1,\"682\":7,\"739\":1,\"742\":1,\"801\":10,\"802\":10,\"803\":15,\"804\":6,\"805\":1,\"809\":6,\"810\":4}}],[\"blockattackinnerinterceptor\",{\"1\":{\"218\":1}}],[\"blockingqueue<voucherorder>\",{\"1\":{\"790\":1}}],[\"blockingqueue<runnable>\",{\"1\":{\"115\":2,\"713\":2}}],[\"blockingqueue<string>\",{\"1\":{\"112\":1}}],[\"blockingqueue\",{\"1\":{\"112\":31}}],[\"blockingqueue阻塞队列\",{\"0\":{\"112\":1}}],[\"block\",{\"1\":{\"81\":2,\"89\":1,\"520\":1,\"794\":1,\"795\":2,\"796\":3}}],[\"blocked\",{\"1\":{\"47\":1,\"81\":3}}],[\"blue\",{\"1\":{\"338\":2,\"439\":1}}],[\"bf\",{\"1\":{\"298\":2}}],[\"broker\",{\"1\":{\"791\":1}}],[\"brown\",{\"1\":{\"687\":1}}],[\"brew\",{\"1\":{\"378\":5,\"379\":1,\"380\":1}}],[\"break\",{\"1\":{\"66\":2,\"67\":1,\"142\":1,\"155\":3,\"319\":1,\"491\":2,\"539\":1,\"796\":1,\"820\":1}}],[\"brandagg\",{\"1\":{\"710\":7}}],[\"brandimgagg\",{\"1\":{\"710\":2}}],[\"brandimg\",{\"1\":{\"688\":1,\"710\":7}}],[\"brandid\",{\"1\":{\"666\":1,\"667\":1,\"672\":8,\"675\":10,\"710\":8}}],[\"brandvos\",{\"1\":{\"710\":3}}],[\"brandvo>\",{\"1\":{\"710\":1}}],[\"brandvo\",{\"1\":{\"675\":6,\"710\":7}}],[\"branddao\",{\"1\":{\"672\":1}}],[\"brandentity\",{\"1\":{\"655\":7,\"666\":2,\"667\":3,\"672\":4,\"688\":1}}],[\"brandserviceimpl中\",{\"1\":{\"672\":1}}],[\"brandservice\",{\"1\":{\"655\":5,\"666\":1,\"667\":2,\"688\":1}}],[\"brands\",{\"1\":{\"184\":4,\"675\":1}}],[\"brandmapper\",{\"1\":{\"182\":4,\"184\":6}}],[\"brandresultmap\",{\"1\":{\"181\":2,\"182\":3,\"184\":1,\"185\":2,\"186\":1}}],[\"brandnameagg\",{\"1\":{\"710\":2}}],[\"brandname\",{\"1\":{\"180\":2,\"181\":1,\"184\":10,\"185\":6,\"186\":3,\"188\":2,\"191\":3,\"688\":1,\"710\":7}}],[\"brand\",{\"1\":{\"180\":8,\"181\":3,\"182\":6,\"184\":11,\"185\":6,\"186\":2,\"188\":4,\"189\":1,\"190\":2,\"191\":2,\"523\":1,\"666\":4,\"667\":7,\"670\":2,\"672\":9,\"688\":3,\"710\":6}}],[\"bw\",{\"1\":{\"171\":4}}],[\"b=new\",{\"1\":{\"153\":1}}],[\"b\",{\"1\":{\"69\":1,\"91\":2,\"92\":1,\"93\":4,\"104\":4,\"112\":8,\"143\":3,\"151\":1,\"153\":2,\"155\":1,\"159\":2,\"211\":4,\"400\":5,\"452\":1,\"465\":1,\"566\":2,\"575\":4,\"688\":4}}],[\"bizcodeenum\",{\"1\":{\"666\":6,\"688\":4}}],[\"birthday\",{\"1\":{\"416\":1}}],[\"birunstage\",{\"1\":{\"122\":3,\"718\":3}}],[\"biacceptstage\",{\"1\":{\"122\":3,\"718\":3}}],[\"biapplystage\",{\"1\":{\"122\":3,\"718\":3}}],[\"bifunction<\",{\"1\":{\"122\":3,\"718\":3}}],[\"biconsumer<integer\",{\"1\":{\"143\":1}}],[\"biconsumer<t\",{\"1\":{\"143\":1}}],[\"biconsumer<\",{\"1\":{\"120\":3,\"122\":3,\"716\":3,\"718\":3}}],[\"binaryutil\",{\"1\":{\"665\":1}}],[\"binarydata\",{\"1\":{\"665\":2}}],[\"binlog\",{\"1\":{\"477\":1}}],[\"bin\",{\"1\":{\"457\":2,\"643\":1,\"646\":1,\"651\":1}}],[\"bind\",{\"1\":{\"338\":6,\"351\":2,\"628\":2,\"659\":1}}],[\"bindingresult要紧跟在校验的后面\",{\"1\":{\"666\":1}}],[\"bindingresult\",{\"1\":{\"666\":4}}],[\"bindings\",{\"1\":{\"338\":4,\"340\":1,\"355\":2}}],[\"bindingqueue2withyellow\",{\"1\":{\"338\":1}}],[\"bindingqueue2withred\",{\"1\":{\"338\":1}}],[\"bindingqueue2\",{\"1\":{\"338\":1}}],[\"bindingqueue1withblue\",{\"1\":{\"338\":1}}],[\"bindingqueue1withred\",{\"1\":{\"338\":1}}],[\"bindingqueue1\",{\"1\":{\"338\":1}}],[\"bindingbuilder\",{\"1\":{\"338\":6,\"351\":2}}],[\"binding\",{\"1\":{\"338\":6,\"351\":2}}],[\"bind<\",{\"1\":{\"241\":1}}],[\"bins\",{\"1\":{\"66\":1}}],[\"bincount\",{\"1\":{\"66\":2}}],[\"bitpos\",{\"1\":{\"819\":1}}],[\"bitop\",{\"1\":{\"819\":1}}],[\"bitfieldtype\",{\"1\":{\"820\":1}}],[\"bitfieldsubcommands\",{\"1\":{\"820\":2}}],[\"bitfield\",{\"1\":{\"819\":2,\"820\":2}}],[\"bitcount\",{\"1\":{\"819\":1}}],[\"bitmap中bit数组中的指定位置\",{\"1\":{\"819\":1}}],[\"bitmap的操作命令有\",{\"1\":{\"819\":1}}],[\"bitmap\",{\"1\":{\"819\":1}}],[\"bitmap用户签到\",{\"0\":{\"819\":1}}],[\"bit\",{\"1\":{\"66\":1}}],[\"bits\",{\"1\":{\"66\":5,\"763\":2}}],[\"bigdecimal\",{\"1\":{\"675\":6}}],[\"bigstar\",{\"1\":{\"165\":7}}],[\"big\",{\"1\":{\"44\":1}}],[\"bigint\",{\"1\":{\"9\":3,\"25\":3,\"487\":1,\"509\":3,\"557\":6,\"596\":1,\"670\":24,\"672\":3,\"764\":8,\"801\":8,\"806\":3}}],[\"byradius\",{\"1\":{\"815\":1}}],[\"byname\",{\"1\":{\"287\":1}}],[\"bytype\",{\"1\":{\"287\":1}}],[\"bytetohexstr\",{\"1\":{\"452\":2}}],[\"bytetostr\",{\"1\":{\"452\":2}}],[\"bytearrayinputstream\",{\"1\":{\"733\":1}}],[\"bytearrays\",{\"1\":{\"452\":4}}],[\"bytearrayoutputstream\",{\"1\":{\"319\":5}}],[\"byte\",{\"1\":{\"27\":2,\"47\":1,\"319\":4,\"452\":3,\"665\":1}}],[\"by\",{\"1\":{\"54\":1,\"56\":2,\"63\":1,\"140\":1,\"143\":1,\"468\":1,\"469\":2,\"562\":1,\"731\":4,\"805\":1,\"810\":1,\"817\":1}}],[\"behind\",{\"1\":{\"750\":1}}],[\"bearer\",{\"1\":{\"687\":1}}],[\"beantomap\",{\"1\":{\"741\":1,\"788\":1}}],[\"beanvalidatorpluginsconfiguration\",{\"1\":{\"727\":2}}],[\"beanfactory\",{\"1\":{\"298\":1}}],[\"bean生命周期\",{\"0\":{\"278\":1}}],[\"bean=\",{\"1\":{\"276\":1}}],[\"bean创建方式\",{\"0\":{\"273\":1}}],[\"bean注意事项\",{\"0\":{\"272\":1}}],[\"bean>\",{\"1\":{\"270\":1,\"282\":1,\"283\":1,\"285\":1,\"286\":3,\"287\":1,\"294\":1,\"295\":1}}],[\"bean标签标示配置bean\",{\"1\":{\"269\":1,\"270\":1}}],[\"beansexception\",{\"1\":{\"344\":1}}],[\"beans>\",{\"1\":{\"269\":1,\"270\":1,\"278\":1,\"295\":1}}],[\"beans\",{\"1\":{\"269\":4,\"270\":4,\"278\":4,\"295\":4,\"409\":1,\"655\":1}}],[\"beanutils\",{\"1\":{\"559\":2,\"560\":1,\"673\":4,\"674\":1,\"675\":5,\"688\":2}}],[\"beanutil\",{\"1\":{\"208\":3,\"209\":2,\"214\":4,\"220\":3,\"740\":1,\"741\":2,\"742\":1,\"788\":2,\"796\":2,\"805\":2,\"807\":1}}],[\"bean\",{\"0\":{\"309\":1},\"1\":{\"18\":1,\"219\":1,\"224\":4,\"268\":1,\"309\":3,\"310\":3,\"312\":3,\"319\":1,\"338\":12,\"339\":1,\"340\":1,\"347\":1,\"351\":8,\"352\":1,\"359\":2,\"399\":1,\"408\":2,\"522\":2,\"551\":2,\"663\":1,\"671\":2,\"687\":1,\"704\":1,\"706\":1,\"721\":1,\"726\":1,\"727\":3,\"781\":1}}],[\"beijing\",{\"1\":{\"665\":2}}],[\"being\",{\"1\":{\"241\":1,\"665\":2}}],[\"beta1\",{\"1\":{\"525\":1}}],[\"between\",{\"1\":{\"66\":1}}],[\"between在x时间之间\",{\"1\":{\"27\":1}}],[\"becomes\",{\"1\":{\"132\":1}}],[\"because\",{\"1\":{\"66\":4}}],[\"beforeeach\",{\"1\":{\"395\":1,\"396\":1}}],[\"before\",{\"0\":{\"159\":1},\"1\":{\"159\":15,\"561\":1,\"574\":1}}],[\"before关系\",{\"1\":{\"128\":1}}],[\"before关系向程序员提供跨线程的内存可见性保证\",{\"1\":{\"128\":1}}],[\"before规则即可\",{\"1\":{\"159\":1}}],[\"before规则\",{\"0\":{\"128\":1},\"1\":{\"159\":1}}],[\"before在x时间之前\",{\"1\":{\"27\":1}}],[\"begin\",{\"1\":{\"117\":8,\"431\":2,\"763\":5,\"764\":1}}],[\"benefit\",{\"1\":{\"66\":1}}],[\"been\",{\"1\":{\"63\":2}}],[\"be\",{\"1\":{\"53\":1,\"54\":1,\"56\":3,\"63\":1,\"64\":1,\"66\":3,\"67\":1,\"81\":1,\"140\":5}}],[\"bulkitemresponse\",{\"1\":{\"688\":1}}],[\"bulkresponse\",{\"1\":{\"688\":1}}],[\"bulkrequest\",{\"1\":{\"688\":5}}],[\"bulk\",{\"1\":{\"682\":3,\"688\":4}}],[\"bulk批量api\",{\"1\":{\"682\":1}}],[\"bug\",{\"1\":{\"616\":1}}],[\"buff\",{\"1\":{\"319\":3}}],[\"bufferedwriter\",{\"1\":{\"171\":2,\"788\":2}}],[\"bufferes\",{\"1\":{\"161\":1}}],[\"buffer\",{\"1\":{\"53\":2,\"475\":1}}],[\"bufferfactory\",{\"1\":{\"27\":3}}],[\"bucketname\",{\"1\":{\"241\":7,\"665\":3}}],[\"bucket\",{\"1\":{\"240\":1,\"317\":1,\"318\":1,\"319\":9,\"665\":4,\"687\":3,\"710\":14,\"733\":3}}],[\"buckets\",{\"1\":{\"63\":1}}],[\"bussinessexception类\",{\"0\":{\"627\":1}}],[\"bussinessexception\",{\"1\":{\"512\":1,\"531\":1,\"558\":11,\"559\":1,\"560\":5,\"561\":8,\"562\":4,\"564\":1,\"565\":1,\"574\":8,\"627\":4,\"628\":2}}],[\"busythread\",{\"1\":{\"88\":5}}],[\"businessexceptionhandler\",{\"1\":{\"628\":1}}],[\"businessexception\",{\"1\":{\"21\":5,\"23\":3,\"26\":1,\"230\":5,\"628\":1}}],[\"button\",{\"1\":{\"520\":1,\"534\":1}}],[\"button>\",{\"1\":{\"14\":3,\"22\":1,\"23\":1,\"406\":2,\"520\":1,\"534\":1}}],[\"but\",{\"1\":{\"58\":1,\"81\":1,\"241\":1,\"665\":2}}],[\"buildapiinfo\",{\"1\":{\"726\":2}}],[\"builddocket\",{\"1\":{\"726\":1}}],[\"buildsearchresult\",{\"1\":{\"710\":2}}],[\"buildsearchrequest\",{\"1\":{\"710\":2}}],[\"build的时候\",{\"1\":{\"635\":1}}],[\"buildminioclient\",{\"1\":{\"319\":1}}],[\"builders\",{\"1\":{\"522\":3,\"727\":3}}],[\"builderfilepath\",{\"1\":{\"319\":3}}],[\"builder\",{\"1\":{\"318\":2,\"319\":5,\"643\":1,\"687\":6,\"733\":4}}],[\"build>\",{\"1\":{\"224\":1,\"245\":1,\"248\":1}}],[\"builduser\",{\"1\":{\"211\":3}}],[\"build\",{\"1\":{\"27\":1,\"175\":1,\"184\":1,\"241\":2,\"318\":2,\"319\":5,\"338\":1,\"347\":2,\"359\":2,\"430\":1,\"431\":2,\"432\":2,\"522\":2,\"635\":1,\"643\":3,\"665\":1,\"687\":1,\"726\":2,\"727\":2,\"733\":4}}],[\"bone\",{\"1\":{\"687\":1}}],[\"bounds\",{\"1\":{\"66\":1,\"675\":4}}],[\"body>\",{\"1\":{\"406\":1,\"416\":1,\"438\":1}}],[\"body\",{\"1\":{\"16\":2,\"17\":11,\"27\":9,\"438\":1,\"442\":3,\"443\":3,\"444\":3,\"445\":3}}],[\"boolquery\",{\"1\":{\"710\":6}}],[\"boolquerybuilder\",{\"1\":{\"710\":10}}],[\"bool\",{\"1\":{\"685\":5,\"710\":3}}],[\"bool复合查询\",{\"1\":{\"685\":1}}],[\"booleanutil\",{\"1\":{\"755\":1,\"758\":2,\"777\":1,\"778\":1,\"803\":2}}],[\"boolean>\",{\"1\":{\"688\":2}}],[\"boolean\",{\"1\":{\"14\":2,\"21\":2,\"22\":1,\"26\":1,\"29\":1,\"47\":1,\"56\":1,\"66\":4,\"67\":4,\"96\":1,\"98\":1,\"132\":1,\"140\":1,\"143\":1,\"155\":1,\"198\":2,\"220\":3,\"224\":6,\"232\":4,\"233\":1,\"355\":1,\"400\":1,\"409\":1,\"452\":2,\"457\":1,\"549\":1,\"558\":2,\"559\":1,\"560\":1,\"561\":1,\"562\":2,\"574\":1,\"598\":1,\"608\":2,\"609\":1,\"613\":1,\"655\":1,\"668\":1,\"688\":3,\"703\":5,\"710\":1,\"739\":1,\"742\":2,\"755\":3,\"756\":1,\"758\":3,\"765\":1,\"769\":2,\"770\":2,\"777\":4,\"778\":2,\"781\":2,\"790\":2,\"803\":5,\"804\":2,\"806\":2,\"807\":3,\"809\":1}}],[\"bookcontroller\",{\"1\":{\"224\":1,\"247\":2,\"262\":1}}],[\"books\",{\"1\":{\"224\":1,\"232\":7,\"233\":4,\"262\":1}}],[\"bookservicetest\",{\"1\":{\"224\":1}}],[\"bookservice\",{\"1\":{\"224\":11,\"267\":2,\"269\":8,\"270\":4,\"278\":2,\"279\":1,\"282\":2,\"285\":2,\"287\":3,\"304\":1,\"305\":1}}],[\"bookserviceimpl\",{\"1\":{\"224\":1,\"267\":2,\"269\":2,\"270\":4,\"278\":1,\"279\":1,\"282\":2,\"285\":3,\"287\":3,\"304\":1,\"305\":1}}],[\"book\",{\"1\":{\"224\":28,\"247\":7,\"262\":16,\"267\":4,\"269\":2,\"270\":2,\"278\":2,\"279\":1,\"282\":1,\"283\":1,\"285\":1,\"286\":1,\"288\":1,\"299\":1,\"302\":1,\"303\":1,\"304\":3,\"307\":1}}],[\"bookdao1\",{\"1\":{\"305\":1}}],[\"bookdao2\",{\"1\":{\"304\":1}}],[\"bookdao=ctx\",{\"1\":{\"297\":2}}],[\"bookdao=\",{\"1\":{\"297\":1}}],[\"bookdaoimpl2\",{\"1\":{\"267\":1,\"304\":1}}],[\"bookdaoimpl\",{\"1\":{\"267\":2,\"269\":3,\"270\":1,\"278\":2,\"282\":1,\"283\":2,\"286\":5,\"288\":1,\"299\":2,\"302\":1,\"303\":1,\"304\":1,\"307\":2}}],[\"bookdao\",{\"1\":{\"224\":8,\"267\":8,\"269\":11,\"270\":15,\"278\":10,\"279\":7,\"282\":10,\"283\":2,\"285\":9,\"286\":4,\"287\":5,\"288\":1,\"297\":8,\"298\":4,\"299\":3,\"302\":1,\"303\":1,\"304\":10,\"305\":2,\"307\":4,\"310\":3}}],[\"bootstrap文件会优先于application文件\",{\"1\":{\"660\":1}}],[\"bootstrap\",{\"1\":{\"522\":2,\"728\":1}}],[\"bootstrapping\",{\"1\":{\"63\":1}}],[\"boot和其他spring项目一起使用\",{\"1\":{\"332\":1}}],[\"boot的配置文件主要有application\",{\"1\":{\"47\":1}}],[\"boot代码\",{\"1\":{\"29\":1}}],[\"boot<\",{\"1\":{\"18\":1,\"196\":1,\"318\":2,\"332\":1,\"340\":1,\"398\":1,\"405\":1,\"416\":3,\"533\":1,\"589\":1,\"590\":1,\"592\":1,\"593\":1,\"663\":1,\"690\":2,\"698\":2,\"706\":1,\"733\":1}}],[\"boot\",{\"1\":{\"7\":1,\"18\":3,\"196\":2,\"318\":2,\"332\":1,\"340\":1,\"398\":1,\"405\":1,\"415\":1,\"416\":3,\"522\":1,\"533\":1,\"539\":1,\"551\":3,\"589\":1,\"590\":1,\"592\":1,\"593\":1,\"594\":1,\"655\":2,\"663\":1,\"665\":1,\"690\":4,\"698\":2,\"706\":1,\"726\":1,\"727\":1,\"733\":1}}],[\"baluba\",{\"1\":{\"685\":1}}],[\"balanceagg\",{\"1\":{\"685\":1}}],[\"balanceavg1\",{\"1\":{\"687\":2}}],[\"balanceavg\",{\"1\":{\"685\":2,\"687\":4}}],[\"balance=\",{\"1\":{\"207\":1}}],[\"balance=balance\",{\"1\":{\"205\":1,\"208\":1}}],[\"balance\",{\"1\":{\"204\":5,\"205\":1,\"207\":1,\"211\":2,\"219\":1,\"684\":1,\"685\":9,\"687\":1}}],[\"batchsize\",{\"1\":{\"539\":3}}],[\"bar>\",{\"1\":{\"506\":1,\"518\":1}}],[\"bar\",{\"1\":{\"506\":1,\"518\":1}}],[\"barrier\",{\"1\":{\"108\":2,\"161\":2}}],[\"barrieraction\",{\"1\":{\"108\":1}}],[\"baidu\",{\"1\":{\"436\":1,\"438\":2,\"439\":1,\"442\":2,\"443\":2,\"444\":2,\"445\":2,\"661\":2,\"663\":2}}],[\"baomidou\",{\"1\":{\"201\":1,\"216\":1,\"544\":2,\"594\":1,\"655\":1,\"671\":2}}],[\"baomidou<\",{\"1\":{\"196\":1,\"594\":1,\"655\":1}}],[\"basic\",{\"1\":{\"354\":2,\"416\":3,\"451\":1,\"457\":1}}],[\"bash\",{\"1\":{\"76\":1,\"241\":1,\"643\":1,\"646\":1,\"651\":1}}],[\"based索引\",{\"1\":{\"685\":1}}],[\"baseattrfuture\",{\"1\":{\"721\":2}}],[\"baseattrlistforspu\",{\"1\":{\"688\":1}}],[\"baseattr\",{\"1\":{\"688\":3}}],[\"baseattrs\",{\"1\":{\"675\":2}}],[\"baseaddress\",{\"1\":{\"51\":1}}],[\"basemapper\",{\"1\":{\"663\":1,\"672\":1,\"675\":1,\"688\":1,\"690\":2,\"696\":1,\"697\":1,\"706\":1}}],[\"basemapper<user>\",{\"1\":{\"196\":1}}],[\"basepackages\",{\"1\":{\"666\":1,\"706\":1}}],[\"basepackages=\",{\"1\":{\"659\":1}}],[\"basepackage\",{\"1\":{\"522\":1,\"726\":1,\"727\":1}}],[\"base\",{\"1\":{\"299\":1,\"301\":1,\"442\":1,\"443\":1,\"674\":1}}],[\"baseresponse<object>\",{\"1\":{\"23\":1}}],[\"baseresponse<boolean>\",{\"1\":{\"21\":2}}],[\"baseresponseloginuservo\",{\"1\":{\"14\":1}}],[\"baseurl\",{\"1\":{\"14\":1,\"532\":1}}],[\"backend\",{\"1\":{\"643\":2}}],[\"backend项目作为服务提供者\",{\"1\":{\"29\":1}}],[\"back项目中实现这些接口的具体内容\",{\"1\":{\"29\":1}}],[\"back项目中\",{\"1\":{\"29\":1}}],[\"back\",{\"1\":{\"14\":1,\"506\":1,\"525\":1,\"636\":1,\"640\":1,\"643\":1}}],[\"banner\",{\"1\":{\"505\":1}}],[\"bank\",{\"1\":{\"422\":2,\"682\":1,\"684\":2,\"685\":15,\"686\":1,\"687\":1}}],[\"ban\",{\"1\":{\"9\":1}}],[\"iuserservice\",{\"1\":{\"788\":1}}],[\"ilock\",{\"1\":{\"777\":2}}],[\"illegalsqlinnerinterceptor\",{\"1\":{\"218\":1}}],[\"illegalstateexception\",{\"1\":{\"112\":1}}],[\"illegalthreadstateexception\",{\"1\":{\"140\":1}}],[\"illegal\",{\"1\":{\"54\":1,\"64\":2}}],[\"illegalargumentexception\",{\"1\":{\"54\":2,\"64\":4,\"87\":1}}],[\"ivoucherorderservice\",{\"1\":{\"765\":1,\"770\":2,\"777\":4,\"790\":2,\"796\":1}}],[\"icr\",{\"1\":{\"763\":1}}],[\"icon=\",{\"1\":{\"507\":3,\"518\":3}}],[\"icon\",{\"1\":{\"439\":2,\"506\":1,\"518\":1,\"615\":2,\"670\":2}}],[\"i4\",{\"1\":{\"665\":1}}],[\"i18n\",{\"1\":{\"585\":1}}],[\"ik\",{\"1\":{\"687\":2,\"710\":1}}],[\"ikon\",{\"1\":{\"544\":1}}],[\"ikun名称\",{\"1\":{\"525\":1}}],[\"ikunfriend\",{\"1\":{\"522\":2,\"525\":1,\"539\":4,\"544\":2,\"551\":2}}],[\"ikun\",{\"1\":{\"519\":2,\"525\":3,\"526\":4,\"544\":2,\"551\":2,\"561\":1,\"573\":2,\"574\":1}}],[\"ikuncode\",{\"1\":{\"519\":2,\"525\":1,\"534\":1}}],[\"ikun编号\",{\"1\":{\"519\":1,\"525\":1}}],[\"ikun伙伴匹配系统优化\",{\"0\":{\"570\":1}}],[\"ikun伙伴匹配系统5\",{\"0\":{\"554\":1}}],[\"ikun伙伴匹配系统4\",{\"0\":{\"543\":1}}],[\"ikun伙伴匹配系统3\",{\"0\":{\"529\":1}}],[\"ikun伙伴匹配系统2\",{\"0\":{\"515\":1}}],[\"ikun伙伴匹配系统\",{\"0\":{\"847\":1},\"1\":{\"525\":1},\"2\":{\"513\":1,\"514\":1,\"527\":1,\"528\":1,\"541\":1,\"542\":1,\"552\":1,\"553\":1,\"568\":1,\"569\":1,\"576\":1,\"577\":1}}],[\"ikun伙伴匹配系统1\",{\"0\":{\"499\":1}}],[\"ignore\",{\"1\":{\"140\":1,\"430\":1,\"616\":1,\"655\":1}}],[\"ignored\",{\"1\":{\"67\":1}}],[\"i++\",{\"1\":{\"83\":3,\"91\":6,\"92\":2,\"93\":6,\"95\":1,\"99\":1,\"100\":1,\"107\":2,\"108\":1,\"109\":1,\"110\":4,\"117\":1,\"151\":3,\"158\":1,\"211\":2,\"333\":1,\"347\":1,\"430\":2,\"431\":1,\"432\":1,\"452\":1,\"537\":1,\"538\":1,\"539\":1,\"566\":3,\"575\":3,\"710\":1,\"763\":2,\"788\":1}}],[\"itd\",{\"1\":{\"323\":1}}],[\"itcast\",{\"1\":{\"261\":1}}],[\"itheima\",{\"1\":{\"175\":2,\"176\":2,\"179\":2,\"201\":1,\"215\":1,\"224\":4,\"232\":3,\"233\":1,\"245\":6,\"256\":1,\"263\":3,\"269\":2,\"270\":3,\"275\":1,\"276\":1,\"277\":1,\"278\":1,\"282\":3,\"283\":1,\"285\":1,\"286\":3,\"287\":3,\"299\":2,\"301\":1,\"306\":1,\"307\":1,\"309\":1,\"310\":1,\"312\":5}}],[\"its\",{\"1\":{\"63\":1}}],[\"iterators\",{\"1\":{\"63\":1}}],[\"iterator\",{\"1\":{\"54\":1}}],[\"items=\",{\"1\":{\"518\":1}}],[\"item=\",{\"1\":{\"190\":1,\"674\":1}}],[\"item>\",{\"1\":{\"22\":12,\"23\":11,\"507\":3,\"518\":3}}],[\"item\",{\"1\":{\"22\":18,\"23\":11,\"190\":1,\"507\":3,\"518\":5,\"666\":6,\"674\":5,\"675\":9,\"688\":4,\"697\":2,\"710\":4,\"721\":2}}],[\"itemlayout=\",{\"1\":{\"22\":1}}],[\"it\",{\"1\":{\"53\":1,\"56\":1,\"81\":1,\"132\":1,\"140\":2,\"241\":1,\"323\":1,\"355\":1,\"646\":1,\"651\":1,\"652\":1,\"665\":2,\"703\":1}}],[\"imgs\",{\"1\":{\"801\":1}}],[\"img\",{\"1\":{\"670\":4,\"675\":3,\"710\":1}}],[\"img可以\",{\"1\":{\"616\":1}}],[\"imt分页查询\",{\"1\":{\"468\":1}}],[\"immediaterequeuemessagerecoverer\",{\"1\":{\"351\":1}}],[\"imagefuture\",{\"1\":{\"721\":2}}],[\"imagesentities\",{\"1\":{\"721\":2}}],[\"images\",{\"1\":{\"670\":1,\"675\":5,\"721\":1,\"801\":1}}],[\"imageoffset\",{\"1\":{\"439\":1}}],[\"image\",{\"1\":{\"43\":3,\"237\":1,\"239\":4,\"241\":3,\"319\":1,\"643\":1,\"675\":3,\"801\":5}}],[\"impact\",{\"1\":{\"66\":2}}],[\"impl\",{\"1\":{\"269\":2,\"270\":3,\"278\":1,\"282\":3,\"283\":1,\"285\":1,\"286\":3,\"287\":3,\"299\":1,\"551\":1}}],[\"implicitly\",{\"1\":{\"63\":1}}],[\"implementation\",{\"1\":{\"47\":1}}],[\"implements\",{\"1\":{\"27\":1,\"29\":1,\"66\":1,\"67\":1,\"83\":2,\"105\":1,\"142\":1,\"143\":1,\"165\":1,\"208\":1,\"224\":1,\"232\":2,\"233\":2,\"267\":4,\"269\":2,\"270\":2,\"275\":1,\"276\":1,\"277\":1,\"278\":2,\"279\":1,\"282\":1,\"283\":1,\"285\":1,\"286\":1,\"288\":1,\"299\":1,\"302\":1,\"303\":1,\"304\":3,\"305\":1,\"307\":2,\"319\":2,\"344\":1,\"491\":2,\"525\":1,\"623\":1,\"663\":1,\"666\":1,\"667\":1,\"668\":1,\"688\":1,\"710\":1,\"712\":2,\"728\":1,\"739\":2,\"742\":3,\"777\":1,\"790\":1,\"796\":1}}],[\"importexcel\",{\"1\":{\"525\":1}}],[\"import引入\",{\"1\":{\"309\":1}}],[\"import\",{\"1\":{\"14\":1,\"91\":1,\"93\":3,\"104\":1,\"110\":8,\"112\":3,\"117\":4,\"142\":1,\"151\":1,\"224\":1,\"241\":8,\"309\":1,\"310\":1,\"312\":2,\"319\":1,\"407\":10,\"408\":3,\"409\":6,\"430\":9,\"504\":5,\"517\":4,\"519\":1,\"520\":2,\"522\":8,\"532\":1,\"534\":1,\"539\":12,\"544\":13,\"551\":16,\"616\":5,\"623\":2,\"627\":1,\"628\":6,\"630\":4,\"655\":10,\"659\":3,\"671\":6,\"675\":1,\"727\":14,\"758\":14}}],[\"ip不可以使用localhost\",{\"1\":{\"681\":1}}],[\"ip不可控还是很麻烦\",{\"1\":{\"545\":1}}],[\"ipage<skuinfoentity>\",{\"1\":{\"675\":1}}],[\"ipage<spuinfoentity>\",{\"1\":{\"675\":1}}],[\"ipage<attrentity>\",{\"1\":{\"673\":1,\"674\":1}}],[\"ipage<attrgroupentity>\",{\"1\":{\"670\":2}}],[\"ip是不固定的\",{\"1\":{\"545\":1}}],[\"ip握手以及身份验证\",{\"1\":{\"463\":1}}],[\"ip=111\",{\"1\":{\"443\":1}}],[\"ip定位服务\",{\"0\":{\"443\":1}}],[\"ip\",{\"1\":{\"27\":2,\"443\":2}}],[\"ior\",{\"1\":{\"544\":1}}],[\"iorderservice\",{\"1\":{\"355\":1}}],[\"io<\",{\"1\":{\"416\":1}}],[\"ioc相关内容\",{\"0\":{\"271\":1}}],[\"ioc容器中创建好service和dao对象后\",{\"1\":{\"268\":1}}],[\"ioc容器\",{\"1\":{\"268\":1}}],[\"ioc\",{\"0\":{\"294\":1},\"1\":{\"268\":1}}],[\"ioc控制反转\",{\"0\":{\"268\":1}}],[\"ioexception\",{\"1\":{\"175\":1,\"184\":1,\"241\":2,\"319\":1,\"423\":1,\"453\":2,\"687\":1,\"688\":2,\"704\":1,\"710\":1,\"788\":1,\"801\":1}}],[\"io\",{\"1\":{\"27\":1,\"43\":1,\"241\":1,\"266\":1,\"332\":1,\"377\":1,\"378\":1,\"397\":1,\"416\":1,\"430\":2,\"504\":1,\"609\":1,\"623\":1,\"661\":1,\"695\":1}}],[\"isfollow\",{\"1\":{\"806\":9,\"807\":2}}],[\"isfalse\",{\"1\":{\"803\":1}}],[\"issuccess\",{\"1\":{\"803\":4,\"804\":4}}],[\"isstop\",{\"1\":{\"155\":3}}],[\"ismember\",{\"1\":{\"803\":6,\"804\":4}}],[\"islike\",{\"1\":{\"803\":1}}],[\"islock\",{\"1\":{\"755\":2,\"756\":2,\"758\":2,\"777\":2,\"781\":3,\"790\":2}}],[\"isblogliked\",{\"1\":{\"803\":3,\"804\":1,\"810\":1}}],[\"isblank\",{\"1\":{\"21\":1,\"512\":1,\"558\":2,\"560\":1,\"561\":1,\"566\":1,\"574\":1,\"575\":2,\"728\":1,\"732\":2,\"742\":1,\"756\":1,\"758\":1}}],[\"isbefore\",{\"1\":{\"765\":1}}],[\"istrue\",{\"1\":{\"755\":1,\"758\":1,\"777\":1,\"778\":1,\"803\":1}}],[\"isphoneinvalid\",{\"1\":{\"738\":2,\"741\":2}}],[\"isparent\",{\"1\":{\"509\":2}}],[\"isusekeyprefix\",{\"1\":{\"706\":1}}],[\"isvalid\",{\"1\":{\"668\":1}}],[\"isheldbycurrentthread\",{\"1\":{\"551\":1,\"561\":1,\"573\":1,\"574\":1}}],[\"isheldexclusively\",{\"1\":{\"136\":1}}],[\"isolation\",{\"1\":{\"472\":1}}],[\"iscachenullvalues\",{\"1\":{\"706\":1}}],[\"iscancelled\",{\"1\":{\"105\":1}}],[\"ischeated\",{\"1\":{\"409\":2}}],[\"isafter\",{\"1\":{\"756\":1,\"758\":1,\"765\":1}}],[\"isauth\",{\"1\":{\"664\":1}}],[\"isanyblank\",{\"1\":{\"599\":1,\"605\":1,\"607\":1,\"725\":1}}],[\"isadmin\",{\"1\":{\"559\":2,\"560\":1,\"608\":3}}],[\"isack\",{\"1\":{\"344\":1}}],[\"isasc\",{\"1\":{\"220\":5}}],[\"isalive\",{\"1\":{\"87\":3}}],[\"isnull\",{\"1\":{\"559\":1}}],[\"isnotnull\",{\"1\":{\"566\":1,\"575\":2}}],[\"isnotblank\",{\"1\":{\"558\":1,\"559\":3,\"608\":1,\"733\":1,\"747\":2,\"752\":1,\"755\":1,\"758\":1}}],[\"isnotempty\",{\"1\":{\"214\":1,\"670\":1,\"672\":2,\"673\":1,\"674\":1,\"675\":10}}],[\"isnan\",{\"1\":{\"64\":1}}],[\"iseckillvoucherservice\",{\"1\":{\"765\":1}}],[\"isexpired\",{\"1\":{\"457\":2}}],[\"isempty\",{\"1\":{\"214\":1,\"220\":1,\"319\":1,\"355\":1,\"430\":1,\"512\":1,\"531\":1,\"559\":1,\"562\":1,\"698\":1,\"702\":1,\"706\":1,\"710\":6,\"742\":1,\"796\":2,\"805\":1,\"807\":1,\"810\":1,\"820\":1}}],[\"iservice<user>\",{\"1\":{\"208\":1}}],[\"iservice接口\",{\"0\":{\"208\":1}}],[\"is90\",{\"1\":{\"143\":1}}],[\"is86\",{\"1\":{\"143\":1}}],[\"is88\",{\"1\":{\"143\":1}}],[\"isdone\",{\"1\":{\"105\":1,\"142\":1}}],[\"isdelete\",{\"1\":{\"9\":2,\"25\":1,\"509\":2,\"557\":4,\"596\":2}}],[\"isinterrupted\",{\"1\":{\"88\":5,\"155\":3}}],[\"is\",{\"1\":{\"53\":3,\"54\":2,\"56\":3,\"63\":4,\"64\":5,\"66\":4,\"67\":2,\"81\":7,\"87\":1,\"140\":2,\"142\":2,\"143\":7,\"156\":2,\"409\":1,\"519\":8,\"675\":1,\"681\":1,\"728\":3,\"731\":2,\"733\":2}}],[\"ifollowservice\",{\"1\":{\"806\":1}}],[\"if=\",{\"1\":{\"507\":2,\"518\":1}}],[\"if指令\",{\"0\":{\"419\":1}}],[\"if>\",{\"1\":{\"185\":6,\"191\":5,\"419\":1}}],[\"if\",{\"1\":{\"14\":5,\"17\":1,\"21\":5,\"22\":2,\"23\":5,\"26\":1,\"27\":9,\"54\":6,\"56\":5,\"58\":2,\"63\":2,\"64\":6,\"66\":15,\"67\":15,\"71\":14,\"72\":1,\"87\":3,\"91\":2,\"92\":3,\"117\":1,\"120\":1,\"140\":3,\"142\":5,\"143\":2,\"151\":1,\"155\":3,\"165\":2,\"208\":2,\"210\":2,\"211\":1,\"214\":3,\"220\":6,\"241\":1,\"319\":2,\"344\":1,\"352\":1,\"355\":3,\"406\":1,\"409\":3,\"419\":1,\"430\":4,\"452\":1,\"454\":1,\"457\":1,\"491\":2,\"512\":3,\"531\":1,\"532\":2,\"539\":1,\"544\":1,\"549\":2,\"551\":2,\"558\":12,\"559\":13,\"560\":6,\"561\":10,\"562\":6,\"564\":1,\"565\":1,\"566\":3,\"573\":2,\"574\":10,\"575\":3,\"599\":8,\"605\":5,\"607\":3,\"608\":5,\"612\":5,\"613\":2,\"616\":1,\"620\":1,\"630\":2,\"665\":2,\"666\":1,\"670\":3,\"672\":2,\"673\":8,\"674\":2,\"675\":15,\"688\":3,\"690\":2,\"691\":1,\"697\":2,\"698\":1,\"702\":1,\"703\":8,\"706\":5,\"710\":15,\"716\":1,\"725\":3,\"728\":4,\"732\":10,\"733\":1,\"738\":4,\"739\":1,\"741\":4,\"742\":3,\"747\":4,\"751\":2,\"752\":3,\"755\":4,\"756\":3,\"758\":6,\"765\":4,\"770\":5,\"777\":1,\"778\":1,\"780\":1,\"781\":1,\"782\":3,\"789\":3,\"790\":4,\"796\":5,\"802\":1,\"803\":4,\"804\":3,\"805\":1,\"806\":1,\"807\":4,\"809\":1,\"810\":2,\"817\":3,\"820\":3}}],[\"i\",{\"1\":{\"12\":1,\"51\":2,\"66\":3,\"72\":2,\"83\":6,\"89\":1,\"91\":12,\"92\":4,\"93\":18,\"95\":3,\"99\":3,\"100\":3,\"105\":7,\"107\":6,\"108\":3,\"109\":3,\"110\":16,\"117\":3,\"119\":10,\"120\":4,\"151\":6,\"211\":10,\"333\":3,\"347\":2,\"430\":6,\"431\":4,\"432\":2,\"452\":3,\"537\":2,\"538\":2,\"539\":2,\"566\":14,\"575\":7,\"584\":1,\"643\":1,\"694\":1,\"710\":3,\"712\":13,\"715\":10,\"716\":4,\"763\":4,\"788\":2}}],[\"id一致的放到一个集合\",{\"1\":{\"816\":1}}],[\"id规律太明显\",{\"1\":{\"762\":1}}],[\"id>\",{\"1\":{\"758\":2}}],[\"idea生成\",{\"1\":{\"586\":1}}],[\"idea插件开发\",{\"0\":{\"496\":1,\"846\":1}}],[\"idea\",{\"1\":{\"491\":4,\"493\":5},\"2\":{\"497\":1,\"498\":1}}],[\"id必须唯一\",{\"1\":{\"272\":1}}],[\"id属性标示给bean起名字\",{\"1\":{\"269\":1,\"270\":1}}],[\"id+\",{\"1\":{\"262\":1}}],[\"id和oss\",{\"1\":{\"241\":1,\"665\":1}}],[\"idstr\",{\"1\":{\"817\":2}}],[\"idset\",{\"1\":{\"688\":2}}],[\"ids\",{\"1\":{\"190\":1,\"205\":2,\"207\":2,\"208\":5,\"214\":3,\"805\":5,\"807\":2,\"810\":4,\"817\":4}}],[\"id=\",{\"1\":{\"175\":3,\"178\":2,\"179\":1,\"180\":3,\"181\":2,\"182\":3,\"184\":1,\"185\":2,\"186\":1,\"188\":2,\"189\":1,\"190\":1,\"191\":1,\"207\":1,\"208\":1,\"241\":1,\"269\":2,\"270\":3,\"272\":1,\"275\":1,\"276\":2,\"277\":1,\"278\":1,\"282\":3,\"283\":1,\"285\":1,\"286\":3,\"287\":3,\"295\":1,\"299\":1,\"406\":2,\"438\":1,\"507\":1,\"518\":2,\"672\":1,\"674\":1,\"809\":1}}],[\"idlist\",{\"1\":{\"564\":2}}],[\"idle\",{\"1\":{\"398\":2}}],[\"idl\",{\"1\":{\"29\":1}}],[\"idrequest\",{\"1\":{\"21\":12}}],[\"idx\",{\"1\":{\"9\":1,\"453\":2,\"511\":2}}],[\"id\",{\"1\":{\"9\":3,\"21\":6,\"22\":8,\"23\":8,\"25\":1,\"27\":2,\"29\":2,\"47\":1,\"175\":2,\"178\":1,\"180\":2,\"181\":1,\"182\":7,\"188\":1,\"189\":2,\"190\":4,\"191\":2,\"192\":3,\"198\":1,\"199\":1,\"201\":1,\"204\":2,\"205\":2,\"207\":1,\"208\":14,\"210\":4,\"214\":2,\"215\":1,\"219\":1,\"224\":18,\"241\":2,\"262\":16,\"352\":1,\"382\":1,\"444\":10,\"468\":4,\"476\":1,\"486\":1,\"509\":3,\"518\":5,\"519\":1,\"557\":7,\"559\":1,\"560\":4,\"562\":3,\"563\":1,\"566\":2,\"567\":2,\"575\":4,\"596\":2,\"607\":2,\"608\":4,\"612\":4,\"616\":4,\"643\":1,\"655\":1,\"660\":1,\"661\":2,\"663\":5,\"665\":7,\"670\":31,\"672\":4,\"674\":2,\"682\":13,\"686\":1,\"687\":1,\"688\":1,\"704\":3,\"710\":3,\"721\":1,\"728\":2,\"731\":5,\"747\":8,\"751\":4,\"752\":3,\"755\":6,\"756\":7,\"758\":21,\"763\":3,\"764\":6,\"765\":3,\"769\":2,\"770\":8,\"778\":5,\"780\":1,\"790\":3,\"795\":3,\"796\":3,\"801\":8,\"802\":6,\"803\":8,\"804\":6,\"805\":8,\"806\":11,\"807\":8,\"809\":1,\"810\":2,\"817\":3}}],[\"init\",{\"1\":{\"278\":4,\"279\":1,\"303\":3,\"651\":2,\"790\":1}}],[\"initialize\",{\"1\":{\"668\":1}}],[\"initialized\",{\"1\":{\"63\":1}}],[\"initializingbean\",{\"1\":{\"279\":1}}],[\"initialcapacity\",{\"1\":{\"54\":6,\"64\":13,\"71\":1}}],[\"initial\",{\"1\":{\"14\":1,\"53\":1,\"54\":4,\"63\":3,\"64\":9,\"71\":5,\"342\":2,\"350\":1,\"438\":1}}],[\"initialstate\",{\"1\":{\"14\":2,\"612\":1,\"615\":2}}],[\"injection\",{\"1\":{\"268\":1}}],[\"inversion\",{\"1\":{\"268\":1}}],[\"invocationhandler\",{\"1\":{\"165\":1}}],[\"invoked\",{\"1\":{\"140\":1,\"728\":1}}],[\"invokeuser\",{\"1\":{\"27\":4}}],[\"invokecount\",{\"1\":{\"26\":1,\"27\":3,\"29\":2}}],[\"invokeinterfaceinfo\",{\"1\":{\"23\":1}}],[\"invokeinterfaceinfousingpost\",{\"1\":{\"22\":1,\"23\":1}}],[\"invoke\",{\"1\":{\"22\":1,\"23\":2,\"165\":2,\"170\":1,\"525\":1}}],[\"invokeloading\",{\"1\":{\"22\":2,\"23\":2}}],[\"invokeres\",{\"1\":{\"22\":2,\"23\":2}}],[\"inputstream\",{\"1\":{\"175\":3,\"184\":3,\"241\":3,\"319\":20,\"430\":2,\"453\":2,\"665\":6,\"733\":1}}],[\"inheritablethreadlocal\",{\"1\":{\"81\":1}}],[\"inheritdoc\",{\"1\":{\"56\":1}}],[\"indicate\",{\"1\":{\"66\":1,\"67\":1}}],[\"indices\",{\"1\":{\"56\":1,\"532\":1,\"682\":1,\"687\":1}}],[\"indexresponse\",{\"1\":{\"687\":1}}],[\"indexrequest\",{\"1\":{\"687\":7,\"688\":6}}],[\"indexdata\",{\"1\":{\"687\":1}}],[\"indexes参数来记录未使用索引的查询\",{\"1\":{\"485\":1}}],[\"index+1\",{\"1\":{\"319\":2,\"418\":1}}],[\"indexof\",{\"1\":{\"319\":2,\"664\":1}}],[\"indexoutofboundsexception\",{\"1\":{\"56\":1}}],[\"index=\",{\"1\":{\"286\":2,\"518\":1}}],[\"index语句来实现\",{\"1\":{\"47\":1}}],[\"index\",{\"1\":{\"9\":1,\"16\":1,\"22\":3,\"23\":2,\"47\":2,\"56\":8,\"66\":1,\"67\":3,\"239\":2,\"319\":4,\"418\":1,\"419\":2,\"438\":1,\"439\":1,\"465\":2,\"466\":4,\"467\":1,\"486\":5,\"507\":5,\"511\":2,\"517\":6,\"518\":1,\"643\":1,\"646\":1,\"682\":8,\"686\":5,\"687\":3,\"688\":1,\"690\":2,\"691\":2,\"710\":1,\"733\":4}}],[\"installation\",{\"1\":{\"378\":1,\"516\":1}}],[\"install\",{\"1\":{\"317\":1,\"378\":2,\"639\":3,\"640\":1,\"655\":4,\"675\":1}}],[\"instances\",{\"1\":{\"53\":2}}],[\"instance\",{\"1\":{\"53\":2,\"269\":1,\"270\":1,\"278\":1,\"295\":1}}],[\"instanceof\",{\"1\":{\"27\":3,\"66\":1,\"67\":2,\"71\":1}}],[\"insertuser\",{\"1\":{\"788\":1}}],[\"insertuserstest\",{\"1\":{\"539\":1}}],[\"insert>\",{\"1\":{\"188\":2}}],[\"insert\",{\"1\":{\"188\":2,\"192\":1,\"196\":1,\"211\":2,\"224\":4,\"537\":1,\"599\":1,\"673\":2,\"675\":1}}],[\"inserted\",{\"1\":{\"56\":2}}],[\"inserts\",{\"1\":{\"56\":1}}],[\"in\",{\"1\":{\"54\":1,\"56\":3,\"63\":4,\"64\":2,\"66\":7,\"71\":1,\"81\":6,\"140\":1,\"142\":1,\"143\":7,\"190\":2,\"205\":2,\"207\":1,\"214\":1,\"406\":1,\"457\":8,\"518\":1,\"534\":2,\"566\":1,\"575\":2,\"674\":1,\"805\":1,\"810\":1,\"817\":1}}],[\"innerhtml\",{\"1\":{\"406\":3}}],[\"inneruserinterfaceinfoservice\",{\"1\":{\"27\":3,\"29\":1}}],[\"inneruserservice\",{\"1\":{\"27\":3,\"29\":3}}],[\"innerinterfaceinfoserviceimpl\",{\"1\":{\"29\":1}}],[\"innerinterfaceinfoservice\",{\"1\":{\"27\":3,\"29\":2}}],[\"inf\",{\"1\":{\"726\":1}}],[\"inflate\",{\"1\":{\"53\":1}}],[\"inf文件夹\",{\"1\":{\"18\":1}}],[\"infofuture\",{\"1\":{\"721\":4}}],[\"information\",{\"1\":{\"451\":1,\"457\":1,\"665\":1}}],[\"info的类型最好是一个map或者实体类\",{\"1\":{\"217\":1}}],[\"info\",{\"1\":{\"9\":1,\"22\":1,\"25\":1,\"27\":8,\"204\":2,\"211\":2,\"217\":1,\"239\":2,\"241\":2,\"245\":1,\"347\":1,\"355\":1,\"378\":2,\"451\":1,\"452\":1,\"453\":2,\"454\":1,\"544\":1,\"559\":1,\"575\":2,\"605\":1,\"670\":5,\"675\":4,\"710\":1,\"721\":7}}],[\"incrby\",{\"1\":{\"789\":1,\"796\":1}}],[\"increases\",{\"1\":{\"56\":1}}],[\"incrementscore\",{\"1\":{\"400\":1}}],[\"increments\",{\"1\":{\"56\":2}}],[\"increment\",{\"1\":{\"9\":1,\"92\":2,\"392\":1,\"509\":1,\"557\":2,\"596\":1,\"670\":8,\"672\":1,\"763\":1,\"764\":1,\"801\":2,\"806\":1}}],[\"includedistance\",{\"1\":{\"817\":1}}],[\"include\",{\"1\":{\"630\":1,\"635\":1,\"643\":1,\"646\":1,\"670\":2,\"691\":1}}],[\"includes\",{\"1\":{\"14\":1,\"518\":1,\"612\":1,\"613\":1}}],[\"incorporate\",{\"1\":{\"66\":1}}],[\"intvalue\",{\"1\":{\"355\":1,\"789\":1,\"790\":1,\"796\":1}}],[\"intro\",{\"1\":{\"196\":1,\"208\":1,\"211\":1,\"217\":1,\"532\":1}}],[\"inttostring\",{\"1\":{\"143\":1}}],[\"intel\",{\"1\":{\"523\":1}}],[\"intellij\",{\"1\":{\"496\":1}}],[\"intent\",{\"1\":{\"409\":1}}],[\"integer>\",{\"1\":{\"668\":1}}],[\"integercompletablefuture\",{\"1\":{\"119\":2,\"715\":2}}],[\"integer\",{\"1\":{\"56\":2,\"71\":2,\"105\":2,\"115\":1,\"117\":3,\"119\":1,\"120\":2,\"143\":2,\"168\":1,\"169\":2,\"208\":3,\"209\":6,\"210\":1,\"217\":1,\"220\":9,\"224\":6,\"226\":11,\"230\":10,\"239\":1,\"262\":6,\"558\":1,\"559\":2,\"620\":2,\"623\":4,\"624\":1,\"625\":3,\"627\":3,\"660\":1,\"663\":1,\"666\":5,\"667\":2,\"668\":2,\"673\":1,\"686\":1,\"687\":1,\"712\":2,\"715\":1,\"716\":2,\"721\":3,\"732\":2,\"803\":1,\"806\":1,\"810\":3,\"817\":4}}],[\"intern\",{\"1\":{\"770\":4,\"777\":1}}],[\"internal\",{\"1\":{\"63\":1,\"241\":1,\"665\":2}}],[\"intersect\",{\"1\":{\"400\":3,\"807\":5}}],[\"interval\",{\"1\":{\"342\":2,\"350\":2}}],[\"interview\",{\"0\":{\"836\":1},\"1\":{\"44\":1}}],[\"interceptors\",{\"1\":{\"532\":2,\"630\":2}}],[\"interceptorregistry\",{\"1\":{\"232\":2,\"233\":1,\"739\":1,\"742\":1}}],[\"interceptor仅针对springmvc的访问进行增强\",{\"1\":{\"231\":1}}],[\"interceptor属于springmvc技术\",{\"1\":{\"231\":1}}],[\"interceptor\",{\"1\":{\"219\":3}}],[\"interrupted\",{\"1\":{\"155\":1}}],[\"interruptedexception\",{\"1\":{\"87\":4,\"88\":1,\"89\":2,\"92\":4,\"104\":2,\"105\":1,\"107\":1,\"108\":1,\"109\":1,\"110\":6,\"112\":4,\"117\":1,\"119\":2,\"120\":2,\"142\":8,\"143\":4,\"153\":2,\"155\":4,\"156\":5,\"332\":1,\"333\":3,\"339\":2,\"344\":1,\"551\":1,\"573\":1,\"704\":1,\"712\":2,\"715\":2,\"716\":2,\"721\":1,\"755\":1}}],[\"interrupt\",{\"1\":{\"88\":2,\"155\":5}}],[\"interrupt打断线程\",{\"0\":{\"88\":1}}],[\"interface后端端口为\",{\"1\":{\"27\":2}}],[\"interfaceinfoid\",{\"1\":{\"25\":1,\"26\":4,\"27\":2,\"29\":2}}],[\"interfaceinfoinvokerequest\",{\"1\":{\"23\":7}}],[\"interfaceinfostatusenum\",{\"1\":{\"21\":2,\"23\":1}}],[\"interfaceinfoservice\",{\"1\":{\"21\":4,\"23\":1}}],[\"interfaceinfo\",{\"1\":{\"14\":4,\"21\":14,\"22\":1,\"23\":1,\"27\":4,\"29\":1}}],[\"interfaceinfo>\",{\"1\":{\"14\":3,\"22\":1,\"23\":1}}],[\"interface\",{\"1\":{\"9\":1,\"14\":1,\"16\":1,\"22\":1,\"25\":1,\"27\":2,\"29\":3,\"47\":1,\"165\":1,\"176\":1,\"196\":1,\"208\":1,\"224\":1,\"269\":2,\"275\":1,\"276\":1,\"278\":2,\"319\":1,\"491\":1,\"534\":1,\"659\":1,\"667\":2,\"668\":1,\"694\":1,\"777\":1}}],[\"into\",{\"1\":{\"53\":1,\"54\":1,\"188\":2,\"211\":2,\"224\":2}}],[\"int\",{\"1\":{\"9\":1,\"25\":3,\"27\":1,\"47\":1,\"51\":1,\"53\":2,\"54\":1,\"56\":9,\"63\":8,\"64\":4,\"66\":7,\"67\":3,\"71\":6,\"72\":2,\"83\":3,\"87\":1,\"91\":8,\"92\":3,\"93\":10,\"95\":1,\"98\":1,\"99\":1,\"100\":1,\"105\":1,\"107\":2,\"108\":4,\"109\":1,\"110\":8,\"115\":2,\"117\":7,\"119\":2,\"151\":4,\"158\":1,\"168\":1,\"169\":1,\"170\":2,\"171\":1,\"175\":1,\"182\":1,\"184\":2,\"190\":1,\"192\":1,\"207\":2,\"210\":1,\"211\":3,\"216\":2,\"219\":2,\"239\":1,\"248\":1,\"250\":2,\"251\":1,\"252\":1,\"283\":2,\"286\":3,\"288\":1,\"319\":3,\"333\":1,\"347\":1,\"355\":1,\"416\":1,\"430\":2,\"431\":1,\"432\":1,\"452\":1,\"487\":1,\"509\":3,\"537\":2,\"538\":2,\"539\":4,\"540\":2,\"544\":2,\"557\":2,\"558\":1,\"566\":15,\"575\":8,\"596\":1,\"599\":1,\"668\":3,\"670\":6,\"710\":5,\"712\":3,\"713\":2,\"715\":2,\"728\":2,\"763\":3,\"764\":1,\"769\":1,\"770\":3,\"788\":2,\"789\":1,\"790\":2,\"796\":1,\"801\":3,\"810\":1,\"817\":2,\"819\":1,\"820\":2}}],[\"接触一些企业级的开发技术\",{\"1\":{\"579\":1}}],[\"接受和校验数据\",{\"1\":{\"675\":1}}],[\"接受类型\",{\"1\":{\"603\":1}}],[\"接受参数\",{\"1\":{\"603\":1}}],[\"接受者\",{\"1\":{\"337\":1}}],[\"接受一个参数\",{\"1\":{\"143\":1}}],[\"接收微信用户发送来的消息\",{\"1\":{\"453\":1}}],[\"接收普通消息\",{\"0\":{\"453\":1}}],[\"接收到delay\",{\"1\":{\"355\":1}}],[\"接收到\",{\"1\":{\"347\":1}}],[\"接收到消息的回调方法\",{\"1\":{\"406\":1}}],[\"接收到消息后直接存入磁盘而非内存\",{\"1\":{\"347\":1,\"362\":1}}],[\"接收到消息\",{\"1\":{\"333\":1,\"453\":2,\"454\":1}}],[\"接收\",{\"1\":{\"339\":1}}],[\"接收消息\",{\"1\":{\"329\":1,\"332\":1,\"333\":1,\"453\":1}}],[\"接收后将其转发给service进行业务处理\",{\"1\":{\"244\":1}}],[\"接收参数\",{\"1\":{\"184\":1}}],[\"接着同一时间去访问数据库\",{\"1\":{\"754\":1}}],[\"接着编写分类管理\",{\"1\":{\"663\":1}}],[\"接着重启mysql\",{\"1\":{\"651\":1}}],[\"接着你需要自己写代码不断地检测当前线程的标识位\",{\"1\":{\"155\":1}}],[\"接着使用命令jstack\",{\"1\":{\"104\":1}}],[\"接下来的\",{\"1\":{\"738\":1}}],[\"接下来会使用别人封装好的工具\",{\"1\":{\"703\":1}}],[\"接下来为其他服务也逆向生成代码\",{\"1\":{\"655\":1}}],[\"接下来\",{\"1\":{\"115\":1,\"713\":1}}],[\"接入指南\",{\"1\":{\"451\":1}}],[\"接入层网关\",{\"1\":{\"27\":1}}],[\"接入接口\",{\"1\":{\"5\":1}}],[\"接口等\",{\"1\":{\"694\":1}}],[\"接口幂等性\",{\"1\":{\"688\":1}}],[\"接口类型\",{\"1\":{\"521\":1}}],[\"接口传入的参数为数组\",{\"1\":{\"190\":1}}],[\"接口方法参数是\",{\"1\":{\"184\":2}}],[\"接口方法参数使用\",{\"1\":{\"184\":1}}],[\"接口中就是被代理的所有方法\",{\"1\":{\"165\":1}}],[\"接口中的方法默认是public且abstract的\",{\"1\":{\"47\":1}}],[\"接口就是一种显示锁\",{\"1\":{\"152\":1}}],[\"接口来支持有返回值的任务\",{\"1\":{\"142\":1}}],[\"接口又扩展自\",{\"1\":{\"142\":1}}],[\"接口提供了一种异步获取计算结果的机制\",{\"1\":{\"141\":1}}],[\"接口是\",{\"1\":{\"141\":1}}],[\"接口的实现\",{\"1\":{\"115\":2,\"713\":2}}],[\"接口或使用构造函数指定的\",{\"1\":{\"112\":1}}],[\"接口和抽象类\",{\"1\":{\"47\":1}}],[\"接口和实现的区别\",{\"1\":{\"47\":1}}],[\"接口大现类和bean引用的注解\",{\"1\":{\"29\":1}}],[\"接口调用语言\",{\"1\":{\"29\":1}}],[\"接口调用次数\",{\"1\":{\"27\":1}}],[\"接口调用次数+1\",{\"1\":{\"27\":1,\"29\":1}}],[\"接口\",{\"1\":{\"27\":1,\"47\":1,\"114\":1,\"142\":2}}],[\"接口保护\",{\"1\":{\"27\":1}}],[\"接口次数+1\",{\"0\":{\"26\":1}}],[\"接口id\",{\"1\":{\"25\":1}}],[\"接口已关闭\",{\"1\":{\"23\":1}}],[\"接口状态\",{\"1\":{\"22\":1,\"23\":1}}],[\"接口状态0\",{\"1\":{\"9\":1}}],[\"接口不存在\",{\"1\":{\"22\":1,\"23\":1}}],[\"接口验证失败\",{\"1\":{\"21\":1}}],[\"接口发布\",{\"0\":{\"21\":1}}],[\"接口功能管理\",{\"0\":{\"20\":1}}],[\"接口校验密钥\",{\"1\":{\"17\":1}}],[\"接口名称\",{\"1\":{\"14\":1,\"521\":1}}],[\"接口地址\",{\"1\":{\"9\":1,\"521\":1,\"727\":1}}],[\"接口信息表\",{\"1\":{\"9\":1}}],[\"限时优惠\",{\"1\":{\"361\":2}}],[\"限流\",{\"1\":{\"7\":1,\"27\":2,\"657\":1}}],[\"限制频繁查询\",{\"1\":{\"699\":1}}],[\"限制请求\",{\"1\":{\"27\":1}}],[\"限制\",{\"1\":{\"5\":1}}],[\"s=\",{\"1\":{\"704\":4}}],[\"sbin\",{\"1\":{\"639\":2}}],[\"sb2\",{\"1\":{\"27\":2}}],[\"s2\",{\"1\":{\"519\":1,\"537\":1,\"538\":1,\"539\":1,\"598\":1,\"609\":1}}],[\"snapshot\",{\"1\":{\"476\":1}}],[\"snapshot<\",{\"1\":{\"319\":1,\"655\":1,\"661\":1,\"663\":1,\"733\":1}}],[\"sdf\",{\"1\":{\"319\":2}}],[\"sdk\",{\"1\":{\"241\":1,\"665\":1}}],[\"sdk以及oss文档https\",{\"1\":{\"240\":1}}],[\"sdk<\",{\"1\":{\"19\":1}}],[\"sdk开发\",{\"0\":{\"15\":1},\"1\":{\"7\":1}}],[\"ssl\",{\"1\":{\"639\":1}}],[\"ssgdataid\",{\"1\":{\"453\":1}}],[\"ssgid\",{\"1\":{\"453\":1}}],[\"ssgtype\",{\"1\":{\"453\":1}}],[\"ssfb\",{\"1\":{\"312\":4}}],[\"ss\",{\"1\":{\"259\":2,\"409\":1,\"675\":1}}],[\"ssm\",{\"1\":{\"224\":1}}],[\"ssm整合步骤\",{\"0\":{\"224\":1}}],[\"ssm整合\",{\"0\":{\"223\":1}}],[\"ssm购物平台的登陆注册有没有使用token\",{\"1\":{\"47\":1}}],[\"src=\",{\"1\":{\"438\":1,\"519\":1,\"609\":1,\"616\":2}}],[\"src\",{\"1\":{\"140\":4,\"525\":1,\"643\":2,\"682\":1,\"788\":1}}],[\"scss\",{\"1\":{\"663\":1}}],[\"scrollresult\",{\"1\":{\"810\":8}}],[\"script\",{\"1\":{\"691\":2,\"703\":2,\"780\":5,\"789\":5,\"790\":1,\"796\":1}}],[\"scripts$fastcgi\",{\"1\":{\"691\":1}}],[\"scripts\",{\"1\":{\"655\":1,\"691\":2}}],[\"script>\",{\"1\":{\"406\":1,\"438\":2,\"519\":1,\"520\":1,\"534\":1,\"663\":1}}],[\"screenexecutor\",{\"1\":{\"120\":1,\"121\":3,\"122\":3,\"716\":1,\"717\":3,\"718\":3}}],[\"score\",{\"1\":{\"804\":3}}],[\"scoremode\",{\"1\":{\"710\":1}}],[\"score2\",{\"1\":{\"392\":1}}],[\"score1\",{\"1\":{\"392\":1}}],[\"scoped\",{\"1\":{\"663\":1}}],[\"scoped>\",{\"1\":{\"534\":1}}],[\"scope设置bean的作用范围\",{\"1\":{\"302\":1}}],[\"scope\",{\"0\":{\"302\":1},\"1\":{\"272\":1,\"302\":1}}],[\"scope=\",{\"1\":{\"272\":1}}],[\"scope>\",{\"1\":{\"175\":1,\"224\":2,\"245\":1,\"313\":1,\"395\":1,\"589\":1,\"591\":1,\"655\":1,\"657\":2}}],[\"scale=1\",{\"1\":{\"438\":1}}],[\"scalable=no\",{\"1\":{\"438\":1}}],[\"scala\",{\"1\":{\"327\":1}}],[\"scan\",{\"1\":{\"299\":1,\"301\":1}}],[\"scheduler\",{\"1\":{\"544\":1,\"573\":1}}],[\"scheduled\",{\"1\":{\"409\":2,\"539\":1,\"544\":2,\"551\":1,\"573\":1}}],[\"scheduledthreadpool\",{\"1\":{\"115\":2,\"713\":2}}],[\"scheduledthreadpoolexecutor\",{\"1\":{\"114\":1}}],[\"scheduling\",{\"1\":{\"409\":1,\"539\":1,\"544\":1}}],[\"schemalocation=\",{\"1\":{\"269\":1,\"270\":1,\"278\":1,\"295\":1}}],[\"schema\",{\"1\":{\"198\":2,\"269\":3,\"270\":3,\"278\":3,\"295\":6}}],[\"schemapath\",{\"1\":{\"14\":1}}],[\"sleuth\",{\"1\":{\"657\":1}}],[\"sleep方法抛出interruptedexception\",{\"1\":{\"155\":1}}],[\"sleepthread\",{\"1\":{\"88\":6}}],[\"sleep作用\",{\"1\":{\"86\":1}}],[\"sleep\",{\"1\":{\"81\":2,\"84\":1,\"87\":1,\"88\":1,\"89\":2,\"104\":2,\"109\":1,\"110\":4,\"142\":7,\"143\":4,\"153\":2,\"155\":3,\"156\":3,\"333\":3,\"344\":1,\"703\":1,\"704\":3,\"755\":1}}],[\"slow\",{\"1\":{\"485\":1}}],[\"slf4j\",{\"1\":{\"27\":1,\"319\":1,\"344\":1,\"355\":1,\"451\":1,\"525\":2,\"544\":3,\"628\":3,\"666\":1,\"688\":2,\"710\":1,\"728\":1,\"758\":3}}],[\"synctourl\",{\"1\":{\"616\":1}}],[\"sync\",{\"1\":{\"136\":1}}],[\"synchronousread\",{\"1\":{\"526\":2}}],[\"synchronized三种应用方式\",{\"0\":{\"146\":1}}],[\"synchronized和lock都是悲观锁\",{\"1\":{\"145\":1}}],[\"synchronizedmethod\",{\"1\":{\"130\":1}}],[\"synchronized是java中的关键字\",{\"1\":{\"130\":1}}],[\"synchronized隐式实现\",{\"1\":{\"103\":1}}],[\"synchronizedlist\",{\"1\":{\"97\":1}}],[\"synchronized关键字提供了一种简单而有效的方法来控制对共享资源的访问\",{\"1\":{\"130\":1}}],[\"synchronized关键字\",{\"0\":{\"91\":1},\"1\":{\"545\":1}}],[\"synchronized\",{\"0\":{\"130\":1},\"1\":{\"81\":2,\"87\":2,\"91\":11,\"92\":2,\"96\":1,\"98\":1,\"103\":4,\"104\":4,\"130\":2,\"134\":3,\"140\":1,\"147\":1,\"148\":1,\"149\":1,\"152\":5,\"153\":4,\"156\":2,\"158\":2,\"702\":3,\"770\":4,\"777\":1,\"782\":1}}],[\"synchonized\",{\"1\":{\"101\":1}}],[\"systemconstants\",{\"1\":{\"801\":1,\"803\":1,\"817\":3}}],[\"systemid\",{\"1\":{\"544\":1}}],[\"systemexception\",{\"1\":{\"230\":5}}],[\"systematic\",{\"1\":{\"66\":1}}],[\"system\",{\"1\":{\"16\":4,\"17\":2,\"19\":2,\"21\":1,\"27\":3,\"56\":1,\"58\":1,\"81\":1,\"83\":4,\"87\":3,\"88\":2,\"89\":2,\"91\":2,\"92\":2,\"93\":3,\"95\":1,\"99\":1,\"100\":1,\"103\":5,\"104\":4,\"105\":5,\"107\":4,\"108\":2,\"109\":2,\"110\":8,\"111\":4,\"112\":20,\"117\":1,\"119\":9,\"120\":13,\"132\":1,\"140\":1,\"142\":10,\"143\":27,\"147\":1,\"148\":1,\"149\":1,\"151\":1,\"152\":8,\"153\":4,\"155\":6,\"156\":10,\"165\":5,\"168\":1,\"169\":2,\"175\":1,\"182\":1,\"184\":1,\"196\":2,\"204\":1,\"206\":1,\"208\":1,\"211\":6,\"215\":1,\"219\":3,\"224\":1,\"229\":1,\"230\":1,\"232\":6,\"233\":3,\"241\":7,\"245\":1,\"247\":4,\"248\":3,\"250\":4,\"251\":1,\"252\":1,\"253\":1,\"254\":2,\"256\":1,\"257\":1,\"258\":1,\"259\":7,\"261\":4,\"262\":13,\"267\":4,\"269\":2,\"270\":2,\"275\":1,\"276\":1,\"278\":4,\"279\":3,\"282\":1,\"283\":1,\"285\":1,\"286\":1,\"288\":6,\"295\":1,\"299\":1,\"302\":1,\"303\":3,\"304\":3,\"307\":1,\"310\":1,\"312\":1,\"313\":2,\"318\":1,\"319\":1,\"332\":1,\"333\":2,\"335\":2,\"336\":2,\"337\":2,\"338\":4,\"339\":1,\"395\":3,\"399\":2,\"400\":15,\"407\":3,\"430\":2,\"431\":4,\"432\":1,\"433\":1,\"442\":1,\"443\":1,\"444\":1,\"445\":1,\"453\":2,\"454\":2,\"455\":1,\"457\":3,\"486\":2,\"491\":5,\"525\":2,\"526\":1,\"537\":1,\"538\":1,\"539\":2,\"551\":3,\"561\":2,\"562\":2,\"574\":2,\"575\":8,\"598\":1,\"609\":2,\"616\":2,\"625\":1,\"628\":1,\"655\":2,\"665\":20,\"687\":7,\"696\":3,\"698\":1,\"704\":3,\"706\":3,\"712\":15,\"715\":9,\"716\":13,\"733\":1,\"763\":5,\"781\":1,\"788\":1,\"804\":1,\"809\":1}}],[\"s\",{\"1\":{\"54\":1,\"58\":1,\"83\":2,\"140\":2,\"143\":6,\"171\":2,\"544\":2,\"551\":3,\"573\":1,\"639\":3,\"646\":1,\"687\":1,\"691\":2,\"696\":1,\"704\":3,\"710\":4,\"771\":1,\"824\":12}}],[\"swap\",{\"1\":{\"131\":3,\"766\":1}}],[\"swaggerconfiguration\",{\"1\":{\"726\":2,\"727\":1}}],[\"swagger2configuration\",{\"1\":{\"727\":1}}],[\"swagger2<\",{\"1\":{\"726\":1}}],[\"swagger2\",{\"1\":{\"522\":1,\"727\":1}}],[\"swagger\",{\"1\":{\"521\":1,\"522\":3,\"585\":1,\"726\":4,\"727\":2}}],[\"swagger+knife4j接口文档\",{\"1\":{\"503\":1}}],[\"swag\",{\"1\":{\"27\":1}}],[\"switch\",{\"1\":{\"47\":1,\"491\":1}}],[\"sql优化\",{\"1\":{\"696\":2}}],[\"sql优化经验\",{\"0\":{\"487\":1}}],[\"sql查询\",{\"1\":{\"512\":1}}],[\"sql\",{\"1\":{\"190\":1,\"218\":1,\"377\":1,\"559\":1,\"663\":1}}],[\"sql会变成\",{\"1\":{\"185\":1}}],[\"sql>\",{\"1\":{\"180\":1}}],[\"sql片段引用\",{\"1\":{\"180\":1}}],[\"sqlsession\",{\"1\":{\"175\":4,\"176\":1,\"182\":1,\"184\":4}}],[\"sqlsessionfactorybean\",{\"1\":{\"224\":3,\"245\":1,\"312\":4}}],[\"sqlsessionfactorybuilder\",{\"1\":{\"175\":1,\"184\":1}}],[\"sqlsessionfactory\",{\"1\":{\"175\":4,\"184\":3,\"224\":1,\"312\":1}}],[\"sql索引失效\",{\"1\":{\"47\":1}}],[\"sql的执行顺序\",{\"1\":{\"47\":1}}],[\"sql调优\",{\"1\":{\"47\":1}}],[\"sql语句优化\",{\"1\":{\"487\":1}}],[\"sql语句执行很慢\",{\"0\":{\"486\":1}}],[\"sql语句如下\",{\"1\":{\"184\":1}}],[\"sql语句\",{\"1\":{\"9\":1}}],[\"sismember\",{\"1\":{\"789\":1,\"796\":1}}],[\"site\",{\"1\":{\"455\":1,\"523\":2}}],[\"sid\",{\"1\":{\"407\":13}}],[\"since\",{\"1\":{\"198\":1,\"215\":1,\"525\":1,\"605\":1}}],[\"singe\",{\"1\":{\"616\":1}}],[\"singletonlist\",{\"1\":{\"780\":1}}],[\"singlethreadpool\",{\"1\":{\"115\":1}}],[\"singlethreadexecutor\",{\"1\":{\"115\":2,\"713\":2}}],[\"single\",{\"1\":{\"317\":2}}],[\"sing\",{\"1\":{\"165\":4}}],[\"size=\",{\"1\":{\"506\":1,\"518\":2,\"534\":1}}],[\"size++\",{\"1\":{\"56\":2}}],[\"size是这个数组的长度\",{\"1\":{\"53\":1}}],[\"size\",{\"1\":{\"53\":2,\"54\":2,\"56\":11,\"58\":6,\"63\":3,\"67\":2,\"71\":1,\"214\":1,\"219\":2,\"220\":2,\"238\":2,\"372\":1,\"400\":3,\"422\":1,\"430\":2,\"439\":3,\"559\":2,\"562\":1,\"566\":3,\"575\":2,\"670\":1,\"674\":1,\"675\":1,\"685\":8,\"687\":1,\"710\":18,\"732\":14,\"803\":1,\"810\":1,\"816\":1,\"817\":6}}],[\"sized\",{\"1\":{\"53\":1}}],[\"simplify\",{\"1\":{\"53\":1}}],[\"simpleredislock\",{\"1\":{\"777\":4,\"781\":2,\"790\":2}}],[\"simplekey\",{\"1\":{\"706\":1}}],[\"simplewrite1710133712129\",{\"1\":{\"433\":1}}],[\"simplewrite\",{\"1\":{\"430\":1}}],[\"simplequeue1\",{\"1\":{\"359\":1}}],[\"simpleexchange\",{\"1\":{\"359\":1}}],[\"simpledateformat\",{\"1\":{\"319\":2,\"665\":1}}],[\"simple\",{\"1\":{\"43\":1,\"332\":2,\"333\":1,\"344\":1,\"349\":1,\"350\":1,\"351\":1,\"359\":2,\"486\":1,\"665\":1,\"728\":1}}],[\"signcount\",{\"1\":{\"820\":3}}],[\"signature\",{\"1\":{\"451\":7,\"452\":11,\"665\":2}}],[\"signalall\",{\"1\":{\"93\":1}}],[\"signal\",{\"1\":{\"91\":1,\"93\":8,\"156\":1}}],[\"signifies\",{\"1\":{\"71\":1}}],[\"signifying\",{\"1\":{\"63\":1}}],[\"sign\",{\"1\":{\"17\":4,\"27\":4,\"819\":5,\"820\":2}}],[\"signutils\",{\"1\":{\"17\":3,\"27\":1}}],[\"smart\",{\"1\":{\"687\":1,\"710\":1}}],[\"small\",{\"1\":{\"66\":1,\"518\":1}}],[\"sms\",{\"1\":{\"655\":1,\"675\":1}}],[\"smile\",{\"1\":{\"615\":1}}],[\"smtp\",{\"1\":{\"327\":1}}],[\"sm\",{\"1\":{\"43\":2}}],[\"skip\",{\"1\":{\"651\":2,\"817\":1}}],[\"skiplist\",{\"1\":{\"391\":1}}],[\"skutitle\",{\"1\":{\"710\":8}}],[\"skuprice=\",{\"1\":{\"710\":1}}],[\"skuprice=500\",{\"1\":{\"710\":1}}],[\"skuprice=1\",{\"1\":{\"710\":1}}],[\"skuprice\",{\"1\":{\"688\":1,\"710\":5}}],[\"skuhasstockvo\",{\"1\":{\"688\":2}}],[\"skuhasstock\",{\"1\":{\"688\":2}}],[\"skuesmodels\",{\"1\":{\"688\":4}}],[\"skuesmodel\",{\"1\":{\"688\":8,\"710\":2}}],[\"skureductionto\",{\"1\":{\"675\":8}}],[\"sku的优惠\",{\"1\":{\"675\":1}}],[\"sku的销售属性信息\",{\"1\":{\"675\":1}}],[\"sku的图片信息\",{\"1\":{\"675\":1,\"721\":1}}],[\"sku基本信息的获取\",{\"1\":{\"721\":1}}],[\"sku基本信息\",{\"1\":{\"675\":1}}],[\"skudesc\",{\"1\":{\"675\":1}}],[\"skuitemvo\",{\"1\":{\"721\":10}}],[\"skuimg\",{\"1\":{\"688\":1,\"710\":1}}],[\"skuimagesservice\",{\"1\":{\"675\":1,\"721\":1}}],[\"skuimagesentity\",{\"1\":{\"675\":7}}],[\"skuimagesentities\",{\"1\":{\"675\":2}}],[\"skuinfoentities\",{\"1\":{\"688\":3}}],[\"skuinfoentity\",{\"1\":{\"675\":8,\"688\":1,\"721\":1}}],[\"skuinfoservice\",{\"1\":{\"675\":1,\"688\":1}}],[\"skuidlist\",{\"1\":{\"688\":2}}],[\"skuid\",{\"1\":{\"670\":1,\"710\":1,\"721\":3}}],[\"skusaleattrvalueservice\",{\"1\":{\"675\":1,\"721\":1}}],[\"skusaleattrvalueentity\",{\"1\":{\"675\":6}}],[\"skus\",{\"1\":{\"675\":4}}],[\"sku销售属性\",{\"1\":{\"670\":1}}],[\"sku图片\",{\"1\":{\"670\":1}}],[\"sku图片表\",{\"1\":{\"670\":1}}],[\"sku信息\",{\"1\":{\"670\":1}}],[\"sku信息表\",{\"1\":{\"670\":1}}],[\"sku介绍描述\",{\"1\":{\"670\":1,\"675\":1}}],[\"sku名称\",{\"1\":{\"670\":1}}],[\"sku\",{\"1\":{\"468\":2,\"669\":1,\"670\":13,\"675\":6,\"688\":5,\"721\":2}}],[\"skywalking\",{\"1\":{\"485\":1}}],[\"sky\",{\"1\":{\"407\":1,\"408\":1,\"409\":2}}],[\"sk\",{\"1\":{\"27\":1}}],[\"sk是否合法\",{\"1\":{\"27\":1}}],[\"sourceasstring\",{\"1\":{\"687\":2,\"710\":2}}],[\"sourceaddress\",{\"1\":{\"27\":3}}],[\"source\",{\"1\":{\"663\":2,\"682\":1,\"685\":2,\"686\":1,\"687\":3,\"688\":1}}],[\"source=new\",{\"1\":{\"663\":1}}],[\"sow\",{\"1\":{\"485\":1}}],[\"socket\",{\"1\":{\"408\":1}}],[\"so\",{\"1\":{\"56\":1,\"66\":2,\"140\":1}}],[\"somemethod\",{\"1\":{\"130\":1}}],[\"some\",{\"1\":{\"56\":2,\"63\":1,\"66\":1,\"241\":1,\"665\":2}}],[\"sortorder\",{\"1\":{\"710\":2}}],[\"sortorder>\",{\"1\":{\"14\":1}}],[\"sort=account\",{\"1\":{\"684\":1}}],[\"sortedset\",{\"1\":{\"567\":1}}],[\"sortedset中的每一个元素都带有一个score属性\",{\"1\":{\"391\":1}}],[\"sorted\",{\"1\":{\"566\":1,\"575\":1,\"663\":2}}],[\"sortby\",{\"1\":{\"220\":4}}],[\"sort\",{\"1\":{\"14\":1,\"452\":1,\"616\":2,\"663\":1,\"666\":1,\"667\":1,\"670\":5,\"684\":1,\"685\":2,\"710\":5,\"747\":1}}],[\"sack\",{\"1\":{\"796\":2}}],[\"sass\",{\"1\":{\"655\":3}}],[\"safetyuser\",{\"1\":{\"605\":19,\"608\":11}}],[\"safevarargs\",{\"1\":{\"58\":1}}],[\"safari\",{\"1\":{\"523\":1}}],[\"saxreader\",{\"1\":{\"453\":2}}],[\"satellite\",{\"1\":{\"439\":1}}],[\"sadd\",{\"1\":{\"390\":1,\"789\":1,\"796\":1}}],[\"salary\",{\"1\":{\"171\":1}}],[\"saleattrvos\",{\"1\":{\"721\":2}}],[\"saleattrfuture\",{\"1\":{\"721\":2}}],[\"salecount\",{\"1\":{\"675\":1,\"710\":1}}],[\"saleticket\",{\"1\":{\"91\":2}}],[\"sale\",{\"1\":{\"91\":8,\"151\":4,\"670\":2,\"675\":1}}],[\"salt\",{\"1\":{\"22\":2,\"599\":4,\"605\":1,\"725\":2}}],[\"same\",{\"1\":{\"64\":1,\"523\":1}}],[\"saveblog\",{\"1\":{\"801\":1,\"809\":1}}],[\"savebasespinfo\",{\"1\":{\"675\":2}}],[\"savebatch\",{\"1\":{\"211\":1,\"538\":1,\"539\":1,\"675\":2}}],[\"saveshop2redis\",{\"1\":{\"756\":3}}],[\"saveskureductionto\",{\"1\":{\"675\":1}}],[\"saveskuinfo\",{\"1\":{\"675\":1}}],[\"savespubounds\",{\"1\":{\"675\":1}}],[\"savespuinfodesc\",{\"1\":{\"675\":1}}],[\"savespuinfo\",{\"1\":{\"675\":2}}],[\"saveproductattr\",{\"1\":{\"675\":1}}],[\"saveimages\",{\"1\":{\"675\":1}}],[\"saveattr\",{\"1\":{\"673\":2}}],[\"savedetail\",{\"1\":{\"672\":1}}],[\"save1\",{\"1\":{\"558\":2}}],[\"saveuser\",{\"1\":{\"208\":1,\"739\":1,\"740\":2,\"742\":1}}],[\"saveobject\",{\"1\":{\"171\":3}}],[\"save\",{\"1\":{\"22\":1,\"208\":3,\"211\":1,\"224\":5,\"226\":2,\"245\":3,\"247\":18,\"262\":10,\"267\":10,\"269\":9,\"270\":6,\"275\":4,\"276\":4,\"278\":7,\"279\":3,\"282\":4,\"283\":2,\"285\":3,\"286\":2,\"288\":2,\"298\":1,\"299\":2,\"302\":2,\"303\":2,\"304\":7,\"307\":2,\"369\":3,\"558\":4,\"561\":1,\"574\":1,\"598\":1,\"655\":3,\"666\":4,\"667\":4,\"672\":1,\"673\":4,\"675\":4,\"688\":1,\"738\":1,\"764\":2,\"765\":1,\"770\":2,\"788\":1,\"789\":2,\"790\":1,\"801\":1,\"806\":1,\"807\":1,\"809\":1}}],[\"saveresult\",{\"1\":{\"22\":1}}],[\"sudo\",{\"1\":{\"655\":3}}],[\"sun\",{\"1\":{\"544\":1}}],[\"suffix\",{\"1\":{\"416\":1,\"423\":1}}],[\"sufficient\",{\"1\":{\"64\":1}}],[\"suspend\",{\"1\":{\"155\":1}}],[\"such\",{\"1\":{\"81\":1,\"241\":1,\"665\":2}}],[\"successful\",{\"1\":{\"142\":2}}],[\"success\",{\"1\":{\"14\":4,\"21\":2,\"22\":1,\"23\":2,\"239\":1,\"241\":1,\"340\":2,\"453\":1,\"531\":1,\"534\":1,\"540\":1,\"544\":2,\"564\":1,\"565\":1,\"612\":1,\"616\":1,\"624\":1,\"625\":1,\"777\":2,\"778\":2}}],[\"support\",{\"1\":{\"406\":1}}],[\"supply有返回值\",{\"1\":{\"119\":1,\"715\":1}}],[\"supplyasync\",{\"1\":{\"119\":4,\"120\":2,\"143\":11,\"715\":4,\"716\":2,\"721\":1}}],[\"supplier<double>\",{\"1\":{\"143\":1}}],[\"supplier<t>\",{\"1\":{\"143\":1}}],[\"supplier<u>\",{\"1\":{\"119\":2,\"715\":2}}],[\"supplier\",{\"1\":{\"119\":2,\"715\":2}}],[\"suppresswarnings\",{\"1\":{\"58\":1,\"71\":1}}],[\"super\",{\"1\":{\"27\":2,\"120\":6,\"121\":6,\"122\":12,\"143\":1,\"230\":4,\"627\":3,\"716\":6,\"717\":6,\"718\":12}}],[\"subaggregation\",{\"1\":{\"710\":6}}],[\"subtitle\",{\"1\":{\"670\":1}}],[\"subquery\",{\"1\":{\"486\":1}}],[\"sub\",{\"1\":{\"430\":1,\"764\":1}}],[\"subpath\",{\"1\":{\"430\":9}}],[\"subscribe\",{\"1\":{\"793\":1}}],[\"substr\",{\"1\":{\"406\":1}}],[\"substring\",{\"1\":{\"100\":1,\"239\":1,\"241\":1,\"319\":4}}],[\"subsequent\",{\"1\":{\"56\":1}}],[\"submit=\",{\"1\":{\"520\":1}}],[\"submit\",{\"1\":{\"22\":1,\"23\":1,\"117\":1,\"142\":3,\"237\":1,\"520\":1,\"666\":1,\"756\":1,\"758\":1,\"763\":1,\"790\":1}}],[\"spuup\",{\"1\":{\"688\":1}}],[\"spu管理\",{\"1\":{\"675\":1}}],[\"spuboundto\",{\"1\":{\"675\":6}}],[\"spusavevo\",{\"1\":{\"675\":2}}],[\"spuimagesservice\",{\"1\":{\"675\":1}}],[\"spuinfodescservice\",{\"1\":{\"675\":1,\"721\":1}}],[\"spuinfodescentity\",{\"1\":{\"675\":2,\"721\":3}}],[\"spuinfoentity\",{\"1\":{\"675\":22}}],[\"spuinfoservice\",{\"1\":{\"675\":2,\"688\":1}}],[\"spuinfo\",{\"1\":{\"675\":2}}],[\"spuid\",{\"1\":{\"670\":1,\"688\":8,\"710\":1,\"721\":1}}],[\"spu信息\",{\"1\":{\"670\":1}}],[\"spu属性值\",{\"1\":{\"670\":1}}],[\"spu\",{\"1\":{\"669\":1,\"670\":5,\"675\":4,\"688\":1,\"721\":1}}],[\"spm=a2c4g\",{\"1\":{\"665\":2}}],[\"spirng\",{\"1\":{\"544\":1}}],[\"spi\",{\"1\":{\"522\":1,\"544\":1,\"727\":1}}],[\"split\",{\"1\":{\"71\":1,\"241\":2,\"454\":3,\"710\":15}}],[\"speed\",{\"1\":{\"66\":1}}],[\"specified\",{\"1\":{\"54\":4,\"56\":6,\"63\":2,\"64\":5,\"66\":4,\"67\":1,\"81\":3}}],[\"sprites技术类似\",{\"1\":{\"439\":1}}],[\"springapplication\",{\"1\":{\"655\":1,\"658\":1,\"659\":1,\"661\":1,\"706\":1,\"770\":1}}],[\"springamqp的messageconverter自带了messageid的功能\",{\"1\":{\"352\":1}}],[\"springamqp利用aop对我们的消息处理逻辑做了环绕增强\",{\"1\":{\"349\":1}}],[\"springamqp提供的重试机制是阻塞式的重试\",{\"1\":{\"342\":1}}],[\"springamqp提供了一个exchange接口\",{\"1\":{\"338\":1}}],[\"springfox<\",{\"1\":{\"726\":2}}],[\"springfox\",{\"1\":{\"522\":6,\"727\":8}}],[\"springframework<\",{\"1\":{\"224\":3,\"245\":1,\"269\":1,\"312\":2,\"313\":1}}],[\"springframework\",{\"1\":{\"18\":2,\"27\":2,\"269\":3,\"270\":3,\"278\":3,\"295\":6,\"318\":2,\"332\":1,\"340\":1,\"398\":1,\"405\":1,\"407\":1,\"408\":3,\"409\":3,\"416\":3,\"522\":2,\"533\":2,\"539\":3,\"544\":4,\"551\":4,\"589\":1,\"590\":1,\"592\":1,\"628\":2,\"655\":3,\"657\":1,\"659\":3,\"661\":1,\"663\":1,\"671\":3,\"690\":3,\"696\":1,\"698\":2,\"706\":1,\"726\":1,\"727\":3,\"728\":1,\"733\":1,\"758\":2,\"817\":1}}],[\"springrunner\",{\"1\":{\"423\":1,\"655\":2}}],[\"springrabbitlistener\",{\"1\":{\"332\":1}}],[\"spring对象的数据序列化及反序列化\",{\"1\":{\"397\":1}}],[\"spring整合junit\",{\"0\":{\"313\":1}}],[\"spring整合mybatis\",{\"0\":{\"312\":1}}],[\"spring整合\",{\"0\":{\"311\":1}}],[\"spring配置\",{\"1\":{\"282\":1,\"294\":1}}],[\"spring配置文件\",{\"1\":{\"278\":1}}],[\"spring配置类\",{\"1\":{\"224\":1,\"312\":1}}],[\"spring底层使用的是类的无参构造方法\",{\"1\":{\"274\":1}}],[\"spring官网https\",{\"1\":{\"266\":1}}],[\"spring笔记\",{\"0\":{\"266\":1}}],[\"spring加载的bean设定扫描范围为com\",{\"1\":{\"245\":1}}],[\"spring加载的bean设定扫描范围为精准范围\",{\"1\":{\"245\":1}}],[\"spring控制的bean\",{\"1\":{\"245\":1}}],[\"springjunit4classrunner\",{\"1\":{\"224\":1,\"313\":1}}],[\"spring<\",{\"1\":{\"224\":1,\"312\":1}}],[\"springcache的不足\",{\"1\":{\"706\":1}}],[\"springcache\",{\"0\":{\"706\":1}}],[\"springconfiguration\",{\"1\":{\"313\":1}}],[\"springconfig\",{\"1\":{\"224\":4,\"245\":4,\"301\":2,\"306\":1,\"309\":3,\"310\":1,\"312\":4}}],[\"springcore\",{\"1\":{\"47\":1}}],[\"springcloud\",{\"0\":{\"657\":1},\"1\":{\"47\":1,\"657\":8}}],[\"springbatch\",{\"1\":{\"47\":1}}],[\"springboot所有的组件在容器中都是单例的\",{\"1\":{\"702\":1}}],[\"springbootapplication\",{\"1\":{\"655\":1,\"658\":1,\"659\":1,\"661\":1,\"706\":1,\"770\":1}}],[\"springboot官方模版生成器\",{\"1\":{\"586\":1}}],[\"springboot默认整合\",{\"1\":{\"544\":1}}],[\"springboot默认单个文件最大为1m\",{\"1\":{\"238\":1}}],[\"springboot2\",{\"1\":{\"522\":1}}],[\"springboot使用redis\",{\"0\":{\"376\":1}}],[\"springboot中使用redis\",{\"0\":{\"397\":1}}],[\"springboot中使用\",{\"0\":{\"318\":1}}],[\"springboot文件上传\",{\"0\":{\"236\":1}}],[\"springboot项目里面的redis拿来做什么\",{\"1\":{\"47\":1}}],[\"springboot有一个请求进来过后\",{\"1\":{\"47\":1}}],[\"springboot如何添加依赖\",{\"1\":{\"47\":1}}],[\"springboot的自动配置是怎么实现的\",{\"1\":{\"47\":1}}],[\"springboot的配置文件有哪几种\",{\"1\":{\"47\":1}}],[\"springboottest\",{\"1\":{\"19\":1,\"196\":1,\"208\":1,\"319\":1,\"332\":1,\"399\":1,\"400\":1,\"423\":1,\"539\":2,\"551\":2,\"655\":2,\"733\":1,\"756\":1,\"788\":1}}],[\"springboot\",{\"1\":{\"7\":1,\"29\":2,\"332\":1,\"551\":1},\"2\":{\"242\":1,\"243\":1}}],[\"springsecurity\",{\"1\":{\"47\":1}}],[\"springdata是spring中数据操作的模块\",{\"1\":{\"397\":1}}],[\"springdata\",{\"1\":{\"47\":1}}],[\"springmvc+mybatis+mybatisplus\",{\"1\":{\"503\":1}}],[\"springmvc放行静态资源\",{\"0\":{\"263\":1}}],[\"springmvc默认使用的是jackson来处理json的转换\",{\"1\":{\"256\":1}}],[\"springmvc加载其相关bean\",{\"1\":{\"245\":1}}],[\"springmvc笔记\",{\"0\":{\"244\":1}}],[\"springmvc扫描\",{\"1\":{\"232\":1}}],[\"springmvcsupport可以简化编写\",{\"1\":{\"232\":1}}],[\"springmvcsupport\",{\"1\":{\"232\":1,\"263\":1}}],[\"springmvcconfig\",{\"1\":{\"224\":3,\"232\":2,\"233\":1,\"245\":4,\"248\":1,\"256\":1,\"263\":2}}],[\"springmvc配置类\",{\"1\":{\"224\":1}}],[\"springmvc\",{\"1\":{\"47\":1,\"245\":1}}],[\"spring包含哪些模块\",{\"1\":{\"47\":1}}],[\"spring事务的实现方式\",{\"1\":{\"47\":1}}],[\"spring\",{\"0\":{\"592\":1,\"841\":1},\"1\":{\"7\":1,\"18\":1,\"27\":4,\"29\":1,\"47\":1,\"196\":2,\"211\":1,\"224\":4,\"238\":1,\"266\":1,\"269\":1,\"270\":1,\"278\":1,\"294\":1,\"295\":3,\"309\":2,\"310\":2,\"332\":6,\"333\":1,\"340\":1,\"342\":1,\"344\":1,\"349\":1,\"350\":1,\"351\":1,\"397\":2,\"398\":1,\"415\":1,\"416\":1,\"423\":1,\"522\":3,\"533\":2,\"544\":1,\"545\":1,\"551\":2,\"573\":1,\"593\":2,\"595\":1,\"636\":1,\"655\":2,\"657\":2,\"658\":1,\"660\":2,\"661\":3,\"663\":1,\"665\":4,\"671\":1,\"675\":1,\"690\":2,\"698\":1,\"706\":2,\"726\":1,\"727\":3,\"728\":2,\"742\":1},\"2\":{\"234\":1,\"235\":1,\"264\":1,\"265\":1,\"314\":1,\"315\":1}}],[\"spreading\",{\"1\":{\"66\":2}}],[\"spreads\",{\"1\":{\"66\":2}}],[\"span\",{\"1\":{\"22\":1,\"23\":1}}],[\"sh\",{\"1\":{\"658\":2}}],[\"sheet\",{\"1\":{\"430\":1,\"433\":1,\"525\":1,\"526\":1}}],[\"shutdown\",{\"1\":{\"117\":1,\"142\":1,\"143\":2,\"241\":2,\"665\":3,\"704\":1}}],[\"shifted\",{\"1\":{\"66\":1}}],[\"shifts\",{\"1\":{\"56\":1}}],[\"shopidstr\",{\"1\":{\"817\":3}}],[\"shopid\",{\"1\":{\"817\":1}}],[\"shops\",{\"1\":{\"816\":4,\"817\":3}}],[\"shopserviceimpl\",{\"1\":{\"756\":1}}],[\"shopserviceimpltest\",{\"1\":{\"756\":1}}],[\"shopservice\",{\"1\":{\"747\":1,\"751\":1,\"756\":2,\"816\":1,\"817\":1}}],[\"shop1\",{\"1\":{\"758\":2}}],[\"shoptype\",{\"1\":{\"747\":1}}],[\"shoptypelist\",{\"1\":{\"747\":6}}],[\"shopjson\",{\"1\":{\"747\":3,\"752\":4,\"755\":4,\"756\":3,\"758\":3}}],[\"shop\",{\"1\":{\"739\":3,\"742\":2,\"747\":10,\"751\":15,\"752\":11,\"755\":14,\"756\":13,\"758\":37,\"764\":1,\"801\":1,\"816\":12,\"817\":5}}],[\"should\",{\"1\":{\"685\":3}}],[\"showstatus\",{\"1\":{\"663\":1,\"666\":1,\"667\":1,\"668\":1}}],[\"showtoast\",{\"1\":{\"506\":1,\"507\":1,\"518\":1}}],[\"showtotal\",{\"1\":{\"22\":1}}],[\"show\",{\"1\":{\"409\":3,\"438\":1,\"477\":1,\"670\":2}}],[\"short\",{\"1\":{\"47\":1,\"409\":3,\"732\":2}}],[\"sharding\",{\"1\":{\"478\":1}}],[\"shareresource\",{\"1\":{\"93\":7}}],[\"share\",{\"1\":{\"92\":6,\"140\":4,\"426\":1,\"643\":3,\"646\":3,\"681\":3,\"691\":1,\"697\":1}}],[\"shared\",{\"1\":{\"53\":2}}],[\"sha\",{\"1\":{\"452\":1}}],[\"shanghai\",{\"1\":{\"211\":1,\"655\":2}}],[\"shadow\",{\"1\":{\"22\":1}}],[\"sha256\",{\"1\":{\"17\":1}}],[\"style>\",{\"1\":{\"438\":1,\"534\":1,\"663\":1}}],[\"style=\",{\"1\":{\"419\":1,\"520\":1,\"534\":1,\"710\":2}}],[\"stu>\",{\"1\":{\"418\":1}}],[\"stumap\",{\"1\":{\"418\":13,\"423\":5}}],[\"stus\",{\"1\":{\"418\":6,\"419\":1,\"422\":1,\"423\":5}}],[\"stu2\",{\"1\":{\"418\":9,\"423\":7}}],[\"stu1\",{\"1\":{\"418\":10,\"423\":8}}],[\"stu\",{\"1\":{\"416\":3,\"418\":4,\"419\":10}}],[\"student>\",{\"1\":{\"418\":1,\"423\":1}}],[\"student\",{\"1\":{\"167\":6,\"168\":3,\"169\":3,\"170\":3,\"171\":3,\"416\":7,\"418\":4,\"423\":4}}],[\"stereotype\",{\"1\":{\"407\":1,\"409\":1,\"544\":1,\"758\":1}}],[\"step\",{\"1\":{\"143\":2}}],[\"stockkey\",{\"1\":{\"789\":3,\"796\":3}}],[\"stock=stock\",{\"1\":{\"765\":1,\"769\":2,\"770\":2,\"790\":1}}],[\"stock\",{\"1\":{\"669\":1,\"764\":1,\"769\":2,\"770\":2,\"789\":2,\"790\":1,\"796\":1}}],[\"stomp\",{\"1\":{\"327\":2}}],[\"storageclass\",{\"1\":{\"241\":1}}],[\"storage\",{\"1\":{\"241\":1}}],[\"store\",{\"1\":{\"161\":2,\"533\":1}}],[\"stored\",{\"1\":{\"53\":1}}],[\"stopwatch\",{\"1\":{\"537\":6,\"538\":6,\"539\":7}}],[\"stop\",{\"1\":{\"155\":4,\"378\":1,\"388\":1,\"392\":1,\"537\":1,\"538\":1,\"539\":1,\"639\":1}}],[\"strutil\",{\"1\":{\"742\":1,\"747\":2,\"752\":1,\"755\":1,\"756\":1,\"758\":3,\"817\":1}}],[\"structured\",{\"1\":{\"377\":1}}],[\"structure\",{\"1\":{\"63\":1}}],[\"structural\",{\"1\":{\"63\":1}}],[\"structurally\",{\"1\":{\"63\":1}}],[\"stripprefix=\",{\"1\":{\"728\":1}}],[\"stringutil\",{\"1\":{\"805\":1,\"810\":1}}],[\"stringutils\",{\"1\":{\"21\":1,\"319\":1,\"512\":1,\"558\":3,\"559\":3,\"560\":1,\"561\":1,\"566\":1,\"574\":1,\"575\":2,\"599\":1,\"605\":1,\"607\":1,\"608\":1,\"670\":1,\"672\":2,\"673\":1,\"674\":1,\"675\":10,\"698\":1,\"702\":1,\"706\":1,\"710\":5,\"725\":1,\"728\":1,\"732\":2,\"733\":1}}],[\"stringwriter\",{\"1\":{\"733\":2}}],[\"stringredisserializer\",{\"1\":{\"706\":1}}],[\"stringredistemplate\",{\"1\":{\"400\":4,\"698\":5,\"702\":2,\"703\":14,\"704\":2,\"741\":4,\"742\":11,\"747\":8,\"751\":2,\"752\":3,\"755\":5,\"756\":2,\"758\":14,\"763\":7,\"777\":9,\"778\":3,\"780\":1,\"781\":1,\"788\":4,\"789\":2,\"790\":2,\"796\":5,\"803\":4,\"804\":4,\"805\":1,\"807\":3,\"809\":1,\"810\":1,\"816\":2,\"817\":1,\"819\":1,\"820\":1}}],[\"stringify\",{\"1\":{\"532\":1,\"630\":2}}],[\"string结构是将对象序列化为json字符串后存储\",{\"1\":{\"383\":1}}],[\"string类型\",{\"1\":{\"383\":1}}],[\"stringsarray\",{\"1\":{\"58\":1}}],[\"strings\",{\"1\":{\"58\":6}}],[\"string三个的区别\",{\"1\":{\"47\":1}}],[\"stringbuilder\",{\"1\":{\"27\":2,\"319\":11,\"430\":2}}],[\"string>\",{\"1\":{\"17\":2,\"100\":1,\"143\":2,\"288\":1,\"395\":1,\"453\":2,\"455\":1,\"665\":2,\"666\":2,\"698\":1}}],[\"string\",{\"1\":{\"16\":16,\"17\":20,\"18\":2,\"19\":2,\"21\":1,\"22\":2,\"23\":5,\"27\":16,\"29\":3,\"58\":3,\"83\":5,\"87\":1,\"88\":1,\"89\":1,\"91\":2,\"92\":1,\"93\":1,\"95\":2,\"99\":1,\"100\":2,\"103\":1,\"104\":1,\"105\":1,\"107\":4,\"108\":2,\"109\":2,\"110\":6,\"111\":1,\"112\":1,\"117\":1,\"119\":2,\"120\":2,\"132\":1,\"142\":3,\"143\":11,\"147\":1,\"151\":1,\"153\":1,\"156\":3,\"165\":7,\"167\":1,\"168\":2,\"169\":4,\"170\":7,\"171\":5,\"175\":6,\"184\":5,\"198\":4,\"209\":2,\"216\":2,\"217\":2,\"220\":6,\"224\":6,\"226\":2,\"230\":4,\"232\":2,\"239\":5,\"241\":18,\"245\":7,\"247\":4,\"248\":6,\"250\":4,\"251\":2,\"252\":4,\"253\":2,\"254\":2,\"256\":1,\"257\":1,\"258\":1,\"259\":4,\"261\":2,\"262\":14,\"269\":1,\"275\":1,\"276\":1,\"283\":2,\"286\":3,\"298\":1,\"307\":2,\"310\":4,\"312\":5,\"318\":4,\"319\":35,\"332\":3,\"333\":4,\"335\":4,\"336\":4,\"337\":4,\"338\":4,\"347\":1,\"355\":2,\"395\":2,\"399\":2,\"400\":6,\"407\":5,\"416\":3,\"418\":1,\"430\":11,\"431\":1,\"432\":2,\"433\":1,\"442\":2,\"443\":2,\"444\":2,\"445\":2,\"451\":6,\"452\":18,\"453\":11,\"454\":5,\"455\":1,\"457\":9,\"491\":2,\"493\":6,\"512\":3,\"518\":8,\"519\":3,\"525\":4,\"526\":1,\"544\":2,\"551\":9,\"558\":3,\"559\":3,\"561\":1,\"566\":2,\"571\":1,\"573\":3,\"574\":1,\"575\":4,\"599\":12,\"605\":4,\"607\":2,\"608\":1,\"609\":3,\"616\":2,\"620\":1,\"623\":5,\"624\":5,\"625\":6,\"627\":5,\"630\":2,\"655\":1,\"658\":1,\"659\":1,\"660\":1,\"661\":1,\"665\":17,\"666\":9,\"667\":4,\"668\":1,\"670\":2,\"672\":3,\"673\":6,\"674\":2,\"675\":20,\"687\":6,\"688\":3,\"698\":3,\"702\":2,\"703\":4,\"704\":10,\"706\":1,\"710\":17,\"712\":4,\"715\":2,\"716\":2,\"725\":5,\"728\":1,\"733\":3,\"738\":5,\"741\":7,\"742\":2,\"747\":4,\"752\":2,\"755\":5,\"756\":3,\"758\":11,\"763\":3,\"770\":1,\"777\":4,\"778\":6,\"788\":7,\"796\":2,\"801\":3,\"803\":2,\"804\":2,\"805\":1,\"807\":3,\"809\":1,\"810\":1,\"816\":1,\"817\":3,\"819\":2,\"820\":2}}],[\"strategy\",{\"1\":{\"522\":1}}],[\"strategypattern\",{\"1\":{\"491\":3}}],[\"street\",{\"1\":{\"443\":2,\"444\":10}}],[\"streamoffset\",{\"1\":{\"796\":2}}],[\"streamreadoptions\",{\"1\":{\"796\":2}}],[\"stream类型消息队列的xread命令特点\",{\"1\":{\"794\":1}}],[\"streams\",{\"1\":{\"794\":2,\"795\":2,\"796\":4}}],[\"stream\",{\"1\":{\"143\":3,\"214\":2,\"220\":1,\"318\":1,\"319\":2,\"512\":3,\"534\":1,\"564\":1,\"566\":3,\"575\":5,\"608\":1,\"639\":1,\"663\":2,\"673\":1,\"674\":3,\"675\":4,\"688\":6,\"690\":3,\"697\":4,\"710\":2,\"733\":2,\"796\":5,\"805\":4,\"807\":2,\"816\":1,\"817\":1}}],[\"strokeopacity\",{\"1\":{\"439\":1}}],[\"strokeweight\",{\"1\":{\"439\":1}}],[\"strokecolor\",{\"1\":{\"439\":1}}],[\"str\",{\"1\":{\"143\":2,\"452\":5}}],[\"standalone\",{\"1\":{\"658\":1}}],[\"standard\",{\"1\":{\"241\":1,\"408\":1,\"453\":1,\"669\":1,\"687\":1}}],[\"standardcharsets\",{\"1\":{\"27\":1,\"347\":1,\"359\":1}}],[\"star接口\",{\"1\":{\"165\":1}}],[\"star\",{\"1\":{\"165\":11}}],[\"startswith\",{\"1\":{\"710\":1}}],[\"startwith\",{\"1\":{\"665\":1}}],[\"startup\",{\"1\":{\"643\":1,\"658\":1}}],[\"startcoding\",{\"1\":{\"491\":3}}],[\"startthread\",{\"1\":{\"140\":1}}],[\"starttime2\",{\"1\":{\"575\":4}}],[\"starttime1\",{\"1\":{\"575\":4}}],[\"starttime=system\",{\"1\":{\"142\":2}}],[\"starttime\",{\"1\":{\"87\":2,\"142\":2,\"616\":1}}],[\"start0就是jvm\",{\"1\":{\"140\":1}}],[\"start0\",{\"1\":{\"140\":3}}],[\"start\",{\"1\":{\"83\":3,\"87\":1,\"88\":2,\"89\":1,\"91\":6,\"92\":2,\"93\":3,\"95\":1,\"99\":1,\"100\":1,\"103\":2,\"104\":2,\"105\":2,\"107\":2,\"108\":1,\"109\":1,\"110\":4,\"119\":2,\"120\":2,\"132\":2,\"140\":1,\"142\":2,\"143\":2,\"151\":3,\"152\":3,\"153\":2,\"155\":5,\"156\":6,\"378\":1,\"379\":1,\"388\":1,\"392\":1,\"537\":1,\"538\":1,\"539\":1,\"584\":1,\"635\":1,\"712\":7,\"715\":2,\"716\":2}}],[\"starteditable\",{\"1\":{\"616\":1}}],[\"started\",{\"1\":{\"12\":1,\"81\":1,\"140\":4,\"174\":1,\"378\":1}}],[\"starter<\",{\"1\":{\"196\":2,\"319\":1,\"522\":1,\"551\":1,\"593\":1,\"594\":1,\"655\":1,\"727\":1,\"733\":1}}],[\"starter\",{\"1\":{\"7\":1,\"18\":1,\"27\":1,\"318\":2,\"332\":1,\"340\":1,\"398\":1,\"405\":1,\"416\":3,\"533\":1,\"551\":1,\"592\":1,\"658\":1,\"659\":1,\"660\":1,\"661\":2,\"663\":1,\"665\":1,\"690\":1,\"698\":2,\"706\":1,\"728\":3,\"733\":1}}],[\"stackoverflow\",{\"1\":{\"496\":1}}],[\"stack\",{\"1\":{\"140\":1,\"694\":2}}],[\"stats\",{\"1\":{\"696\":1}}],[\"static目录下面\",{\"1\":{\"697\":1}}],[\"staticname\",{\"1\":{\"217\":1}}],[\"static\",{\"1\":{\"16\":1,\"17\":1,\"27\":2,\"53\":3,\"56\":2,\"58\":1,\"63\":3,\"66\":1,\"72\":1,\"83\":3,\"87\":3,\"88\":1,\"89\":1,\"91\":2,\"92\":1,\"93\":1,\"95\":1,\"100\":1,\"103\":1,\"104\":3,\"105\":2,\"107\":2,\"108\":2,\"109\":1,\"110\":2,\"111\":1,\"112\":1,\"117\":2,\"119\":7,\"120\":4,\"124\":2,\"132\":1,\"142\":4,\"143\":8,\"147\":1,\"149\":1,\"151\":1,\"152\":2,\"153\":3,\"155\":5,\"156\":3,\"165\":2,\"167\":1,\"168\":1,\"169\":1,\"170\":1,\"171\":2,\"175\":1,\"220\":3,\"226\":8,\"241\":1,\"269\":1,\"275\":2,\"276\":1,\"298\":1,\"312\":1,\"318\":4,\"319\":1,\"355\":1,\"396\":3,\"400\":1,\"407\":1,\"430\":7,\"452\":4,\"457\":3,\"493\":4,\"525\":1,\"526\":2,\"539\":1,\"566\":1,\"624\":4,\"655\":1,\"658\":1,\"659\":1,\"661\":1,\"666\":1,\"667\":1,\"687\":2,\"688\":1,\"691\":1,\"697\":1,\"706\":1,\"712\":8,\"715\":7,\"716\":4,\"720\":2,\"733\":2,\"740\":4,\"756\":1,\"758\":2,\"763\":3,\"770\":1,\"777\":1,\"778\":2,\"780\":2,\"789\":2,\"790\":1,\"801\":1}}],[\"stateless\",{\"1\":{\"350\":1}}],[\"statement\",{\"1\":{\"211\":1}}],[\"state\",{\"1\":{\"14\":4,\"81\":12,\"136\":1,\"140\":1,\"142\":2,\"605\":2,\"608\":1,\"613\":1,\"620\":1,\"685\":1}}],[\"statusenum\",{\"1\":{\"688\":1}}],[\"status是否公开\",{\"1\":{\"558\":2}}],[\"statuscode\",{\"1\":{\"27\":2}}],[\"status\",{\"1\":{\"9\":1,\"14\":5,\"22\":1,\"23\":1,\"25\":1,\"140\":1,\"180\":2,\"184\":9,\"185\":6,\"186\":3,\"188\":4,\"191\":3,\"209\":7,\"216\":1,\"220\":7,\"352\":2,\"442\":1,\"443\":1,\"444\":1,\"557\":2,\"558\":4,\"559\":7,\"616\":2,\"670\":1,\"675\":4,\"764\":2,\"801\":1}}],[\"seq\",{\"1\":{\"682\":1}}],[\"sequence语句\",{\"1\":{\"47\":1}}],[\"seata\",{\"1\":{\"657\":1}}],[\"searchparam\",{\"1\":{\"710\":4}}],[\"searchparams\",{\"1\":{\"14\":1}}],[\"searchfeignservice\",{\"1\":{\"688\":1}}],[\"searchattrids\",{\"1\":{\"688\":2}}],[\"searchapi\",{\"0\":{\"684\":1}}],[\"searchhit\",{\"1\":{\"687\":2,\"710\":1}}],[\"searchhits\",{\"1\":{\"687\":3,\"710\":1}}],[\"searchresult\",{\"1\":{\"710\":28}}],[\"searchresponse\",{\"1\":{\"687\":5,\"710\":2}}],[\"searchrequest\",{\"1\":{\"687\":6,\"710\":8}}],[\"searchsourcebuilder\",{\"1\":{\"687\":8,\"710\":13}}],[\"searchdata\",{\"1\":{\"687\":1}}],[\"searchusers\",{\"1\":{\"608\":1,\"616\":3}}],[\"searchusersbytagsbymemory\",{\"1\":{\"512\":2}}],[\"searchusersbytagsbysql\",{\"1\":{\"512\":2}}],[\"searchusersbytags\",{\"1\":{\"512\":1,\"531\":2}}],[\"searchtext\",{\"1\":{\"518\":3,\"559\":4}}],[\"search\",{\"1\":{\"317\":1,\"440\":1,\"444\":1,\"506\":1,\"507\":1,\"518\":2,\"531\":1,\"532\":1,\"608\":1,\"616\":2,\"630\":1,\"670\":1,\"684\":2,\"685\":15,\"687\":1,\"688\":1,\"710\":8,\"817\":1}}],[\"search=\",{\"1\":{\"14\":1,\"616\":1}}],[\"sentinel\",{\"1\":{\"657\":1}}],[\"sendcode\",{\"1\":{\"738\":1,\"741\":1}}],[\"sendmessagetoclient\",{\"1\":{\"409\":1}}],[\"sendtext\",{\"1\":{\"407\":1}}],[\"sendtoallclient\",{\"1\":{\"407\":1,\"409\":1}}],[\"send\",{\"1\":{\"406\":3}}],[\"se\",{\"1\":{\"544\":1}}],[\"segment\",{\"1\":{\"476\":1,\"663\":3,\"665\":1}}],[\"separator+minioconfigproperties\",{\"1\":{\"319\":2}}],[\"separator=\",{\"1\":{\"190\":1,\"674\":1}}],[\"separator\",{\"1\":{\"190\":1,\"319\":7,\"430\":2}}],[\"selectedlist\",{\"1\":{\"697\":3}}],[\"selectedrows\",{\"1\":{\"14\":2}}],[\"selectsearchattrids\",{\"1\":{\"688\":1}}],[\"selectone\",{\"1\":{\"605\":1,\"673\":2,\"733\":1}}],[\"selectcount\",{\"1\":{\"599\":1,\"673\":1}}],[\"selectbatchids\",{\"1\":{\"196\":1}}],[\"selectbyconditionsingle\",{\"1\":{\"186\":1}}],[\"selectbycondition\",{\"1\":{\"184\":7,\"185\":2}}],[\"selectbyid\",{\"1\":{\"182\":4,\"196\":1,\"672\":2,\"673\":4,\"674\":1}}],[\"selectlist\",{\"1\":{\"175\":1,\"204\":1,\"206\":1,\"512\":2,\"663\":1,\"674\":2,\"690\":2,\"696\":1,\"697\":3,\"706\":1}}],[\"select>\",{\"1\":{\"175\":1,\"179\":1,\"180\":2,\"181\":1,\"182\":3,\"184\":1,\"185\":2,\"186\":1}}],[\"select\",{\"1\":{\"175\":1,\"179\":1,\"180\":2,\"181\":1,\"182\":3,\"184\":1,\"185\":3,\"186\":1,\"192\":4,\"204\":2,\"206\":1,\"224\":4,\"395\":1,\"396\":1,\"468\":2,\"477\":1,\"486\":1,\"518\":1,\"522\":1,\"548\":1,\"566\":1,\"575\":2,\"616\":2,\"670\":2,\"726\":1,\"727\":1,\"731\":4,\"809\":1}}],[\"selectall存在硬编码问题\",{\"1\":{\"176\":1}}],[\"selectall\",{\"1\":{\"175\":2,\"176\":2,\"179\":1,\"180\":2,\"181\":1}}],[\"semaphore\",{\"1\":{\"109\":8}}],[\"seckillvoucherservice\",{\"1\":{\"764\":1,\"765\":3,\"769\":2,\"770\":2,\"789\":1,\"790\":1}}],[\"seckillvoucher\",{\"1\":{\"764\":8,\"765\":4,\"789\":9,\"790\":1,\"796\":1}}],[\"seckill\",{\"1\":{\"764\":3,\"765\":1,\"789\":9,\"790\":3,\"796\":3}}],[\"sec\",{\"1\":{\"523\":6}}],[\"secondary\",{\"1\":{\"466\":1}}],[\"second\",{\"1\":{\"143\":1,\"682\":1,\"763\":2}}],[\"seconds\",{\"1\":{\"104\":2,\"112\":6,\"116\":1,\"143\":3,\"153\":2,\"156\":3,\"384\":1,\"703\":6,\"704\":1,\"721\":1,\"755\":1,\"758\":1,\"777\":1,\"778\":1,\"781\":1}}],[\"secret=\",{\"1\":{\"241\":1,\"457\":2}}],[\"secret\",{\"1\":{\"19\":1,\"241\":1,\"317\":2,\"318\":2,\"665\":4}}],[\"secretkey\",{\"1\":{\"17\":11,\"18\":2,\"22\":4,\"23\":2,\"27\":3,\"319\":2,\"733\":1}}],[\"serivce接口\",{\"1\":{\"599\":1}}],[\"serious\",{\"1\":{\"241\":1,\"665\":2}}],[\"serializevalueswith\",{\"1\":{\"706\":1}}],[\"serializekeyswith\",{\"1\":{\"706\":1}}],[\"serializable\",{\"1\":{\"319\":1,\"623\":2,\"666\":1,\"667\":1}}],[\"serializationpair\",{\"1\":{\"706\":2}}],[\"serialization\",{\"1\":{\"63\":1}}],[\"serialversionuid\",{\"1\":{\"666\":1,\"667\":1}}],[\"serial\",{\"1\":{\"53\":1,\"63\":2}}],[\"servletinputstream\",{\"1\":{\"453\":1}}],[\"servletcontainersinitconfig\",{\"1\":{\"245\":3,\"248\":1}}],[\"servletconfig\",{\"1\":{\"224\":2}}],[\"servlet<\",{\"1\":{\"224\":1,\"245\":1,\"655\":1}}],[\"servlet\",{\"1\":{\"224\":2,\"238\":1,\"245\":1,\"415\":1,\"655\":3}}],[\"service接受controller传来的数据\",{\"1\":{\"675\":1}}],[\"services\",{\"1\":{\"378\":3,\"379\":1,\"380\":2,\"585\":1,\"616\":1,\"639\":1}}],[\"service和dao这些类都需要被容器管理成bean对象\",{\"1\":{\"245\":1}}],[\"service再交给controller\",{\"1\":{\"244\":1}}],[\"service根据需要会调用dao对数据进行增删改查\",{\"1\":{\"244\":1}}],[\"service层主要负责业务逻辑的处理\",{\"1\":{\"244\":1}}],[\"service实现类\",{\"1\":{\"224\":1}}],[\"service之间也会相互调用\",{\"1\":{\"214\":1}}],[\"service中对lambdaquerywrapper和lambdaupdatewrapper的用法进一步做了简化\",{\"1\":{\"209\":1}}],[\"serviceimpl<usermapper\",{\"1\":{\"208\":1}}],[\"service\",{\"1\":{\"119\":3,\"120\":4,\"224\":2,\"245\":2,\"267\":2,\"269\":2,\"270\":4,\"278\":1,\"279\":3,\"282\":2,\"285\":2,\"287\":3,\"299\":1,\"304\":2,\"305\":1,\"539\":1,\"544\":1,\"551\":1,\"643\":1,\"655\":1,\"688\":1,\"710\":1,\"712\":2,\"715\":3,\"716\":4,\"727\":1}}],[\"server块下面\",{\"1\":{\"691\":1}}],[\"server=utf8\",{\"1\":{\"651\":2}}],[\"serverendpointexporter\",{\"1\":{\"408\":4}}],[\"serverendpoint\",{\"1\":{\"407\":2}}],[\"server端会抛异常\",{\"1\":{\"406\":1}}],[\"server\",{\"1\":{\"317\":3,\"373\":1,\"378\":1,\"379\":1,\"407\":2,\"408\":1,\"416\":1,\"423\":1,\"595\":1,\"643\":1,\"646\":2,\"652\":1,\"658\":1,\"660\":2,\"663\":1,\"665\":1,\"681\":1,\"691\":7,\"710\":1,\"728\":3}}],[\"servertimezone=asia\",{\"1\":{\"211\":1,\"655\":2}}],[\"serverhttpresponsedecorator\",{\"1\":{\"27\":2}}],[\"serverhttpresponse\",{\"1\":{\"27\":3,\"728\":1}}],[\"serverhttprequest\",{\"1\":{\"27\":1,\"728\":1}}],[\"serverwebexchange\",{\"1\":{\"27\":2,\"728\":1}}],[\"serversign\",{\"1\":{\"17\":2,\"27\":2}}],[\"session拷贝到不同\",{\"1\":{\"741\":1}}],[\"session会存入到tomcat服务器\",{\"1\":{\"741\":1}}],[\"session共享\",{\"0\":{\"741\":1}}],[\"session<\",{\"1\":{\"533\":1}}],[\"sessionstorage\",{\"1\":{\"664\":1}}],[\"sessions\",{\"1\":{\"407\":2}}],[\"sessionmap\",{\"1\":{\"407\":4}}],[\"session>\",{\"1\":{\"407\":1}}],[\"session\",{\"1\":{\"407\":7,\"533\":3,\"571\":1,\"604\":1,\"605\":1,\"738\":5,\"739\":2,\"740\":1,\"741\":2}}],[\"session相对于cookie更安全\",{\"1\":{\"47\":1}}],[\"session存储在服务器\",{\"1\":{\"47\":1}}],[\"see\",{\"1\":{\"14\":1,\"63\":1}}],[\"setresulttype\",{\"1\":{\"780\":1,\"789\":1}}],[\"setreturnscallback\",{\"1\":{\"344\":1}}],[\"setvoucherid\",{\"1\":{\"764\":1,\"765\":1,\"770\":2,\"789\":1,\"790\":1,\"796\":1}}],[\"setvalueserializer\",{\"1\":{\"399\":1}}],[\"setwithlogicalexpire\",{\"1\":{\"758\":2}}],[\"setquickshow\",{\"1\":{\"675\":1}}],[\"setgroupattrs\",{\"1\":{\"721\":1}}],[\"setgroupname\",{\"1\":{\"673\":2}}],[\"setgender\",{\"1\":{\"537\":1,\"538\":1,\"539\":1,\"598\":1,\"605\":2,\"608\":1,\"687\":1}}],[\"setnx\",{\"1\":{\"776\":1}}],[\"setnavs\",{\"1\":{\"710\":1}}],[\"setnavname\",{\"1\":{\"710\":2}}],[\"setnavvalue\",{\"1\":{\"710\":1}}],[\"setname\",{\"1\":{\"261\":3,\"416\":1,\"418\":2,\"423\":2,\"655\":1,\"802\":1}}],[\"setnickname\",{\"1\":{\"659\":1,\"738\":1,\"788\":1}}],[\"set=utf8\",{\"1\":{\"651\":2}}],[\"setjointime\",{\"1\":{\"558\":1,\"561\":1,\"574\":1}}],[\"setendtime\",{\"1\":{\"764\":1,\"789\":1}}],[\"setencoding\",{\"1\":{\"224\":1,\"248\":1}}],[\"setexpiretime\",{\"1\":{\"756\":1,\"758\":1}}],[\"setexpiresin\",{\"1\":{\"457\":1}}],[\"setexpires\",{\"1\":{\"457\":1}}],[\"setex\",{\"1\":{\"749\":1}}],[\"setemail\",{\"1\":{\"537\":1,\"538\":1,\"539\":1,\"598\":1,\"605\":2,\"608\":1}}],[\"set2\",{\"1\":{\"400\":4}}],[\"setoffset\",{\"1\":{\"810\":1}}],[\"setoverflow\",{\"1\":{\"671\":1}}],[\"setoperations\",{\"1\":{\"400\":10}}],[\"setobjectacl\",{\"1\":{\"241\":1}}],[\"sethotscore\",{\"1\":{\"688\":1}}],[\"sethasstock\",{\"1\":{\"688\":2}}],[\"sethashvalueserializer\",{\"1\":{\"399\":1}}],[\"sethashkeyserializer\",{\"1\":{\"399\":1}}],[\"sethttpasyncresponseconsumerfactory\",{\"1\":{\"687\":1}}],[\"setheading\",{\"1\":{\"438\":1}}],[\"setheader\",{\"1\":{\"241\":1,\"451\":1}}],[\"setkeyserializer\",{\"1\":{\"399\":1}}],[\"setmintime\",{\"1\":{\"810\":1}}],[\"setminbehottime\",{\"1\":{\"732\":2}}],[\"setminidle\",{\"1\":{\"396\":1}}],[\"setmsgtype\",{\"1\":{\"455\":1}}],[\"setmaptype\",{\"1\":{\"439\":1}}],[\"setmaxbehottime\",{\"1\":{\"732\":2}}],[\"setmaxwaitmillis\",{\"1\":{\"396\":1}}],[\"setmaxidle\",{\"1\":{\"396\":1}}],[\"setmaxtotal\",{\"1\":{\"396\":1}}],[\"setmoney\",{\"1\":{\"418\":2,\"423\":2}}],[\"setmessageinnerhtml\",{\"1\":{\"406\":5}}],[\"setmetadata\",{\"1\":{\"241\":1}}],[\"setdistance\",{\"1\":{\"817\":1}}],[\"setdesc\",{\"1\":{\"721\":1}}],[\"setdescription\",{\"1\":{\"455\":1}}],[\"setdefaultimg\",{\"1\":{\"675\":1}}],[\"setdecript\",{\"1\":{\"675\":1}}],[\"setdelay\",{\"1\":{\"355\":2}}],[\"setdeliverymode\",{\"1\":{\"347\":1,\"359\":1}}],[\"setdoubledata\",{\"1\":{\"430\":1}}],[\"setdriverclassname\",{\"1\":{\"224\":1,\"309\":2,\"310\":3,\"312\":1}}],[\"setdate\",{\"1\":{\"430\":1}}],[\"setdatabase\",{\"1\":{\"551\":1}}],[\"setdatabasename\",{\"1\":{\"283\":1}}],[\"setdatasource\",{\"1\":{\"224\":2,\"312\":1}}],[\"setdata\",{\"1\":{\"22\":2,\"23\":2,\"756\":1,\"758\":1}}],[\"setdaemon\",{\"1\":{\"89\":1}}],[\"setup\",{\"1\":{\"395\":1,\"396\":1,\"519\":1,\"520\":1,\"534\":1}}],[\"setupdatetime\",{\"1\":{\"196\":1,\"208\":1,\"211\":1,\"675\":1}}],[\"seturl\",{\"1\":{\"224\":1,\"309\":2,\"310\":3,\"312\":1}}],[\"setuserid\",{\"1\":{\"558\":2,\"561\":1,\"562\":2,\"565\":1,\"574\":1,\"765\":1,\"770\":2,\"790\":1,\"796\":1,\"801\":1,\"806\":1,\"807\":1,\"809\":1}}],[\"setuserrole\",{\"1\":{\"537\":1,\"538\":1,\"539\":1,\"608\":1}}],[\"setuserstatus\",{\"1\":{\"537\":1,\"538\":1,\"539\":1,\"605\":2,\"608\":1}}],[\"setuserdao\",{\"1\":{\"282\":1}}],[\"setuserpassword\",{\"1\":{\"22\":1,\"537\":1,\"538\":1,\"539\":1,\"598\":1,\"599\":1}}],[\"setuseraccount\",{\"1\":{\"22\":1,\"537\":1,\"538\":1,\"539\":1,\"598\":1,\"599\":1,\"605\":2,\"608\":1}}],[\"setusername\",{\"1\":{\"16\":1,\"19\":1,\"21\":1,\"196\":1,\"208\":1,\"211\":1,\"220\":1,\"224\":1,\"309\":2,\"310\":3,\"312\":1,\"537\":1,\"538\":1,\"539\":1,\"598\":1,\"605\":2,\"608\":1,\"687\":1}}],[\"setbit\",{\"1\":{\"819\":2}}],[\"setbirthday\",{\"1\":{\"418\":1,\"423\":1}}],[\"setbegintime\",{\"1\":{\"764\":1,\"789\":1}}],[\"setbrands\",{\"1\":{\"710\":1}}],[\"setbrandimg\",{\"1\":{\"688\":1,\"710\":1}}],[\"setbrandid\",{\"1\":{\"672\":1,\"675\":2,\"710\":1}}],[\"setbrandname\",{\"1\":{\"184\":1,\"672\":2,\"675\":1,\"688\":1,\"710\":1}}],[\"setbookdao\",{\"1\":{\"270\":1,\"278\":1,\"279\":1,\"282\":1,\"287\":1,\"304\":1}}],[\"setbasepackage\",{\"1\":{\"224\":1,\"312\":1}}],[\"setbalance\",{\"1\":{\"196\":2,\"204\":1,\"208\":1,\"211\":1}}],[\"setproducts\",{\"1\":{\"710\":1}}],[\"setprogram\",{\"1\":{\"491\":1}}],[\"setpicurl\",{\"1\":{\"455\":1}}],[\"setpagenavs\",{\"1\":{\"710\":1}}],[\"setpagenum\",{\"1\":{\"710\":1}}],[\"setpages\",{\"1\":{\"220\":1}}],[\"setpaytime\",{\"1\":{\"352\":1}}],[\"setpassword\",{\"1\":{\"196\":1,\"208\":1,\"211\":1,\"224\":1,\"309\":2,\"310\":3,\"312\":1,\"551\":1,\"725\":1,\"781\":1}}],[\"setphone\",{\"1\":{\"196\":1,\"208\":1,\"211\":1,\"537\":1,\"538\":1,\"539\":1,\"598\":1,\"605\":2,\"608\":1,\"738\":1,\"788\":1}}],[\"set>\",{\"1\":{\"191\":1,\"291\":1}}],[\"setfollowuserid\",{\"1\":{\"806\":1,\"807\":1}}],[\"setfieldvalueeditor\",{\"1\":{\"741\":1,\"788\":1}}],[\"setfieldsvalue\",{\"1\":{\"14\":1}}],[\"setfromusername\",{\"1\":{\"453\":1,\"454\":1,\"455\":1}}],[\"setflag\",{\"1\":{\"132\":2}}],[\"set\",{\"1\":{\"99\":3,\"132\":1,\"140\":1,\"155\":2,\"169\":1,\"191\":1,\"204\":1,\"205\":1,\"207\":1,\"208\":1,\"210\":2,\"224\":1,\"288\":2,\"291\":1,\"352\":3,\"384\":1,\"395\":1,\"399\":2,\"400\":21,\"512\":4,\"544\":3,\"551\":1,\"573\":1,\"651\":4,\"668\":3,\"672\":1,\"691\":1,\"697\":1,\"698\":2,\"702\":1,\"703\":2,\"704\":1,\"710\":1,\"740\":1,\"741\":1,\"747\":2,\"751\":1,\"752\":2,\"755\":2,\"756\":1,\"758\":5,\"776\":1,\"780\":2,\"789\":1}}],[\"set<zsetoperations\",{\"1\":{\"810\":1}}],[\"set<string>\",{\"1\":{\"288\":1,\"512\":1,\"805\":1,\"807\":1}}],[\"set<integer>\",{\"1\":{\"99\":1,\"668\":1}}],[\"set<map\",{\"1\":{\"63\":2}}],[\"setattrs\",{\"1\":{\"688\":1,\"710\":1}}],[\"setattrvalue\",{\"1\":{\"675\":1,\"710\":1}}],[\"setattrname\",{\"1\":{\"675\":1,\"710\":1}}],[\"setattrid\",{\"1\":{\"673\":2,\"675\":1,\"710\":1}}],[\"setattribute\",{\"1\":{\"605\":2,\"738\":2,\"740\":1}}],[\"setattrgroupid\",{\"1\":{\"673\":4}}],[\"setallowcredentials\",{\"1\":{\"663\":1}}],[\"setaddress\",{\"1\":{\"551\":1,\"704\":1,\"781\":1}}],[\"setaddressvo\",{\"1\":{\"214\":2}}],[\"setavatarurl\",{\"1\":{\"537\":1,\"538\":1,\"539\":1,\"598\":1,\"605\":2,\"608\":1}}],[\"setarticles\",{\"1\":{\"455\":1}}],[\"setarticlecount\",{\"1\":{\"455\":1}}],[\"setarray\",{\"1\":{\"98\":1}}],[\"setapplicationcontext\",{\"1\":{\"344\":1}}],[\"setage\",{\"1\":{\"261\":3,\"416\":1,\"418\":2,\"423\":2,\"687\":1}}],[\"setaccesstoken\",{\"1\":{\"457\":1}}],[\"setaccessible\",{\"1\":{\"168\":1,\"169\":1,\"170\":1,\"171\":1}}],[\"setaccesskey\",{\"1\":{\"22\":1}}],[\"setcatalogs\",{\"1\":{\"710\":1}}],[\"setcatalog3list\",{\"1\":{\"690\":1,\"697\":1}}],[\"setcatalogname\",{\"1\":{\"688\":1,\"710\":1}}],[\"setcatalogid\",{\"1\":{\"675\":1,\"710\":1}}],[\"setcatelogname\",{\"1\":{\"672\":1,\"673\":3}}],[\"setcatelogpath\",{\"1\":{\"670\":1,\"673\":2}}],[\"setchildren\",{\"1\":{\"663\":2}}],[\"setcreateuser\",{\"1\":{\"559\":1}}],[\"setcreatemessageids\",{\"1\":{\"339\":1,\"352\":1}}],[\"setcreatetime\",{\"1\":{\"196\":1,\"208\":1,\"211\":1,\"453\":1,\"454\":1,\"455\":1,\"675\":1}}],[\"setcouponname\",{\"1\":{\"659\":1}}],[\"setcontent\",{\"1\":{\"453\":1,\"454\":1}}],[\"setconnectionfactory\",{\"1\":{\"399\":1}}],[\"setconnectionnum\",{\"1\":{\"283\":1}}],[\"setcode\",{\"1\":{\"230\":2}}],[\"setcompanyname\",{\"1\":{\"184\":1}}],[\"setcomplete\",{\"1\":{\"27\":2,\"728\":3}}],[\"setcurrentrow\",{\"1\":{\"14\":1}}],[\"settag\",{\"1\":{\"732\":2}}],[\"settags\",{\"1\":{\"537\":1,\"538\":1,\"539\":1}}],[\"setteamid\",{\"1\":{\"558\":1,\"561\":1,\"562\":1,\"574\":1}}],[\"setter注入\",{\"0\":{\"281\":1}}],[\"setter\",{\"1\":{\"226\":1,\"430\":1}}],[\"settousername\",{\"1\":{\"453\":1,\"454\":1,\"455\":1}}],[\"settotalpages\",{\"1\":{\"710\":1}}],[\"settotal\",{\"1\":{\"22\":2,\"220\":1,\"710\":1}}],[\"setting\",{\"1\":{\"616\":1}}],[\"settings\",{\"1\":{\"14\":2,\"416\":1,\"423\":1,\"613\":3}}],[\"settitle\",{\"1\":{\"455\":1}}],[\"settilt\",{\"1\":{\"438\":1}}],[\"settypealiasespackage\",{\"1\":{\"224\":1,\"312\":1}}],[\"setlocation\",{\"1\":{\"780\":1,\"789\":1}}],[\"setloading\",{\"1\":{\"22\":6,\"23\":3}}],[\"setlink\",{\"1\":{\"710\":1}}],[\"setlimit\",{\"1\":{\"671\":1}}],[\"setlist\",{\"1\":{\"22\":2,\"220\":2,\"673\":1,\"810\":1}}],[\"setsalt\",{\"1\":{\"725\":1}}],[\"setsaleattr\",{\"1\":{\"721\":1}}],[\"setskutitle\",{\"1\":{\"710\":1}}],[\"setskuimg\",{\"1\":{\"688\":1}}],[\"setskuid\",{\"1\":{\"675\":3}}],[\"setskuprice\",{\"1\":{\"688\":1}}],[\"setskudefaultimg\",{\"1\":{\"675\":1}}],[\"setspuid\",{\"1\":{\"675\":4}}],[\"setssgtype\",{\"1\":{\"453\":1,\"454\":1}}],[\"setstock\",{\"1\":{\"764\":1,\"789\":1}}],[\"setstaticurl\",{\"1\":{\"733\":1}}],[\"setstatuscode\",{\"1\":{\"27\":2,\"728\":3}}],[\"setstatus\",{\"1\":{\"21\":2,\"184\":1,\"352\":1,\"739\":1,\"742\":1}}],[\"setstring\",{\"1\":{\"430\":1}}],[\"sets\",{\"1\":{\"66\":4}}],[\"setsql\",{\"1\":{\"26\":1,\"205\":1,\"765\":1,\"769\":2,\"770\":2,\"790\":1,\"803\":2,\"804\":2}}],[\"setsecretkey\",{\"1\":{\"22\":1}}],[\"setselectedrows\",{\"1\":{\"14\":1}}],[\"setislike\",{\"1\":{\"803\":1,\"804\":1}}],[\"seticon\",{\"1\":{\"802\":1}}],[\"setignorenullvalue\",{\"1\":{\"741\":1,\"788\":1}}],[\"setimages\",{\"1\":{\"721\":1}}],[\"setimgurl\",{\"1\":{\"675\":1}}],[\"setikuncode\",{\"1\":{\"537\":1,\"538\":1,\"539\":1}}],[\"setifabsent\",{\"1\":{\"400\":1,\"703\":5,\"755\":1,\"758\":1,\"777\":1,\"778\":1}}],[\"setinfo\",{\"1\":{\"196\":1,\"208\":1,\"211\":1,\"721\":1}}],[\"setinvokeloading\",{\"1\":{\"22\":3,\"23\":3}}],[\"setinvokeres\",{\"1\":{\"22\":2,\"23\":2}}],[\"setinitialstate\",{\"1\":{\"14\":1}}],[\"setidlist\",{\"1\":{\"564\":1}}],[\"setid\",{\"1\":{\"21\":2,\"196\":2,\"352\":1,\"558\":1,\"562\":1,\"605\":2,\"608\":1,\"733\":1,\"765\":1,\"770\":2,\"790\":1,\"796\":1}}],[\"aac\",{\"1\":{\"731\":4}}],[\"aa\",{\"1\":{\"731\":15}}],[\"avgaggregationbuilder\",{\"1\":{\"687\":1}}],[\"avg\",{\"1\":{\"685\":5,\"687\":2}}],[\"avatarurl\",{\"1\":{\"518\":1,\"519\":3,\"534\":1,\"596\":2,\"616\":3}}],[\"available\",{\"1\":{\"318\":1,\"319\":2,\"733\":2}}],[\"agg聚合对attrs字段进行嵌套分组\",{\"1\":{\"710\":1}}],[\"agg聚合按照catalogid字段进行分组\",{\"1\":{\"710\":1}}],[\"agg聚合按照brandid字段进行分组\",{\"1\":{\"710\":1}}],[\"agg\",{\"1\":{\"710\":27}}],[\"aggregations\",{\"1\":{\"687\":5,\"710\":1}}],[\"aggregations执行聚合\",{\"1\":{\"685\":1}}],[\"aggregation\",{\"1\":{\"687\":5,\"710\":3}}],[\"aggregationbuilders\",{\"1\":{\"687\":2,\"710\":9}}],[\"aggs\",{\"1\":{\"685\":7,\"710\":5}}],[\"agebalanceavg\",{\"1\":{\"685\":1}}],[\"ageavg\",{\"1\":{\"685\":3}}],[\"ageagg1\",{\"1\":{\"687\":2}}],[\"ageagg\",{\"1\":{\"685\":4,\"687\":4}}],[\"agent\",{\"1\":{\"523\":1}}],[\"age=18\",{\"1\":{\"250\":1,\"660\":1,\"794\":1}}],[\"age=15\",{\"1\":{\"248\":1}}],[\"age\",{\"1\":{\"47\":1,\"169\":8,\"171\":1,\"196\":1,\"208\":1,\"211\":1,\"217\":1,\"237\":1,\"239\":2,\"248\":2,\"250\":4,\"251\":1,\"252\":1,\"339\":1,\"395\":1,\"400\":1,\"416\":2,\"418\":4,\"419\":2,\"660\":4,\"685\":5,\"686\":1,\"687\":3,\"794\":1}}],[\"ahk\",{\"1\":{\"665\":1}}],[\"ajax\",{\"1\":{\"610\":1}}],[\"axios封装了ajax\",{\"1\":{\"610\":1}}],[\"axios\",{\"1\":{\"532\":5}}],[\"axios的封装\",{\"1\":{\"7\":1}}],[\"aopcontext\",{\"1\":{\"770\":1,\"777\":2,\"790\":1,\"796\":1}}],[\"aop\",{\"1\":{\"626\":1}}],[\"aop切面的缺点\",{\"1\":{\"26\":1}}],[\"aop切面\",{\"1\":{\"26\":1}}],[\"aof文件体积最小多大以上才触发重写\",{\"1\":{\"372\":1}}],[\"aof文件比上次文件\",{\"1\":{\"372\":1}}],[\"aof文件会比rdb文件大的多\",{\"1\":{\"372\":1}}],[\"aof文件重写\",{\"0\":{\"372\":1}}],[\"aof文件的名称\",{\"1\":{\"371\":1}}],[\"aof\",{\"1\":{\"371\":2,\"372\":2}}],[\"aof持久化提供了更细粒度的持久化\",{\"1\":{\"371\":1}}],[\"aof持久化\",{\"0\":{\"371\":1},\"1\":{\"367\":1}}],[\"awake\",{\"1\":{\"156\":2}}],[\"await\",{\"1\":{\"14\":6,\"22\":3,\"23\":2,\"91\":1,\"93\":8,\"107\":1,\"108\":4,\"156\":1,\"532\":1,\"612\":1,\"613\":2,\"616\":1,\"630\":1,\"704\":1,\"763\":1}}],[\"a=new\",{\"1\":{\"153\":1}}],[\"aqs使用了一种称为\",{\"1\":{\"136\":1}}],[\"aqs使用一个等待队列来管理那些因为获取锁而被阻塞的线程\",{\"1\":{\"136\":1}}],[\"aqs的实现方式基于模板方法设计模式\",{\"1\":{\"136\":1}}],[\"aqs定义了两个主要的操作\",{\"1\":{\"136\":1}}],[\"aqs维护了一个同步状态的抽象概念\",{\"1\":{\"136\":1}}],[\"aqs提供了一种灵活的机制\",{\"1\":{\"136\":1}}],[\"aqs\",{\"0\":{\"136\":1},\"1\":{\"135\":1,\"136\":1}}],[\"amqpexception\",{\"1\":{\"340\":1,\"355\":1}}],[\"amqp<\",{\"1\":{\"332\":1,\"340\":1}}],[\"amqp依赖\",{\"1\":{\"332\":1}}],[\"amqp是一个基于amqp协议的消息中间件框架\",{\"1\":{\"332\":1}}],[\"amqp的全称为\",{\"1\":{\"332\":1}}],[\"amqp\",{\"0\":{\"331\":1},\"1\":{\"327\":2,\"332\":2}}],[\"amount\",{\"1\":{\"207\":4}}],[\"among\",{\"1\":{\"66\":1}}],[\"am\",{\"1\":{\"89\":1}}],[\"aftereach\",{\"1\":{\"395\":1}}],[\"afterpropertiesset\",{\"1\":{\"279\":1}}],[\"aftercompletion\",{\"1\":{\"232\":2,\"233\":2,\"742\":1}}],[\"after\",{\"1\":{\"81\":1,\"143\":1,\"558\":1}}],[\"afternoderemoval\",{\"1\":{\"67\":2}}],[\"afternodeinsertion\",{\"1\":{\"66\":1}}],[\"afternodeaccess\",{\"1\":{\"66\":1}}],[\"after在x时间之后\",{\"1\":{\"27\":1}}],[\"able\",{\"1\":{\"241\":1,\"665\":2}}],[\"abstractdispatcherservletinitializer\",{\"1\":{\"245\":2}}],[\"abstractannotationconfigdispatcherservletinitializer\",{\"1\":{\"224\":1,\"245\":1,\"248\":1}}],[\"abstractqueuedsynchronizer\",{\"0\":{\"136\":1},\"1\":{\"136\":1}}],[\"abstractmap\",{\"1\":{\"63\":1}}],[\"about\",{\"1\":{\"140\":1}}],[\"abortpolicy\",{\"1\":{\"116\":1,\"721\":1}}],[\"above\",{\"1\":{\"66\":1}}],[\"abcdefghdaw\",{\"1\":{\"19\":1}}],[\"abcdefgh\",{\"1\":{\"17\":1,\"19\":1}}],[\"alpine\",{\"1\":{\"643\":1}}],[\"algorithmutils\",{\"1\":{\"566\":1,\"575\":2}}],[\"alt=\",{\"1\":{\"519\":1,\"609\":1,\"616\":1}}],[\"alter\",{\"1\":{\"510\":1}}],[\"alert\",{\"1\":{\"406\":1,\"439\":2}}],[\"alicloud\",{\"1\":{\"665\":5}}],[\"aliossutils\",{\"1\":{\"241\":4}}],[\"aliossproperties\",{\"1\":{\"241\":7}}],[\"aliyundrive\",{\"1\":{\"824\":12}}],[\"aliyuncs\",{\"1\":{\"241\":1,\"665\":2}}],[\"aliyun\",{\"1\":{\"240\":3,\"241\":10,\"665\":5}}],[\"aliases\",{\"1\":{\"201\":2,\"215\":1}}],[\"alive\",{\"1\":{\"89\":1}}],[\"alibaba<\",{\"1\":{\"224\":1,\"294\":1,\"312\":1,\"429\":1,\"524\":1}}],[\"alibaba\",{\"0\":{\"657\":1},\"1\":{\"29\":2,\"294\":1,\"295\":1,\"429\":1,\"430\":2,\"512\":1,\"524\":1,\"655\":1,\"657\":10,\"658\":2,\"660\":2,\"665\":1,\"728\":4}}],[\"already\",{\"1\":{\"66\":1,\"703\":1}}],[\"all查询\",{\"1\":{\"685\":1}}],[\"all代替union\",{\"1\":{\"487\":1}}],[\"allmap\",{\"1\":{\"438\":1}}],[\"allargsconstructor\",{\"1\":{\"217\":1,\"220\":2}}],[\"all\",{\"1\":{\"64\":1,\"143\":1,\"486\":3,\"663\":3,\"684\":1,\"685\":4,\"691\":1}}],[\"allof\",{\"1\":{\"124\":2,\"539\":1,\"720\":2,\"721\":1}}],[\"allowedheaders\",{\"1\":{\"728\":1}}],[\"allowedorigins\",{\"1\":{\"663\":1,\"728\":1}}],[\"allowedoriginpatterns\",{\"1\":{\"663\":1}}],[\"allowedmethods\",{\"1\":{\"663\":1,\"728\":1}}],[\"allowcredentials\",{\"1\":{\"663\":1}}],[\"allow\",{\"1\":{\"63\":1}}],[\"allocated\",{\"1\":{\"63\":2}}],[\"allocate\",{\"1\":{\"56\":2}}],[\"also\",{\"1\":{\"63\":1,\"66\":1,\"67\":1,\"140\":1}}],[\"always\",{\"1\":{\"63\":1,\"66\":1,\"371\":1}}],[\"attrresponsevo\",{\"1\":{\"710\":1}}],[\"attrrespvo类中添加catelogpath\",{\"1\":{\"673\":1}}],[\"attrrespvo\",{\"1\":{\"673\":22}}],[\"attrinfo\",{\"1\":{\"710\":1}}],[\"attridagg\",{\"1\":{\"710\":6}}],[\"attrid为\",{\"1\":{\"710\":1}}],[\"attrids\",{\"1\":{\"674\":4,\"688\":2}}],[\"attrid\",{\"1\":{\"673\":3,\"674\":1,\"688\":1,\"710\":12}}],[\"attragg\",{\"1\":{\"710\":2}}],[\"attrattrgrouprelation\",{\"1\":{\"691\":1}}],[\"attrattrgrouprelationentity\",{\"1\":{\"673\":13,\"674\":4}}],[\"attrvalues\",{\"1\":{\"710\":4}}],[\"attrvalueagg\",{\"1\":{\"710\":2}}],[\"attrvalue为\",{\"1\":{\"710\":1}}],[\"attrvalue\",{\"1\":{\"688\":1,\"710\":8}}],[\"attrvos\",{\"1\":{\"710\":3}}],[\"attrvo>\",{\"1\":{\"710\":1}}],[\"attrvo\",{\"1\":{\"673\":5,\"710\":7}}],[\"attrnameagg\",{\"1\":{\"710\":2}}],[\"attrname\",{\"1\":{\"688\":1,\"710\":8}}],[\"attrnorelation\",{\"1\":{\"674\":1}}],[\"attrs=2\",{\"1\":{\"710\":1}}],[\"attrs=1\",{\"1\":{\"710\":1}}],[\"attrs=\",{\"1\":{\"710\":1}}],[\"attrs\",{\"1\":{\"688\":6,\"710\":16}}],[\"attrslist\",{\"1\":{\"688\":2}}],[\"attrs>\",{\"1\":{\"688\":1}}],[\"attrservice\",{\"1\":{\"673\":1,\"674\":2,\"675\":1,\"688\":1}}],[\"attr1\",{\"1\":{\"675\":2}}],[\"attrenum\",{\"1\":{\"674\":1}}],[\"attrentity\",{\"1\":{\"673\":25,\"674\":5,\"675\":3}}],[\"attrgroupvos\",{\"1\":{\"721\":2}}],[\"attrgrouprelationvo\",{\"1\":{\"674\":2}}],[\"attrgroupdao\",{\"1\":{\"673\":2,\"674\":2}}],[\"attrgroupid\",{\"1\":{\"670\":4,\"674\":7}}],[\"attrgroupentity\",{\"1\":{\"670\":4,\"673\":7,\"674\":5}}],[\"attrgroupservice\",{\"1\":{\"670\":2,\"721\":1}}],[\"attrgroup\",{\"1\":{\"670\":8,\"674\":1}}],[\"attr\",{\"1\":{\"670\":25,\"673\":9,\"674\":5,\"675\":9,\"688\":3,\"710\":12}}],[\"attempts\",{\"1\":{\"56\":1,\"342\":1,\"350\":1}}],[\"atomicity\",{\"1\":{\"158\":1,\"472\":1}}],[\"atomic\",{\"1\":{\"155\":1}}],[\"atomicboolean\",{\"1\":{\"155\":8}}],[\"atomiclnteger\",{\"1\":{\"47\":1}}],[\"at\",{\"1\":{\"56\":4,\"63\":1,\"616\":1}}],[\"a\",{\"1\":{\"51\":2,\"54\":5,\"56\":1,\"58\":13,\"63\":3,\"64\":1,\"66\":4,\"67\":1,\"69\":1,\"81\":20,\"91\":2,\"92\":1,\"93\":4,\"104\":4,\"105\":1,\"112\":10,\"140\":2,\"142\":6,\"143\":3,\"151\":1,\"152\":2,\"153\":2,\"155\":1,\"159\":2,\"171\":1,\"241\":1,\"379\":1,\"400\":7,\"452\":1,\"468\":1,\"566\":2,\"575\":4,\"599\":2,\"605\":1,\"643\":1,\"665\":2,\"666\":1,\"667\":1,\"712\":1}}],[\"aparticle\",{\"1\":{\"733\":6}}],[\"aparticlecontent\",{\"1\":{\"733\":8}}],[\"aparticlecontentmapper\",{\"1\":{\"733\":3}}],[\"aparticlemapper\",{\"1\":{\"732\":2,\"733\":3}}],[\"aparticles\",{\"1\":{\"732\":4}}],[\"apache\",{\"1\":{\"29\":5,\"224\":1,\"245\":1,\"248\":1,\"327\":2,\"398\":1,\"416\":2,\"430\":1,\"599\":1,\"638\":1,\"655\":2,\"691\":2,\"692\":1}}],[\"ap\",{\"1\":{\"729\":3,\"731\":5}}],[\"apuser\",{\"1\":{\"725\":10}}],[\"apollo\",{\"1\":{\"545\":1}}],[\"appjwtutil\",{\"1\":{\"725\":2,\"728\":2}}],[\"apphttpcodeenum\",{\"1\":{\"725\":2}}],[\"appsecret\",{\"1\":{\"457\":3}}],[\"appid\",{\"1\":{\"457\":3}}],[\"appid=\",{\"1\":{\"457\":2}}],[\"app2\",{\"1\":{\"312\":1}}],[\"appforbeanfactory\",{\"1\":{\"298\":1}}],[\"appforinstanceuser\",{\"1\":{\"276\":1}}],[\"appforinstanceorder\",{\"1\":{\"275\":1}}],[\"app\",{\"1\":{\"269\":1,\"450\":1,\"615\":2,\"643\":2,\"728\":2}}],[\"applewebkit\",{\"1\":{\"523\":1}}],[\"apple\",{\"1\":{\"170\":2}}],[\"applytoeither\",{\"1\":{\"143\":3}}],[\"apply\",{\"1\":{\"66\":1,\"143\":1,\"758\":2}}],[\"applicationcontextaware\",{\"1\":{\"344\":1}}],[\"applicationcontext\",{\"1\":{\"269\":2,\"278\":1,\"296\":2,\"298\":1,\"301\":3,\"312\":1,\"313\":1,\"344\":3}}],[\"application\",{\"1\":{\"29\":2,\"416\":1,\"423\":1,\"523\":1,\"595\":2,\"643\":4,\"646\":4,\"658\":1,\"660\":2,\"663\":1,\"728\":1}}],[\"appendfsync\",{\"1\":{\"371\":3}}],[\"appendfilename\",{\"1\":{\"371\":1}}],[\"appendonly\",{\"1\":{\"371\":2}}],[\"appended\",{\"1\":{\"56\":1}}],[\"appends\",{\"1\":{\"56\":1}}],[\"append\",{\"1\":{\"27\":1,\"319\":11,\"371\":1,\"430\":3}}],[\"apis\",{\"1\":{\"522\":3,\"726\":1,\"727\":1}}],[\"apiinfo\",{\"1\":{\"522\":1,\"726\":2,\"727\":5}}],[\"apiinfobuilder\",{\"1\":{\"522\":2,\"726\":1,\"727\":2}}],[\"apipost\",{\"1\":{\"521\":1}}],[\"apifox\",{\"1\":{\"521\":1}}],[\"api<\",{\"1\":{\"224\":1,\"241\":1,\"245\":1,\"303\":1,\"655\":1}}],[\"apimodelproperty\",{\"1\":{\"220\":11}}],[\"apimodel\",{\"1\":{\"220\":3}}],[\"apioperation\",{\"1\":{\"208\":5,\"209\":2,\"214\":2}}],[\"api调用\",{\"1\":{\"142\":1}}],[\"api网关\",{\"0\":{\"27\":1},\"1\":{\"27\":1}}],[\"apilink\",{\"1\":{\"22\":3}}],[\"apiclient\",{\"1\":{\"17\":1}}],[\"api签名认证\",{\"0\":{\"17\":1}}],[\"api\",{\"1\":{\"14\":11,\"16\":4,\"17\":1,\"27\":12,\"29\":4,\"208\":1,\"438\":2,\"439\":1,\"442\":2,\"443\":3,\"444\":2,\"445\":2,\"457\":2,\"522\":1,\"523\":2,\"532\":1,\"539\":2,\"551\":6,\"611\":6,\"612\":1,\"613\":1,\"615\":1,\"616\":3,\"620\":2,\"630\":1,\"646\":1,\"655\":1,\"657\":1,\"663\":7,\"665\":2,\"691\":1}}],[\"api接入\",{\"1\":{\"5\":1}}],[\"api开放平台\",{\"0\":{\"4\":1},\"2\":{\"30\":1,\"31\":1}}],[\"ak=\",{\"1\":{\"442\":1,\"443\":1,\"444\":1,\"445\":1}}],[\"ak=xxx\",{\"1\":{\"438\":1}}],[\"aka\",{\"1\":{\"63\":1}}],[\"ak\",{\"1\":{\"27\":1,\"442\":1,\"444\":1,\"445\":1}}],[\"authorizefilter\",{\"1\":{\"728\":1}}],[\"authorization\",{\"1\":{\"687\":1,\"742\":1}}],[\"authority\",{\"1\":{\"523\":1}}],[\"author=yunfei\",{\"1\":{\"655\":1}}],[\"author\",{\"1\":{\"451\":1}}],[\"authtoken=你的token\",{\"1\":{\"450\":1}}],[\"auth\",{\"1\":{\"241\":1,\"323\":1,\"395\":1,\"396\":1,\"560\":1,\"625\":1}}],[\"authcheck\",{\"1\":{\"21\":2}}],[\"autologin\",{\"1\":{\"609\":1}}],[\"autodelete是否自动删除\",{\"1\":{\"359\":1}}],[\"autoreconnect=true\",{\"1\":{\"211\":1}}],[\"autoresultmap\",{\"1\":{\"198\":1,\"217\":2}}],[\"autowire=\",{\"1\":{\"287\":2}}],[\"autowire属性\",{\"1\":{\"287\":2}}],[\"autowired是按照类型注入\",{\"1\":{\"304\":1}}],[\"autowired可以写在属性上\",{\"1\":{\"304\":1}}],[\"autowired\",{\"0\":{\"304\":1},\"1\":{\"196\":1,\"224\":3,\"232\":2,\"233\":2,\"241\":2,\"304\":1,\"305\":1,\"313\":1,\"319\":4,\"332\":1,\"399\":1,\"400\":2,\"409\":2,\"423\":1,\"655\":2,\"659\":3,\"665\":1,\"688\":2,\"698\":1,\"710\":2,\"733\":4}}],[\"autowire注解\",{\"1\":{\"47\":1}}],[\"autoconfigure\",{\"1\":{\"18\":1,\"726\":1}}],[\"auto\",{\"1\":{\"9\":2,\"201\":1,\"215\":1,\"349\":1,\"359\":1,\"372\":2,\"504\":2,\"509\":1,\"557\":2,\"596\":2,\"616\":1,\"655\":1,\"670\":8,\"672\":1,\"764\":1,\"801\":2,\"806\":1}}],[\"arrow\",{\"1\":{\"506\":1,\"518\":1}}],[\"arrange\",{\"1\":{\"142\":1}}],[\"arrarylist\",{\"2\":{\"60\":1}}],[\"array>\",{\"1\":{\"289\":1}}],[\"arrayparam\",{\"1\":{\"253\":2}}],[\"arrayblockingqueue<>\",{\"1\":{\"112\":1,\"116\":1,\"539\":1,\"790\":1}}],[\"arrayblockingqueue\",{\"1\":{\"112\":2}}],[\"arraycopy\",{\"1\":{\"56\":1,\"58\":1}}],[\"array\",{\"1\":{\"53\":4,\"54\":1,\"56\":7,\"58\":3,\"63\":2,\"190\":2,\"253\":1,\"288\":2,\"289\":1}}],[\"arraylist线程不安全演示\",{\"0\":{\"95\":1}}],[\"arraylist<long>\",{\"1\":{\"817\":1}}],[\"arraylist<user>\",{\"1\":{\"261\":1}}],[\"arraylist<uservo>\",{\"1\":{\"214\":1}}],[\"arraylist<string>\",{\"1\":{\"58\":1}}],[\"arraylist<>\",{\"1\":{\"27\":1,\"58\":2,\"95\":1,\"97\":1,\"211\":1,\"214\":1,\"418\":1,\"423\":1,\"430\":1,\"455\":1,\"538\":1,\"539\":2,\"551\":1,\"559\":2,\"564\":1,\"566\":2,\"575\":2,\"608\":1,\"670\":1,\"710\":5,\"810\":1,\"816\":1,\"817\":1}}],[\"arraylist在进行扩容的时候是原来容量的1\",{\"1\":{\"57\":1}}],[\"arraylist初始容量为0\",{\"1\":{\"57\":1}}],[\"arraylist底层是用动态的数组实现的\",{\"1\":{\"57\":1}}],[\"arraylist底层实现是数组\",{\"1\":{\"50\":1}}],[\"arraylist\",{\"1\":{\"53\":4,\"54\":4,\"58\":3,\"98\":2,\"430\":1,\"539\":1,\"551\":1},\"2\":{\"59\":1}}],[\"arraylist源码分析\",{\"0\":{\"50\":1,\"52\":1}}],[\"arraylist去重\",{\"1\":{\"47\":1}}],[\"arrays\",{\"1\":{\"27\":1,\"54\":1,\"56\":3,\"58\":2,\"98\":1,\"143\":1,\"253\":1,\"288\":1,\"452\":1,\"544\":2,\"573\":1,\"659\":1,\"663\":1,\"674\":1,\"688\":1,\"703\":1}}],[\"arthas\",{\"1\":{\"485\":1}}],[\"articleapplicationtest\",{\"1\":{\"733\":1}}],[\"articleconstants\",{\"1\":{\"732\":8}}],[\"articlehomedto\",{\"1\":{\"732\":2}}],[\"articles\",{\"1\":{\"455\":3}}],[\"article\",{\"1\":{\"412\":1,\"455\":7,\"566\":1,\"630\":1,\"729\":3,\"731\":6,\"733\":1}}],[\"artifact\",{\"1\":{\"29\":2,\"512\":1,\"643\":1,\"655\":2,\"690\":1}}],[\"artifactid>\",{\"1\":{\"18\":1,\"19\":1,\"27\":1,\"29\":4,\"175\":3,\"196\":2,\"224\":11,\"241\":4,\"245\":3,\"248\":1,\"256\":1,\"269\":1,\"294\":2,\"303\":1,\"312\":6,\"313\":2,\"318\":3,\"319\":1,\"332\":1,\"339\":1,\"340\":1,\"395\":2,\"398\":3,\"405\":1,\"416\":5,\"429\":2,\"453\":2,\"512\":1,\"522\":1,\"524\":1,\"533\":2,\"551\":2,\"588\":1,\"589\":1,\"590\":1,\"591\":1,\"592\":1,\"593\":1,\"594\":1,\"599\":1,\"653\":1,\"655\":7,\"657\":2,\"658\":1,\"659\":1,\"660\":1,\"661\":2,\"663\":2,\"665\":2,\"687\":1,\"690\":2,\"698\":4,\"704\":1,\"706\":1,\"726\":2,\"727\":1,\"728\":4,\"733\":2,\"770\":1,\"781\":1,\"817\":2}}],[\"argv\",{\"1\":{\"703\":1,\"780\":1,\"782\":8,\"789\":2,\"796\":3}}],[\"arg\",{\"1\":{\"285\":1,\"286\":6}}],[\"arguments\",{\"1\":{\"63\":1,\"347\":1}}],[\"argument\",{\"1\":{\"56\":1,\"347\":1}}],[\"args\",{\"1\":{\"16\":1,\"27\":1,\"83\":3,\"87\":1,\"88\":1,\"89\":1,\"91\":2,\"92\":1,\"93\":1,\"95\":1,\"100\":1,\"103\":1,\"104\":1,\"105\":1,\"107\":2,\"108\":1,\"109\":1,\"110\":2,\"111\":1,\"112\":1,\"117\":1,\"119\":2,\"120\":2,\"132\":1,\"142\":2,\"143\":3,\"147\":1,\"151\":1,\"153\":1,\"156\":3,\"165\":3,\"167\":1,\"168\":1,\"169\":1,\"170\":1,\"171\":1,\"175\":1,\"241\":1,\"269\":1,\"275\":1,\"276\":1,\"298\":1,\"312\":1,\"318\":1,\"493\":1,\"525\":1,\"526\":1,\"655\":2,\"658\":2,\"659\":2,\"661\":2,\"706\":2,\"712\":4,\"715\":2,\"716\":2,\"733\":2,\"763\":1,\"770\":2}}],[\"area\",{\"1\":{\"444\":10,\"694\":1}}],[\"are\",{\"1\":{\"53\":1,\"54\":2,\"63\":3,\"64\":1,\"66\":2}}],[\"actual\",{\"1\":{\"764\":1}}],[\"activityresult\",{\"1\":{\"409\":1}}],[\"active=prod\",{\"1\":{\"636\":1}}],[\"active===\",{\"1\":{\"507\":2}}],[\"activeindex\",{\"1\":{\"518\":2}}],[\"activeids\",{\"1\":{\"518\":6,\"531\":1}}],[\"active\",{\"1\":{\"398\":1,\"507\":2,\"518\":3}}],[\"activemq\",{\"1\":{\"327\":1}}],[\"activation<\",{\"1\":{\"241\":1}}],[\"actiongroup\",{\"1\":{\"616\":1}}],[\"actiontype\",{\"1\":{\"616\":1}}],[\"action=\",{\"1\":{\"237\":1}}],[\"action\",{\"1\":{\"81\":1,\"120\":6,\"121\":12,\"122\":12,\"616\":3,\"716\":6,\"717\":12,\"718\":12}}],[\"actions=\",{\"1\":{\"22\":1}}],[\"actionref\",{\"1\":{\"14\":1,\"616\":2}}],[\"actionref=\",{\"1\":{\"14\":1,\"616\":1}}],[\"acid是什么\",{\"1\":{\"472\":1}}],[\"acid\",{\"0\":{\"472\":1}}],[\"ack确认\",{\"1\":{\"796\":2}}],[\"acknowledge\",{\"1\":{\"349\":1,\"796\":2}}],[\"acknowledgement\",{\"1\":{\"349\":1}}],[\"ack\",{\"1\":{\"349\":1}}],[\"ack是投递成功\",{\"1\":{\"343\":1}}],[\"ac\",{\"1\":{\"312\":2}}],[\"accounts\",{\"1\":{\"682\":1}}],[\"accountservicetest\",{\"1\":{\"313\":1}}],[\"accountservice\",{\"1\":{\"312\":4,\"313\":4}}],[\"account\",{\"1\":{\"312\":1,\"422\":2,\"682\":1,\"684\":1,\"685\":1,\"686\":1,\"687\":5}}],[\"accept\",{\"1\":{\"143\":2,\"523\":2}}],[\"accessid\",{\"1\":{\"665\":1}}],[\"accesstoken\",{\"1\":{\"457\":5}}],[\"access\",{\"1\":{\"19\":1,\"53\":1,\"241\":5,\"317\":2,\"318\":2,\"451\":1,\"457\":4,\"615\":4,\"665\":10,\"691\":5}}],[\"accesskeysecret\",{\"1\":{\"241\":4}}],[\"accesskeyid\",{\"1\":{\"241\":4,\"665\":2}}],[\"accesskey\",{\"1\":{\"17\":9,\"18\":2,\"22\":3,\"23\":2,\"27\":4,\"29\":3,\"319\":2,\"733\":1}}],[\"acquire\",{\"1\":{\"109\":3,\"136\":1,\"704\":1}}],[\"adornurl\",{\"1\":{\"663\":1}}],[\"adcode\",{\"1\":{\"443\":1}}],[\"advanced\",{\"1\":{\"332\":1}}],[\"adress类和user类\",{\"1\":{\"252\":1}}],[\"addheader\",{\"1\":{\"687\":1}}],[\"addheaders\",{\"1\":{\"17\":1}}],[\"addgroup\",{\"1\":{\"667\":10,\"668\":2}}],[\"addallowedorigin\",{\"1\":{\"663\":1}}],[\"addallowedmethod\",{\"1\":{\"663\":1}}],[\"addallowedheader\",{\"1\":{\"663\":1}}],[\"addattribute\",{\"1\":{\"416\":2,\"418\":2,\"710\":1}}],[\"addmapping\",{\"1\":{\"663\":1}}],[\"addconditionitem\",{\"1\":{\"665\":2}}],[\"addcorsmappings\",{\"1\":{\"663\":1}}],[\"addcallback\",{\"1\":{\"344\":1}}],[\"addteam\",{\"1\":{\"558\":1}}],[\"addeventlistener\",{\"1\":{\"439\":1}}],[\"added\",{\"1\":{\"53\":2,\"140\":3}}],[\"addoverlay\",{\"1\":{\"439\":3}}],[\"addorder\",{\"1\":{\"219\":2,\"220\":4}}],[\"addpathpatterns\",{\"1\":{\"232\":3,\"233\":2,\"742\":1}}],[\"addr\",{\"1\":{\"175\":1,\"658\":1,\"660\":2,\"663\":1,\"728\":2}}],[\"addresourcelocations\",{\"1\":{\"232\":1,\"263\":4}}],[\"addresourcehandler\",{\"1\":{\"232\":1,\"263\":4}}],[\"addresourcehandlers\",{\"1\":{\"232\":1,\"263\":1}}],[\"addressservice\",{\"1\":{\"215\":2}}],[\"addressmap\",{\"1\":{\"214\":3}}],[\"address里面注入userservice\",{\"1\":{\"214\":1}}],[\"addressvolist\",{\"1\":{\"214\":3}}],[\"addressvo\",{\"1\":{\"214\":3}}],[\"addresses\",{\"1\":{\"214\":4,\"215\":2}}],[\"address\",{\"1\":{\"29\":2,\"214\":4,\"252\":3,\"317\":1,\"443\":3,\"444\":10,\"685\":11,\"687\":1}}],[\"addresponseheader=source\",{\"1\":{\"27\":1}}],[\"addrequestparameter=name\",{\"1\":{\"27\":1}}],[\"addrequestheader=yunfei\",{\"1\":{\"27\":1}}],[\"addinterceptor\",{\"1\":{\"232\":3,\"233\":2,\"739\":1,\"742\":2}}],[\"addinterceptors\",{\"1\":{\"232\":2,\"233\":1,\"739\":1,\"742\":1}}],[\"addinterfaceinfousingpost\",{\"1\":{\"14\":1}}],[\"addinnerinterceptor\",{\"1\":{\"219\":1}}],[\"additionally\",{\"1\":{\"63\":1}}],[\"addseckillvoucher\",{\"1\":{\"764\":3,\"789\":1}}],[\"adds\",{\"1\":{\"56\":1}}],[\"add\",{\"1\":{\"27\":1,\"47\":1,\"56\":3,\"58\":3,\"95\":1,\"96\":2,\"98\":1,\"99\":1,\"112\":4,\"140\":1,\"188\":2,\"211\":1,\"214\":1,\"261\":2,\"400\":5,\"418\":2,\"423\":2,\"430\":2,\"455\":1,\"504\":2,\"510\":1,\"517\":1,\"532\":1,\"538\":1,\"539\":2,\"551\":2,\"559\":1,\"566\":2,\"575\":2,\"584\":1,\"668\":1,\"670\":1,\"688\":1,\"710\":5,\"728\":1,\"790\":1,\"796\":1,\"803\":1,\"804\":1,\"807\":1,\"809\":1,\"810\":1,\"816\":3,\"817\":1}}],[\"admin模块\",{\"1\":{\"663\":1}}],[\"admin并导入sql\",{\"1\":{\"655\":1}}],[\"admin\",{\"1\":{\"9\":1,\"21\":2,\"323\":2,\"608\":1,\"615\":6,\"663\":2}}],[\"analysis\",{\"1\":{\"687\":1}}],[\"analysiscontext\",{\"1\":{\"525\":2}}],[\"analyzer\",{\"1\":{\"687\":2,\"710\":1}}],[\"analyze\",{\"1\":{\"687\":2}}],[\"answer\",{\"1\":{\"451\":1,\"801\":1}}],[\"anchor\",{\"1\":{\"439\":1}}],[\"annotations\",{\"1\":{\"522\":1,\"727\":2}}],[\"annotation<\",{\"1\":{\"303\":1}}],[\"annotation包被移除了\",{\"1\":{\"303\":1}}],[\"annotationconfigapplicationcontext\",{\"1\":{\"301\":1,\"312\":1}}],[\"annotationconfigwebapplicationcontext\",{\"1\":{\"245\":6}}],[\"annotation\",{\"1\":{\"245\":1,\"303\":1,\"408\":2,\"409\":2,\"522\":2,\"539\":2,\"544\":2,\"551\":3,\"628\":2,\"655\":1,\"659\":1,\"668\":1,\"671\":5,\"727\":3}}],[\"another\",{\"1\":{\"81\":2,\"381\":1}}],[\"and\",{\"1\":{\"56\":1,\"63\":2,\"64\":4,\"66\":4,\"67\":1,\"104\":1,\"131\":3,\"136\":2,\"140\":1,\"142\":1,\"184\":2,\"185\":14,\"186\":2,\"191\":3,\"204\":1,\"352\":1,\"512\":1,\"559\":2,\"665\":1,\"670\":2,\"673\":1,\"674\":2,\"675\":2,\"725\":1,\"728\":1,\"731\":5,\"766\":1}}],[\"an\",{\"1\":{\"54\":3,\"56\":1,\"64\":4,\"81\":1,\"241\":3,\"665\":6}}],[\"anylock\",{\"1\":{\"781\":1}}],[\"any>>\",{\"1\":{\"620\":1}}],[\"anyof\",{\"1\":{\"124\":2,\"720\":2}}],[\"any\",{\"1\":{\"14\":2,\"22\":4,\"23\":3,\"53\":1,\"56\":2,\"140\":1,\"522\":1,\"616\":2,\"620\":1,\"630\":1,\"726\":1,\"727\":1}}],[\"antd\",{\"1\":{\"630\":1}}],[\"ant\",{\"0\":{\"615\":1},\"1\":{\"7\":2,\"12\":3,\"14\":1,\"522\":1,\"583\":1,\"584\":1,\"616\":3}}],[\"a><br\",{\"1\":{\"418\":3}}],[\"a>\",{\"1\":{\"14\":2,\"22\":2,\"616\":2}}],[\"aspectj<\",{\"1\":{\"770\":1}}],[\"aside\",{\"1\":{\"750\":1}}],[\"asc\",{\"1\":{\"562\":1,\"684\":1,\"710\":3}}],[\"assertequals\",{\"1\":{\"598\":1}}],[\"assertions\",{\"1\":{\"539\":1,\"598\":1}}],[\"assign\",{\"1\":{\"422\":2}}],[\"associated\",{\"1\":{\"66\":4,\"67\":2}}],[\"associates\",{\"1\":{\"66\":1}}],[\"aslist代码如下\",{\"1\":{\"58\":1}}],[\"aslist转list后\",{\"1\":{\"58\":1}}],[\"aslist\",{\"1\":{\"27\":1,\"58\":2,\"143\":1,\"544\":1,\"573\":1,\"659\":1,\"663\":1,\"674\":1,\"687\":1,\"703\":1}}],[\"as\",{\"1\":{\"14\":1,\"56\":1,\"63\":1,\"64\":1,\"66\":2,\"81\":1,\"180\":4,\"241\":1,\"418\":2,\"419\":1,\"517\":1,\"643\":1,\"665\":2}}],[\"async\",{\"1\":{\"14\":7,\"22\":3,\"23\":2,\"532\":1,\"612\":1,\"613\":2,\"616\":2,\"620\":1,\"630\":1}}],[\"架构图\",{\"1\":{\"6\":1}}],[\"背景\",{\"1\":{\"5\":1}}],[\"项目启动时\",{\"1\":{\"796\":1}}],[\"项目中也配置了跨域请求\",{\"1\":{\"663\":1}}],[\"项目结构如下\",{\"1\":{\"653\":1}}],[\"项目的配置\",{\"1\":{\"635\":1}}],[\"项目的登录拦截\",{\"1\":{\"47\":1}}],[\"项目构建打包\",{\"1\":{\"635\":1}}],[\"项目全局入口文件\",{\"1\":{\"615\":1}}],[\"项目又封装了aixos\",{\"1\":{\"610\":1}}],[\"项目瘦身\",{\"0\":{\"585\":1}}],[\"项目名\",{\"1\":{\"382\":1}}],[\"项目创建\",{\"0\":{\"245\":1}}],[\"项目实战\",{\"2\":{\"30\":1,\"31\":1,\"513\":1,\"514\":1,\"527\":1,\"528\":1,\"541\":1,\"542\":1,\"552\":1,\"553\":1,\"568\":1,\"569\":1,\"576\":1,\"577\":1,\"600\":1,\"601\":1,\"617\":1,\"618\":1,\"631\":1,\"632\":1,\"644\":1,\"645\":1,\"647\":1,\"648\":1,\"676\":1,\"677\":1,\"707\":1,\"708\":1,\"722\":1,\"723\":1,\"734\":1,\"735\":1,\"743\":1,\"744\":1,\"759\":1,\"760\":1,\"772\":1,\"773\":1,\"784\":1,\"785\":1,\"797\":1,\"798\":1,\"811\":1,\"812\":1,\"822\":1,\"823\":1}}],[\"项目\",{\"1\":{\"27\":1}}],[\"项目初始化\",{\"0\":{\"11\":1}}],[\"项目介绍\",{\"0\":{\"5\":1}}],[\"项目目录页\",{\"0\":{\"0\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const u=bt[s];e==="suggest"?self.postMessage([e,o,tt(t,u,n)]):e==="search"?self.postMessage([e,o,Z(t,u,n)]):self.postMessage({suggestions:[e,o,tt(t,u,n)],results:[e,o,Z(t,u,n)]})};
//# sourceMappingURL=index.js.map
