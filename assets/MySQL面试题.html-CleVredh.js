import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as i,d as t}from"./app-CoyV4lXC.js";const n={},s=t(`<h1 id="mysql面试题" tabindex="-1"><a class="header-anchor" href="#mysql面试题"><span>MySQL面试题</span></a></h1><h2 id="基础" tabindex="-1"><a class="header-anchor" href="#基础"><span>基础</span></a></h2><h3 id="mysql执行流程" tabindex="-1"><a class="header-anchor" href="#mysql执行流程"><span>MySQL执行流程</span></a></h3><p>MYSQL执行流程如下：</p><ol><li>建立连接：客户端与MYSQL服务器建立连接，涉及TCP/IP握手以及身份验证</li><li>查询缓存：查询语句可能会被查询缓存命中，如果之前执行过相同的查询，并且结果没有发生变化，则直接从缓存中返回结果</li><li>解析SQL：数据库系统通过解析器对SQL查询语句进行词法分析和语法分析，构建语法树</li><li>执行SQL： <ul><li><strong>预处理阶段（Preprocessing）</strong>：检查表和字段是否存在，将查询中的符号扩展为实际的列。</li><li><strong>优化阶段（Query Optimization）</strong>：数据库系统根据查询的成本考虑选择最优的执行计划。</li><li><strong>执行阶段（Query Execution）</strong>：数据库系统根据优化器选择的执行计划执行SQL查询，将符合条件的结果返回给客户端。</li></ul></li></ol><h2 id="索引" tabindex="-1"><a class="header-anchor" href="#索引"><span>索引</span></a></h2><h3 id="了解过索引吗" tabindex="-1"><a class="header-anchor" href="#了解过索引吗"><span>了解过索引吗</span></a></h3><p>索引(index)是帮助MySQL高效获取数据的数据结构（有序）。在数据之外，数据库系统还维护着满足特定查找算法的数据结构(B+树)，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查找算法这种数据结构就是索引。</p><p>MYSQL底层采用的数据结构是B+树<br><img src="https://s2.loli.net/2024/03/18/qgD5nWSCPEI7sJ2.webp" alt="image.png"></p><p>B-Tree树：<br><img src="https://s2.loli.net/2024/03/18/tCAMJwq3aeF7yI8.webp" alt="image.png"></p><p>B+ Tree<br><img src="https://s2.loli.net/2024/03/18/CQTHfexnLUX9sBr.webp" alt=""></p><p>了解过索引吗？</p><ul><li>索引(index)是帮助小ySQL高效获取数据的数据结构（有序）</li><li>提高数据检索的效率，降低数据库的O成本（不需要全表扫描）</li><li>通过索引列对数据进行排序，降低数据排序的成本，降低了CPU的消耗<br> 索引的底层数据结构了解过嘛？</li><li>MySQL的InnoDB引擎采用的B+树的数据结构来存储索引</li><li>阶数更多，路径更短</li><li>磁盘读写代价B+树更低，非叶子节点只存储指针，叶子阶段存储数据</li><li>B+树便于扫库和区间查询，叶子节点是一个双向链表</li></ul><h3 id="聚簇索引" tabindex="-1"><a class="header-anchor" href="#聚簇索引"><span>聚簇索引</span></a></h3><p>聚簇索引（Clustered Index）是一种特殊类型的索引，它改变了数据存储的物理结构以优化性能。在聚簇索引中，索引的键值决定了数据行在磁盘上的物理存储顺序，因此数据行的存储顺序与索引的顺序一致。</p><ul><li>聚集泰l(Clustered Index)将数据存储与索引放到了一块，索引结构的叶子节点保存了行数据，必须有，而且只有一个</li><li>二级索引(Secondary Index)将数据与索引分开存储，索引结构的叶子节点关联的是对应的主键，可以存在多个<br> 聚簇索引的选取规则：</li><li>如果存在主键，主键索引就是聚集索引。</li><li>如果不存在主键，将使用第一个唯一(UNIQUE)索引作为聚集索引。</li><li>如果表没有主键，或没有合适的唯一索引，则InnoDB:会自动生成一个rowid作为隐藏的聚集索引。<br><img src="https://s2.loli.net/2024/03/18/bUiYhyXJ9azODxN.webp" alt="image.png"></li></ul><p>回表查询<br> 回表查询是指在使用覆盖索引（Covering Index）时，虽然索引已经包含了查询需要的所有列，但为了获取完整的结果集，数据库仍然需要通过主键或者聚簇索引回到数据表中进行进一步的查询。这种额外的查询操作被称为回表查询。<br><img src="https://s2.loli.net/2024/03/18/NJv9k8X7bG3KrfS.webp" alt="image.png"></p><p>面试题回答：<br> 什么是聚簇索引什么是非聚簇索引？</p><ul><li>聚簇索引（聚集索引）：数据与索引放到一块，B+树的叶子节点保存了整行数据，有且只有一个</li><li>非聚簇索引（二级索）：数据与索引分开存储，B+树的叶子节点保存对应的主键，可以有多个<br> 知道什么是回表查询嘛？</li><li>通过二级索引找到对应的主键值，到聚集索引中查找整行数据，这个过程就是回表</li></ul><h3 id="覆盖索引" tabindex="-1"><a class="header-anchor" href="#覆盖索引"><span>覆盖索引</span></a></h3><p>覆盖索引（Covering Index）是一种特殊类型的索引，它包含了查询所需的所有列，可以完全满足查询需求，而不需要额外地回到数据表中去获取数据。因此，覆盖索引可以避免回表查询，提高查询性能。</p><p><img src="https://s2.loli.net/2024/03/18/MpzCukHac3tGj9n.webp" alt="image.png"></p><p>回表查询：<br> 比如查询id，name，gender的时候，gender没有索引 ，查不到，回进行 回表查询<br><img src="https://s2.loli.net/2024/03/18/jF2XnT9bdrAwkQC.webp" alt="image.png"></p><p>回答面试：<br> 知道什么叫覆盖索引嘛？</p><ul><li>覆盖索引是指查询使用了索引，返回的列，必须在索引中全部能够找到</li><li>使用id查询，直接走聚集索引查询，一次索引扫描，直接返回数据，性能高。</li><li>如果返回的列中没有创建索引，有可能会触发回表查询，尽量避免使用select*</li></ul><h3 id="mysql超大分页怎么处理" tabindex="-1"><a class="header-anchor" href="#mysql超大分页怎么处理"><span>MYSQL超大分页怎么处理？</span></a></h3><ul><li>可以使用覆盖索引解决<br><img src="https://s2.loli.net/2024/03/18/xobIUlHgkaBwp43.webp" alt="image.png"><br> 回答问题：<br> MYSQL超大分页怎么处理？<br> 问题：在数据量比较大时，imt分页查询，需要对数据进行排序，效率低</li><li>解决方案：覆盖索引+子查询</li></ul><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span>
<span class="token keyword">from</span> tb_sku t<span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token keyword">select</span> id <span class="token keyword">from</span> tb_sku <span class="token keyword">order</span> <span class="token keyword">by</span> id <span class="token keyword">limit</span> <span class="token number">9000000</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span> a
<span class="token keyword">where</span> t<span class="token punctuation">.</span>id <span class="token operator">=</span>a<span class="token punctuation">.</span>id
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="索引创建-的原则" tabindex="-1"><a class="header-anchor" href="#索引创建-的原则"><span>索引创建 的原则</span></a></h3><p>1).针对于数据量较大，且查询比较频繁的表建立索引。单表超过10万数据（增加用户体验）<br> 2).针对于常作为查询条件(where)、排序(order by)、分组(group by)操作的字段建立索引。<br> 3).尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高。<br> 4).如果是字符串类型的字段，字段的长度较长，可以针对于字段的特点，建立前缀索引。<br> 5).尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率。<br> 6).要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价也就越大，会影响增删改的效率。<br> 7).如果索引列不能存储NULL值，请在创建表时使用NOT NULL约束它。当优化器知道每列是否包含NULL值时，它可以更好地确定哪个索引最有效地用于查询。</p><h3 id="索引失效" tabindex="-1"><a class="header-anchor" href="#索引失效"><span>索引失效</span></a></h3><p>1.查询条件不满足索引最左前缀原则：</p><ul><li>在使用联合索引时，如果查询条件不满足索引的最左前缀原则，索引可能会失效。</li><li>这意味着索引只能有效利用查询条件的最左边部分，而不能跳过中间的列。</li></ul><p>如图，索引有三个<br><img src="https://s2.loli.net/2024/03/18/4n7F8xTLmNM1fwX.webp" alt="image.png"></p><p>当跳过某一列的时候，索引会失效：<br><img src="https://s2.loli.net/2024/03/18/bouzdkThsMC7aeF.webp" alt="image.png"></p><ol start="2"><li><p>范围查询右边的列，不能使用索引<br><img src="https://s2.loli.net/2024/03/18/yjq2VUutxAP1gDQ.webp" alt="image.png"></p></li><li><p>不要在索引列上进行运算操作，索引将失效。<br><img src="https://s2.loli.net/2024/03/18/JOdV9T14iwGH3xb.webp" alt="image.png"></p></li><li><p>字符串不加单引号，造成索引失效<br><img src="https://s2.loli.net/2024/03/18/InZNE92VojpY5Rd.webp" alt="image.png"></p></li><li><p><code>%</code>开头模糊查询导致索引失效<br><img src="https://s2.loli.net/2024/03/18/Eo5Kta6FvrsuVjO.webp" alt="image.png"></p></li></ol><p>回答面试：<br> 什么情况下索引会失效？</p><ol><li>违反最左前缀法则</li><li>范围查询右边的列，不能使用索</li><li>不要在索引列上进行运算操作，索引将失效</li><li>字符串不加单引号，造成索引失效。（类型转换）</li><li>以%开头的Like模糊查询，索引失效</li></ol><h2 id="事务" tabindex="-1"><a class="header-anchor" href="#事务"><span>事务</span></a></h2><h3 id="acid" tabindex="-1"><a class="header-anchor" href="#acid"><span>ACID</span></a></h3><p>ACID是什么？可以详细说一下吗？</p><ul><li>原子性(Atomicity）：事务是不可分割的最小操作单元，要么全部成功，要么全部失败。</li><li>一致性(Consistency）:事务完成时，必须使所有的数据都保持一致状态。</li><li>隔离性(Isolation)：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。</li><li>持久性(Durability）：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的。<br> 结合转账的案例来说</li></ul><h3 id="并发事务问题" tabindex="-1"><a class="header-anchor" href="#并发事务问题"><span>并发事务问题</span></a></h3><table><thead><tr><th>问题</th><th>描述</th></tr></thead><tbody><tr><td>脏读</td><td>一个事务读到另外一个事务还没有提交的数据。</td></tr><tr><td>不可重复读</td><td>一个事务先后读取同一条记录，但两次读取的数据不同，称之为不可重复读。</td></tr><tr><td>幻读</td><td>一个事务按照条件查询数据时，没有对应的数据行，但是在插入数据时，又发现这行数据已经存在，好像出现了”幻影”。</td></tr></tbody></table><h3 id="事务隔离级别" tabindex="-1"><a class="header-anchor" href="#事务隔离级别"><span>事务隔离级别</span></a></h3><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>未提交读</td><td>1</td><td>1</td><td>1</td></tr><tr><td>读已提交</td><td>0</td><td>1</td><td>1</td></tr><tr><td>默认可重复读</td><td>0</td><td>0</td><td>1</td></tr><tr><td>串行化</td><td>0</td><td>0</td><td>0</td></tr><tr><td>事务隔离级别越高，数据越安全，但是性能越低。</td><td></td><td></td><td></td></tr></tbody></table><h3 id="undo-log和redo-log" tabindex="-1"><a class="header-anchor" href="#undo-log和redo-log"><span>undo log和redo log</span></a></h3><p>redo log 如下：<br> 重做日志，记录的是事务提交时数据页的物理修改，是用来实现事务的持久性。<br> 该日志文件由两部分组成：重做日志缓冲(redo log buffer)以及重做日志文件(redo log file),前者是在内存中，后者在磁盘中。当事<br> 务提交之后会把所有修改信息都存到该日志文件中，用于在刷新脏页到磁盘，发生错误时，进行数据恢复使用。<br><img src="https://s2.loli.net/2024/03/18/Dp2VCRXtlOM7QNP.webp" alt="image.png"></p><p><img src="https://s2.loli.net/2024/03/18/xlG4aHEsKyTAiLU.webp" alt="image.png"></p><p>undo log</p><ul><li>回滚日志，用于记录数据被修改前的信息，作用包含两个：提供回滚和MVCC(多版本并发控制)。undo log和redo log记录物理日志不一样，它是逻辑日志。</li><li>可以认为当delete-一条记录时，undo log中会记录一条对应的insert记录，反之亦然，</li><li>当update-一条记录时，它记录一条对应相反的update记录。当执行rollback时，就可以从undo log中的逻辑记录读取到相应的内容并进行回滚。</li></ul><p>undo log 和redo log区别</p><ul><li>redo log:记录的是数据页的物理变化，服务宕机可用来同步数据</li><li>undo log:记录的是逻辑日志，当事务回滚时，通过逆操作恢复原来的数据</li><li>redo log保证了事务的持久性，undo log保证了事务的原子性和一致性</li></ul><h3 id="事务中的隔离性是如何保证的呢" tabindex="-1"><a class="header-anchor" href="#事务中的隔离性是如何保证的呢"><span>事务中的隔离性是如何保证的呢？</span></a></h3><ul><li>锁：排他锁（如一个事务获取了一个数据行的排他锁，其他事务就不能再获取该行的其他锁）</li><li>mvcc:多版本并发控制<br> 你解释一下MVCC?<br> 全称Multi-Version Concurrency Control,.多版本并发控制。指维护一个数据的多个版本，使得读写操作没有冲突，MVCC的具体实现，主要依赖于数据库记录中的隐式字段、undo log日志、readView.。<br> MVCC的实现原理如下：</li></ul><ol><li><strong>版本号管理</strong>： <ul><li>每个数据行都有一个版本号，用于标识数据的修改版本。</li><li>当一个事务对数据行进行更新时，系统会为新的数据行创建一个新版本，并将旧版本标记为无效。</li></ul></li><li><strong>读取操作</strong>： <ul><li>当一个事务需要读取数据时，系统会根据事务的隔离级别选择合适的数据版本。</li><li>在读取时，系统会忽略被其他事务修改的数据行，而只读取有效版本的数据行。</li></ul></li><li><strong>写入操作</strong>： <ul><li>当一个事务对数据行进行更新时，系统会为新的数据行创建一个新版本，并将旧版本标记为无效。</li><li>事务对数据行的修改不会影响到正在读取旧版本数据行的其他事务。</li></ul></li><li><strong>快照读取</strong>： <ul><li>在一些隔离级别下，系统会为每个事务创建一个快照（Snapshot），用于读取数据时使用。</li><li>快照包含了事务开始时数据库中所有数据行的有效版本，事务可以根据快照读取数据，而不受其他事务的影响。</li></ul></li><li><strong>回滚段</strong>： <ul><li>当一个事务对数据进行更新时，系统会在回滚段（Undo Segment）中保存原始数据的副本。</li><li>如果事务需要回滚，系统可以使用回滚段中的数据副本来恢复数据。</li></ul></li></ol><p><img src="https://s2.loli.net/2024/03/18/U4Rp9WBJrxlaD7E.webp" alt="image.png"></p><p><img src="https://s2.loli.net/2024/03/18/dxlO2yMnbWsqNJR.webp" alt="image.png"><br><img src="https://s2.loli.net/2024/03/18/fZRhTMxqDHLO7WX.webp" alt="image.png"></p><p>回答问题：<br> 事务中的隔离性是如何保证的呢？（你解释一下MVCC)<br> MySQL中的多版本并发控制。指维护一个数据的多个版本，使得读写操作没有冲突</p><ul><li>隐藏字段：<br> ①trx id(事务id),记录每一次操作的事务id,是自增的<br> ②roll pointer(回滚指针)，指向上一个版本的事务版本记录地址</li><li>undo log:<br> ①回滚日志，存储老版本数据<br> ②版本链：多个事务并行操作某一行记录，记录不同事务修改数据的版本，通过roll pointer指针形成一个链表</li><li>readView解决的是一个事务查询选择版本的问题 <ul><li>根据readView的匹配规则和当前的一些事务id判断该访问那个版本的数据</li><li>不同的隔离级别快照读是不一样的，最终的访问的结果不一样</li><li>RC：每一次执行快照读时生成ReadView</li><li>RR：仅在事务中第一次执行快照读时生成ReadView,后续复用</li></ul></li></ul><h3 id="主从同步" tabindex="-1"><a class="header-anchor" href="#主从同步"><span>主从同步</span></a></h3><p>MySQL主从复制的核心就是二进制日志<br> 二进制日志(BINLOG)记录了所有的DDL(数据定义语言)语句和DML(数据操纵语言)语句，但不包括数据查询(SELECT、SHOW)语句。<br><img src="https://s2.loli.net/2024/03/18/ieyoITFPhqCp7SV.webp" alt="image.png"></p><p>MySQL主从复制的核心就是二进制日志binlog(DDL(数据定义语言)语句和DML(数据操纵语言)语句)<br> ①主库在事务提交时，会把数据变更记录在二进制日志文件Binlog中。<br> ②从库读取主库的二进制日志文件Binlog,写入到从库的中继日志Relay Log。<br> ③从库重做中继日志中的事件，将改变反映它自己的数据</p><h3 id="分库分表" tabindex="-1"><a class="header-anchor" href="#分库分表"><span>分库分表</span></a></h3><p>分库分表是一种数据库水平拆分（Sharding）的策略，用于解决单一数据库服务器无法满足大规模数据存储和处理需求的问题。在分库分表中，数据库中的数据被拆分成多个数据库实例和表集合，每个数据库实例和表集合负责存储和处理部分数据，从而提高系统的扩展性、性能和可用性。<br><img src="https://s2.loli.net/2024/03/18/MsNAWL2t5uXZUyn.webp" alt="image.png"></p><p><img src="https://s2.loli.net/2024/03/18/q5kNwyW7bYjvncz.webp" alt="image.png"></p><p>水平分库<br><img src="https://s2.loli.net/2024/03/18/xQLoBtIEWMz4jqs.webp" alt="image.png"></p><p>水平分表：<br><img src="https://s2.loli.net/2024/03/18/Y7vAMB5arQeExjD.webp" alt="image.png"></p><p>问题：<br><img src="https://s2.loli.net/2024/03/18/bQe3DhyJaixHvIL.webp" alt="image.png"></p><p>面试题：</p><ul><li>业务介绍</li></ul><ol><li>根据自己简历上的项目，想一个数据量较大业务（请求数多或业务累积大）</li><li>达到了什么样的量级（单表1000万或超过20G)</li></ol><ul><li>具体拆分策略</li></ul><ol><li>水平分库，将一个库的数据拆分到多个库中，解决海量数据存储和高并发的问题</li><li>水平分表，解决单表存储和性能的问题</li><li>垂直分库，根据业务进行拆分，高并发下提高磁盘O和网络连接数</li><li>垂直分表，冷热数据分离，多表互不影响</li></ol><h2 id="锁" tabindex="-1"><a class="header-anchor" href="#锁"><span>锁</span></a></h2><h2 id="日志" tabindex="-1"><a class="header-anchor" href="#日志"><span>日志</span></a></h2><h2 id="内存" tabindex="-1"><a class="header-anchor" href="#内存"><span>内存</span></a></h2><h2 id="触发器" tabindex="-1"><a class="header-anchor" href="#触发器"><span>触发器</span></a></h2><h2 id="视图" tabindex="-1"><a class="header-anchor" href="#视图"><span>视图</span></a></h2><h2 id="优化" tabindex="-1"><a class="header-anchor" href="#优化"><span>优化</span></a></h2><h3 id="在mysql中-如何定位慢查询" tabindex="-1"><a class="header-anchor" href="#在mysql中-如何定位慢查询"><span>在MySQL中，如何定位慢查询？</span></a></h3><p>解决办法：</p><ul><li>使用开源工具 <ul><li>调试工具：Arthas</li><li>运维工具：Prometheus,Skywalking，</li></ul></li><li>使用MYSQL自带的慢日志 <ul><li>在MySQL配置文件中启用慢查询日志。可以通过设置<code>slow_query_log</code>参数为1来启用。</li></ul><ul><li>设置<code>long_query_time</code>参数，指定查询运行时间超过多少秒才会被记录到慢查询日志中，默认值为10秒。</li><li>使用<code>log_queries_not_using_indexes</code>参数来记录未使用索引的查询。</li><li>重启MySQL服务使配置生效。</li><li>查看慢查询日志文件，通常位于MySQL的数据目录下，默认名称为<code>hostname-slow.log</code>。例如<code>/var/lib/mysql/localhost-sow.log</code></li></ul></li><li>在查询前添加<code>EXPLAIN</code>关键字，可以让MySQL解释执行查询的计划。通过查看执行计划，可以确定查询是否使用了索引，以及是否存在性能问题。</li></ul><h3 id="sql语句执行很慢-如何分析" tabindex="-1"><a class="header-anchor" href="#sql语句执行很慢-如何分析"><span>SQL语句执行很慢，如何分析？</span></a></h3><p>对于聚合查询：可以新增一个临时表<br> 对于多表查询：可以优化SQL结构<br> 对于表数据量过大的查询：分析SQL 语句</p><p>可以使用explain或者desc明亮来获取mysql执行的select语句信息，直接加在select前面即可</p><p><img src="https://s2.loli.net/2024/03/18/KmdUQFOM9RibSH1.webp" alt="image.png"></p><ol><li><strong>id</strong>： <ul><li>这是查询中每个操作的标识符。</li><li>对于复杂查询，可以通过该字段查看操作之间的父子关系。</li></ul></li><li><strong>select_type</strong>： <ul><li>表示每个查询中的查询类型。</li><li>可能的值包括：<code>SIMPLE</code>（简单查询）、<code>PRIMARY</code>（主查询）、<code>SUBQUERY</code>（子查询）、<code>DERIVED</code>（派生表查询）、<code>UNION</code>（联合查询）等。</li></ul></li><li><strong>table</strong>： <ul><li>显示查询涉及的表名。</li><li>如果查询涉及多个表，会显示使用的连接方式。</li></ul></li><li><strong>partitions</strong>： <ul><li>表示查询使用的分区（如果适用）。</li></ul></li><li><strong>type</strong>： <ul><li>表示MySQL在表中找到所需行的方式。</li><li>常见的值有：<code>ALL</code>（全表扫描）、<code>index</code>（使用索引扫描）、<code>range</code>（范围扫描）、<code>ref</code>（基于索引的等值查找）、<code>const</code>（常量表）等。</li></ul></li><li><strong>possible_keys</strong>： <ul><li>显示可能用于此查询的索引。</li><li>如果MySQL选择了其中一个索引来执行查询，则该索引会在<code>key</code>字段中显示。</li></ul></li><li><strong>key</strong>： <ul><li>表示MySQL实际选择用于查询的索引。</li><li>如果该字段显示为<code>NULL</code>，则表示未使用索引，可能需要考虑创建适当的索引。</li><li>type这条sql的连接的类型，性能由好到差为NULL、system、const、.eq_ref、ref range、index、all。system:查询系统中的表，const:根据主键查询，eq ref:主键索引查询或唯一索引查询，ref:索引查询，range:范围查询，index:索引树扫描，all:全盘扫描</li></ul></li><li><strong>key_len</strong>： <ul><li>表示使用的索引的长度。</li><li>可以帮助你了解索引的效率和覆盖范围。</li></ul></li><li><strong>ref</strong>： <ul><li>显示索引之间的列之间的比较。</li><li>对于使用索引的查询，此字段显示与索引列进行比较的列名。</li></ul></li><li><strong>rows</strong>： <ul><li>表示MySQL预计扫描的行数。</li><li>这是MySQL优化器根据统计信息估算的值，实际执行时可能会有所不同。</li></ul></li><li><strong>filtered</strong>： <ul><li>表示从表中检索出的行的百分比。</li><li>这是根据WHERE条件和表的统计信息估算的。</li></ul></li><li><strong>Extra</strong>： <ul><li>提供其他信息，如使用临时表、文件排序、使用索引提示等。</li><li>这里可能包含一些提示，帮助你理解查询执行的情况。</li></ul></li></ol><p>对于 extra的额外建议：</p><ul><li>using where;using index,查找使用了索引，需要的数据都在索引列中能找到，不需要回表查询数据</li><li>using index condition:查找使用了索引，但是需要回表查询数据</li></ul><h3 id="sql优化经验" tabindex="-1"><a class="header-anchor" href="#sql优化经验"><span>SQL优化经验</span></a></h3><ul><li><p>表的设计优化<br> 表的设计优化（参考阿里开发手册《嵩山版》）<br> ①比如设置合适的数值(tinyint int bigint),要根据实际情况选择<br> ②比如设置合适的字符串类型(char和varchar)char定长效率高，varchari可变长度，效率稍低</p></li><li><p>索引优化</p></li><li><p>SQL语句优化<br> ①SELECT语句务必指明字段名称（避免直接使用select*)<br> ②SQL语句要避免造成索引失效的写法<br> ③尽量用union all代替union union会多一次过滤，效率低<br> ④避免在where子句中对字段进行表达式操作<br> ⑤Join优化能用innerjoin就不用left join right join,如必须使用一定要以小表为驱动，内连接会对两个表进行优化，优先把小表放到外边，把大表放到里边。left join或right join,不会重新调整顺序</p></li><li><p>主从复制、读写分离<br> 如果数据库的使用场景读的操作比较多的时候，为了避免写的操作所造成的性能影响可以采用读写分离的架构。读写分离解决的是，数据库的写入，影响了查询的效率。<br><img src="https://s2.loli.net/2024/03/18/LbJB58YAc7xvXDw.webp" alt="image.png"></p></li><li><p>分库分表</p></li></ul>`,92),a=[s];function r(o,p){return e(),i("div",null,a)}const c=l(n,[["render",r],["__file","MySQL面试题.html.vue"]]),g=JSON.parse('{"path":"/java/7-%E9%9D%A2%E8%AF%95/MySQL%E9%9D%A2%E8%AF%95%E9%A2%98.html","title":"MySQL面试题","lang":"en-US","frontmatter":{"title":"MySQL面试题","date":"2024-03-17T00:00:00.000Z","category":["MySQL","面试"],"tag":["MySQL","面试"],"description":"MySQL面试题 基础 MySQL执行流程 MYSQL执行流程如下： 建立连接：客户端与MYSQL服务器建立连接，涉及TCP/IP握手以及身份验证 查询缓存：查询语句可能会被查询缓存命中，如果之前执行过相同的查询，并且结果没有发生变化，则直接从缓存中返回结果 解析SQL：数据库系统通过解析器对SQL查询语句进行词法分析和语法分析，构建语法树 执行SQL...","head":[["meta",{"property":"og:url","content":"https://github.com/zhangruyi3906/blog/java/7-%E9%9D%A2%E8%AF%95/MySQL%E9%9D%A2%E8%AF%95%E9%A2%98.html"}],["meta",{"property":"og:site_name","content":"乘风破浪（长风破浪会有时，直挂云帆济沧海）"}],["meta",{"property":"og:title","content":"MySQL面试题"}],["meta",{"property":"og:description","content":"MySQL面试题 基础 MySQL执行流程 MYSQL执行流程如下： 建立连接：客户端与MYSQL服务器建立连接，涉及TCP/IP握手以及身份验证 查询缓存：查询语句可能会被查询缓存命中，如果之前执行过相同的查询，并且结果没有发生变化，则直接从缓存中返回结果 解析SQL：数据库系统通过解析器对SQL查询语句进行词法分析和语法分析，构建语法树 执行SQL..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://s2.loli.net/2024/03/18/qgD5nWSCPEI7sJ2.webp"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-06-14T07:14:40.000Z"}],["meta",{"property":"article:author","content":"dreamchaser"}],["meta",{"property":"article:tag","content":"MySQL"}],["meta",{"property":"article:tag","content":"面试"}],["meta",{"property":"article:published_time","content":"2024-03-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-14T07:14:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MySQL面试题\\",\\"image\\":[\\"https://s2.loli.net/2024/03/18/qgD5nWSCPEI7sJ2.webp\\",\\"https://s2.loli.net/2024/03/18/tCAMJwq3aeF7yI8.webp\\",\\"https://s2.loli.net/2024/03/18/CQTHfexnLUX9sBr.webp\\",\\"https://s2.loli.net/2024/03/18/bUiYhyXJ9azODxN.webp\\",\\"https://s2.loli.net/2024/03/18/NJv9k8X7bG3KrfS.webp\\",\\"https://s2.loli.net/2024/03/18/MpzCukHac3tGj9n.webp\\",\\"https://s2.loli.net/2024/03/18/jF2XnT9bdrAwkQC.webp\\",\\"https://s2.loli.net/2024/03/18/xobIUlHgkaBwp43.webp\\",\\"https://s2.loli.net/2024/03/18/4n7F8xTLmNM1fwX.webp\\",\\"https://s2.loli.net/2024/03/18/bouzdkThsMC7aeF.webp\\",\\"https://s2.loli.net/2024/03/18/yjq2VUutxAP1gDQ.webp\\",\\"https://s2.loli.net/2024/03/18/JOdV9T14iwGH3xb.webp\\",\\"https://s2.loli.net/2024/03/18/InZNE92VojpY5Rd.webp\\",\\"https://s2.loli.net/2024/03/18/Eo5Kta6FvrsuVjO.webp\\",\\"https://s2.loli.net/2024/03/18/Dp2VCRXtlOM7QNP.webp\\",\\"https://s2.loli.net/2024/03/18/xlG4aHEsKyTAiLU.webp\\",\\"https://s2.loli.net/2024/03/18/U4Rp9WBJrxlaD7E.webp\\",\\"https://s2.loli.net/2024/03/18/dxlO2yMnbWsqNJR.webp\\",\\"https://s2.loli.net/2024/03/18/fZRhTMxqDHLO7WX.webp\\",\\"https://s2.loli.net/2024/03/18/ieyoITFPhqCp7SV.webp\\",\\"https://s2.loli.net/2024/03/18/MsNAWL2t5uXZUyn.webp\\",\\"https://s2.loli.net/2024/03/18/q5kNwyW7bYjvncz.webp\\",\\"https://s2.loli.net/2024/03/18/xQLoBtIEWMz4jqs.webp\\",\\"https://s2.loli.net/2024/03/18/Y7vAMB5arQeExjD.webp\\",\\"https://s2.loli.net/2024/03/18/bQe3DhyJaixHvIL.webp\\",\\"https://s2.loli.net/2024/03/18/KmdUQFOM9RibSH1.webp\\",\\"https://s2.loli.net/2024/03/18/LbJB58YAc7xvXDw.webp\\"],\\"datePublished\\":\\"2024-03-17T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-14T07:14:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"dreamchaser\\",\\"url\\":\\"https://github.com/zhangruyi3906\\"}]}"]]},"headers":[{"level":2,"title":"基础","slug":"基础","link":"#基础","children":[{"level":3,"title":"MySQL执行流程","slug":"mysql执行流程","link":"#mysql执行流程","children":[]}]},{"level":2,"title":"索引","slug":"索引","link":"#索引","children":[{"level":3,"title":"了解过索引吗","slug":"了解过索引吗","link":"#了解过索引吗","children":[]},{"level":3,"title":"聚簇索引","slug":"聚簇索引","link":"#聚簇索引","children":[]},{"level":3,"title":"覆盖索引","slug":"覆盖索引","link":"#覆盖索引","children":[]},{"level":3,"title":"MYSQL超大分页怎么处理？","slug":"mysql超大分页怎么处理","link":"#mysql超大分页怎么处理","children":[]},{"level":3,"title":"索引创建 的原则","slug":"索引创建-的原则","link":"#索引创建-的原则","children":[]},{"level":3,"title":"索引失效","slug":"索引失效","link":"#索引失效","children":[]}]},{"level":2,"title":"事务","slug":"事务","link":"#事务","children":[{"level":3,"title":"ACID","slug":"acid","link":"#acid","children":[]},{"level":3,"title":"并发事务问题","slug":"并发事务问题","link":"#并发事务问题","children":[]},{"level":3,"title":"事务隔离级别","slug":"事务隔离级别","link":"#事务隔离级别","children":[]},{"level":3,"title":"undo log和redo log","slug":"undo-log和redo-log","link":"#undo-log和redo-log","children":[]},{"level":3,"title":"事务中的隔离性是如何保证的呢？","slug":"事务中的隔离性是如何保证的呢","link":"#事务中的隔离性是如何保证的呢","children":[]},{"level":3,"title":"主从同步","slug":"主从同步","link":"#主从同步","children":[]},{"level":3,"title":"分库分表","slug":"分库分表","link":"#分库分表","children":[]}]},{"level":2,"title":"锁","slug":"锁","link":"#锁","children":[]},{"level":2,"title":"日志","slug":"日志","link":"#日志","children":[]},{"level":2,"title":"内存","slug":"内存","link":"#内存","children":[]},{"level":2,"title":"触发器","slug":"触发器","link":"#触发器","children":[]},{"level":2,"title":"视图","slug":"视图","link":"#视图","children":[]},{"level":2,"title":"优化","slug":"优化","link":"#优化","children":[{"level":3,"title":"在MySQL中，如何定位慢查询？","slug":"在mysql中-如何定位慢查询","link":"#在mysql中-如何定位慢查询","children":[]},{"level":3,"title":"SQL语句执行很慢，如何分析？","slug":"sql语句执行很慢-如何分析","link":"#sql语句执行很慢-如何分析","children":[]},{"level":3,"title":"SQL优化经验","slug":"sql优化经验","link":"#sql优化经验","children":[]}]}],"git":{"createdTime":1718196522000,"updatedTime":1718349280000,"contributors":[{"name":"zhangruyi3906","email":"3023208132@qq.com","commits":3}]},"readingTime":{"minutes":16.98,"words":5095},"filePathRelative":"java/7-面试/MySQL面试题.md","localizedDate":"March 17, 2024","excerpt":"\\n<h2>基础</h2>\\n<h3>MySQL执行流程</h3>\\n<p>MYSQL执行流程如下：</p>\\n<ol>\\n<li>建立连接：客户端与MYSQL服务器建立连接，涉及TCP/IP握手以及身份验证</li>\\n<li>查询缓存：查询语句可能会被查询缓存命中，如果之前执行过相同的查询，并且结果没有发生变化，则直接从缓存中返回结果</li>\\n<li>解析SQL：数据库系统通过解析器对SQL查询语句进行词法分析和语法分析，构建语法树</li>\\n<li>执行SQL：\\n<ul>\\n<li><strong>预处理阶段（Preprocessing）</strong>：检查表和字段是否存在，将查询中的符号扩展为实际的列。</li>\\n<li><strong>优化阶段（Query Optimization）</strong>：数据库系统根据查询的成本考虑选择最优的执行计划。</li>\\n<li><strong>执行阶段（Query Execution）</strong>：数据库系统根据优化器选择的执行计划执行SQL查询，将符合条件的结果返回给客户端。</li>\\n</ul>\\n</li>\\n</ol>","autoDesc":true}');export{c as comp,g as data};
