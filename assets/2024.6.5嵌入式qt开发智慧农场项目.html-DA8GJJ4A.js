import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o as l,c,a as n,e as s,b as t,d as e}from"./app-Cxh2L1Vs.js";const o={},r=e(`<p>-<img src="https://s2.loli.net/2024/06/05/flegmEcShB6JGxj.png" alt=""></p><p><img src="https://s2.loli.net/2024/06/05/ZWaN79ovCz28Hst.png" alt=""></p><p>总结：</p><p>第一天实训总体十分的轻松</p><p>每天坚持写技术日志</p><p>认真写好工程实践报告</p><p><img src="https://s2.loli.net/2024/06/05/vdJpAIzP1nsCM48.png" alt="image-20240605212902986"></p><p>华清程老师：</p><p>M0开发的控制命令的格式：</p><p>环境：十六进制 36字节<br> BB ID 24 00</p><p>命令格式： 十六进制 ---- 36个字节</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>DD  id <span class="token number">24</span> <span class="token number">00</span>  <span class="token number">00</span> <span class="token operator">--</span><span class="token operator">-</span> 开灯
DD  id <span class="token number">24</span> <span class="token number">00</span>  <span class="token number">01</span> <span class="token operator">--</span><span class="token operator">-</span> 关灯
DD  id <span class="token number">24</span> <span class="token number">00</span>  <span class="token number">02</span> <span class="token operator">--</span> 开蜂鸣器
DD  id <span class="token number">24</span> <span class="token number">00</span>  <span class="token number">03</span> <span class="token operator">--</span> 关蜂鸣器
DD  id <span class="token number">24</span> <span class="token number">00</span>  <span class="token number">04</span> <span class="token operator">--</span><span class="token operator">-</span> 开风扇
DD  id <span class="token number">24</span> <span class="token number">00</span>  <span class="token number">08</span> <span class="token operator">--</span><span class="token operator">-</span> 关风扇
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>eg:dd 09 24 00 01</p><h1 id="linux基础" tabindex="-1"><a class="header-anchor" href="#linux基础"><span>linux基础</span></a></h1><h3 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令"><span>常用命令</span></a></h3><p>1、打开终端：</p><ol><li>双击图标</li><li>ctrl alt + t</li></ol><p>2、创建文件夹</p><ol><li><strong>mkdir</strong> 文件名</li></ol><p>dpkg -l 查看所有已经安装的软件</p><p>dpkg -s vim 查看某一个软件的安装状态</p><p>cd 直接进入的就是家目录=/home/zhangruyi</p><p>根目录下是共享的，公有的文件，普通用户没有操作权限</p><p>sudo apt-get remove vim</p><p>sudo apt-get install vim</p><p>在线从某一个网站上下载软件包到本地</p><p>3、进入文件夹</p><ol><li><strong>cd</strong> 文件名</li><li><strong>cd ..</strong> 返回上一级目录</li></ol><p>4、查询当前目录文件</p><ol><li><strong>ls</strong></li></ol><p>5、vi编辑器</p><ol><li>命令行模式 <ol><li>yy 复制一行</li><li>dd 删除/剪切</li><li>p 粘贴</li><li>u 撤销</li><li>xyy 复制多行</li><li>xdd 删除多行</li></ol></li><li>插入模式 <ol><li>a i o 进入插入模式</li></ol></li><li>底行模式（退出插入模式 ESC） <ol><li>:w 保存</li><li>:q 退出</li><li>:wq 保存并退出</li></ol></li></ol><p>6、gcc 编译器</p>`,33),d={href:"//xn--a-h14by67c3hvj4v.xn--out-wu9di1u8ky95er84f",target:"_blank",rel:"noopener noreferrer"},u=n("li",null,"gcc test.c -o test //生成test可执行文件",-1),m=e(`<p><code>ps -ef | grep nginx</code> 和 <code>ps aux | grep nginx</code> 都可以用来查看包含 &quot;nginx&quot; 关键词的进程信息，只是显示的格式略有不同。</p><p><code>ps -ef</code> 和 <code>ps aux</code> 都是用于查看系统中的进程信息的命令。</p><ul><li><code>|</code> 是管道符号，用于将前一个命令的输出作为后一个命令的输入。</li><li><code>grep nginx</code> 用于过滤出包含 &quot;nginx&quot; 关键词的进程信息。</li></ul><p>所用指令：</p><p>touch 1.c</p><p>ls</p><p>gcc 1.c</p><p>vi 1.c</p><p>./a.out 执行二进制文件</p><p>a9开发板</p><p>m0开发板</p><p><img src="https://s2.loli.net/2024/06/10/VWjt3SxqbHEa1r6.jpg" alt="IMG_20240607_111706"></p><p>zigbee模块：</p><p><img src="https://s2.loli.net/2024/06/10/GzBARlHUYIu6C3E.jpg" alt="IMG_20240607_111709"></p><h3 id="智能农场" tabindex="-1"><a class="header-anchor" href="#智能农场"><span>智能农场</span></a></h3><ol><li>需求：温湿度、光照、浴霸、排风扇、报警、自动浇水、摄像头</li><li>怎么来实现？</li></ol><p><img src="https://s2.loli.net/2024/06/05/9uVFrX5acBdg8Ii.png" alt="image-20240605213055682"></p><p><img src="https://s2.loli.net/2024/06/05/mRWMDOykG3oZ1Tz.png" alt="19d9834caf66116c94d331e1a1d442a2"></p><p>总结：</p><p>要用到的技术</p><ol><li>编程语言：C语言、C++</li><li>开发平台：linux系统、QT</li><li>v4l2编程（摄像头采集图像）</li><li>zigbee编程</li><li>网络编程</li></ol><p>最终实现效果图</p><p><img src="https://s2.loli.net/2024/06/05/aUmwtup5MKoRHgc.png" alt="image-20240605213805603"></p><p>系统架构图：</p><p><img src="https://s2.loli.net/2024/06/10/UKZsNp8Li1OETQk.jpg" alt="3ffc500a3b850cfa463895956d00dbae"></p><p>Zigbee协调器节点（建立网络，配对和终端节点连接）和终端节点（接收数据，从温湿度传感器等接收数据）</p><p>打开USB0串口，调用函数进行串口属性初始化</p><p>创建camera_fd套接字</p><p>一个qt客户端的代码文件，主要是qt的ui界面及其公共按钮监听，就是按下后发送命令，</p><p>三个系统：虚拟机、本机windows和能够烧录Linux系统的A9开发板，本机负责安装和启动QT客户端，虚拟机负责将运行在开发板上的服务器端代码.c文件进行编译为可执行文件默认为a.out，也可以改名字，再将可执行文件通过scp命令传给开发板执行，而后开发板通过串口连接的zigbee模块，与控制电路（智能农场）交互信息，控制电路（也就是风扇、小灯的那块板子m0）的代码是提前写好烧制的，中间可以用串口调试助手来预调试。</p><p>最后是win上的QT客户端-----网线局域网-------》linux服务器主板(arm-cortexA9)---&gt;（串口线）----&gt; zigbee协调器+摄像头--&gt;（m0上的zigbee终端）+M0（stm32类型的）</p><p>服务器主板：1.电源线 2.超级终端控制线 3. 串口线（摄像头+zigbee协调器）4.网线（局域网+通过ssh协议安全接收传输过来的文件）</p><p>透传数据</p><p>电阻R、电容C、串口线、SD卡烧录镜像8GB、zigbee</p><p>大小端： pc-小端 网络字节序：大端</p><p>tcp/ip中的大小端是什么</p><p>在计算机中，大小端（Endianness）是指数据在内存中的存储方式。具体来说，大小端描述了多字节数据在内存中的字节顺序。</p><p>小端（Little Endian）是指数据的低位字节存储在内存的低地址处，而高位字节存储在内存的高地址处。这意味着在小端系统中，较低有效位的字节会先存储在内存中。</p><p>大端（Big Endian）则相反，是指数据的高位字节存储在内存的低地址处，而低位字节存储在内存的高地址处。在大端系统中，较高有效位的字节会先存储在内存中。</p><p>在网络通信中，TCP/IP协议规定了网络字节序（Network Byte Order），即数据在网络中传输的字节顺序。TCP/IP协议要求使用大端字节序进行数据传输，也就是说，数据在网络中传输时，高位字节先传输，低位字节后传输。</p><p>为了在不同大小端系统之间进行数据传输，通常需要进行字节序转换。在C语言中，可以使用函数如htons和htonl将主机字节序转换为网络字节序，使用函数如ntohs和ntohl将网络字节序转换为主机字节序。</p><p>(在大端系统中，高位字节存储在低地址，低位字节存储在高地址；而在小端系统中，高位字节存储在高地址，低位字节存储在低地址。)</p><p>· ping命令：测试网络连通性<br> 导致ping不通的原因：<br> 1）双方不在同网段<br> 2）防火墙拦截</p><h3 id="涉及的参与方" tabindex="-1"><a class="header-anchor" href="#涉及的参与方"><span>涉及的参与方</span></a></h3><p>（1）客户端（Qt上位机）</p><p>（2）服务端 + 摄像头 处理数据及中间通道</p><p>中间桥梁 串口（传输数据）、zigbee网络</p><p>（3）设备端：M0采集数据（实现相应的功能）</p><h3 id="网络编程" tabindex="-1"><a class="header-anchor" href="#网络编程"><span>网络编程</span></a></h3><p>文件描述符 ： 文件的唯一标识</p><p>套接字</p><ol><li>TCP 传输控制协议、有连接、保证数据可靠性；</li><li>两种模型 <ol><li>b/s （b 浏览器 s 服务器）</li><li>c/s （c 客户端 s 服务器）</li></ol></li></ol><p>ip:用来区分主机的唯一标识；</p><p>端口号：用来判断主机接收到的数据，应该交给那个任务去处理</p><p>TCP服务器的搭建流程：</p><ol><li>创建套接字 socket()</li><li>绑定ip、端口号 bind()</li><li>监听连接 listen()</li><li>建立连接 accept()</li><li>通信 read()/write()</li><li>关闭套接字 close()</li></ol><p>socket（）</p><p>功能：创建套接字</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>头文件：
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span>          <span class="token comment">/* See NOTES */</span></span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>

函数原型：
    <span class="token keyword">int</span> <span class="token function">socket</span><span class="token punctuation">(</span><span class="token keyword">int</span> domain<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">,</span> <span class="token keyword">int</span> protocol<span class="token punctuation">)</span><span class="token punctuation">;</span>
参数：
    domain<span class="token operator">:</span>
		AF_INET    ipv4的协议 
	type<span class="token operator">:</span>
		SOCK_STREAM 流式套接字
	protocol<span class="token operator">:</span>
	传<span class="token number">0</span>，使用默认协议
返回值：
     成功：返回新创建的套接字
     失败：返回<span class="token operator">-</span><span class="token number">1</span>

   
  返回<span class="token number">0</span>代表程序执行成功
  返回<span class="token operator">-</span><span class="token number">1</span>代表程序执行失败
eg<span class="token operator">:</span>
	<span class="token keyword">int</span> sockfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span>SOCK_STREAM<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>sockfd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;socket&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

缩进命令：gg <span class="token operator">=</span> G
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>bind()</p><p>功能：绑定ip、端口号</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>头文件：
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span>          <span class="token comment">/* See NOTES */</span></span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>

函数原型：
    <span class="token keyword">int</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span><span class="token class-name">socklen_t</span> addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span>

参数：
    sockfd<span class="token operator">:</span>
		 创建的套接字
	addr<span class="token operator">:</span>
         地址结构体
	addrlen<span class="token operator">:</span>
		 地址结构体的长度
返回值：
     成功：返回<span class="token number">0</span>
     失败：返回<span class="token operator">-</span><span class="token number">1</span>
             
<span class="token comment">//通用地址结构体             </span>
<span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token punctuation">{</span>
    <span class="token class-name">sa_family_t</span> sa_family<span class="token punctuation">;</span>
    <span class="token keyword">char</span>        sa_data<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//ipv4地址结构体</span>
<span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> <span class="token punctuation">{</span>
    <span class="token class-name">sa_family_t</span>    sin_family<span class="token punctuation">;</span> <span class="token comment">/* address family: AF_INET */</span>
    <span class="token class-name">in_port_t</span>      sin_port<span class="token punctuation">;</span>   <span class="token comment">/* port in network byte order */</span>
    <span class="token keyword">struct</span> <span class="token class-name">in_addr</span> sin_addr<span class="token punctuation">;</span>   <span class="token comment">/* internet address */</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">/* Internet address. */</span>
<span class="token keyword">struct</span> <span class="token class-name">in_addr</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint32_t</span>       s_addr<span class="token punctuation">;</span>     <span class="token comment">/* address in network byte order */</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>


eg<span class="token operator">:</span>
	<span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> saddr<span class="token punctuation">;</span>
	<span class="token function">bzreo</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>saddr<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>saddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	saddr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>
	saddr<span class="token punctuation">.</span>sin_port   <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	saddr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">inet_addr</span><span class="token punctuation">(</span><span class="token string">&quot;192.168.6.33&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token function">bind</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>saddr<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>saddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;bind&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>listen()</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>eg<span class="token operator">:</span>

 <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token function">listen</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 <span class="token punctuation">{</span>
     <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;listen&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>accept()</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>eg<span class="token operator">:</span>
   <span class="token keyword">int</span> connfd <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>connfd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;connfd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">close</span><span class="token punctuation">(</span>connfd<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">close</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>tcp/ip协议通信示意图</p>`,67),k={href:"https://img-blog.csdnimg.cn/57129c6b6dc0410797aa2560bfb080c9.png#pic_center",target:"_blank",rel:"noopener noreferrer"},b=e('<p><img src="https://s2.loli.net/2024/06/05/7yfV1G8hC4LTJEw.png" alt="cf0368a96ea8a837114d447d12e9be0d"></p><p><img src="https://s2.loli.net/2024/06/05/U3g8eY4HcbuTB9V.png" alt="image-20240605210243370"></p><p>华清张路东老师-----网络通信相关</p><ol><li>下述命令找不到</li></ol><p><img src="https://s2.loli.net/2024/06/05/6v497kUo8ldzmfX.png" alt="d333c42082284d6cc15b442acb7e3d1a"></p><p>使用：sudo apt-get install lib32z1</p><h1 id="" tabindex="-1"><a class="header-anchor" href="#"><span></span></a></h1><h1 id="【arm】arm-linux-gcc-没有那个文件或目录" tabindex="-1"><a class="header-anchor" href="#【arm】arm-linux-gcc-没有那个文件或目录"><span><em><strong>*【ARM】arm-linux-gcc 没有那个文件或目录*</strong></em></span></a></h1>',8),g={href:"https://blog.csdn.net/dengjin20104042056/article/details/132258276?ops_request_misc=%7B%22request_id%22%3A%22171741852616800197088388%22%2C%22scm%22%3A%2220140713.130102334.pc_all.%22%7D&request_id=171741852616800197088388&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-132258276-null-null.142%5Ev100%5Epc_search_result_base4&utm_term=zhangruyi@zhangruyi-virtual-machine:~/gcc-4.6.4/bin$",target:"_blank",rel:"noopener noreferrer"},v={href:"https://blog.csdn.net/dengjin20104042056/article/details/132258276?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522171741852616800197088388%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=171741852616800197088388&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-132258276-null-null.142%5Ev100%5Epc_search_result_base4&utm_term=zhangruyi%40zhangruyi-virtual-machine%3A%7E%2Fgcc-4.6.4%2Fbin%24%20arm-linux-gcc%20-v%20bash%3A%20%2Fhome%2Fzhangruyi%2Fgcc-4.6.4%2Fbin%2Farm-linux-gcc%3A%20No%20such%20file%20or%20directory%20zhangruyi%40zhang&spm=1018.2226.3001.4187",target:"_blank",rel:"noopener noreferrer"},h=e(`<p>由以下问题所引发的上述问题：</p><p><img src="https://s2.loli.net/2024/06/05/rQphUlxKqw68uLT.jpg" alt="img"></p><p><img src="https://s2.loli.net/2024/06/05/SwzoYsJ5UdEHFcp.jpg" alt="img"></p><ol start="2"><li><p>虚拟机连外网ping命令，和tracecert命令都是检查网络的可达性和网络情况的，基于icmp网络报文控制协议。</p></li><li><p>实验设备</p><p><img src="https://s2.loli.net/2024/06/05/t6KdEzn37e9IB4y.jpg" alt="869ae8b4a2da36c48515107e276f7e67"></p><ol start="4"><li></li></ol></li><li><p><img src="https://s2.loli.net/2024/06/05/AgQGzWCbFXRorde.png" alt="105b72307d94aedfbf023ae890983db9"></p><p>需要安装一个dll文件</p><p><img src="https://s2.loli.net/2024/06/05/UNCmB4gTkJj7LZG.png" alt="image-20240605210038457"></p></li></ol><p>（1）XShell的使用文档，</p><p>连接服务器如虚拟机Linux，</p><p>串口配置</p><p><img src="https://s2.loli.net/2024/06/05/dwhcHAJt3y8r5Y4.jpg" alt="img"></p><p>弹出下面对话框</p><p><img src="https://s2.loli.net/2024/06/05/uY8XNFkbT64rOIG.jpg" alt="img"></p><p>选本地有的串口，波特率选115200</p><p><img src="https://s2.loli.net/2024/06/05/1tXW3fcLxyS4YjZ.jpg" alt="img"></p><p>虚拟机配置</p><p><img src="https://s2.loli.net/2024/06/05/bDWA2iOx1gvNu4K.jpg" alt="img"></p><p><img src="https://s2.loli.net/2024/06/05/M2KiQ1JsyP546Cn.jpg" alt="img"></p><p><img src="https://s2.loli.net/2024/06/05/HbJNDxa5mpR3wGE.jpg" alt="img"></p><p>（2）windows版本的Qt安装方法</p><p>1、 先断网(wifi和有限网络都断开)</p><p>2、 点击安装包</p><p><img src="https://s2.loli.net/2024/06/05/5gm3onZRl4irhqj.jpg" alt="img"></p><p>3、 一直点击下一步，直到下面的页面</p><p><img src="https://s2.loli.net/2024/06/05/TYnuSXEOCAJsQNU.jpg" alt="img"></p><p>4、选择MinGW 5.10.1 32bit</p><p><img src="https://s2.loli.net/2024/06/05/NnB8vqOYJxXk5Gm.jpg" alt="img"></p><p>5、继续安装直到完成。</p><p>（3）网络编程相关知识</p><p>1.网络编程：<br> 0.地址结构：<br> 1.IP地址：<br> typedef uint32_t in_addr_in;</p><pre><code>		struct in_addr {
			in_addr_in s_addr;
		};
		
		#include &lt;sys/socket.h&gt;
		#include &lt;netinet/in.h&gt;
		#include &lt;arpa/inet.h&gt;
		#include &lt;netinet/ip.h&gt;

		将字符型ip转成整型ip: in_addr_t inet_addr(const char *cp)
		将整型ip转成字符型ip: char *inet_ntoa(struct in_addr in);
		使用任意IP：htonl(INADDR_ANY);
	2.通用地址结构：
		struct sockaddr {
			u_short sa_family;
			char sa_data[14];
		};
	
	3.Internet协议地址结构：
		struct sockaddr_in {
			u_short sin_family; 		//地址族  AF_INET
			u_short sin_port;		//端口号,4位,0~65535,0~1023被系统占用,普通应用程序用1024以上端口，如8080,8888等等，赋值htons(8080)或者htons(8080)
			struct in_addr sin_addr; 	//IPV4地址，服务器地址，inet_addr(const char *cp)
			char sin_zero[8]; 		//字节的补充
		};
</code></pre><p>​ <br> ​ 1.创建服务器：<br> ​ 0.套接字：<br> ​ 文件描述符--&gt;唯一标识一个打开或者创建的文件<br> ​ PID --&gt;唯一标识一个进程<br> ​ 套接字--&gt;标识一个服务器/客户端(特殊的文件描述符)<br> ​ <br> ​ IP： IP地址<br> ​ 端口：标识发到哪个进程<br> ​ <br> ​ 1.创建套接字:<br> ​ #include &lt;sys/types.h&gt;<br> ​ #include &lt;sys/socket.h&gt; /* See NOTES */<br> ​ <br> ​ 函数原型: int socket(int domain, int type, int protocol);<br> ​ 函数功能: 创建套接字<br> ​ 参数: domain -- AF_INET<br> ​ type -- SOCK_STREAM<br> ​ protocol-- 0<br> ​ 返回值： 成功：套接字<br> ​ 失败：-1</p><p>​ <br> ​ 2.绑定服务器IP、端口等：{<br> ​ #include &lt;sys/types.h&gt;<br> ​ #include &lt;sys/socket.h&gt; /* See NOTES */<br> ​ <br> ​ 函数原型: int bind(int sockfd, const struct sockaddr <em>addr, int addrlen)<br> ​ 函数功能: 绑定服务器IP、端口<br> ​ 参数： sockfd -- 套接字<br> ​ addr -- 地址结构(通用地址结构)<br> ​ addrlen-- 地址结构的长度<br> ​ <br> ​ 返回值: 成功0<br> ​ 失败-1<br> ​ }<br> ​ <br> ​ 3.设置监听数：{<br> ​ #include &lt;sys/types.h&gt;<br> ​ #include &lt;sys/socket.h&gt; /</em> See NOTES <em>/<br> ​ <br> ​ 函数原型: int listen(int sockfd, int backlog);<br> ​ 函数功能: 设置监听数<br> ​ 参数： sockfd -- 套接字<br> ​ backlog -- 最大等待队列长度<br> ​ <br> ​ 返回值： 成功返回0，失败返回-1<br> ​ }<br> ​ <br> 4.等待连接：{<br> #include &lt;sys/types.h&gt;<br> #include &lt;sys/socket.h&gt; /</em> See NOTES */</p><pre><code>		函数原型:	int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);
		函数功能:  	等待连接
		参数：		sockfd -- 监听套接字
					addr   -- 客户端的地址结构
					addrlen-- 客户端地址结构长度
		
		返回值：	成功返回客户端读写套接字，失败返回-1
	}
	
	5.通信：
		收： read：
		#include &lt;unistd.h&gt;

		函数原型：	ssize_t read (int fd, void *buf, size_t count);
		函数功能： 	读
		参数：		fd   --打开的文件的文件描述符
					buf  --从fd中读，存放到buf中
					count--读多少字节

		返回值：	成功返回实际读到的字节数，返回0代表读到文件末尾，失败返回-1
</code></pre><p>​ <br> ​ 发：write：<br> ​ #include &lt;unistd.h&gt;<br> ​ <br> ​ 函数原型： ssize_t write(int fd, const void *buf, size_t count）;<br> ​ 函数功能： 写<br> ​ 参数：<br> ​ fd --写入的文件的文件描述符<br> ​ buf --从哪里写<br> ​ count--写多少字节<br> ​ <br> ​ 返回值： 成功返回实际写入的字节数，返回0代表读完了，失败返回-1</p><p>​ <br> ​ 6. 关闭：{<br> ​ #include &lt;unistd.h&gt;<br> ​ <br> ​ 函数原型： int close(int fd)<br> ​ 函数功能： 关闭<br> ​ 参数： fd -- 打开的文件的文件描述符<br> ​ 返回值： 成功返回0，失败返回-1<br> ​ }<br> ​ }<br> ​ 2.创建客户端：<br> ​ 1.创建套接字:<br> ​ #include &lt;sys/types.h&gt;<br> ​ #include &lt;sys/socket.h&gt; /* See NOTES */<br> ​ <br> ​ 函数原型: int socket(int domain, int type, int protocol);<br> ​ 函数功能: 创建套接字<br> ​ 参数: domain -- AF_INET<br> ​ type -- SocK_STREAM<br> ​ protocol--0<br> ​ 返回值： 成功：套接字<br> ​ 失败：-1</p><p>​ <br> ​ 2.连接服务器IP、端口等：<br> ​ # include &lt;sys/types.h &gt;<br> ​ # include &lt;sys/socket.h &gt;<br> ​ <br> ​ 函数原型: int connect(int sockfd, struct sockaddr *addr, int addrlen);<br> ​ 函数功能： 连接服务器IP、端口等<br> ​ 参数： sockfd -- 套接字<br> ​ addr -- 服务端的地址结构(通用地址结构)<br> ​ addrlen -- 地址结构的长度<br> ​ <br> ​ 返回值: 成功0<br> ​ 失败-1<br> ​ <br> ​ 3.通信：<br> ​ 收： read：<br> ​ #include &lt;unistd.h&gt;<br> ​ <br> ​ 函数原型： ssize_t read (int fd, void *buf, size_t count);<br> ​ 函数功能： 读<br> ​ 参数： fd --打开的文件的文件描述符<br> ​ buf --从fd中读，存放到buf中<br> ​ count--读多少字节<br> ​ <br> ​ 返回值： 成功返回实际读到的字节数，返回0代表读到文件末尾，失败返回-1</p><p>​ <br> ​ 发：write：<br> ​ #include &lt;unistd.h&gt;<br> ​ <br> ​ 函数原型： ssize_t write(int fd, const void *buf, size_t count）;<br> ​ 函数功能： 写<br> ​ 参数：<br> ​ fd --写入的文件的文件描述符<br> ​ buf --从哪里写<br> ​ count--写多少字节<br> ​ <br> ​ 返回值： 成功返回实际写入的字节数，返回0代表读完了，失败返回-1</p><p>​ <br> ​ 4. 关闭：{<br> ​ #include &lt;unistd.h&gt;<br> ​ <br> ​ 函数原型： int close(int fd)<br> ​ 函数功能： 关闭<br> ​ 参数： fd -- 打开的文件的文件描述符<br> ​ 返回值： 成功返回0，失败返回-1<br> ​ }<br> ​ }</p>`,36);function _(y,f){const a=i("ExternalLinkIcon");return l(),c("div",null,[r,n("ol",null,[n("li",null,[s("gcc test.c "),n("a",d,[s("//默认生成a.out可执行文件"),t(a)])]),u]),m,n("p",null,[n("a",k,[s("https://img-blog.csdnimg.cn/57129c6b6dc0410797aa2560bfb080c9.png#pic_center"),t(a)])]),b,n("p",null,[s("[【ARM】arm-linux-gcc 没有那个文件或目录_linux 怎么找到arm-linux-gcc存放的路径-CSDN博客]("),n("a",g,[s('https://blog.csdn.net/dengjin20104042056/article/details/132258276?ops_request_misc={"request_id"%3A"171741852616800197088388"%2C"scm"%3A"20140713.130102334.pc_all."}&request_id=171741852616800197088388&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-132258276-null-null.142^v100^pc_search_result_base4&utm_term=zhangruyi@zhangruyi-virtual-machine:~/gcc-4.6.4/bin$'),t(a)]),s(" arm-linux-gcc -v bash: /home/zhangruyi/gcc-4.6.4/bin/arm-linux-gcc: No such file or directory zhangruyi@zhang&spm=1018.2226.3001.4187)"),n("a",v,[s("https://blog.csdn.net/dengjin20104042056/article/details/132258276?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522171741852616800197088388%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=171741852616800197088388&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-132258276-null-null.142^v100^pc_search_result_base4&utm_term=zhangruyi%40zhangruyi-virtual-machine%3A~%2Fgcc-4.6.4%2Fbin%24 arm-linux-gcc -v bash%3A %2Fhome%2Fzhangruyi%2Fgcc-4.6.4%2Fbin%2Farm-linux-gcc%3A No such file or directory zhangruyi%40zhang&spm=1018.2226.3001.4187"),t(a)])]),h])}const x=p(o,[["render",_],["__file","2024.6.5嵌入式qt开发智慧农场项目.html.vue"]]),z=JSON.parse('{"path":"/everyday/%E8%AF%BE%E5%A4%96%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E5%B5%8C%E5%85%A5%E5%BC%8F/2024.6.5%E5%B5%8C%E5%85%A5%E5%BC%8Fqt%E5%BC%80%E5%8F%91%E6%99%BA%E6%85%A7%E5%86%9C%E5%9C%BA%E9%A1%B9%E7%9B%AE.html","title":"嵌入式智能农场项目","lang":"en-US","frontmatter":{"title":"嵌入式智能农场项目","date":"2024-06-16T00:00:00.000Z","category":["嵌入式"],"tag":["嵌入式"],"description":"- 总结： 第一天实训总体十分的轻松 每天坚持写技术日志 认真写好工程实践报告 image-20240605212902986 华清程老师： M0开发的控制命令的格式： 环境：十六进制 36字节 BB ID 24 00 命令格式： 十六进制 ---- 36个字节 eg:dd 09 24 00 01 linux基础 常用命令 1、打开终端： 双击图标 c...","head":[["meta",{"property":"og:url","content":"https://github.com/zhangruyi3906/blog/everyday/%E8%AF%BE%E5%A4%96%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E5%B5%8C%E5%85%A5%E5%BC%8F/2024.6.5%E5%B5%8C%E5%85%A5%E5%BC%8Fqt%E5%BC%80%E5%8F%91%E6%99%BA%E6%85%A7%E5%86%9C%E5%9C%BA%E9%A1%B9%E7%9B%AE.html"}],["meta",{"property":"og:site_name","content":"乘风破浪（长风破浪会有时，直挂云帆济沧海）"}],["meta",{"property":"og:title","content":"嵌入式智能农场项目"}],["meta",{"property":"og:description","content":"- 总结： 第一天实训总体十分的轻松 每天坚持写技术日志 认真写好工程实践报告 image-20240605212902986 华清程老师： M0开发的控制命令的格式： 环境：十六进制 36字节 BB ID 24 00 命令格式： 十六进制 ---- 36个字节 eg:dd 09 24 00 01 linux基础 常用命令 1、打开终端： 双击图标 c..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://s2.loli.net/2024/06/05/flegmEcShB6JGxj.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-06-16T13:30:17.000Z"}],["meta",{"property":"article:author","content":"dreamchaser"}],["meta",{"property":"article:tag","content":"嵌入式"}],["meta",{"property":"article:published_time","content":"2024-06-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-16T13:30:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"嵌入式智能农场项目\\",\\"image\\":[\\"https://s2.loli.net/2024/06/05/flegmEcShB6JGxj.png\\",\\"https://s2.loli.net/2024/06/05/ZWaN79ovCz28Hst.png\\",\\"https://s2.loli.net/2024/06/05/vdJpAIzP1nsCM48.png\\",\\"https://s2.loli.net/2024/06/10/VWjt3SxqbHEa1r6.jpg\\",\\"https://s2.loli.net/2024/06/10/GzBARlHUYIu6C3E.jpg\\",\\"https://s2.loli.net/2024/06/05/9uVFrX5acBdg8Ii.png\\",\\"https://s2.loli.net/2024/06/05/mRWMDOykG3oZ1Tz.png\\",\\"https://s2.loli.net/2024/06/05/aUmwtup5MKoRHgc.png\\",\\"https://s2.loli.net/2024/06/10/UKZsNp8Li1OETQk.jpg\\",\\"https://s2.loli.net/2024/06/05/7yfV1G8hC4LTJEw.png\\",\\"https://s2.loli.net/2024/06/05/U3g8eY4HcbuTB9V.png\\",\\"https://s2.loli.net/2024/06/05/6v497kUo8ldzmfX.png\\",\\"https://s2.loli.net/2024/06/05/rQphUlxKqw68uLT.jpg\\",\\"https://s2.loli.net/2024/06/05/SwzoYsJ5UdEHFcp.jpg\\",\\"https://s2.loli.net/2024/06/05/t6KdEzn37e9IB4y.jpg\\",\\"https://s2.loli.net/2024/06/05/AgQGzWCbFXRorde.png\\",\\"https://s2.loli.net/2024/06/05/UNCmB4gTkJj7LZG.png\\",\\"https://s2.loli.net/2024/06/05/dwhcHAJt3y8r5Y4.jpg\\",\\"https://s2.loli.net/2024/06/05/uY8XNFkbT64rOIG.jpg\\",\\"https://s2.loli.net/2024/06/05/1tXW3fcLxyS4YjZ.jpg\\",\\"https://s2.loli.net/2024/06/05/bDWA2iOx1gvNu4K.jpg\\",\\"https://s2.loli.net/2024/06/05/M2KiQ1JsyP546Cn.jpg\\",\\"https://s2.loli.net/2024/06/05/HbJNDxa5mpR3wGE.jpg\\",\\"https://s2.loli.net/2024/06/05/5gm3onZRl4irhqj.jpg\\",\\"https://s2.loli.net/2024/06/05/TYnuSXEOCAJsQNU.jpg\\",\\"https://s2.loli.net/2024/06/05/NnB8vqOYJxXk5Gm.jpg\\"],\\"datePublished\\":\\"2024-06-16T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-16T13:30:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"dreamchaser\\",\\"url\\":\\"https://github.com/zhangruyi3906\\"}]}"]]},"headers":[{"level":3,"title":"常用命令","slug":"常用命令","link":"#常用命令","children":[]},{"level":3,"title":"智能农场","slug":"智能农场","link":"#智能农场","children":[]},{"level":3,"title":"涉及的参与方","slug":"涉及的参与方","link":"#涉及的参与方","children":[]},{"level":3,"title":"网络编程","slug":"网络编程","link":"#网络编程","children":[]}],"git":{"createdTime":1718544091000,"updatedTime":1718544617000,"contributors":[{"name":"zhangruyi3906","email":"3023208132@qq.com","commits":4}]},"readingTime":{"minutes":11.74,"words":3521},"filePathRelative":"everyday/课外学习记录/嵌入式/2024.6.5嵌入式qt开发智慧农场项目.md","localizedDate":"June 16, 2024","excerpt":"<p>-<img src=\\"https://s2.loli.net/2024/06/05/flegmEcShB6JGxj.png\\" alt=\\"\\"></p>\\n<p><img src=\\"https://s2.loli.net/2024/06/05/ZWaN79ovCz28Hst.png\\" alt=\\"\\"></p>\\n<p>总结：</p>\\n<p>第一天实训总体十分的轻松</p>\\n<p>每天坚持写技术日志</p>","autoDesc":true}');export{x as comp,z as data};
